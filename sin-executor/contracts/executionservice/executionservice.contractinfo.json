{"solidity/SynapseExecutionServiceV1Harness.sol:AccessControlUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"solidity/SynapseExecutionServiceV1Harness.sol:Address":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220792fe26a604cfce1c4fb18c500672e03a11f5808a3a595a460a409f4e1b2821364736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220792fe26a604cfce1c4fb18c500672e03a11f5808a3a595a460a409f4e1b2821364736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"14269:6066:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;14269:6066:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"14269:6066:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:ClaimableFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"claimerFraction","type":"uint256"},{"internalType":"uint256","name":"maxAllowed","type":"uint256"}],"name":"ClaimableFees__ClaimerFractionAboveMax","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeAmountZero","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeRecipientZeroAddress","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"claimerFraction","type":"uint256"}],"name":"ClaimerFractionSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimedFees","type":"uint256"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimerReward","type":"uint256"}],"name":"FeesClaimed","type":"event"},{"inputs":[],"name":"claimFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerFraction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"ClaimerFractionSet(uint256)":{"notice":"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"FeeRecipientSet(address)":{"notice":"Emitted when a fee recipient is set. The fee recipient receives the claimed fees."},"FeesClaimed(address,uint256,address,uint256)":{"notice":"Emitted when fees are claimed to the fee recipient address."}},"kind":"user","methods":{"claimFees()":{"notice":"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand."},"getClaimableAmount()":{"notice":"Returns the amount of fees that can be claimed."},"getClaimerFraction()":{"notice":"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%."},"getClaimerReward()":{"notice":"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function."},"getFeeRecipient()":{"notice":"Returns the address that will receive the claimed fees."}},"notice":"A simple abstraction for a contract that is collecting fees in native chain token. The claim process could be performed by anyone, but the fees will be sent to the predefined address. The claimer will receive a fraction of the fees to offset the gas costs.","version":1},"developerDoc":{"details":"The contract is implemented in a stateless way to allow the inheriting contract to be immutable or upgradeable.","errors":{"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"events":{"ClaimerFractionSet(uint256)":{"params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"FeeRecipientSet(address)":{"params":{"feeRecipient":"The address of the fee recipient."}},"FeesClaimed(address,uint256,address,uint256)":{"params":{"claimedFees":"The amount of fees claimed, after the claimer reward is deducted.","claimer":"The address of the claimer (who called `claimFees`)","claimerReward":"The reward paid to the claimer for calling the `claimFees` function.","feeRecipient":"The address that receives the claimed fees."}}},"kind":"dev","methods":{"claimFees()":{"details":"Will revert if the claimable amount is zero or the fee recipient is not set."}},"stateVariables":{"MAX_CLAIMER_FRACTION":{"details":"The maximum fraction that the claimer can receive is 1%."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"name\":\"ClaimableFees__ClaimerFractionAboveMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"}],\"name\":\"ClaimerFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerReward\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract is implemented in a stateless way to allow the inheriting contract to be immutable or upgradeable.\",\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"events\":{\"ClaimerFractionSet(uint256)\":{\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The address of the fee recipient.\"}},\"FeesClaimed(address,uint256,address,uint256)\":{\"params\":{\"claimedFees\":\"The amount of fees claimed, after the claimer reward is deducted.\",\"claimer\":\"The address of the claimer (who called `claimFees`)\",\"claimerReward\":\"The reward paid to the claimer for calling the `claimFees` function.\",\"feeRecipient\":\"The address that receives the claimed fees.\"}}},\"kind\":\"dev\",\"methods\":{\"claimFees()\":{\"details\":\"Will revert if the claimable amount is zero or the fee recipient is not set.\"}},\"stateVariables\":{\"MAX_CLAIMER_FRACTION\":{\"details\":\"The maximum fraction that the claimer can receive is 1%.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimerFractionSet(uint256)\":{\"notice\":\"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\"},\"FeesClaimed(address,uint256,address,uint256)\":{\"notice\":\"Emitted when fees are claimed to the fee recipient address.\"}},\"kind\":\"user\",\"methods\":{\"claimFees()\":{\"notice\":\"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\"},\"getClaimableAmount()\":{\"notice\":\"Returns the amount of fees that can be claimed.\"},\"getClaimerFraction()\":{\"notice\":\"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%.\"},\"getClaimerReward()\":{\"notice\":\"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function.\"},\"getFeeRecipient()\":{\"notice\":\"Returns the address that will receive the claimed fees.\"}},\"notice\":\"A simple abstraction for a contract that is collecting fees in native chain token. The claim process could be performed by anyone, but the fees will be sent to the predefined address. The claimer will receive a fraction of the fees to offset the gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"ClaimableFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"claimFees()":"d294f093","getClaimableAmount()":"c354bd6e","getClaimerFraction()":"4f199114","getClaimerReward()":"26533fe9","getFeeRecipient()":"4ccb20c0"}},"solidity/SynapseExecutionServiceV1Harness.sol:ClaimableFeesEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"claimerFraction","type":"uint256"}],"name":"ClaimerFractionSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimedFees","type":"uint256"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimerReward","type":"uint256"}],"name":"FeesClaimed","type":"event"}],"userDoc":{"events":{"ClaimerFractionSet(uint256)":{"notice":"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"FeeRecipientSet(address)":{"notice":"Emitted when a fee recipient is set. The fee recipient receives the claimed fees."},"FeesClaimed(address,uint256,address,uint256)":{"notice":"Emitted when fees are claimed to the fee recipient address."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"ClaimerFractionSet(uint256)":{"params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"FeeRecipientSet(address)":{"params":{"feeRecipient":"The address of the fee recipient."}},"FeesClaimed(address,uint256,address,uint256)":{"params":{"claimedFees":"The amount of fees claimed, after the claimer reward is deducted.","claimer":"The address of the claimer (who called `claimFees`)","claimerReward":"The reward paid to the claimer for calling the `claimFees` function.","feeRecipient":"The address that receives the claimed fees."}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"}],\"name\":\"ClaimerFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerReward\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ClaimerFractionSet(uint256)\":{\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The address of the fee recipient.\"}},\"FeesClaimed(address,uint256,address,uint256)\":{\"params\":{\"claimedFees\":\"The amount of fees claimed, after the claimer reward is deducted.\",\"claimer\":\"The address of the claimer (who called `claimFees`)\",\"claimerReward\":\"The reward paid to the claimer for calling the `claimFees` function.\",\"feeRecipient\":\"The address that receives the claimed fees.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ClaimerFractionSet(uint256)\":{\"notice\":\"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\"},\"FeesClaimed(address,uint256,address,uint256)\":{\"notice\":\"Emitted when fees are claimed to the fee recipient address.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"ClaimableFeesEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:ContextUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:ERC165Upgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"supportsInterface(bytes4)":"01ffc9a7"}},"solidity/SynapseExecutionServiceV1Harness.sol:IAccessControl":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"IAccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"solidity/SynapseExecutionServiceV1Harness.sol:IClaimableFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"claimerFraction","type":"uint256"},{"internalType":"uint256","name":"maxAllowed","type":"uint256"}],"name":"ClaimableFees__ClaimerFractionAboveMax","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeAmountZero","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeRecipientZeroAddress","type":"error"},{"inputs":[],"name":"claimFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerFraction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"name\":\"ClaimableFees__ClaimerFractionAboveMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"IClaimableFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"claimFees()":"d294f093","getClaimableAmount()":"c354bd6e","getClaimerFraction()":"4f199114","getClaimerReward()":"26533fe9","getFeeRecipient()":"4ccb20c0"}},"solidity/SynapseExecutionServiceV1Harness.sol:IERC165":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"supportsInterface(bytes4)":"01ffc9a7"}},"solidity/SynapseExecutionServiceV1Harness.sol:IExecutionService":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestTxExecution","outputs":[],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"getExecutionFee(uint64,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`"}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint64,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestTxExecution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint64,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"IExecutionService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","getExecutionFee(uint64,uint256,bytes)":"96fda4da","requestTxExecution(uint64,uint256,bytes32,bytes)":"58efb47d"}},"solidity/SynapseExecutionServiceV1Harness.sol:IGasOracle":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint64","name":"remoteChainId","type":"uint64"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"convertRemoteValueToLocalUnits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"remoteChainId","type":"uint64"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"calldataSize","type":"uint256"}],"name":"estimateTxCostInLocalUnits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"remoteChainId","type":"uint64"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"calldataSize","type":"uint256"}],"name":"estimateTxCostInRemoteUnits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"convertRemoteValueToLocalUnits(uint64,uint256)":{"notice":"Convert a value from the native token of a remote chain to the local native token."},"estimateTxCostInLocalUnits(uint64,uint256,uint256)":{"notice":"Estimate the cost of execution a transaction on a remote chain, and convert it to the local native token."},"estimateTxCostInRemoteUnits(uint64,uint256,uint256)":{"notice":"Estimate the cost of execution a transaction on a remote chain, and return it as is in the remote chain's native token."}},"version":1},"developerDoc":{"kind":"dev","methods":{"convertRemoteValueToLocalUnits(uint64,uint256)":{"details":"Will revert if no price is available for the remote chain.","params":{"remoteChainId":"The chain id of the remote chain.","value":"The value to convert."}},"estimateTxCostInLocalUnits(uint64,uint256,uint256)":{"details":"Will revert if no price is available for the remote chain.","params":{"calldataSize":"The size of the transaction calldata.","gasLimit":"The gas limit of the transaction.","remoteChainId":"The chain id of the remote chain."}},"estimateTxCostInRemoteUnits(uint64,uint256,uint256)":{"details":"Will revert if no price is available for the remote chain.","params":{"calldataSize":"The size of the transaction calldata.","gasLimit":"The gas limit of the transaction.","remoteChainId":"The chain id of the remote chain."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"convertRemoteValueToLocalUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSize\",\"type\":\"uint256\"}],\"name\":\"estimateTxCostInLocalUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSize\",\"type\":\"uint256\"}],\"name\":\"estimateTxCostInRemoteUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertRemoteValueToLocalUnits(uint64,uint256)\":{\"details\":\"Will revert if no price is available for the remote chain.\",\"params\":{\"remoteChainId\":\"The chain id of the remote chain.\",\"value\":\"The value to convert.\"}},\"estimateTxCostInLocalUnits(uint64,uint256,uint256)\":{\"details\":\"Will revert if no price is available for the remote chain.\",\"params\":{\"calldataSize\":\"The size of the transaction calldata.\",\"gasLimit\":\"The gas limit of the transaction.\",\"remoteChainId\":\"The chain id of the remote chain.\"}},\"estimateTxCostInRemoteUnits(uint64,uint256,uint256)\":{\"details\":\"Will revert if no price is available for the remote chain.\",\"params\":{\"calldataSize\":\"The size of the transaction calldata.\",\"gasLimit\":\"The gas limit of the transaction.\",\"remoteChainId\":\"The chain id of the remote chain.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertRemoteValueToLocalUnits(uint64,uint256)\":{\"notice\":\"Convert a value from the native token of a remote chain to the local native token.\"},\"estimateTxCostInLocalUnits(uint64,uint256,uint256)\":{\"notice\":\"Estimate the cost of execution a transaction on a remote chain, and convert it to the local native token.\"},\"estimateTxCostInRemoteUnits(uint64,uint256,uint256)\":{\"notice\":\"Estimate the cost of execution a transaction on a remote chain, and return it as is in the remote chain's native token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"IGasOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"convertRemoteValueToLocalUnits(uint64,uint256)":"40658a74","estimateTxCostInLocalUnits(uint64,uint256,uint256)":"bf495c88","estimateTxCostInRemoteUnits(uint64,uint256,uint256)":"b376a688"}},"solidity/SynapseExecutionServiceV1Harness.sol:ISynapseExecutionServiceV1":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"SynapseExecutionService__ExecutorZeroAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"SynapseExecutionService__FeeAmountBelowMin","type":"error"},{"inputs":[{"internalType":"address","name":"gasOracle","type":"address"}],"name":"SynapseExecutionService__GasOracleNotContract","type":"error"},{"inputs":[],"name":"SynapseExecutionService__GasOracleZeroAddress","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"SynapseExecutionService__OptionsVersionNotSupported","type":"error"},{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalMarkup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestTxExecution","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimerFraction","type":"uint256"}],"name":"setClaimerFraction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executorEOA_","type":"address"}],"name":"setExecutorEOA","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"gasOracle_","type":"address"}],"name":"setGasOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"globalMarkup_","type":"uint256"}],"name":"setGlobalMarkup","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"gasOracle()":{"notice":"Address of the gas oracle used for estimating the gas cost of the transactions."},"getExecutionFee(uint64,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"globalMarkup()":{"notice":"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`"},"setClaimerFraction(uint256)":{"notice":"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"setExecutorEOA(address)":{"notice":"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains."},"setGasOracle(address)":{"notice":"Allows the contract governor to set the address of the gas oracle."},"setGlobalMarkup(uint256)":{"notice":"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint64,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"setClaimerFraction(uint256)":{"details":"Could be only called by the owner. Could not exceed 1%.","params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SynapseExecutionService__ExecutorZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"SynapseExecutionService__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"SynapseExecutionService__GasOracleNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseExecutionService__GasOracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"SynapseExecutionService__OptionsVersionNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMarkup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestTxExecution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"}],\"name\":\"setClaimerFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorEOA_\",\"type\":\"address\"}],\"name\":\"setExecutorEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle_\",\"type\":\"address\"}],\"name\":\"setGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalMarkup_\",\"type\":\"uint256\"}],\"name\":\"setGlobalMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint64,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"setClaimerFraction(uint256)\":{\"details\":\"Could be only called by the owner. Could not exceed 1%.\",\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"gasOracle()\":{\"notice\":\"Address of the gas oracle used for estimating the gas cost of the transactions.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"globalMarkup()\":{\"notice\":\"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`\"},\"setClaimerFraction(uint256)\":{\"notice\":\"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"setExecutorEOA(address)\":{\"notice\":\"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"setGasOracle(address)\":{\"notice\":\"Allows the contract governor to set the address of the gas oracle.\"},\"setGlobalMarkup(uint256)\":{\"notice\":\"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"ISynapseExecutionServiceV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","gasOracle()":"5d62a8dd","getExecutionFee(uint64,uint256,bytes)":"96fda4da","globalMarkup()":"efd07ec2","requestTxExecution(uint64,uint256,bytes32,bytes)":"58efb47d","setClaimerFraction(uint256)":"a9bc769b","setExecutorEOA(address)":"2d54566c","setGasOracle(address)":"a87b8152","setGlobalMarkup(uint256)":"cf4f578f"}},"solidity/SynapseExecutionServiceV1Harness.sol:Initializable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4b64ded52ede86acf8f97962c12b08467036aea41170f2556e0b6c071b6188364736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4b64ded52ede86acf8f97962c12b08467036aea41170f2556e0b6c071b6188364736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"32670:1229:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;32670:1229:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"32670:1229:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"OptionsLib__VersionInvalid","type":"error"}],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"OptionsLib__VersionInvalid\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:SynapseExecutionServiceEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"client","type":"address"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"}],"name":"ExecutionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"executorEOA","type":"address"}],"name":"ExecutorEOASet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"gasOracle","type":"address"}],"name":"GasOracleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"globalMarkup","type":"uint256"}],"name":"GlobalMarkupSet","type":"event"}],"userDoc":{"events":{"ExecutionRequested(bytes32,address,uint256)":{"notice":"Emitted when the execution of a transaction is requested."},"ExecutorEOASet(address)":{"notice":"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns."},"GasOracleSet(address)":{"notice":"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions."},"GlobalMarkupSet(uint256)":{"notice":"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"ExecutionRequested(bytes32,address,uint256)":{"params":{"client":"The address of the Interchain Client that requested the execution.","executionFee":"The fee paid for the execution.","transactionId":"The unique identifier of the transaction."}},"ExecutorEOASet(address)":{"params":{"executorEOA":"The address of the executor EOA."}},"GasOracleSet(address)":{"params":{"gasOracle":"The address of the gas oracle."}},"GlobalMarkupSet(uint256)":{"params":{"globalMarkup":"The global markup value."}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executorEOA\",\"type\":\"address\"}],\"name\":\"ExecutorEOASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"GasOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalMarkup\",\"type\":\"uint256\"}],\"name\":\"GlobalMarkupSet\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ExecutionRequested(bytes32,address,uint256)\":{\"params\":{\"client\":\"The address of the Interchain Client that requested the execution.\",\"executionFee\":\"The fee paid for the execution.\",\"transactionId\":\"The unique identifier of the transaction.\"}},\"ExecutorEOASet(address)\":{\"params\":{\"executorEOA\":\"The address of the executor EOA.\"}},\"GasOracleSet(address)\":{\"params\":{\"gasOracle\":\"The address of the gas oracle.\"}},\"GlobalMarkupSet(uint256)\":{\"params\":{\"globalMarkup\":\"The global markup value.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ExecutionRequested(bytes32,address,uint256)\":{\"notice\":\"Emitted when the execution of a transaction is requested.\"},\"ExecutorEOASet(address)\":{\"notice\":\"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns.\"},\"GasOracleSet(address)\":{\"notice\":\"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions.\"},\"GlobalMarkupSet(uint256)\":{\"notice\":\"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"SynapseExecutionServiceEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseExecutionServiceV1Harness.sol:SynapseExecutionServiceV1":{"code":"0x608060405234801561001057600080fd5b5061001961001e565b6100d0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161561006e5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100cd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b611c81806100df6000396000f3fe60806040526004361061018b5760003560e01c806391d14854116100d6578063c4d66de81161007f578063d294f09311610059578063d294f09314610550578063d547741f14610565578063efd07ec21461058557600080fd5b8063c4d66de8146104dc578063ccc57490146104fc578063cf4f578f1461053057600080fd5b8063a87b8152116100b0578063a87b815214610489578063a9bc769b146104a9578063c354bd6e146104c957600080fd5b806391d14854146103e257806396fda4da14610454578063a217fddf1461047457600080fd5b806336568abe1161013857806358efb47d1161011257806358efb47d1461033b5780635d62a8dd1461034e57806362014bad1461039857600080fd5b806336568abe146102ad5780634ccb20c0146102cd5780634f1991141461030757600080fd5b806326533fe91161016957806326533fe9146102565780632d54566c1461026b5780632f2ff15d1461028d57600080fd5b806301ffc9a71461019057806308c5c0db146101c5578063248a9ca314610207575b600080fd5b34801561019c57600080fd5b506101b06101ab366004611852565b6105b9565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101f97f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb81565b6040519081526020016101bc565b34801561021357600080fd5b506101f9610222366004611894565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561026257600080fd5b506101f9610652565b34801561027757600080fd5b5061028b6102863660046118d6565b610664565b005b34801561029957600080fd5b5061028b6102a83660046118f1565b6107be565b3480156102b957600080fd5b5061028b6102c83660046118f1565b610808565b3480156102d957600080fd5b506102e2610866565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b34801561031357600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3103546101f9565b61028b61034936600461197e565b6108ab565b34801561035a57600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103a457600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103ee57600080fd5b506101b06103fd3660046118f1565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561046057600080fd5b506101f961046f3660046119e6565b610970565b34801561048057600080fd5b506101f9600081565b34801561049557600080fd5b5061028b6104a43660046118d6565b610c5a565b3480156104b557600080fd5b5061028b6104c4366004611894565b610da1565b3480156104d557600080fd5b50476101f9565b3480156104e857600080fd5b5061028b6104f73660046118d6565b610e92565b34801561050857600080fd5b506101f97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561053c57600080fd5b5061028b61054b366004611894565b611015565b34801561055c57600080fd5b5061028b6110b5565b34801561057157600080fd5b5061028b6105803660046118f1565b6111ce565b34801561059157600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3102546101f9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061064c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60004761065e81611212565b91505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561068e816112b4565b73ffffffffffffffffffffffffffffffffffffffff82166106db576040517f9e3a01ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117825560408051918252517f4ab11d24f4bb323219ce90846ba579a556c914e8587517e7c8c4264771cd9f719181900360200190a160405173ffffffffffffffffffffffffffffffffffffffff841681527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb323906020015b60405180910390a1505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107f8816112b4565b61080283836112c1565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610857576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086182826113e2565b505050565b60006108a67fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb6108d5816112b4565b60006108e387878686610970565b90508034101561092d576040517f28c6ec70000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044015b60405180910390fd5b6040805133815234602082015286917fc3afeef9d037dcadfc927cf1a2c10a5dccba06a26bac58e0e2adf916407f2a7c910160405180910390a250505050505050565b6000806109b17fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff8116610a00576040517f668604bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0c85856114c0565b9050600161ffff82161115610a53576040517f05e98f3a00000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b6000610a9486868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150a92505050565b80516040517fbf495c8800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015260248101919091526044810189905290915073ffffffffffffffffffffffffffffffffffffffff84169063bf495c8890606401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611a40565b602082015190945015610bff5760208101516040517f40658a7400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a166004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff8416906340658a7490604401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611a40565b610bfc9085611a88565b93505b670de0b6b3a7640000610c307fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31025490565b610c3a9086611a9b565b610c449190611ab2565b610c4e9085611a88565b98975050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c84816112b4565b8173ffffffffffffffffffffffffffffffffffffffff163b600003610ced576040517fd7c25e1d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e310180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f3efbbb00c39812fb98647af6e9e2c3f4ec2b53d368cedd1e148330a05b652cfa906020016107b1565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610dcb816112b4565b662386f26fc10000821115610e1c576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101839052662386f26fc100006024820152604401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31038290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f2b76ed3837bd14c860020e473bce45e560d5bca9b5109ef2f08b2051d1cf6cc9906020016107b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610edd5750825b905060008267ffffffffffffffff166001148015610efa5750303b155b905081158015610f08575080155b15610f3f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610fa05784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610fab6000876112c1565b50831561100d5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103f816112b4565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31028290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f1957a4f563f2f13a7e7c1f9d8d6e719a1e6f687ac787704c33069f0a7997d75d906020016107b1565b4760008190036110f1576040517f6e95c0a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110fb610866565b905073ffffffffffffffffffffffffffffffffffffffff811661114a576040517f3c73eece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115583611212565b6040805173ffffffffffffffffffffffffffffffffffffffff851681529482900360208601819052338683015260608601839052905190949192507ff4e6bc0a6951927d4db8490fb63528b3c4ccb43865870fe4e3db7a090cbb14b19181900360800190a16111c48284611590565b6108613382611590565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611208816112b4565b61080283836113e2565b60008061123d7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31035490565b9050662386f26fc10000811115611290576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101829052662386f26fc100006024820152604401610924565b670de0b6b3a76400006112a38285611a9b565b6112ad9190611ab2565b9392505050565b6112be8133611666565b50565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff166113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556113743390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061064c565b600091505061064c565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16156113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061064c565b600060028210156115015782826040517fb0818b62000000000000000000000000000000000000000000000000000000008152600401610924929190611aed565b50503560f01c90565b604080518082019091526000808252602082015260006115298361170d565b9050600161ffff82161015611570576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b61157983611758565b8060200190518101906112ad9190611b69565b5050565b804710156115cc576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610924565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610861576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661158c576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610924565b600060028251101561174d57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b506020015160f01c90565b606060028251101561179857816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156117d5576117d5611b3a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b50915060008160208401836022870160045afa90508061184b576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b60006020828403121561186457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112ad57600080fd5b6000602082840312156118a657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146118d157600080fd5b919050565b6000602082840312156118e857600080fd5b6112ad826118ad565b6000806040838503121561190457600080fd5b82359150611914602084016118ad565b90509250929050565b803567ffffffffffffffff811681146118d157600080fd5b60008083601f84011261194757600080fd5b50813567ffffffffffffffff81111561195f57600080fd5b60208301915083602082850101111561197757600080fd5b9250929050565b60008060008060006080868803121561199657600080fd5b61199f8661191d565b94506020860135935060408601359250606086013567ffffffffffffffff8111156119c957600080fd5b6119d588828901611935565b969995985093965092949392505050565b600080600080606085870312156119fc57600080fd5b611a058561191d565b935060208501359250604085013567ffffffffffffffff811115611a2857600080fd5b611a3487828801611935565b95989497509550505050565b600060208284031215611a5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561064c5761064c611a59565b808202811582820484141761064c5761064c611a59565b600082611ae8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060408284031215611b7b57600080fd5b6040516040810181811067ffffffffffffffff82111715611bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208083528351808285015260005b81811015611c0c57858101830151858201604001528201611bf0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220f3b002ae15f7157e92b25dff0688b2db2fd2e13ab3a6d7c94ce030be0b3c70ad64736f6c63430008140033","runtime-code":"0x60806040526004361061018b5760003560e01c806391d14854116100d6578063c4d66de81161007f578063d294f09311610059578063d294f09314610550578063d547741f14610565578063efd07ec21461058557600080fd5b8063c4d66de8146104dc578063ccc57490146104fc578063cf4f578f1461053057600080fd5b8063a87b8152116100b0578063a87b815214610489578063a9bc769b146104a9578063c354bd6e146104c957600080fd5b806391d14854146103e257806396fda4da14610454578063a217fddf1461047457600080fd5b806336568abe1161013857806358efb47d1161011257806358efb47d1461033b5780635d62a8dd1461034e57806362014bad1461039857600080fd5b806336568abe146102ad5780634ccb20c0146102cd5780634f1991141461030757600080fd5b806326533fe91161016957806326533fe9146102565780632d54566c1461026b5780632f2ff15d1461028d57600080fd5b806301ffc9a71461019057806308c5c0db146101c5578063248a9ca314610207575b600080fd5b34801561019c57600080fd5b506101b06101ab366004611852565b6105b9565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101f97f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb81565b6040519081526020016101bc565b34801561021357600080fd5b506101f9610222366004611894565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561026257600080fd5b506101f9610652565b34801561027757600080fd5b5061028b6102863660046118d6565b610664565b005b34801561029957600080fd5b5061028b6102a83660046118f1565b6107be565b3480156102b957600080fd5b5061028b6102c83660046118f1565b610808565b3480156102d957600080fd5b506102e2610866565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b34801561031357600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3103546101f9565b61028b61034936600461197e565b6108ab565b34801561035a57600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103a457600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103ee57600080fd5b506101b06103fd3660046118f1565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561046057600080fd5b506101f961046f3660046119e6565b610970565b34801561048057600080fd5b506101f9600081565b34801561049557600080fd5b5061028b6104a43660046118d6565b610c5a565b3480156104b557600080fd5b5061028b6104c4366004611894565b610da1565b3480156104d557600080fd5b50476101f9565b3480156104e857600080fd5b5061028b6104f73660046118d6565b610e92565b34801561050857600080fd5b506101f97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561053c57600080fd5b5061028b61054b366004611894565b611015565b34801561055c57600080fd5b5061028b6110b5565b34801561057157600080fd5b5061028b6105803660046118f1565b6111ce565b34801561059157600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3102546101f9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061064c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60004761065e81611212565b91505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561068e816112b4565b73ffffffffffffffffffffffffffffffffffffffff82166106db576040517f9e3a01ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117825560408051918252517f4ab11d24f4bb323219ce90846ba579a556c914e8587517e7c8c4264771cd9f719181900360200190a160405173ffffffffffffffffffffffffffffffffffffffff841681527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb323906020015b60405180910390a1505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107f8816112b4565b61080283836112c1565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610857576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086182826113e2565b505050565b60006108a67fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb6108d5816112b4565b60006108e387878686610970565b90508034101561092d576040517f28c6ec70000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044015b60405180910390fd5b6040805133815234602082015286917fc3afeef9d037dcadfc927cf1a2c10a5dccba06a26bac58e0e2adf916407f2a7c910160405180910390a250505050505050565b6000806109b17fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff8116610a00576040517f668604bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0c85856114c0565b9050600161ffff82161115610a53576040517f05e98f3a00000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b6000610a9486868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150a92505050565b80516040517fbf495c8800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015260248101919091526044810189905290915073ffffffffffffffffffffffffffffffffffffffff84169063bf495c8890606401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611a40565b602082015190945015610bff5760208101516040517f40658a7400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a166004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff8416906340658a7490604401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611a40565b610bfc9085611a88565b93505b670de0b6b3a7640000610c307fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31025490565b610c3a9086611a9b565b610c449190611ab2565b610c4e9085611a88565b98975050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c84816112b4565b8173ffffffffffffffffffffffffffffffffffffffff163b600003610ced576040517fd7c25e1d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e310180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f3efbbb00c39812fb98647af6e9e2c3f4ec2b53d368cedd1e148330a05b652cfa906020016107b1565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610dcb816112b4565b662386f26fc10000821115610e1c576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101839052662386f26fc100006024820152604401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31038290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f2b76ed3837bd14c860020e473bce45e560d5bca9b5109ef2f08b2051d1cf6cc9906020016107b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610edd5750825b905060008267ffffffffffffffff166001148015610efa5750303b155b905081158015610f08575080155b15610f3f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610fa05784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610fab6000876112c1565b50831561100d5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103f816112b4565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31028290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f1957a4f563f2f13a7e7c1f9d8d6e719a1e6f687ac787704c33069f0a7997d75d906020016107b1565b4760008190036110f1576040517f6e95c0a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110fb610866565b905073ffffffffffffffffffffffffffffffffffffffff811661114a576040517f3c73eece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115583611212565b6040805173ffffffffffffffffffffffffffffffffffffffff851681529482900360208601819052338683015260608601839052905190949192507ff4e6bc0a6951927d4db8490fb63528b3c4ccb43865870fe4e3db7a090cbb14b19181900360800190a16111c48284611590565b6108613382611590565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611208816112b4565b61080283836113e2565b60008061123d7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31035490565b9050662386f26fc10000811115611290576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101829052662386f26fc100006024820152604401610924565b670de0b6b3a76400006112a38285611a9b565b6112ad9190611ab2565b9392505050565b6112be8133611666565b50565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff166113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556113743390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061064c565b600091505061064c565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16156113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061064c565b600060028210156115015782826040517fb0818b62000000000000000000000000000000000000000000000000000000008152600401610924929190611aed565b50503560f01c90565b604080518082019091526000808252602082015260006115298361170d565b9050600161ffff82161015611570576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b61157983611758565b8060200190518101906112ad9190611b69565b5050565b804710156115cc576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610924565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610861576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661158c576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610924565b600060028251101561174d57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b506020015160f01c90565b606060028251101561179857816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156117d5576117d5611b3a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b50915060008160208401836022870160045afa90508061184b576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b60006020828403121561186457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112ad57600080fd5b6000602082840312156118a657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146118d157600080fd5b919050565b6000602082840312156118e857600080fd5b6112ad826118ad565b6000806040838503121561190457600080fd5b82359150611914602084016118ad565b90509250929050565b803567ffffffffffffffff811681146118d157600080fd5b60008083601f84011261194757600080fd5b50813567ffffffffffffffff81111561195f57600080fd5b60208301915083602082850101111561197757600080fd5b9250929050565b60008060008060006080868803121561199657600080fd5b61199f8661191d565b94506020860135935060408601359250606086013567ffffffffffffffff8111156119c957600080fd5b6119d588828901611935565b969995985093965092949392505050565b600080600080606085870312156119fc57600080fd5b611a058561191d565b935060208501359250604085013567ffffffffffffffff811115611a2857600080fd5b611a3487828801611935565b95989497509550505050565b600060208284031215611a5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561064c5761064c611a59565b808202811582820484141761064c5761064c611a59565b600082611ae8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060408284031215611b7b57600080fd5b6040516040810181811067ffffffffffffffff82111715611bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208083528351808285015260005b81811015611c0c57858101830151858201604001528201611bf0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220f3b002ae15f7157e92b25dff0688b2db2fd2e13ab3a6d7c94ce030be0b3c70ad64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"47648:7033:0:-:0;;;48505:129;;;;;;;;;-1:-1:-1;48605:22:0;:20;:22::i;:::-;47648:7033;;28958:422;30117:21;29147:15;;;;;;;29143:76;;;29185:23;;-1:-1:-1;;;29185:23:0;;;;;;;;;;;29143:76;29232:14;;-1:-1:-1;;;;;29232:14:0;;;:34;29228:146;;29282:33;;-1:-1:-1;;;;;;29282:33:0;-1:-1:-1;;;;;29282:33:0;;;;;29334:29;;158:50:1;;;29334:29:0;;146:2:1;131:18;29334:29:0;;;;;;;29228:146;29007:373;28958:422::o;14:200:1:-;47648:7033:0;;;;;;","srcMapRuntime":"47648:7033:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42753:202;;;;;;;;;;-1:-1:-1;42753:202:0;;;;;:::i;:::-;;:::i;:::-;;;516:14:1;;509:22;491:41;;479:2;464:18;42753:202:0;;;;;;;;48430:68;;;;;;;;;;;;48471:27;48430:68;;;;;689:25:1;;;677:2;662:18;48430:68:0;543:177:1;44069:191:0;;;;;;;;;;-1:-1:-1;44069:191:0;;;;;:::i;:::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;;44069:191;38206:156;;;;;;;;;;;;;:::i;49320:431::-;;;;;;;;;;-1:-1:-1;49320:431:0;;;;;:::i;:::-;;:::i;:::-;;44556:136;;;;;;;;;;-1:-1:-1;44556:136:0;;;;;:::i;:::-;;:::i;45658:245::-;;;;;;;;;;-1:-1:-1;45658:245:0;;;;;:::i;:::-;;:::i;53892:111::-;;;;;;;;;;;;;:::i;:::-;;;1919:42:1;1907:55;;;1889:74;;1877:2;1862:18;53892:111:0;1743:226:1;53603:211:0;;;;;;;;;;-1:-1:-1;53790:17:0;;53603:211;;50562:603;;;;;;:::i;:::-;;:::i;52826:187::-;;;;;;;;;;-1:-1:-1;52995:11:0;;;;52826:187;;52582:191;;;;;;;;;;-1:-1:-1;54618:45:0;52753:13;;;52582:191;;43042:207;;;;;;;;;;-1:-1:-1;43042:207:0;;;;;:::i;:::-;43119:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;;;;43042:207;51209:1329;;;;;;;;;;-1:-1:-1;51209:1329:0;;;;;:::i;:::-;;:::i;41628:49::-;;;;;;;;;;-1:-1:-1;41628:49:0;41673:4;41628:49;;49804:387;;;;;;;;;;-1:-1:-1;49804:387:0;;;;;:::i;:::-;;:::i;48811:456::-;;;;;;;;;;-1:-1:-1;48811:456:0;;;;;:::i;:::-;;:::i;53329:122::-;;;;;;;;;;-1:-1:-1;53423:21:0;53329:122;;48640:118;;;;;;;;;;-1:-1:-1;48640:118:0;;;;;:::i;:::-;;:::i;48358:66::-;;;;;;;;;;;;48398:26;48358:66;;50244:274;;;;;;;;;;-1:-1:-1;50244:274:0;;;;;:::i;:::-;;:::i;37179:886::-;;;;;;;;;;;;;:::i;44972:138::-;;;;;;;;;;-1:-1:-1;44972:138:0;;;;;:::i;:::-;;:::i;53066:193::-;;;;;;;;;;-1:-1:-1;53238:14:0;;53066:193;;42753:202;42838:4;42861:47;;;42876:32;42861:47;;:87;;-1:-1:-1;36092:25:0;36077:40;;;;42912:36;42854:94;42753:202;-1:-1:-1;;42753:202:0:o;38206:156::-;38257:7;53423:21;38330:25;53423:21;38330:17;:25::i;:::-;38323:32;;;38206:156;:::o;49320:431::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;49421:26:::1;::::0;::::1;49417:110;;49470:46;;;;;;;;;;;;;;49417:110;54618:45:::0;49629:28;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;49672::::1;::::0;;1889:74:1;;;49672:28:0;::::1;::::0;;;;1877:2:1;49672:28:0;;::::1;49715:29;::::0;1919:42:1;1907:55;;1889:74;;49715:29:0::1;::::0;1877:2:1;1862:18;49715:29:0::1;;;;;;;;49407:344;49320:431:::0;;:::o;44556:136::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;42501:16;42512:4;42501:10;:16::i;:::-;44660:25:::1;44671:4;44677:7;44660:10;:25::i;:::-;;44556:136:::0;;;:::o;45658:245::-;45751:34;;;34827:10;45751:34;45747:102;;45808:30;;;;;;;;;;;;;;45747:102;45859:37;45871:4;45877:18;45859:11;:37::i;:::-;;45658:245;;:::o;53892:111::-;53957:7;53983:13;54618:45;52753:13;;;;52582:191;53983:13;53976:20;;53892:111;:::o;50562:603::-;48471:27;42501:16;42512:4;42501:10;:16::i;:::-;50813:19:::1;50835:51;50851:10;50863:13;50878:7;;50835:15;:51::i;:::-;50813:73;;50912:11;50900:9;:23;50896:153;;;50946:92;::::0;::::1;::::0;;51001:9:::1;50946:92;::::0;::::1;4038:25:1::0;4079:18;;;4072:34;;;4011:18;;50946:92:0::1;;;;;;;;50896:153;51063:95;::::0;;51121:10:::1;4291:74:1::0;;51147:9:0::1;4396:2:1::0;4381:18;;4374:34;51098:13:0;;51063:95:::1;::::0;4264:18:1;51063:95:0::1;;;;;;;50803:362;50562:603:::0;;;;;;:::o;51209:1329::-;51391:20;51427:23;51453:11;52995;;;;;52826:187;51453:11;51427:37;-1:-1:-1;51478:29:0;;;51474:114;;51530:47;;;;;;;;;;;;;;51474:114;51747:14;51764:39;51795:7;;51764:30;:39::i;:::-;51747:56;-1:-1:-1;32775:1:0;51817:31;;;;51813:129;;;51871:60;;;;;4593:6:1;4581:19;;51871:60:0;;;4563:38:1;4536:18;;51871:60:0;4419:188:1;51813:129:0;51951:26;51980:35;52007:7;;51980:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;51980:26:0;;-1:-1:-1;;;51980:35:0:i;:::-;52158:18;;52040:188;;;;;4842:18:1;4830:31;;52040:188:0;;;4812:50:1;4878:18;;;4871:34;;;;4921:18;;;4914:34;;;52158:18:0;;-1:-1:-1;52040:54:0;;;;;;4785:18:1;;52040:188:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52242:20;;;;52025:203;;-1:-1:-1;52242:24:0;52238:233;;52425:20;;;;52298:162;;;;;5350:18:1;5338:31;;52298:162:0;;;5320:50:1;5386:18;;;5379:34;;;;52298:58:0;;;;;;5293:18:1;;52298:162:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52282:178;;;;:::i;:::-;;;52238:233;48343:8;52511:14;53238;;;53066:193;52511:14;52496:29;;:12;:29;:::i;:::-;:35;;;;:::i;:::-;52480:51;;;;:::i;:::-;;51209:1329;-1:-1:-1;;;;;;;;51209:1329:0:o;49804:387::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;49901:10:::1;:22;;;49927:1;49901:27:::0;49897:122:::1;;49951:57;::::0;::::1;::::0;;1919:42:1;1907:55;;49951:57:0::1;::::0;::::1;1889:74:1::0;1862:18;;49951:57:0::1;1743:226:1::0;49897:122:0::1;50121:11:::0;:24;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;50160::::1;::::0;1889:74:1;;;54618:45:0;;50160:24:::1;::::0;1877:2:1;1862:18;50160:24:0::1;1743:226:1::0;48811:456:0;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;36818:4:::1;48920:16;:39;48916:155;;;48982:78;::::0;::::1;::::0;;::::1;::::0;::::1;4038:25:1::0;;;36818:4:0::1;4079:18:1::0;;;4072:34;4011:18;;48982:78:0::1;3864:248:1::0;48916:155:0::1;49173:17:::0;:36;;;49224::::1;::::0;689:25:1;;;54618:45:0;;49224:36:::1;::::0;677:2:1;662:18;49224:36:0::1;543:177:1::0;48640:118:0;30117:21;25549:15;;;;;;;25548:16;;25595:14;;25405:30;25973:16;;:34;;;;;25993:14;25973:34;25953:54;;26017:17;26037:11;:16;;26052:1;26037:16;:50;;;;-1:-1:-1;26065:4:0;26057:25;:30;26037:50;26017:70;;26103:12;26102:13;:30;;;;;26120:12;26119:13;26102:30;26098:91;;;26155:23;;;;;;;;;;;;;;26098:91;26198:18;;;;26215:1;26198:18;;;26226:67;;;;26260:22;;;;;;;;26226:67;48714:37:::1;41673:4;48745:5:::0;48714:10:::1;:37::i;:::-;;26317:14:::0;26313:101;;;26347:23;;;;;;26389:14;;-1:-1:-1;6348:50:1;;26389:14:0;;6336:2:1;6321:18;26389:14:0;;;;;;;26313:101;25339:1081;;;;;48640:118;:::o;50244:274::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;50436:14;:30;;;50481::::1;::::0;689:25:1;;;54618:45:0;;50481:30:::1;::::0;677:2:1;662:18;50481:30:0::1;543:177:1::0;37179:886:0;53423:21;37219:14;37270:11;;;37266:79;;37304:30;;;;;;;;;;;;;;37266:79;37354:17;37374;:15;:17::i;:::-;37354:37;-1:-1:-1;37405:23:0;;;37401:101;;37451:40;;;;;;;;;;;;;;37401:101;37572:14;37589:25;37607:6;37589:17;:25::i;:::-;37897:50;;;6650:42:1;6719:15;;6701:34;;37801:16:0;;;;6766:2:1;6751:18;;6744:34;;;37928:10:0;6794:18:1;;;6787:43;6861:2;6846:18;;6839:34;;;37897:50:0;;37801:16;;37572:42;;-1:-1:-1;37897:50:0;;;;;6627:3:1;37897:50:0;;;37957:45;37983:9;37995:6;37957:17;:45::i;:::-;38012:46;38038:10;38051:6;38012:17;:46::i;44972:138::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;42501:16;42512:4;42501:10;:16::i;:::-;45077:26:::1;45089:4;45095:7;45077:11;:26::i;39175:396::-:0;39241:7;39260:16;39279:20;53790:17;;;53603:211;39279:20;39260:39;;36818:4;39313:8;:31;39309:139;;;39367:70;;;;;;;;4038:25:1;;;36818:4:0;4079:18:1;;;4072:34;4011:18;;39367:70:0;3864:248:1;39309:139:0;36689:4;39530:17;39539:8;39530:6;:17;:::i;:::-;39529:35;;;;:::i;:::-;39522:42;39175:396;-1:-1:-1;;;39175:396:0:o;43458:103::-;43524:30;43535:4;34827:10;43524;:30::i;:::-;43458:103;:::o;46580:387::-;46657:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;46742:219;;46785:8;:14;;;;;;;;;;;:31;;;;;;;;;;:38;;;;46819:4;46785:38;;;46869:12;34827:10;;34748:96;46869:12;46842:40;;46860:7;46842:40;;46854:4;46842:40;;;;;;;;;;46903:4;46896:11;;;;;46742:219;46945:5;46938:12;;;;;47202:388;47280:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;47365:219;;;47441:5;47407:14;;;;;;;;;;;:31;;;;;;;;;;;:39;;;;;;47465:40;34827:10;;47407:14;;47465:40;;47441:5;47465:40;47526:4;47519:11;;;;;7808:432;7884:14;7178:1;7914:40;;7910:129;;;8011:16;;7977:51;;;;;;;;;;;;:::i;7910:129::-;-1:-1:-1;;8186:37:0;8181:3;8177:47;;7808:432::o;32998:597::-;-1:-1:-1;;;;;;;;;;;;;;;;;33093:14:0;33110:27;:4;:25;:27::i;:::-;33093:44;-1:-1:-1;32775:1:0;33151:20;;;;33147:93;;;33194:35;;;;;4593:6:1;4581:19;;33194:35:0;;;4563:38:1;4536:18;;33194:35:0;4419:188:1;33147:93:0;33547:27;:4;:25;:27::i;:::-;33536:52;;;;;;;;;;;;:::i;54215:148::-;;;:::o;15605:331::-;15714:6;15690:21;:30;15686:109;;;15743:41;;;;;15778:4;15743:41;;;1889:74:1;1862:18;;15743:41:0;1743:226:1;15686:109:0;15806:12;15824:9;:14;;15846:6;15824:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15805:52;;;15872:7;15867:63;;15902:17;;;;;;;;;;;;;;43691:197;43119:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;43774:108;;43824:47;;;;;4321:42:1;4309:55;;43824:47:0;;;4291:74:1;4381:18;;;4374:34;;;4264:18;;43824:47:0;4117:297:1;8923:503:0;9007:14;7178:1;9037:16;:23;:40;9033:129;;;9134:16;9100:51;;;;;;;;;;;:::i;9033:129::-;-1:-1:-1;9403:4:0;9381:27;9375:34;9370:3;9366:44;;8923:503::o;9740:1060::-;9824:20;7178:1;9860:16;:23;:40;9856:129;;;9957:16;9923:51;;;;;;;;;;;:::i;9856:129::-;10143:23;;:40;;;10213:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10213:17:0;;10203:27;;10354:8;10690:6;10683:4;10674:7;10670:18;10662:6;10655:4;10637:16;10633:27;10627:4;10620:5;10609:88;10602:95;;10721:3;10716:78;;10747:36;;;;;;;;;;;;;;10716:78;9846:954;;9740:1060;;;:::o;14:332:1:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:180;784:6;837:2;825:9;816:7;812:23;808:32;805:52;;;853:1;850;843:12;805:52;-1:-1:-1;876:23:1;;725:180;-1:-1:-1;725:180:1:o;1092:196::-;1160:20;;1220:42;1209:54;;1199:65;;1189:93;;1278:1;1275;1268:12;1189:93;1092:196;;;:::o;1293:186::-;1352:6;1405:2;1393:9;1384:7;1380:23;1376:32;1373:52;;;1421:1;1418;1411:12;1373:52;1444:29;1463:9;1444:29;:::i;1484:254::-;1552:6;1560;1613:2;1601:9;1592:7;1588:23;1584:32;1581:52;;;1629:1;1626;1619:12;1581:52;1665:9;1652:23;1642:33;;1694:38;1728:2;1717:9;1713:18;1694:38;:::i;:::-;1684:48;;1484:254;;;;;:::o;1974:171::-;2041:20;;2101:18;2090:30;;2080:41;;2070:69;;2135:1;2132;2125:12;2150:347;2201:8;2211:6;2265:3;2258:4;2250:6;2246:17;2242:27;2232:55;;2283:1;2280;2273:12;2232:55;-1:-1:-1;2306:20:1;;2349:18;2338:30;;2335:50;;;2381:1;2378;2371:12;2335:50;2418:4;2410:6;2406:17;2394:29;;2470:3;2463:4;2454:6;2446;2442:19;2438:30;2435:39;2432:59;;;2487:1;2484;2477:12;2432:59;2150:347;;;;;:::o;2502:618::-;2598:6;2606;2614;2622;2630;2683:3;2671:9;2662:7;2658:23;2654:33;2651:53;;;2700:1;2697;2690:12;2651:53;2723:28;2741:9;2723:28;:::i;:::-;2713:38;;2798:2;2787:9;2783:18;2770:32;2760:42;;2849:2;2838:9;2834:18;2821:32;2811:42;;2904:2;2893:9;2889:18;2876:32;2931:18;2923:6;2920:30;2917:50;;;2963:1;2960;2953:12;2917:50;3002:58;3052:7;3043:6;3032:9;3028:22;3002:58;:::i;:::-;2502:618;;;;-1:-1:-1;2502:618:1;;-1:-1:-1;3079:8:1;;2976:84;2502:618;-1:-1:-1;;;2502:618:1:o;3125:549::-;3212:6;3220;3228;3236;3289:2;3277:9;3268:7;3264:23;3260:32;3257:52;;;3305:1;3302;3295:12;3257:52;3328:28;3346:9;3328:28;:::i;:::-;3318:38;;3403:2;3392:9;3388:18;3375:32;3365:42;;3458:2;3447:9;3443:18;3430:32;3485:18;3477:6;3474:30;3471:50;;;3517:1;3514;3507:12;3471:50;3556:58;3606:7;3597:6;3586:9;3582:22;3556:58;:::i;:::-;3125:549;;;;-1:-1:-1;3633:8:1;-1:-1:-1;;;;3125:549:1:o;4959:184::-;5029:6;5082:2;5070:9;5061:7;5057:23;5053:32;5050:52;;;5098:1;5095;5088:12;5050:52;-1:-1:-1;5121:16:1;;4959:184;-1:-1:-1;4959:184:1:o;5424:::-;5476:77;5473:1;5466:88;5573:4;5570:1;5563:15;5597:4;5594:1;5587:15;5613:125;5678:9;;;5699:10;;;5696:36;;;5712:18;;:::i;5743:168::-;5816:9;;;5847;;5864:15;;;5858:22;;5844:37;5834:71;;5885:18;;:::i;5916:274::-;5956:1;5982;5972:189;;6017:77;6014:1;6007:88;6118:4;6115:1;6108:15;6146:4;6143:1;6136:15;5972:189;-1:-1:-1;6175:9:1;;5916:274::o;6884:447::-;7041:2;7030:9;7023:21;7080:6;7075:2;7064:9;7060:18;7053:34;7137:6;7129;7124:2;7113:9;7109:18;7096:48;7193:1;7164:22;;;7188:2;7160:31;;;7153:42;;;;7247:2;7235:15;;;7252:66;7231:88;7216:104;7212:113;;6884:447;-1:-1:-1;6884:447:1:o;7336:184::-;7388:77;7385:1;7378:88;7485:4;7482:1;7475:15;7509:4;7506:1;7499:15;7525:656;7621:6;7674:2;7662:9;7653:7;7649:23;7645:32;7642:52;;;7690:1;7687;7680:12;7642:52;7723:2;7717:9;7765:2;7757:6;7753:15;7834:6;7822:10;7819:22;7798:18;7786:10;7783:34;7780:62;7777:242;;;7875:77;7872:1;7865:88;7976:4;7973:1;7966:15;8004:4;8001:1;7994:15;7777:242;8035:2;8028:22;8074:16;;8059:32;;8145:2;8130:18;;;8124:25;8107:15;;;8100:50;;;;-1:-1:-1;8066:6:1;7525:656;-1:-1:-1;7525:656:1:o;8698:605::-;8808:4;8837:2;8866;8855:9;8848:21;8898:6;8892:13;8941:6;8936:2;8925:9;8921:18;8914:34;8966:1;8976:140;8990:6;8987:1;8984:13;8976:140;;;9085:14;;;9081:23;;9075:30;9051:17;;;9070:2;9047:26;9040:66;9005:10;;8976:140;;;8980:3;9165:1;9160:2;9151:6;9140:9;9136:22;9132:31;9125:42;9294:2;9224:66;9219:2;9211:6;9207:15;9203:88;9192:9;9188:104;9184:113;9176:121;;;;8698:605;;;;:::o","abiDefinition":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"claimerFraction","type":"uint256"},{"internalType":"uint256","name":"maxAllowed","type":"uint256"}],"name":"ClaimableFees__ClaimerFractionAboveMax","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeAmountZero","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeRecipientZeroAddress","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"OptionsLib__VersionInvalid","type":"error"},{"inputs":[],"name":"SynapseExecutionService__ExecutorZeroAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"SynapseExecutionService__FeeAmountBelowMin","type":"error"},{"inputs":[{"internalType":"address","name":"gasOracle","type":"address"}],"name":"SynapseExecutionService__GasOracleNotContract","type":"error"},{"inputs":[],"name":"SynapseExecutionService__GasOracleZeroAddress","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"SynapseExecutionService__OptionsVersionNotSupported","type":"error"},{"inputs":[{"internalType":"bytes","name":"versionedPayload","type":"bytes"}],"name":"VersionedPayload__PayloadTooShort","type":"error"},{"inputs":[],"name":"VersionedPayload__PrecompileFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"claimerFraction","type":"uint256"}],"name":"ClaimerFractionSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"client","type":"address"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"}],"name":"ExecutionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"executorEOA","type":"address"}],"name":"ExecutorEOASet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimedFees","type":"uint256"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimerReward","type":"uint256"}],"name":"FeesClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"gasOracle","type":"address"}],"name":"GasOracleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"globalMarkup","type":"uint256"}],"name":"GlobalMarkupSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"IC_CLIENT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerFraction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"executionFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalMarkup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestTxExecution","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimerFraction_","type":"uint256"}],"name":"setClaimerFraction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executorEOA_","type":"address"}],"name":"setExecutorEOA","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"gasOracle_","type":"address"}],"name":"setGasOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"globalMarkup_","type":"uint256"}],"name":"setGlobalMarkup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"ClaimerFractionSet(uint256)":{"notice":"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"ExecutionRequested(bytes32,address,uint256)":{"notice":"Emitted when the execution of a transaction is requested."},"ExecutorEOASet(address)":{"notice":"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns."},"FeeRecipientSet(address)":{"notice":"Emitted when a fee recipient is set. The fee recipient receives the claimed fees."},"FeesClaimed(address,uint256,address,uint256)":{"notice":"Emitted when fees are claimed to the fee recipient address."},"GasOracleSet(address)":{"notice":"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions."},"GlobalMarkupSet(uint256)":{"notice":"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."}},"kind":"user","methods":{"claimFees()":{"notice":"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand."},"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"gasOracle()":{"notice":"Address of the gas oracle used for estimating the gas cost of the transactions."},"getClaimableAmount()":{"notice":"Returns the amount of fees that can be claimed."},"getClaimerFraction()":{"notice":"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%."},"getClaimerReward()":{"notice":"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function."},"getExecutionFee(uint64,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"getFeeRecipient()":{"notice":"Returns the address that will receive the claimed fees."},"globalMarkup()":{"notice":"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`"},"setClaimerFraction(uint256)":{"notice":"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"setExecutorEOA(address)":{"notice":"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains."},"setGasOracle(address)":{"notice":"Allows the contract governor to set the address of the gas oracle."},"setGlobalMarkup(uint256)":{"notice":"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates."}},"version":1},"developerDoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"ClaimerFractionSet(uint256)":{"params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"ExecutionRequested(bytes32,address,uint256)":{"params":{"client":"The address of the Interchain Client that requested the execution.","executionFee":"The fee paid for the execution.","transactionId":"The unique identifier of the transaction."}},"ExecutorEOASet(address)":{"params":{"executorEOA":"The address of the executor EOA."}},"FeeRecipientSet(address)":{"params":{"feeRecipient":"The address of the fee recipient."}},"FeesClaimed(address,uint256,address,uint256)":{"params":{"claimedFees":"The amount of fees claimed, after the claimer reward is deducted.","claimer":"The address of the claimer (who called `claimFees`)","claimerReward":"The reward paid to the claimer for calling the `claimFees` function.","feeRecipient":"The address that receives the claimed fees."}},"GasOracleSet(address)":{"params":{"gasOracle":"The address of the gas oracle."}},"GlobalMarkupSet(uint256)":{"params":{"globalMarkup":"The global markup value."}},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"claimFees()":{"details":"Will revert if the claimable amount is zero or the fee recipient is not set."},"getExecutionFee(uint64,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setClaimerFraction(uint256)":{"details":"Could be only called by the owner. Could not exceed 1%.","params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"name\":\"ClaimableFees__ClaimerFractionAboveMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"OptionsLib__VersionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseExecutionService__ExecutorZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"SynapseExecutionService__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"SynapseExecutionService__GasOracleNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseExecutionService__GasOracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"SynapseExecutionService__OptionsVersionNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedPayload\",\"type\":\"bytes\"}],\"name\":\"VersionedPayload__PayloadTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionedPayload__PrecompileFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"}],\"name\":\"ClaimerFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executorEOA\",\"type\":\"address\"}],\"name\":\"ExecutorEOASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerReward\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"GasOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalMarkup\",\"type\":\"uint256\"}],\"name\":\"GlobalMarkupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IC_CLIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMarkup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestTxExecution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction_\",\"type\":\"uint256\"}],\"name\":\"setClaimerFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorEOA_\",\"type\":\"address\"}],\"name\":\"setExecutorEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle_\",\"type\":\"address\"}],\"name\":\"setGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalMarkup_\",\"type\":\"uint256\"}],\"name\":\"setGlobalMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ClaimerFractionSet(uint256)\":{\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"ExecutionRequested(bytes32,address,uint256)\":{\"params\":{\"client\":\"The address of the Interchain Client that requested the execution.\",\"executionFee\":\"The fee paid for the execution.\",\"transactionId\":\"The unique identifier of the transaction.\"}},\"ExecutorEOASet(address)\":{\"params\":{\"executorEOA\":\"The address of the executor EOA.\"}},\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The address of the fee recipient.\"}},\"FeesClaimed(address,uint256,address,uint256)\":{\"params\":{\"claimedFees\":\"The amount of fees claimed, after the claimer reward is deducted.\",\"claimer\":\"The address of the claimer (who called `claimFees`)\",\"claimerReward\":\"The reward paid to the claimer for calling the `claimFees` function.\",\"feeRecipient\":\"The address that receives the claimed fees.\"}},\"GasOracleSet(address)\":{\"params\":{\"gasOracle\":\"The address of the gas oracle.\"}},\"GlobalMarkupSet(uint256)\":{\"params\":{\"globalMarkup\":\"The global markup value.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"claimFees()\":{\"details\":\"Will revert if the claimable amount is zero or the fee recipient is not set.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setClaimerFraction(uint256)\":{\"details\":\"Could be only called by the owner. Could not exceed 1%.\",\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimerFractionSet(uint256)\":{\"notice\":\"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"ExecutionRequested(bytes32,address,uint256)\":{\"notice\":\"Emitted when the execution of a transaction is requested.\"},\"ExecutorEOASet(address)\":{\"notice\":\"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns.\"},\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\"},\"FeesClaimed(address,uint256,address,uint256)\":{\"notice\":\"Emitted when fees are claimed to the fee recipient address.\"},\"GasOracleSet(address)\":{\"notice\":\"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions.\"},\"GlobalMarkupSet(uint256)\":{\"notice\":\"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"}},\"kind\":\"user\",\"methods\":{\"claimFees()\":{\"notice\":\"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\"},\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"gasOracle()\":{\"notice\":\"Address of the gas oracle used for estimating the gas cost of the transactions.\"},\"getClaimableAmount()\":{\"notice\":\"Returns the amount of fees that can be claimed.\"},\"getClaimerFraction()\":{\"notice\":\"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%.\"},\"getClaimerReward()\":{\"notice\":\"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"getFeeRecipient()\":{\"notice\":\"Returns the address that will receive the claimed fees.\"},\"globalMarkup()\":{\"notice\":\"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`\"},\"setClaimerFraction(uint256)\":{\"notice\":\"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"setExecutorEOA(address)\":{\"notice\":\"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"setGasOracle(address)\":{\"notice\":\"Allows the contract governor to set the address of the gas oracle.\"},\"setGlobalMarkup(uint256)\":{\"notice\":\"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"SynapseExecutionServiceV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","GOVERNOR_ROLE()":"ccc57490","IC_CLIENT_ROLE()":"08c5c0db","claimFees()":"d294f093","executorEOA()":"62014bad","gasOracle()":"5d62a8dd","getClaimableAmount()":"c354bd6e","getClaimerFraction()":"4f199114","getClaimerReward()":"26533fe9","getExecutionFee(uint64,uint256,bytes)":"96fda4da","getFeeRecipient()":"4ccb20c0","getRoleAdmin(bytes32)":"248a9ca3","globalMarkup()":"efd07ec2","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","renounceRole(bytes32,address)":"36568abe","requestTxExecution(uint64,uint256,bytes32,bytes)":"58efb47d","revokeRole(bytes32,address)":"d547741f","setClaimerFraction(uint256)":"a9bc769b","setExecutorEOA(address)":"2d54566c","setGasOracle(address)":"a87b8152","setGlobalMarkup(uint256)":"cf4f578f","supportsInterface(bytes4)":"01ffc9a7"}},"solidity/SynapseExecutionServiceV1Harness.sol:SynapseExecutionServiceV1Harness":{"code":"0x60806040523480156200001157600080fd5b506200001f60003362000053565b506200004c7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f553362000053565b5062000127565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602081815260408084206001600160a01b038616855290915282205460ff166200011b576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055620000d03390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505062000121565b60009150505b92915050565b611c8180620001376000396000f3fe60806040526004361061018b5760003560e01c806391d14854116100d6578063c4d66de81161007f578063d294f09311610059578063d294f09314610550578063d547741f14610565578063efd07ec21461058557600080fd5b8063c4d66de8146104dc578063ccc57490146104fc578063cf4f578f1461053057600080fd5b8063a87b8152116100b0578063a87b815214610489578063a9bc769b146104a9578063c354bd6e146104c957600080fd5b806391d14854146103e257806396fda4da14610454578063a217fddf1461047457600080fd5b806336568abe1161013857806358efb47d1161011257806358efb47d1461033b5780635d62a8dd1461034e57806362014bad1461039857600080fd5b806336568abe146102ad5780634ccb20c0146102cd5780634f1991141461030757600080fd5b806326533fe91161016957806326533fe9146102565780632d54566c1461026b5780632f2ff15d1461028d57600080fd5b806301ffc9a71461019057806308c5c0db146101c5578063248a9ca314610207575b600080fd5b34801561019c57600080fd5b506101b06101ab366004611852565b6105b9565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101f97f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb81565b6040519081526020016101bc565b34801561021357600080fd5b506101f9610222366004611894565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561026257600080fd5b506101f9610652565b34801561027757600080fd5b5061028b6102863660046118d6565b610664565b005b34801561029957600080fd5b5061028b6102a83660046118f1565b6107be565b3480156102b957600080fd5b5061028b6102c83660046118f1565b610808565b3480156102d957600080fd5b506102e2610866565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b34801561031357600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3103546101f9565b61028b61034936600461197e565b6108ab565b34801561035a57600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103a457600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103ee57600080fd5b506101b06103fd3660046118f1565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561046057600080fd5b506101f961046f3660046119e6565b610970565b34801561048057600080fd5b506101f9600081565b34801561049557600080fd5b5061028b6104a43660046118d6565b610c5a565b3480156104b557600080fd5b5061028b6104c4366004611894565b610da1565b3480156104d557600080fd5b50476101f9565b3480156104e857600080fd5b5061028b6104f73660046118d6565b610e92565b34801561050857600080fd5b506101f97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561053c57600080fd5b5061028b61054b366004611894565b611015565b34801561055c57600080fd5b5061028b6110b5565b34801561057157600080fd5b5061028b6105803660046118f1565b6111ce565b34801561059157600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3102546101f9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061064c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60004761065e81611212565b91505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561068e816112b4565b73ffffffffffffffffffffffffffffffffffffffff82166106db576040517f9e3a01ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117825560408051918252517f4ab11d24f4bb323219ce90846ba579a556c914e8587517e7c8c4264771cd9f719181900360200190a160405173ffffffffffffffffffffffffffffffffffffffff841681527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb323906020015b60405180910390a1505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107f8816112b4565b61080283836112c1565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610857576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086182826113e2565b505050565b60006108a67fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb6108d5816112b4565b60006108e387878686610970565b90508034101561092d576040517f28c6ec70000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044015b60405180910390fd5b6040805133815234602082015286917fc3afeef9d037dcadfc927cf1a2c10a5dccba06a26bac58e0e2adf916407f2a7c910160405180910390a250505050505050565b6000806109b17fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff8116610a00576040517f668604bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0c85856114c0565b9050600161ffff82161115610a53576040517f05e98f3a00000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b6000610a9486868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150a92505050565b80516040517fbf495c8800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015260248101919091526044810189905290915073ffffffffffffffffffffffffffffffffffffffff84169063bf495c8890606401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611a40565b602082015190945015610bff5760208101516040517f40658a7400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a166004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff8416906340658a7490604401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611a40565b610bfc9085611a88565b93505b670de0b6b3a7640000610c307fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31025490565b610c3a9086611a9b565b610c449190611ab2565b610c4e9085611a88565b98975050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c84816112b4565b8173ffffffffffffffffffffffffffffffffffffffff163b600003610ced576040517fd7c25e1d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e310180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f3efbbb00c39812fb98647af6e9e2c3f4ec2b53d368cedd1e148330a05b652cfa906020016107b1565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610dcb816112b4565b662386f26fc10000821115610e1c576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101839052662386f26fc100006024820152604401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31038290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f2b76ed3837bd14c860020e473bce45e560d5bca9b5109ef2f08b2051d1cf6cc9906020016107b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610edd5750825b905060008267ffffffffffffffff166001148015610efa5750303b155b905081158015610f08575080155b15610f3f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610fa05784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610fab6000876112c1565b50831561100d5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103f816112b4565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31028290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f1957a4f563f2f13a7e7c1f9d8d6e719a1e6f687ac787704c33069f0a7997d75d906020016107b1565b4760008190036110f1576040517f6e95c0a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110fb610866565b905073ffffffffffffffffffffffffffffffffffffffff811661114a576040517f3c73eece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115583611212565b6040805173ffffffffffffffffffffffffffffffffffffffff851681529482900360208601819052338683015260608601839052905190949192507ff4e6bc0a6951927d4db8490fb63528b3c4ccb43865870fe4e3db7a090cbb14b19181900360800190a16111c48284611590565b6108613382611590565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611208816112b4565b61080283836113e2565b60008061123d7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31035490565b9050662386f26fc10000811115611290576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101829052662386f26fc100006024820152604401610924565b670de0b6b3a76400006112a38285611a9b565b6112ad9190611ab2565b9392505050565b6112be8133611666565b50565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff166113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556113743390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061064c565b600091505061064c565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16156113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061064c565b600060028210156115015782826040517fb0818b62000000000000000000000000000000000000000000000000000000008152600401610924929190611aed565b50503560f01c90565b604080518082019091526000808252602082015260006115298361170d565b9050600161ffff82161015611570576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b61157983611758565b8060200190518101906112ad9190611b69565b5050565b804710156115cc576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610924565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610861576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661158c576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610924565b600060028251101561174d57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b506020015160f01c90565b606060028251101561179857816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156117d5576117d5611b3a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b50915060008160208401836022870160045afa90508061184b576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b60006020828403121561186457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112ad57600080fd5b6000602082840312156118a657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146118d157600080fd5b919050565b6000602082840312156118e857600080fd5b6112ad826118ad565b6000806040838503121561190457600080fd5b82359150611914602084016118ad565b90509250929050565b803567ffffffffffffffff811681146118d157600080fd5b60008083601f84011261194757600080fd5b50813567ffffffffffffffff81111561195f57600080fd5b60208301915083602082850101111561197757600080fd5b9250929050565b60008060008060006080868803121561199657600080fd5b61199f8661191d565b94506020860135935060408601359250606086013567ffffffffffffffff8111156119c957600080fd5b6119d588828901611935565b969995985093965092949392505050565b600080600080606085870312156119fc57600080fd5b611a058561191d565b935060208501359250604085013567ffffffffffffffff811115611a2857600080fd5b611a3487828801611935565b95989497509550505050565b600060208284031215611a5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561064c5761064c611a59565b808202811582820484141761064c5761064c611a59565b600082611ae8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060408284031215611b7b57600080fd5b6040516040810181811067ffffffffffffffff82111715611bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208083528351808285015260005b81811015611c0c57858101830151858201604001528201611bf0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220acc2a0fe7a2421f9293a36bd64e53e90660f4fc44511dc190483da941e09590764736f6c63430008140033","runtime-code":"0x60806040526004361061018b5760003560e01c806391d14854116100d6578063c4d66de81161007f578063d294f09311610059578063d294f09314610550578063d547741f14610565578063efd07ec21461058557600080fd5b8063c4d66de8146104dc578063ccc57490146104fc578063cf4f578f1461053057600080fd5b8063a87b8152116100b0578063a87b815214610489578063a9bc769b146104a9578063c354bd6e146104c957600080fd5b806391d14854146103e257806396fda4da14610454578063a217fddf1461047457600080fd5b806336568abe1161013857806358efb47d1161011257806358efb47d1461033b5780635d62a8dd1461034e57806362014bad1461039857600080fd5b806336568abe146102ad5780634ccb20c0146102cd5780634f1991141461030757600080fd5b806326533fe91161016957806326533fe9146102565780632d54566c1461026b5780632f2ff15d1461028d57600080fd5b806301ffc9a71461019057806308c5c0db146101c5578063248a9ca314610207575b600080fd5b34801561019c57600080fd5b506101b06101ab366004611852565b6105b9565b60405190151581526020015b60405180910390f35b3480156101d157600080fd5b506101f97f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb81565b6040519081526020016101bc565b34801561021357600080fd5b506101f9610222366004611894565b60009081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b34801561026257600080fd5b506101f9610652565b34801561027757600080fd5b5061028b6102863660046118d6565b610664565b005b34801561029957600080fd5b5061028b6102a83660046118f1565b6107be565b3480156102b957600080fd5b5061028b6102c83660046118f1565b610808565b3480156102d957600080fd5b506102e2610866565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b34801561031357600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3103546101f9565b61028b61034936600461197e565b6108ab565b34801561035a57600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103a457600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff166102e2565b3480156103ee57600080fd5b506101b06103fd3660046118f1565b60009182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561046057600080fd5b506101f961046f3660046119e6565b610970565b34801561048057600080fd5b506101f9600081565b34801561049557600080fd5b5061028b6104a43660046118d6565b610c5a565b3480156104b557600080fd5b5061028b6104c4366004611894565b610da1565b3480156104d557600080fd5b50476101f9565b3480156104e857600080fd5b5061028b6104f73660046118d6565b610e92565b34801561050857600080fd5b506101f97f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b34801561053c57600080fd5b5061028b61054b366004611894565b611015565b34801561055c57600080fd5b5061028b6110b5565b34801561057157600080fd5b5061028b6105803660046118f1565b6111ce565b34801561059157600080fd5b507fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3102546101f9565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061064c57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60004761065e81611212565b91505090565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561068e816112b4565b73ffffffffffffffffffffffffffffffffffffffff82166106db576040517f9e3a01ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117825560408051918252517f4ab11d24f4bb323219ce90846ba579a556c914e8587517e7c8c4264771cd9f719181900360200190a160405173ffffffffffffffffffffffffffffffffffffffff841681527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb323906020015b60405180910390a1505050565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107f8816112b4565b61080283836112c1565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610857576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086182826113e2565b505050565b60006108a67fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31005473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f506033f42d439a89b8dbacb157256b8ef7e613d9e48db1be101b85411778abfb6108d5816112b4565b60006108e387878686610970565b90508034101561092d576040517f28c6ec70000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044015b60405180910390fd5b6040805133815234602082015286917fc3afeef9d037dcadfc927cf1a2c10a5dccba06a26bac58e0e2adf916407f2a7c910160405180910390a250505050505050565b6000806109b17fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31015473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff8116610a00576040517f668604bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0c85856114c0565b9050600161ffff82161115610a53576040517f05e98f3a00000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b6000610a9486868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150a92505050565b80516040517fbf495c8800000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8b16600482015260248101919091526044810189905290915073ffffffffffffffffffffffffffffffffffffffff84169063bf495c8890606401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611a40565b602082015190945015610bff5760208101516040517f40658a7400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8a166004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff8416906340658a7490604401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611a40565b610bfc9085611a88565b93505b670de0b6b3a7640000610c307fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31025490565b610c3a9086611a9b565b610c449190611ab2565b610c4e9085611a88565b98975050505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610c84816112b4565b8173ffffffffffffffffffffffffffffffffffffffff163b600003610ced576040517fd7c25e1d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e310180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f3efbbb00c39812fb98647af6e9e2c3f4ec2b53d368cedd1e148330a05b652cfa906020016107b1565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610dcb816112b4565b662386f26fc10000821115610e1c576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101839052662386f26fc100006024820152604401610924565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31038290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f2b76ed3837bd14c860020e473bce45e560d5bca9b5109ef2f08b2051d1cf6cc9906020016107b1565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff16600081158015610edd5750825b905060008267ffffffffffffffff166001148015610efa5750303b155b905081158015610f08575080155b15610f3f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610fa05784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610fab6000876112c1565b50831561100d5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561103f816112b4565b7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31028290556040518281527fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100907f1957a4f563f2f13a7e7c1f9d8d6e719a1e6f687ac787704c33069f0a7997d75d906020016107b1565b4760008190036110f1576040517f6e95c0a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006110fb610866565b905073ffffffffffffffffffffffffffffffffffffffff811661114a576040517f3c73eece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115583611212565b6040805173ffffffffffffffffffffffffffffffffffffffff851681529482900360208601819052338683015260608601839052905190949192507ff4e6bc0a6951927d4db8490fb63528b3c4ccb43865870fe4e3db7a090cbb14b19181900360800190a16111c48284611590565b6108613382611590565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611208816112b4565b61080283836113e2565b60008061123d7fabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e31035490565b9050662386f26fc10000811115611290576040517f0ae993dd00000000000000000000000000000000000000000000000000000000815260048101829052662386f26fc100006024820152604401610924565b670de0b6b3a76400006112a38285611a9b565b6112ad9190611ab2565b9392505050565b6112be8133611666565b50565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff166113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556113743390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061064c565b600091505061064c565b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16156113d85760008481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061064c565b600060028210156115015782826040517fb0818b62000000000000000000000000000000000000000000000000000000008152600401610924929190611aed565b50503560f01c90565b604080518082019091526000808252602082015260006115298361170d565b9050600161ffff82161015611570576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff82166004820152602401610924565b61157983611758565b8060200190518101906112ad9190611b69565b5050565b804710156115cc576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610924565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610861576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661158c576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610924565b600060028251101561174d57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b506020015160f01c90565b606060028251101561179857816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016109249190611bdf565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156117d5576117d5611b3a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b50915060008160208401836022870160045afa90508061184b576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b60006020828403121561186457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112ad57600080fd5b6000602082840312156118a657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146118d157600080fd5b919050565b6000602082840312156118e857600080fd5b6112ad826118ad565b6000806040838503121561190457600080fd5b82359150611914602084016118ad565b90509250929050565b803567ffffffffffffffff811681146118d157600080fd5b60008083601f84011261194757600080fd5b50813567ffffffffffffffff81111561195f57600080fd5b60208301915083602082850101111561197757600080fd5b9250929050565b60008060008060006080868803121561199657600080fd5b61199f8661191d565b94506020860135935060408601359250606086013567ffffffffffffffff8111156119c957600080fd5b6119d588828901611935565b969995985093965092949392505050565b600080600080606085870312156119fc57600080fd5b611a058561191d565b935060208501359250604085013567ffffffffffffffff811115611a2857600080fd5b611a3487828801611935565b95989497509550505050565b600060208284031215611a5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561064c5761064c611a59565b808202811582820484141761064c5761064c611a59565b600082611ae8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060408284031215611b7b57600080fd5b6040516040810181811067ffffffffffffffff82111715611bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b600060208083528351808285015260005b81811015611c0c57858101830151858201604001528201611bf0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220acc2a0fe7a2421f9293a36bd64e53e90660f4fc44511dc190483da941e09590764736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"54880:403:0:-:0;;;54957:180;;;;;;;;;-1:-1:-1;55041:42:0;41673:4;55072:10;55041;:42::i;:::-;-1:-1:-1;55093:37:0;48398:26;55119:10;55093;:37::i;:::-;;54880:403;;46580:387;46657:4;43211:14;;;42230:28;43211:14;;;;;;;;-1:-1:-1;;;;;43211:31:0;;;;;;;;;;;;46742:219;;46785:8;:14;;;;;;;;;;;-1:-1:-1;;;;;46785:31:0;;;;;;;;;:38;;-1:-1:-1;;46785:38:0;46819:4;46785:38;;;46869:12;34827:10;;34748:96;46869:12;-1:-1:-1;;;;;46842:40:0;46860:7;-1:-1:-1;;;;;46842:40:0;46854:4;46842:40;;;;;;;;;;46903:4;46896:11;;;;;46742:219;46945:5;46938:12;;;46580:387;;;;;:::o;54880:403::-;;;;;;;","srcMapRuntime":"54880:403:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42753:202;;;;;;;;;;-1:-1:-1;42753:202:0;;;;;:::i;:::-;;:::i;:::-;;;516:14:1;;509:22;491:41;;479:2;464:18;42753:202:0;;;;;;;;48430:68;;;;;;;;;;;;48471:27;48430:68;;;;;689:25:1;;;677:2;662:18;48430:68:0;543:177:1;44069:191:0;;;;;;;;;;-1:-1:-1;44069:191:0;;;;;:::i;:::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;;44069:191;38206:156;;;;;;;;;;;;;:::i;49320:431::-;;;;;;;;;;-1:-1:-1;49320:431:0;;;;;:::i;:::-;;:::i;:::-;;44556:136;;;;;;;;;;-1:-1:-1;44556:136:0;;;;;:::i;:::-;;:::i;45658:245::-;;;;;;;;;;-1:-1:-1;45658:245:0;;;;;:::i;:::-;;:::i;53892:111::-;;;;;;;;;;;;;:::i;:::-;;;1919:42:1;1907:55;;;1889:74;;1877:2;1862:18;53892:111:0;1743:226:1;53603:211:0;;;;;;;;;;-1:-1:-1;53790:17:0;;53603:211;;50562:603;;;;;;:::i;:::-;;:::i;52826:187::-;;;;;;;;;;-1:-1:-1;52995:11:0;;;;52826:187;;52582:191;;;;;;;;;;-1:-1:-1;54618:45:0;52753:13;;;52582:191;;43042:207;;;;;;;;;;-1:-1:-1;43042:207:0;;;;;:::i;:::-;43119:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;;;;43042:207;51209:1329;;;;;;;;;;-1:-1:-1;51209:1329:0;;;;;:::i;:::-;;:::i;41628:49::-;;;;;;;;;;-1:-1:-1;41628:49:0;41673:4;41628:49;;49804:387;;;;;;;;;;-1:-1:-1;49804:387:0;;;;;:::i;:::-;;:::i;48811:456::-;;;;;;;;;;-1:-1:-1;48811:456:0;;;;;:::i;:::-;;:::i;53329:122::-;;;;;;;;;;-1:-1:-1;53423:21:0;53329:122;;48640:118;;;;;;;;;;-1:-1:-1;48640:118:0;;;;;:::i;:::-;;:::i;48358:66::-;;;;;;;;;;;;48398:26;48358:66;;50244:274;;;;;;;;;;-1:-1:-1;50244:274:0;;;;;:::i;:::-;;:::i;37179:886::-;;;;;;;;;;;;;:::i;44972:138::-;;;;;;;;;;-1:-1:-1;44972:138:0;;;;;:::i;:::-;;:::i;53066:193::-;;;;;;;;;;-1:-1:-1;53238:14:0;;53066:193;;42753:202;42838:4;42861:47;;;42876:32;42861:47;;:87;;-1:-1:-1;36092:25:0;36077:40;;;;42912:36;42854:94;42753:202;-1:-1:-1;;42753:202:0:o;38206:156::-;38257:7;53423:21;38330:25;53423:21;38330:17;:25::i;:::-;38323:32;;;38206:156;:::o;49320:431::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;49421:26:::1;::::0;::::1;49417:110;;49470:46;;;;;;;;;;;;;;49417:110;54618:45:::0;49629:28;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;49672::::1;::::0;;1889:74:1;;;49672:28:0;::::1;::::0;;;;1877:2:1;49672:28:0;;::::1;49715:29;::::0;1919:42:1;1907:55;;1889:74;;49715:29:0::1;::::0;1877:2:1;1862:18;49715:29:0::1;;;;;;;;49407:344;49320:431:::0;;:::o;44556:136::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;42501:16;42512:4;42501:10;:16::i;:::-;44660:25:::1;44671:4;44677:7;44660:10;:25::i;:::-;;44556:136:::0;;;:::o;45658:245::-;45751:34;;;34827:10;45751:34;45747:102;;45808:30;;;;;;;;;;;;;;45747:102;45859:37;45871:4;45877:18;45859:11;:37::i;:::-;;45658:245;;:::o;53892:111::-;53957:7;53983:13;54618:45;52753:13;;;;52582:191;53983:13;53976:20;;53892:111;:::o;50562:603::-;48471:27;42501:16;42512:4;42501:10;:16::i;:::-;50813:19:::1;50835:51;50851:10;50863:13;50878:7;;50835:15;:51::i;:::-;50813:73;;50912:11;50900:9;:23;50896:153;;;50946:92;::::0;::::1;::::0;;51001:9:::1;50946:92;::::0;::::1;4038:25:1::0;4079:18;;;4072:34;;;4011:18;;50946:92:0::1;;;;;;;;50896:153;51063:95;::::0;;51121:10:::1;4291:74:1::0;;51147:9:0::1;4396:2:1::0;4381:18;;4374:34;51098:13:0;;51063:95:::1;::::0;4264:18:1;51063:95:0::1;;;;;;;50803:362;50562:603:::0;;;;;;:::o;51209:1329::-;51391:20;51427:23;51453:11;52995;;;;;52826:187;51453:11;51427:37;-1:-1:-1;51478:29:0;;;51474:114;;51530:47;;;;;;;;;;;;;;51474:114;51747:14;51764:39;51795:7;;51764:30;:39::i;:::-;51747:56;-1:-1:-1;32775:1:0;51817:31;;;;51813:129;;;51871:60;;;;;4593:6:1;4581:19;;51871:60:0;;;4563:38:1;4536:18;;51871:60:0;4419:188:1;51813:129:0;51951:26;51980:35;52007:7;;51980:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;51980:26:0;;-1:-1:-1;;;51980:35:0:i;:::-;52158:18;;52040:188;;;;;4842:18:1;4830:31;;52040:188:0;;;4812:50:1;4878:18;;;4871:34;;;;4921:18;;;4914:34;;;52158:18:0;;-1:-1:-1;52040:54:0;;;;;;4785:18:1;;52040:188:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52242:20;;;;52025:203;;-1:-1:-1;52242:24:0;52238:233;;52425:20;;;;52298:162;;;;;5350:18:1;5338:31;;52298:162:0;;;5320:50:1;5386:18;;;5379:34;;;;52298:58:0;;;;;;5293:18:1;;52298:162:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;52282:178;;;;:::i;:::-;;;52238:233;48343:8;52511:14;53238;;;53066:193;52511:14;52496:29;;:12;:29;:::i;:::-;:35;;;;:::i;:::-;52480:51;;;;:::i;:::-;;51209:1329;-1:-1:-1;;;;;;;;51209:1329:0:o;49804:387::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;49901:10:::1;:22;;;49927:1;49901:27:::0;49897:122:::1;;49951:57;::::0;::::1;::::0;;1919:42:1;1907:55;;49951:57:0::1;::::0;::::1;1889:74:1::0;1862:18;;49951:57:0::1;1743:226:1::0;49897:122:0::1;50121:11:::0;:24;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;50160::::1;::::0;1889:74:1;;;54618:45:0;;50160:24:::1;::::0;1877:2:1;1862:18;50160:24:0::1;1743:226:1::0;48811:456:0;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;36818:4:::1;48920:16;:39;48916:155;;;48982:78;::::0;::::1;::::0;;::::1;::::0;::::1;4038:25:1::0;;;36818:4:0::1;4079:18:1::0;;;4072:34;4011:18;;48982:78:0::1;3864:248:1::0;48916:155:0::1;49173:17:::0;:36;;;49224::::1;::::0;689:25:1;;;54618:45:0;;49224:36:::1;::::0;677:2:1;662:18;49224:36:0::1;543:177:1::0;48640:118:0;30117:21;25549:15;;;;;;;25548:16;;25595:14;;25405:30;25973:16;;:34;;;;;25993:14;25973:34;25953:54;;26017:17;26037:11;:16;;26052:1;26037:16;:50;;;;-1:-1:-1;26065:4:0;26057:25;:30;26037:50;26017:70;;26103:12;26102:13;:30;;;;;26120:12;26119:13;26102:30;26098:91;;;26155:23;;;;;;;;;;;;;;26098:91;26198:18;;;;26215:1;26198:18;;;26226:67;;;;26260:22;;;;;;;;26226:67;48714:37:::1;41673:4;48745:5:::0;48714:10:::1;:37::i;:::-;;26317:14:::0;26313:101;;;26347:23;;;;;;26389:14;;-1:-1:-1;6348:50:1;;26389:14:0;;6336:2:1;6321:18;26389:14:0;;;;;;;26313:101;25339:1081;;;;;48640:118;:::o;50244:274::-;48398:26;42501:16;42512:4;42501:10;:16::i;:::-;50436:14;:30;;;50481::::1;::::0;689:25:1;;;54618:45:0;;50481:30:::1;::::0;677:2:1;662:18;50481:30:0::1;543:177:1::0;37179:886:0;53423:21;37219:14;37270:11;;;37266:79;;37304:30;;;;;;;;;;;;;;37266:79;37354:17;37374;:15;:17::i;:::-;37354:37;-1:-1:-1;37405:23:0;;;37401:101;;37451:40;;;;;;;;;;;;;;37401:101;37572:14;37589:25;37607:6;37589:17;:25::i;:::-;37897:50;;;6650:42:1;6719:15;;6701:34;;37801:16:0;;;;6766:2:1;6751:18;;6744:34;;;37928:10:0;6794:18:1;;;6787:43;6861:2;6846:18;;6839:34;;;37897:50:0;;37801:16;;37572:42;;-1:-1:-1;37897:50:0;;;;;6627:3:1;37897:50:0;;;37957:45;37983:9;37995:6;37957:17;:45::i;:::-;38012:46;38038:10;38051:6;38012:17;:46::i;44972:138::-;44134:7;44229:14;;;42230:28;44229:14;;;;;:24;;;42501:16;42512:4;42501:10;:16::i;:::-;45077:26:::1;45089:4;45095:7;45077:11;:26::i;39175:396::-:0;39241:7;39260:16;39279:20;53790:17;;;53603:211;39279:20;39260:39;;36818:4;39313:8;:31;39309:139;;;39367:70;;;;;;;;4038:25:1;;;36818:4:0;4079:18:1;;;4072:34;4011:18;;39367:70:0;3864:248:1;39309:139:0;36689:4;39530:17;39539:8;39530:6;:17;:::i;:::-;39529:35;;;;:::i;:::-;39522:42;39175:396;-1:-1:-1;;;39175:396:0:o;43458:103::-;43524:30;43535:4;34827:10;43524;:30::i;:::-;43458:103;:::o;46580:387::-;46657:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;46742:219;;46785:8;:14;;;;;;;;;;;:31;;;;;;;;;;:38;;;;46819:4;46785:38;;;46869:12;34827:10;;34748:96;46869:12;46842:40;;46860:7;46842:40;;46854:4;46842:40;;;;;;;;;;46903:4;46896:11;;;;;46742:219;46945:5;46938:12;;;;;47202:388;47280:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;47365:219;;;47441:5;47407:14;;;;;;;;;;;:31;;;;;;;;;;;:39;;;;;;47465:40;34827:10;;47407:14;;47465:40;;47441:5;47465:40;47526:4;47519:11;;;;;7808:432;7884:14;7178:1;7914:40;;7910:129;;;8011:16;;7977:51;;;;;;;;;;;;:::i;7910:129::-;-1:-1:-1;;8186:37:0;8181:3;8177:47;;7808:432::o;32998:597::-;-1:-1:-1;;;;;;;;;;;;;;;;;33093:14:0;33110:27;:4;:25;:27::i;:::-;33093:44;-1:-1:-1;32775:1:0;33151:20;;;;33147:93;;;33194:35;;;;;4593:6:1;4581:19;;33194:35:0;;;4563:38:1;4536:18;;33194:35:0;4419:188:1;33147:93:0;33547:27;:4;:25;:27::i;:::-;33536:52;;;;;;;;;;;;:::i;54215:148::-;;;:::o;15605:331::-;15714:6;15690:21;:30;15686:109;;;15743:41;;;;;15778:4;15743:41;;;1889:74:1;1862:18;;15743:41:0;1743:226:1;15686:109:0;15806:12;15824:9;:14;;15846:6;15824:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15805:52;;;15872:7;15867:63;;15902:17;;;;;;;;;;;;;;43691:197;43119:4;43211:14;;;42230:28;43211:14;;;;;;;;:31;;;;;;;;;;;;;43774:108;;43824:47;;;;;4321:42:1;4309:55;;43824:47:0;;;4291:74:1;4381:18;;;4374:34;;;4264:18;;43824:47:0;4117:297:1;8923:503:0;9007:14;7178:1;9037:16;:23;:40;9033:129;;;9134:16;9100:51;;;;;;;;;;;:::i;9033:129::-;-1:-1:-1;9403:4:0;9381:27;9375:34;9370:3;9366:44;;8923:503::o;9740:1060::-;9824:20;7178:1;9860:16;:23;:40;9856:129;;;9957:16;9923:51;;;;;;;;;;;:::i;9856:129::-;10143:23;;:40;;;10213:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10213:17:0;;10203:27;;10354:8;10690:6;10683:4;10674:7;10670:18;10662:6;10655:4;10637:16;10633:27;10627:4;10620:5;10609:88;10602:95;;10721:3;10716:78;;10747:36;;;;;;;;;;;;;;10716:78;9846:954;;9740:1060;;;:::o;14:332:1:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:180;784:6;837:2;825:9;816:7;812:23;808:32;805:52;;;853:1;850;843:12;805:52;-1:-1:-1;876:23:1;;725:180;-1:-1:-1;725:180:1:o;1092:196::-;1160:20;;1220:42;1209:54;;1199:65;;1189:93;;1278:1;1275;1268:12;1189:93;1092:196;;;:::o;1293:186::-;1352:6;1405:2;1393:9;1384:7;1380:23;1376:32;1373:52;;;1421:1;1418;1411:12;1373:52;1444:29;1463:9;1444:29;:::i;1484:254::-;1552:6;1560;1613:2;1601:9;1592:7;1588:23;1584:32;1581:52;;;1629:1;1626;1619:12;1581:52;1665:9;1652:23;1642:33;;1694:38;1728:2;1717:9;1713:18;1694:38;:::i;:::-;1684:48;;1484:254;;;;;:::o;1974:171::-;2041:20;;2101:18;2090:30;;2080:41;;2070:69;;2135:1;2132;2125:12;2150:347;2201:8;2211:6;2265:3;2258:4;2250:6;2246:17;2242:27;2232:55;;2283:1;2280;2273:12;2232:55;-1:-1:-1;2306:20:1;;2349:18;2338:30;;2335:50;;;2381:1;2378;2371:12;2335:50;2418:4;2410:6;2406:17;2394:29;;2470:3;2463:4;2454:6;2446;2442:19;2438:30;2435:39;2432:59;;;2487:1;2484;2477:12;2432:59;2150:347;;;;;:::o;2502:618::-;2598:6;2606;2614;2622;2630;2683:3;2671:9;2662:7;2658:23;2654:33;2651:53;;;2700:1;2697;2690:12;2651:53;2723:28;2741:9;2723:28;:::i;:::-;2713:38;;2798:2;2787:9;2783:18;2770:32;2760:42;;2849:2;2838:9;2834:18;2821:32;2811:42;;2904:2;2893:9;2889:18;2876:32;2931:18;2923:6;2920:30;2917:50;;;2963:1;2960;2953:12;2917:50;3002:58;3052:7;3043:6;3032:9;3028:22;3002:58;:::i;:::-;2502:618;;;;-1:-1:-1;2502:618:1;;-1:-1:-1;3079:8:1;;2976:84;2502:618;-1:-1:-1;;;2502:618:1:o;3125:549::-;3212:6;3220;3228;3236;3289:2;3277:9;3268:7;3264:23;3260:32;3257:52;;;3305:1;3302;3295:12;3257:52;3328:28;3346:9;3328:28;:::i;:::-;3318:38;;3403:2;3392:9;3388:18;3375:32;3365:42;;3458:2;3447:9;3443:18;3430:32;3485:18;3477:6;3474:30;3471:50;;;3517:1;3514;3507:12;3471:50;3556:58;3606:7;3597:6;3586:9;3582:22;3556:58;:::i;:::-;3125:549;;;;-1:-1:-1;3633:8:1;-1:-1:-1;;;;3125:549:1:o;4959:184::-;5029:6;5082:2;5070:9;5061:7;5057:23;5053:32;5050:52;;;5098:1;5095;5088:12;5050:52;-1:-1:-1;5121:16:1;;4959:184;-1:-1:-1;4959:184:1:o;5424:::-;5476:77;5473:1;5466:88;5573:4;5570:1;5563:15;5597:4;5594:1;5587:15;5613:125;5678:9;;;5699:10;;;5696:36;;;5712:18;;:::i;5743:168::-;5816:9;;;5847;;5864:15;;;5858:22;;5844:37;5834:71;;5885:18;;:::i;5916:274::-;5956:1;5982;5972:189;;6017:77;6014:1;6007:88;6118:4;6115:1;6108:15;6146:4;6143:1;6136:15;5972:189;-1:-1:-1;6175:9:1;;5916:274::o;6884:447::-;7041:2;7030:9;7023:21;7080:6;7075:2;7064:9;7060:18;7053:34;7137:6;7129;7124:2;7113:9;7109:18;7096:48;7193:1;7164:22;;;7188:2;7160:31;;;7153:42;;;;7247:2;7235:15;;;7252:66;7231:88;7216:104;7212:113;;6884:447;-1:-1:-1;6884:447:1:o;7336:184::-;7388:77;7385:1;7378:88;7485:4;7482:1;7475:15;7509:4;7506:1;7499:15;7525:656;7621:6;7674:2;7662:9;7653:7;7649:23;7645:32;7642:52;;;7690:1;7687;7680:12;7642:52;7723:2;7717:9;7765:2;7757:6;7753:15;7834:6;7822:10;7819:22;7798:18;7786:10;7783:34;7780:62;7777:242;;;7875:77;7872:1;7865:88;7976:4;7973:1;7966:15;8004:4;8001:1;7994:15;7777:242;8035:2;8028:22;8074:16;;8059:32;;8145:2;8130:18;;;8124:25;8107:15;;;8100:50;;;;-1:-1:-1;8066:6:1;7525:656;-1:-1:-1;7525:656:1:o;8698:605::-;8808:4;8837:2;8866;8855:9;8848:21;8898:6;8892:13;8941:6;8936:2;8925:9;8921:18;8914:34;8966:1;8976:140;8990:6;8987:1;8984:13;8976:140;;;9085:14;;;9081:23;;9075:30;9051:17;;;9070:2;9047:26;9040:66;9005:10;;8976:140;;;8980:3;9165:1;9160:2;9151:6;9140:9;9136:22;9132:31;9125:42;9294:2;9224:66;9219:2;9211:6;9207:15;9203:88;9192:9;9188:104;9184:113;9176:121;;;;8698:605;;;;:::o","abiDefinition":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[{"internalType":"uint256","name":"claimerFraction","type":"uint256"},{"internalType":"uint256","name":"maxAllowed","type":"uint256"}],"name":"ClaimableFees__ClaimerFractionAboveMax","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeAmountZero","type":"error"},{"inputs":[],"name":"ClaimableFees__FeeRecipientZeroAddress","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"OptionsLib__VersionInvalid","type":"error"},{"inputs":[],"name":"SynapseExecutionService__ExecutorZeroAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"SynapseExecutionService__FeeAmountBelowMin","type":"error"},{"inputs":[{"internalType":"address","name":"gasOracle","type":"address"}],"name":"SynapseExecutionService__GasOracleNotContract","type":"error"},{"inputs":[],"name":"SynapseExecutionService__GasOracleZeroAddress","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"SynapseExecutionService__OptionsVersionNotSupported","type":"error"},{"inputs":[{"internalType":"bytes","name":"versionedPayload","type":"bytes"}],"name":"VersionedPayload__PayloadTooShort","type":"error"},{"inputs":[],"name":"VersionedPayload__PrecompileFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"claimerFraction","type":"uint256"}],"name":"ClaimerFractionSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"client","type":"address"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"}],"name":"ExecutionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"executorEOA","type":"address"}],"name":"ExecutorEOASet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimedFees","type":"uint256"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimerReward","type":"uint256"}],"name":"FeesClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"gasOracle","type":"address"}],"name":"GasOracleSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"globalMarkup","type":"uint256"}],"name":"GlobalMarkupSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"IC_CLIENT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerFraction","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getClaimerReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"executionFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalMarkup","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestTxExecution","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimerFraction_","type":"uint256"}],"name":"setClaimerFraction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executorEOA_","type":"address"}],"name":"setExecutorEOA","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"gasOracle_","type":"address"}],"name":"setGasOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"globalMarkup_","type":"uint256"}],"name":"setGlobalMarkup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"ClaimerFractionSet(uint256)":{"notice":"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"ExecutionRequested(bytes32,address,uint256)":{"notice":"Emitted when the execution of a transaction is requested."},"ExecutorEOASet(address)":{"notice":"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns."},"FeeRecipientSet(address)":{"notice":"Emitted when a fee recipient is set. The fee recipient receives the claimed fees."},"FeesClaimed(address,uint256,address,uint256)":{"notice":"Emitted when fees are claimed to the fee recipient address."},"GasOracleSet(address)":{"notice":"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions."},"GlobalMarkupSet(uint256)":{"notice":"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."}},"kind":"user","methods":{"claimFees()":{"notice":"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand."},"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"gasOracle()":{"notice":"Address of the gas oracle used for estimating the gas cost of the transactions."},"getClaimableAmount()":{"notice":"Returns the amount of fees that can be claimed."},"getClaimerFraction()":{"notice":"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%."},"getClaimerReward()":{"notice":"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function."},"getExecutionFee(uint64,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"getFeeRecipient()":{"notice":"Returns the address that will receive the claimed fees."},"globalMarkup()":{"notice":"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`"},"setClaimerFraction(uint256)":{"notice":"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost."},"setExecutorEOA(address)":{"notice":"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains."},"setGasOracle(address)":{"notice":"Allows the contract governor to set the address of the gas oracle."},"setGlobalMarkup(uint256)":{"notice":"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates."}},"notice":"This harness is supposed to be used IN TESTS ONLY.","version":1},"developerDoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"ClaimerFractionSet(uint256)":{"params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"ExecutionRequested(bytes32,address,uint256)":{"params":{"client":"The address of the Interchain Client that requested the execution.","executionFee":"The fee paid for the execution.","transactionId":"The unique identifier of the transaction."}},"ExecutorEOASet(address)":{"params":{"executorEOA":"The address of the executor EOA."}},"FeeRecipientSet(address)":{"params":{"feeRecipient":"The address of the fee recipient."}},"FeesClaimed(address,uint256,address,uint256)":{"params":{"claimedFees":"The amount of fees claimed, after the claimer reward is deducted.","claimer":"The address of the claimer (who called `claimFees`)","claimerReward":"The reward paid to the claimer for calling the `claimFees` function.","feeRecipient":"The address that receives the claimed fees."}},"GasOracleSet(address)":{"params":{"gasOracle":"The address of the gas oracle."}},"GlobalMarkupSet(uint256)":{"params":{"globalMarkup":"The global markup value."}},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"claimFees()":{"details":"Will revert if the claimable amount is zero or the fee recipient is not set."},"getExecutionFee(uint64,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setClaimerFraction(uint256)":{"details":"Could be only called by the owner. Could not exceed 1%.","params":{"claimerFraction":"The fraction of the fees to be paid to the claimer (100% = 1e18)"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"name\":\"ClaimableFees__ClaimerFractionAboveMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableFees__FeeRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"OptionsLib__VersionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseExecutionService__ExecutorZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"SynapseExecutionService__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"SynapseExecutionService__GasOracleNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseExecutionService__GasOracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"SynapseExecutionService__OptionsVersionNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedPayload\",\"type\":\"bytes\"}],\"name\":\"VersionedPayload__PayloadTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionedPayload__PrecompileFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerFraction\",\"type\":\"uint256\"}],\"name\":\"ClaimerFractionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executorEOA\",\"type\":\"address\"}],\"name\":\"ExecutorEOASet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimerReward\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasOracle\",\"type\":\"address\"}],\"name\":\"GasOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalMarkup\",\"type\":\"uint256\"}],\"name\":\"GlobalMarkupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IC_CLIENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMarkup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestTxExecution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimerFraction_\",\"type\":\"uint256\"}],\"name\":\"setClaimerFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorEOA_\",\"type\":\"address\"}],\"name\":\"setExecutorEOA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasOracle_\",\"type\":\"address\"}],\"name\":\"setGasOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalMarkup_\",\"type\":\"uint256\"}],\"name\":\"setGlobalMarkup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ClaimerFractionSet(uint256)\":{\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"ExecutionRequested(bytes32,address,uint256)\":{\"params\":{\"client\":\"The address of the Interchain Client that requested the execution.\",\"executionFee\":\"The fee paid for the execution.\",\"transactionId\":\"The unique identifier of the transaction.\"}},\"ExecutorEOASet(address)\":{\"params\":{\"executorEOA\":\"The address of the executor EOA.\"}},\"FeeRecipientSet(address)\":{\"params\":{\"feeRecipient\":\"The address of the fee recipient.\"}},\"FeesClaimed(address,uint256,address,uint256)\":{\"params\":{\"claimedFees\":\"The amount of fees claimed, after the claimer reward is deducted.\",\"claimer\":\"The address of the claimer (who called `claimFees`)\",\"claimerReward\":\"The reward paid to the claimer for calling the `claimFees` function.\",\"feeRecipient\":\"The address that receives the claimed fees.\"}},\"GasOracleSet(address)\":{\"params\":{\"gasOracle\":\"The address of the gas oracle.\"}},\"GlobalMarkupSet(uint256)\":{\"params\":{\"globalMarkup\":\"The global markup value.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"claimFees()\":{\"details\":\"Will revert if the claimable amount is zero or the fee recipient is not set.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setClaimerFraction(uint256)\":{\"details\":\"Could be only called by the owner. Could not exceed 1%.\",\"params\":{\"claimerFraction\":\"The fraction of the fees to be paid to the claimer (100% = 1e18)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimerFractionSet(uint256)\":{\"notice\":\"Emitted when the claim fee fraction is set. This fraction of the fees will be paid to the caller of the `claimFees` function. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"ExecutionRequested(bytes32,address,uint256)\":{\"notice\":\"Emitted when the execution of a transaction is requested.\"},\"ExecutorEOASet(address)\":{\"notice\":\"Emitted when the executor EOA is set. This address will be getting the execution fees that the service earns.\"},\"FeeRecipientSet(address)\":{\"notice\":\"Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\"},\"FeesClaimed(address,uint256,address,uint256)\":{\"notice\":\"Emitted when fees are claimed to the fee recipient address.\"},\"GasOracleSet(address)\":{\"notice\":\"Emitted when the gas oracle is set. This gas oracle will be used to estimate the gas cost of the transactions.\"},\"GlobalMarkupSet(uint256)\":{\"notice\":\"Emitted when the global markup is set. This markup will be added to the gas cost of the transactions. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"}},\"kind\":\"user\",\"methods\":{\"claimFees()\":{\"notice\":\"Transfers the accumulated fees to the fee recipient. Message caller receives a fraction of the fees as a reward to offset the gas costs. The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\"},\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"gasOracle()\":{\"notice\":\"Address of the gas oracle used for estimating the gas cost of the transactions.\"},\"getClaimableAmount()\":{\"notice\":\"Returns the amount of fees that can be claimed.\"},\"getClaimerFraction()\":{\"notice\":\"Returns the fraction of the fees that the claimer will receive. The result is in the range [0, 1e18], where 1e18 is 100%.\"},\"getClaimerReward()\":{\"notice\":\"Returns the amount of native chain token that the claimer will receive after calling the `claimFees` function.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"getFeeRecipient()\":{\"notice\":\"Returns the address that will receive the claimed fees.\"},\"globalMarkup()\":{\"notice\":\"The markup that the Execution Service charges on top of the GasOracle's gas cost estimates. Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle. The markup is denominated in Wei, 1e18 being 100%.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`\"},\"setClaimerFraction(uint256)\":{\"notice\":\"Sets the fraction of the accumulated fees to be paid to caller of `claimFees`. This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\"},\"setExecutorEOA(address)\":{\"notice\":\"Allows the contract governor to set the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"setGasOracle(address)\":{\"notice\":\"Allows the contract governor to set the address of the gas oracle.\"},\"setGlobalMarkup(uint256)\":{\"notice\":\"Allows the contract governor to set the global markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\"}},\"notice\":\"This harness is supposed to be used IN TESTS ONLY.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"SynapseExecutionServiceV1Harness\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","GOVERNOR_ROLE()":"ccc57490","IC_CLIENT_ROLE()":"08c5c0db","claimFees()":"d294f093","executorEOA()":"62014bad","gasOracle()":"5d62a8dd","getClaimableAmount()":"c354bd6e","getClaimerFraction()":"4f199114","getClaimerReward()":"26533fe9","getExecutionFee(uint64,uint256,bytes)":"96fda4da","getFeeRecipient()":"4ccb20c0","getRoleAdmin(bytes32)":"248a9ca3","globalMarkup()":"efd07ec2","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","renounceRole(bytes32,address)":"36568abe","requestTxExecution(uint64,uint256,bytes32,bytes)":"58efb47d","revokeRole(bytes32,address)":"d547741f","setClaimerFraction(uint256)":"a9bc769b","setExecutorEOA(address)":"2d54566c","setGasOracle(address)":"a87b8152","setGlobalMarkup(uint256)":"cf4f578f","supportsInterface(bytes4)":"01ffc9a7"}},"solidity/SynapseExecutionServiceV1Harness.sol:VersionedPayloadLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205eb466bd41aa7b3b5a63b41d48a30506484be9f3e77d3812cc55bd6c4214620164736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205eb466bd41aa7b3b5a63b41d48a30506484be9f3e77d3812cc55bd6c4214620164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/ClaimableFeesEvents.sol\n\nabstract contract ClaimableFeesEvents {\n    /// @notice Emitted when the claim fee fraction is set. This fraction of the fees will be paid\n    /// to the caller of the `claimFees` function.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    event ClaimerFractionSet(uint256 claimerFraction);\n\n    /// @notice Emitted when a fee recipient is set. The fee recipient receives the claimed fees.\n    /// @param feeRecipient     The address of the fee recipient.\n    event FeeRecipientSet(address feeRecipient);\n\n    /// @notice Emitted when fees are claimed to the fee recipient address.\n    /// @param feeRecipient     The address that receives the claimed fees.\n    /// @param claimedFees      The amount of fees claimed, after the claimer reward is deducted.\n    /// @param claimer          The address of the claimer (who called `claimFees`)\n    /// @param claimerReward    The reward paid to the claimer for calling the `claimFees` function.\n    event FeesClaimed(address feeRecipient, uint256 claimedFees, address claimer, uint256 claimerReward);\n}\n\n// contracts/events/SynapseExecutionServiceEvents.sol\n\n// TODO: regenerate `sin-executor` before redeployment\nabstract contract SynapseExecutionServiceEvents {\n    /// @notice Emitted when the executor EOA is set.\n    /// This address will be getting the execution fees that the service earns.\n    /// @param executorEOA   The address of the executor EOA.\n    event ExecutorEOASet(address executorEOA);\n\n    /// @notice Emitted when the gas oracle is set.\n    /// This gas oracle will be used to estimate the gas cost of the transactions.\n    /// @param gasOracle     The address of the gas oracle.\n    event GasOracleSet(address gasOracle);\n\n    /// @notice Emitted when the global markup is set. This markup will be added to the gas cost of the transactions.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    /// @param globalMarkup  The global markup value.\n    event GlobalMarkupSet(uint256 globalMarkup);\n\n    /// @notice Emitted when the execution of a transaction is requested.\n    /// @param transactionId The unique identifier of the transaction.\n    /// @param client        The address of the Interchain Client that requested the execution.\n    /// @param executionFee  The fee paid for the execution.\n    event ExecutionRequested(bytes32 indexed transactionId, address client, uint256 executionFee);\n}\n\n// contracts/interfaces/IClaimableFees.sol\n\ninterface IClaimableFees {\n    error ClaimableFees__ClaimerFractionAboveMax(uint256 claimerFraction, uint256 maxAllowed);\n    error ClaimableFees__FeeAmountZero();\n    error ClaimableFees__FeeRecipientZeroAddress();\n\n    function claimFees() external;\n\n    function getClaimableAmount() external view returns (uint256);\n    function getClaimerFraction() external view returns (uint256);\n    function getClaimerReward() external view returns (uint256);\n    function getFeeRecipient() external view returns (address);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IGasOracle.sol\n\ninterface IGasOracle {\n    /// @notice Convert a value from the native token of a remote chain to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param value                The value to convert.\n    function convertRemoteValueToLocalUnits(uint64 remoteChainId, uint256 value) external view returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and convert it to the local native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInLocalUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Estimate the cost of execution a transaction on a remote chain,\n    /// and return it as is in the remote chain's native token.\n    /// @dev Will revert if no price is available for the remote chain.\n    /// @param remoteChainId        The chain id of the remote chain.\n    /// @param gasLimit             The gas limit of the transaction.\n    /// @param calldataSize         The size of the transaction calldata.\n    function estimateTxCostInRemoteUnits(\n        uint64 remoteChainId,\n        uint256 gasLimit,\n        uint256 calldataSize\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// node_modules/@openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance \u003c amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance \u003c value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\n\n        if (!initialSetup \u0026\u0026 !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized \u003e= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n\n// contracts/interfaces/ISynapseExecutionServiceV1.sol\n\ninterface ISynapseExecutionServiceV1 is IExecutionService {\n    error SynapseExecutionService__ExecutorZeroAddress();\n    error SynapseExecutionService__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error SynapseExecutionService__GasOracleNotContract(address gasOracle);\n    error SynapseExecutionService__GasOracleZeroAddress();\n    error SynapseExecutionService__OptionsVersionNotSupported(uint16 version);\n\n    /// @notice Sets the fraction of the accumulated fees to be paid to caller of `claimFees`.\n    /// This encourages rational actors to call the function as soon as claim fee is higher than the gas cost.\n    /// @dev Could be only called by the owner. Could not exceed 1%.\n    /// @param claimerFraction  The fraction of the fees to be paid to the claimer (100% = 1e18)\n    function setClaimerFraction(uint256 claimerFraction) external;\n\n    /// @notice Allows the contract governor to set the address of the EOA account that will be used\n    /// to execute transactions on the remote chains.\n    function setExecutorEOA(address executorEOA_) external;\n\n    /// @notice Allows the contract governor to set the address of the gas oracle.\n    function setGasOracle(address gasOracle_) external;\n\n    /// @notice Allows the contract governor to set the global markup that the Execution Service charges\n    /// on top of the GasOracle's gas cost estimates.\n    function setGlobalMarkup(uint256 globalMarkup_) external;\n\n    /// @notice Address of the gas oracle used for estimating the gas cost of the transactions.\n    function gasOracle() external view returns (address);\n\n    /// @notice The markup that the Execution Service charges on top of the GasOracle's gas cost estimates.\n    /// Zero markup means that the Execution Service charges the exact gas cost estimated by the GasOracle.\n    /// The markup is denominated in Wei, 1e18 being 100%.\n    function globalMarkup() external view returns (uint256);\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// contracts/fees/ClaimableFees.sol\n\n/// @notice A simple abstraction for a contract that is collecting fees in native chain token.\n/// The claim process could be performed by anyone, but the fees will be sent to\n/// the predefined address. The claimer will receive a fraction of the fees to offset\n/// the gas costs.\n/// @dev The contract is implemented in a stateless way to allow the inheriting\n/// contract to be immutable or upgradeable.\nabstract contract ClaimableFees is ClaimableFeesEvents, IClaimableFees {\n    uint256 private constant FEE_PRECISION = 1e18;\n    /// @dev The maximum fraction that the claimer can receive is 1%.\n    uint256 internal constant MAX_CLAIMER_FRACTION = 1e16;\n\n    /// @notice Transfers the accumulated fees to the fee recipient.\n    /// Message caller receives a fraction of the fees as a reward to offset the gas costs.\n    /// The reward amount could be obtained by calling the `getClaimerReward` function beforehand.\n    /// @dev Will revert if the claimable amount is zero or the fee recipient is not set.\n    function claimFees() external {\n        uint256 amount = getClaimableAmount();\n        if (amount == 0) {\n            revert ClaimableFees__FeeAmountZero();\n        }\n        address recipient = getFeeRecipient();\n        if (recipient == address(0)) {\n            revert ClaimableFees__FeeRecipientZeroAddress();\n        }\n        // Subtract the claimer reward from the total amount\n        uint256 reward = _getClaimerReward(amount);\n        _beforeFeesClaimed(amount, reward);\n        // We can do unchecked subtraction because `getClaimerReward` ensures that `reward \u003c= amount * 0.01`\n        unchecked {\n            amount -= reward;\n        }\n        // Emit the event before transferring the fees\n        emit FeesClaimed(recipient, amount, msg.sender, reward);\n        Address.sendValue(payable(recipient), amount);\n        Address.sendValue(payable(msg.sender), reward);\n    }\n\n    /// @notice Returns the amount of native chain token that the claimer will receive\n    /// after calling the `claimFees` function.\n    function getClaimerReward() external view returns (uint256) {\n        uint256 amount = getClaimableAmount();\n        return _getClaimerReward(amount);\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual returns (uint256);\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual returns (uint256);\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual returns (address);\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    function _beforeFeesClaimed(uint256 fullAmount, uint256 reward) internal virtual;\n\n    /// @dev Returns the claimer reward for the given amount.\n    function _getClaimerReward(uint256 amount) internal view returns (uint256) {\n        uint256 fraction = getClaimerFraction();\n        if (fraction \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(fraction, MAX_CLAIMER_FRACTION);\n        }\n        // The returned value is in the range [0, amount * 0.01]\n        return (amount * fraction) / FEE_PRECISION;\n    }\n}\n\n// node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account =\u003e bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role =\u003e RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n// contracts/execution/SynapseExecutionServiceV1.sol\n\ncontract SynapseExecutionServiceV1 is\n    AccessControlUpgradeable,\n    ClaimableFees,\n    SynapseExecutionServiceEvents,\n    ISynapseExecutionServiceV1\n{\n    /// @custom:storage-location erc7201:Synapse.ExecutionService.V1\n    struct SynapseExecutionServiceV1Storage {\n        address executorEOA;\n        address gasOracle;\n        uint256 globalMarkup;\n        uint256 claimerFraction;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"Synapse.ExecutionService.V1\")) - 1)) \u0026 ~bytes32(uint256(0xff));\n    bytes32 private constant SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION =\n        0xabc861e0f8da03757893d41bb54770e6953c799ce2884f80d6b14b66ba8e3100;\n    uint256 private constant WAD = 10 ** 18;\n\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\n    bytes32 public constant IC_CLIENT_ROLE = keccak256(\"IC_CLIENT_ROLE\");\n\n    constructor() {\n        // Ensure that the implementation contract could not be initialized\n        _disableInitializers();\n    }\n\n    function initialize(address admin) external virtual initializer {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setClaimerFraction(uint256 claimerFraction_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (claimerFraction_ \u003e MAX_CLAIMER_FRACTION) {\n            revert ClaimableFees__ClaimerFractionAboveMax(claimerFraction_, MAX_CLAIMER_FRACTION);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.claimerFraction = claimerFraction_;\n        emit ClaimerFractionSet(claimerFraction_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setExecutorEOA(address executorEOA_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (executorEOA_ == address(0)) {\n            revert SynapseExecutionService__ExecutorZeroAddress();\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.executorEOA = executorEOA_;\n        emit ExecutorEOASet(executorEOA_);\n        emit FeeRecipientSet(executorEOA_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGasOracle(address gasOracle_) external virtual onlyRole(GOVERNOR_ROLE) {\n        if (gasOracle_.code.length == 0) {\n            revert SynapseExecutionService__GasOracleNotContract(gasOracle_);\n        }\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.gasOracle = gasOracle_;\n        emit GasOracleSet(gasOracle_);\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function setGlobalMarkup(uint256 globalMarkup_) external virtual onlyRole(GOVERNOR_ROLE) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        $.globalMarkup = globalMarkup_;\n        emit GlobalMarkupSet(globalMarkup_);\n    }\n\n    /// @inheritdoc IExecutionService\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes calldata options\n    )\n        external\n        payable\n        virtual\n        onlyRole(IC_CLIENT_ROLE)\n    {\n        uint256 requiredFee = getExecutionFee(dstChainId, txPayloadSize, options);\n        if (msg.value \u003c requiredFee) {\n            revert SynapseExecutionService__FeeAmountBelowMin({feeAmount: msg.value, minRequired: requiredFee});\n        }\n        emit ExecutionRequested({transactionId: transactionId, client: msg.sender, executionFee: msg.value});\n    }\n\n    /// @inheritdoc IExecutionService\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes calldata options\n    )\n        public\n        view\n        virtual\n        returns (uint256 executionFee)\n    {\n        address cachedGasOracle = gasOracle();\n        if (cachedGasOracle == address(0)) {\n            revert SynapseExecutionService__GasOracleZeroAddress();\n        }\n        // ExecutionServiceV1 implementation only supports Options V1.\n        // Following versions will be supported by the future implementations.\n        uint16 version = VersionedPayloadLib.getVersion(options);\n        if (version \u003e OptionsLib.OPTIONS_V1) {\n            revert SynapseExecutionService__OptionsVersionNotSupported(version);\n        }\n        OptionsV1 memory optionsV1 = OptionsLib.decodeOptionsV1(options);\n        executionFee = IGasOracle(cachedGasOracle).estimateTxCostInLocalUnits({\n            remoteChainId: dstChainId,\n            gasLimit: optionsV1.gasLimit,\n            calldataSize: txPayloadSize\n        });\n        if (optionsV1.gasAirdrop \u003e 0) {\n            executionFee += IGasOracle(cachedGasOracle).convertRemoteValueToLocalUnits({\n                remoteChainId: dstChainId,\n                value: optionsV1.gasAirdrop\n            });\n        }\n        executionFee += executionFee * globalMarkup() / WAD;\n    }\n\n    /// @inheritdoc IExecutionService\n    function executorEOA() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.executorEOA;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function gasOracle() public view virtual returns (address) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.gasOracle;\n    }\n\n    /// @inheritdoc ISynapseExecutionServiceV1\n    function globalMarkup() public view virtual returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.globalMarkup;\n    }\n\n    /// @notice Returns the amount of fees that can be claimed.\n    function getClaimableAmount() public view virtual override returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Returns the fraction of the fees that the claimer will receive.\n    /// The result is in the range [0, 1e18], where 1e18 is 100%.\n    function getClaimerFraction() public view virtual override returns (uint256) {\n        SynapseExecutionServiceV1Storage storage $ = _getSynapseExecutionServiceV1Storage();\n        return $.claimerFraction;\n    }\n\n    /// @notice Returns the address that will receive the claimed fees.\n    function getFeeRecipient() public view virtual override returns (address) {\n        return executorEOA();\n    }\n\n    /// @dev Hook that is called before the fees are claimed.\n    /// Useful if the inheriting contract needs to manage the state when the fees are claimed.\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeFeesClaimed(uint256, uint256) internal override {\n        // No op, as the claimable amount is tracked as the contract balance\n    }\n\n    /// @dev ERC-7201 slot accessor\n    function _getSynapseExecutionServiceV1Storage() private pure returns (SynapseExecutionServiceV1Storage storage $) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            $.slot := SYNAPSE_EXECUTION_SERVICE_V1_STORAGE_LOCATION\n        }\n    }\n}\n\n// test/harnesses/SynapseExecutionServiceV1Harness.sol\n\n// solhint-disable no-empty-blocks\n/// @notice This harness is supposed to be used IN TESTS ONLY.\n// DO NOT use this contract in production.\ncontract SynapseExecutionServiceV1Harness is SynapseExecutionServiceV1 {\n    constructor() {\n        // Grant the deployer all roles to simplify testing\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GOVERNOR_ROLE, msg.sender);\n    }\n\n    function _disableInitializers() internal override {\n        // No-op so that we can use the implementation w/o the proxy in Go tests\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"7010:3792:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;7010:3792:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"7010:3792:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"versionedPayload","type":"bytes"}],"name":"VersionedPayload__PayloadTooShort","type":"error"},{"inputs":[],"name":"VersionedPayload__PrecompileFailed","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedPayload\",\"type\":\"bytes\"}],\"name\":\"VersionedPayload__PayloadTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionedPayload__PrecompileFailed\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":\"VersionedPayloadLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseExecutionServiceV1Harness.sol\":{\"keccak256\":\"0x45f29e3395d3f4996e9e5eabdf6f1688e3203c688723cc15b6d2d50ec607f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5cb77a2e8b5e452608d52256b19a6a38e27334647203817e3fdd01a34ff14213\",\"dweb:/ipfs/QmaF3H36tqPsxXqfbT63ZsKHfGeEW7ccTjM1nfqtCAfS8t\"]}},\"version\":1}"},"hashes":{}}}
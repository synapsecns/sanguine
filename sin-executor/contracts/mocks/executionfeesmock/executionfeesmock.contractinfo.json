{"solidity/ExecutionFeesMock.sol:ExecutionFeesMock":{"code":"0x608060405234801561001057600080fd5b50610236806100206000396000f3fe6080604052600436106100705760003560e01c8063936fd4db1161004e578063936fd4db146100e9578063949813b8146100b5578063d01e09a61461010c578063ffecec7e1461014c57600080fd5b80630676b706146100755780634e497dac1461009757806373f273fc146100b5575b600080fd5b34801561008157600080fd5b50610095610090366004610187565b505050565b005b3480156100a357600080fd5b506100956100b23660046101bc565b50565b3480156100c157600080fd5b506100d66100d03660046101bc565b50600090565b6040519081526020015b60405180910390f35b3480156100f557600080fd5b506100d66101043660046101de565b600092915050565b34801561011857600080fd5b506101276101043660046101de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61009561015a3660046101de565b5050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018257600080fd5b919050565b60008060006060848603121561019c57600080fd5b83359250602084013591506101b36040850161015e565b90509250925092565b6000602082840312156101ce57600080fd5b6101d78261015e565b9392505050565b600080604083850312156101f157600080fd5b5050803592602090910135915056fea2646970667358221220ef14258c87c1c239dbc22292ee7e9a1d84e84da11d9f5b4accd54eb456f3093164736f6c63430008140033","runtime-code":"0x6080604052600436106100705760003560e01c8063936fd4db1161004e578063936fd4db146100e9578063949813b8146100b5578063d01e09a61461010c578063ffecec7e1461014c57600080fd5b80630676b706146100755780634e497dac1461009757806373f273fc146100b5575b600080fd5b34801561008157600080fd5b50610095610090366004610187565b505050565b005b3480156100a357600080fd5b506100956100b23660046101bc565b50565b3480156100c157600080fd5b506100d66100d03660046101bc565b50600090565b6040519081526020015b60405180910390f35b3480156100f557600080fd5b506100d66101043660046101de565b600092915050565b34801561011857600080fd5b506101276101043660046101de565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61009561015a3660046101de565b5050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018257600080fd5b919050565b60008060006060848603121561019c57600080fd5b83359250602084013591506101b36040850161015e565b90509250925092565b6000602082840312156101ce57600080fd5b6101d78261015e565b9392505050565b600080604083850312156101f157600080fd5b5050803592602090910135915056fea2646970667358221220ef14258c87c1c239dbc22292ee7e9a1d84e84da11d9f5b4accd54eb456f3093164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\n// solhint-disable no-empty-blocks\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees(address executor) external {}\n\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee) {}\n\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"3487:724:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"3487:724:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3631:96;;;;;;;;;;-1:-1:-1;3631:96:0;;;;;:::i;:::-;;;;;;;3733:57;;;;;;;;;;-1:-1:-1;3733:57:0;;;;;:::i;:::-;;;3796:92;;;;;;;;;;-1:-1:-1;3796:92:0;;;;;:::i;:::-;-1:-1:-1;3865:19:0;;3796:92;;;;879:25:1;;;867:2;852:18;3796:92:0;;;;;;;;3988:103;;;;;;;;;;-1:-1:-1;3988:103:0;;;;;:::i;:::-;4076:11;3988:103;;;;;4097:112;;;;;;;;;;-1:-1:-1;4097:112:0;;;;;:::i;:::-;;;1344:42:1;1332:55;;;1314:74;;1302:2;1287:18;4097:112:0;1168:226:1;3538:87:0;;;;;;:::i;:::-;;;;14:196:1;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:322::-;292:6;300;308;361:2;349:9;340:7;336:23;332:32;329:52;;;377:1;374;367:12;329:52;413:9;400:23;390:33;;470:2;459:9;455:18;442:32;432:42;;493:38;527:2;516:9;512:18;493:38;:::i;:::-;483:48;;215:322;;;;;:::o;542:186::-;601:6;654:2;642:9;633:7;629:23;625:32;622:52;;;670:1;667;660:12;622:52;693:29;712:9;693:29;:::i;:::-;683:39;542:186;-1:-1:-1;;;542:186:1:o;915:248::-;983:6;991;1044:2;1032:9;1023:7;1019:23;1015:32;1012:52;;;1060:1;1057;1050:12;1012:52;-1:-1:-1;;1083:23:1;;;1153:2;1138:18;;;1125:32;;-1:-1:-1;915:248:1:o","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionFees__AlreadyRecorded","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAddress","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAmount","type":"error"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"accumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"executionFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"recordedExecutor","outputs":[{"internalType":"address","name":"executor","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"accumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees(address)":{"notice":"Allows the executor to claim their unclaimed rewards."},"executionFee(uint256,bytes32)":{"notice":"Get the total execution fee for a transaction."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."},"recordedExecutor(uint256,bytes32)":{"notice":"Get the address of the recorded executor for a transaction."},"unclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"accumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees(address)":{"details":"Will revert if the executor has no unclaimed rewards."},"executionFee(uint256,bytes32)":{"params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the execution fee for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}},"recordedExecutor(uint256,bytes32)":{"details":"Will return address(0) if the executor is not recorded.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the recorded executor for."}},"unclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionFees__AlreadyRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"recordedExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees(address)\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the execution fee for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}},\"recordedExecutor(uint256,bytes32)\":{\"details\":\"Will return address(0) if the executor is not recorded.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the recorded executor for.\"}},\"unclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees(address)\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"notice\":\"Get the total execution fee for a transaction.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"},\"recordedExecutor(uint256,bytes32)\":{\"notice\":\"Get the address of the recorded executor for a transaction.\"},\"unclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionFeesMock.sol\":\"ExecutionFeesMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionFeesMock.sol\":{\"keccak256\":\"0xc7bc780701e7fc60d61f28c80fb249cbc86de96aff73aa9f8b32b3ebd6acf532\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed9703a7c1c6416b1c82ab25e4a67973c290486b6a19f401a750aefded7b67d8\",\"dweb:/ipfs/Qmb5uLVgT6oTzbtePCLM6fPdbqLmqfkECZPabEa188HUnB\"]}},\"version\":1}"},"hashes":{"accumulatedRewards(address)":"73f273fc","addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees(address)":"4e497dac","executionFee(uint256,bytes32)":"936fd4db","recordExecutor(uint256,bytes32,address)":"0676b706","recordedExecutor(uint256,bytes32)":"d01e09a6","unclaimedRewards(address)":"949813b8"}},"solidity/ExecutionFeesMock.sol:IExecutionFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\n// solhint-disable no-empty-blocks\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees(address executor) external {}\n\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee) {}\n\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionFees__AlreadyRecorded","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAddress","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAmount","type":"error"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"accumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"executionFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"recordedExecutor","outputs":[{"internalType":"address","name":"executor","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"accumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees(address)":{"notice":"Allows the executor to claim their unclaimed rewards."},"executionFee(uint256,bytes32)":{"notice":"Get the total execution fee for a transaction."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."},"recordedExecutor(uint256,bytes32)":{"notice":"Get the address of the recorded executor for a transaction."},"unclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"accumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees(address)":{"details":"Will revert if the executor has no unclaimed rewards."},"executionFee(uint256,bytes32)":{"params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the execution fee for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}},"recordedExecutor(uint256,bytes32)":{"details":"Will return address(0) if the executor is not recorded.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the recorded executor for."}},"unclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionFees__AlreadyRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"recordedExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees(address)\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the execution fee for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}},\"recordedExecutor(uint256,bytes32)\":{\"details\":\"Will return address(0) if the executor is not recorded.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the recorded executor for.\"}},\"unclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees(address)\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"notice\":\"Get the total execution fee for a transaction.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"},\"recordedExecutor(uint256,bytes32)\":{\"notice\":\"Get the address of the recorded executor for a transaction.\"},\"unclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionFeesMock.sol\":\"IExecutionFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionFeesMock.sol\":{\"keccak256\":\"0xc7bc780701e7fc60d61f28c80fb249cbc86de96aff73aa9f8b32b3ebd6acf532\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed9703a7c1c6416b1c82ab25e4a67973c290486b6a19f401a750aefded7b67d8\",\"dweb:/ipfs/Qmb5uLVgT6oTzbtePCLM6fPdbqLmqfkECZPabEa188HUnB\"]}},\"version\":1}"},"hashes":{"accumulatedRewards(address)":"73f273fc","addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees(address)":"4e497dac","executionFee(uint256,bytes32)":"936fd4db","recordExecutor(uint256,bytes32,address)":"0676b706","recordedExecutor(uint256,bytes32)":"d01e09a6","unclaimedRewards(address)":"949813b8"}}}
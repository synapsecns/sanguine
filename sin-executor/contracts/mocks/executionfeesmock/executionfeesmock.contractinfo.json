{"solidity/ExecutionfeesMock.sol:ExecutionFeesMock":{"code":"0x608060405234801561001057600080fd5b506101aa806100206000396000f3fe60806040526004361061005a5760003560e01c80635ee09669116100435780635ee096691461008d57806369a69e291461008d578063ffecec7e146100c057600080fd5b80630676b7061461005f57806310886ac414610081575b600080fd5b34801561006b57600080fd5b5061007f61007a3660046100fb565b505050565b005b34801561007f57600080fd5b34801561009957600080fd5b506100ae6100a8366004610130565b50600090565b60405190815260200160405180910390f35b61007f6100ce366004610152565b5050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100f657600080fd5b919050565b60008060006060848603121561011057600080fd5b8335925060208401359150610127604085016100d2565b90509250925092565b60006020828403121561014257600080fd5b61014b826100d2565b9392505050565b6000806040838503121561016557600080fd5b5050803592602090910135915056fea2646970667358221220a86f7bc8f1b15dbf063f62b92f027b8f75b3126747b9f94226d39da3394ec07d64736f6c63430008140033","runtime-code":"0x60806040526004361061005a5760003560e01c80635ee09669116100435780635ee096691461008d57806369a69e291461008d578063ffecec7e146100c057600080fd5b80630676b7061461005f57806310886ac414610081575b600080fd5b34801561006b57600080fd5b5061007f61007a3660046100fb565b505050565b005b34801561007f57600080fd5b34801561009957600080fd5b506100ae6100a8366004610130565b50600090565b60405190815260200160405180910390f35b61007f6100ce366004610152565b5050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100f657600080fd5b919050565b60008060006060848603121561011057600080fd5b8335925060208401359150610127604085016100d2565b90509250925092565b60006020828403121561014257600080fd5b61014b826100d2565b9392505050565b6000806040838503121561016557600080fd5b5050803592602090910135915056fea2646970667358221220a86f7bc8f1b15dbf063f62b92f027b8f75b3126747b9f94226d39da3394ec07d64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees() external {}\n\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"2490:487:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"2490:487:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2634:96;;;;;;;;;;-1:-1:-1;2634:96:0;;;;;:::i;:::-;;;;;;;2736:41;;;;;;;;;2783:95;;;;;;;;;;-1:-1:-1;2783:95:0;;;;;:::i;:::-;-1:-1:-1;2855:19:0;;2783:95;;;;879:25:1;;;867:2;852:18;2783:95:0;;;;;;;2541:87;;;;;;:::i;:::-;;;;14:196:1;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:322::-;292:6;300;308;361:2;349:9;340:7;336:23;332:32;329:52;;;377:1;374;367:12;329:52;413:9;400:23;390:33;;470:2;459:9;455:18;442:32;432:42;;493:38;527:2;516:9;512:18;493:38;:::i;:::-;483:48;;215:322;;;;;:::o;542:186::-;601:6;654:2;642:9;633:7;629:23;625:32;622:52;;;670:1;667;660:12;622:52;693:29;712:9;693:29;:::i;:::-;683:39;542:186;-1:-1:-1;;;542:186:1:o;915:248::-;983:6;991;1044:2;1032:9;1023:7;1019:23;1015:32;1012:52;;;1060:1;1057;1050:12;1012:52;-1:-1:-1;;1083:23:1;;;1153:2;1138:18;;;1125:32;;-1:-1:-1;915:248:1:o","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getAccumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getUnclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees()":{"notice":"Allows the executor to claim their unclaimed rewards."},"getAccumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"getUnclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees()":{"details":"Will revert if the executor has no unclaimed rewards."},"getAccumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"getUnclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getAccumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees()\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"getUnclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees()\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"getUnclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionfeesMock.sol\":\"ExecutionFeesMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionfeesMock.sol\":{\"keccak256\":\"0x34d9a215edc6889134ed69bdf83e455a688d7208242fe09d738c959ebd6e022c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b9977db1063eab29cd808a18ae80eeddec2383968904ad3d7897706fbd962e6\",\"dweb:/ipfs/QmSFqgc6zcbE8Zxfzzh6YVrB4DoWMVKBqcf56uyGhYWj32\"]}},\"version\":1}"},"hashes":{"addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees()":"10886ac4","getAccumulatedRewards(address)":"5ee09669","getUnclaimedRewards(address)":"69a69e29","recordExecutor(uint256,bytes32,address)":"0676b706"}},"solidity/ExecutionfeesMock.sol:IExecutionFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees() external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees() external {}\n\n    function getAccumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function getUnclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getAccumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"getUnclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees()":{"notice":"Allows the executor to claim their unclaimed rewards."},"getAccumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"getUnclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees()":{"details":"Will revert if the executor has no unclaimed rewards."},"getAccumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"getUnclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getAccumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees()\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"getUnclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees()\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"getAccumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"getUnclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionfeesMock.sol\":\"IExecutionFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionfeesMock.sol\":{\"keccak256\":\"0x34d9a215edc6889134ed69bdf83e455a688d7208242fe09d738c959ebd6e022c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b9977db1063eab29cd808a18ae80eeddec2383968904ad3d7897706fbd962e6\",\"dweb:/ipfs/QmSFqgc6zcbE8Zxfzzh6YVrB4DoWMVKBqcf56uyGhYWj32\"]}},\"version\":1}"},"hashes":{"addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees()":"10886ac4","getAccumulatedRewards(address)":"5ee09669","getUnclaimedRewards(address)":"69a69e29","recordExecutor(uint256,bytes32,address)":"0676b706"}}}
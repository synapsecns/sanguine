{"solidity/ExecutionFeesMock.sol:ExecutionFeesMock":{"code":"0x608060405234801561001057600080fd5b5061025d806100206000396000f3fe6080604052600436106100705760003560e01c80637b18c25c1161004e5780637b18c25c146100ec578063949813b8146100cb578063c2bc3357146100fe578063fd411b431461013e57600080fd5b80634e497dac14610075578063656a96d91461009557806373f273fc146100cb575b600080fd5b34801561008157600080fd5b50610093610090366004610187565b50565b005b3480156100a157600080fd5b506100b86100b03660046101c1565b600092915050565b6040519081526020015b60405180910390f35b3480156100d757600080fd5b506100b86100e6366004610187565b50600090565b6100936100fa3660046101c1565b5050565b34801561010a57600080fd5b506101196100b03660046101c1565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c2565b34801561014a57600080fd5b506100936101593660046101eb565b505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261015e565b9392505050565b803567ffffffffffffffff8116811461018257600080fd5b600080604083850312156101d457600080fd5b6101dd836101a9565b946020939093013593505050565b60008060006060848603121561020057600080fd5b610209846101a9565b92506020840135915061021e6040850161015e565b9050925092509256fea2646970667358221220eed4b061a2e1f9d5d4ec4069a18a2b9b43e9c4813a7e6f2f7639a225fb8120d064736f6c63430008140033","runtime-code":"0x6080604052600436106100705760003560e01c80637b18c25c1161004e5780637b18c25c146100ec578063949813b8146100cb578063c2bc3357146100fe578063fd411b431461013e57600080fd5b80634e497dac14610075578063656a96d91461009557806373f273fc146100cb575b600080fd5b34801561008157600080fd5b50610093610090366004610187565b50565b005b3480156100a157600080fd5b506100b86100b03660046101c1565b600092915050565b6040519081526020015b60405180910390f35b3480156100d757600080fd5b506100b86100e6366004610187565b50600090565b6100936100fa3660046101c1565b5050565b34801561010a57600080fd5b506101196100b03660046101c1565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c2565b34801561014a57600080fd5b506100936101593660046101eb565b505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261015e565b9392505050565b803567ffffffffffffffff8116811461018257600080fd5b600080604083850312156101d457600080fd5b6101dd836101a9565b946020939093013593505050565b60008060006060848603121561020057600080fd5b610209846101a9565b92506020840135915061021e6040850161015e565b9050925092509256fea2646970667358221220eed4b061a2e1f9d5d4ec4069a18a2b9b43e9c4813a7e6f2f7639a225fb8120d064736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint64 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint64 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint64 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint64 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint64 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\n// solhint-disable no-empty-blocks\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint64 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint64 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees(address executor) external {}\n\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n\n    function executionFee(uint64 dstChainId, bytes32 transactionId) external view returns (uint256 fee) {}\n\n    function recordedExecutor(uint64 dstChainId, bytes32 transactionId) external view returns (address executor) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"3482:720:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"3482:720:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3726:57;;;;;;;;;;-1:-1:-1;3726:57:0;;;;;:::i;:::-;;;;;3981:102;;;;;;;;;;-1:-1:-1;3981:102:0;;;;;:::i;:::-;4068:11;3981:102;;;;;;;;985:25:1;;;973:2;958:18;3981:102:0;;;;;;;;3789:92;;;;;;;;;;-1:-1:-1;3789:92:0;;;;;:::i;:::-;-1:-1:-1;3858:19:0;;3789:92;3533:86;;;;;;:::i;:::-;;;;4089:111;;;;;;;;;;-1:-1:-1;4089:111:0;;;;;:::i;:::-;;;1197:42:1;1185:55;;;1167:74;;1155:2;1140:18;4089:111:0;1021:226:1;3625:95:0;;;;;;;;;;-1:-1:-1;3625:95:0;;;;;:::i;:::-;;;;;14:196:1;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:186::-;274:6;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;366:29;385:9;366:29;:::i;:::-;356:39;215:186;-1:-1:-1;;;215:186:1:o;406:171::-;473:20;;533:18;522:30;;512:41;;502:69;;567:1;564;557:12;582:252;649:6;657;710:2;698:9;689:7;685:23;681:32;678:52;;;726:1;723;716:12;678:52;749:28;767:9;749:28;:::i;:::-;739:38;824:2;809:18;;;;796:32;;-1:-1:-1;;;582:252:1:o;1252:326::-;1328:6;1336;1344;1397:2;1385:9;1376:7;1372:23;1368:32;1365:52;;;1413:1;1410;1403:12;1365:52;1436:28;1454:9;1436:28;:::i;:::-;1426:38;;1511:2;1500:9;1496:18;1483:32;1473:42;;1534:38;1568:2;1557:9;1553:18;1534:38;:::i;:::-;1524:48;;1252:326;;;;;:::o","abiDefinition":[{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionFees__AlreadyRecorded","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAddress","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAmount","type":"error"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"accumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"executionFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"recordedExecutor","outputs":[{"internalType":"address","name":"executor","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"accumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"addExecutionFee(uint64,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees(address)":{"notice":"Allows the executor to claim their unclaimed rewards."},"executionFee(uint64,bytes32)":{"notice":"Get the total execution fee for a transaction."},"recordExecutor(uint64,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."},"recordedExecutor(uint64,bytes32)":{"notice":"Get the address of the recorded executor for a transaction."},"unclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"accumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"addExecutionFee(uint64,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees(address)":{"details":"Will revert if the executor has no unclaimed rewards."},"executionFee(uint64,bytes32)":{"params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the execution fee for."}},"recordExecutor(uint64,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}},"recordedExecutor(uint64,bytes32)":{"details":"Will return address(0) if the executor is not recorded.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the recorded executor for."}},"unclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionFees__AlreadyRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"recordedExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"addExecutionFee(uint64,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees(address)\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"executionFee(uint64,bytes32)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the execution fee for.\"}},\"recordExecutor(uint64,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}},\"recordedExecutor(uint64,bytes32)\":{\"details\":\"Will return address(0) if the executor is not recorded.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the recorded executor for.\"}},\"unclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"addExecutionFee(uint64,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees(address)\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"executionFee(uint64,bytes32)\":{\"notice\":\"Get the total execution fee for a transaction.\"},\"recordExecutor(uint64,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"},\"recordedExecutor(uint64,bytes32)\":{\"notice\":\"Get the address of the recorded executor for a transaction.\"},\"unclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionFeesMock.sol\":\"ExecutionFeesMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionFeesMock.sol\":{\"keccak256\":\"0xf0f82c55b2c09f5cea89df3ec42d21ade090180d696094c8e940bf71b9aa44f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45124fa60c0644308d439472496fdaf756495f85a03dcc0d3f4e1a53acfdf29\",\"dweb:/ipfs/Qma8HbPeFp6mZM8YWkezCiokSLZUSjGQuUXb5j8qi6sMSY\"]}},\"version\":1}"},"hashes":{"accumulatedRewards(address)":"73f273fc","addExecutionFee(uint64,bytes32)":"7b18c25c","claimExecutionFees(address)":"4e497dac","executionFee(uint64,bytes32)":"656a96d9","recordExecutor(uint64,bytes32,address)":"fd411b43","recordedExecutor(uint64,bytes32)":"c2bc3357","unclaimedRewards(address)":"949813b8"}},"solidity/ExecutionFeesMock.sol:IExecutionFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint64 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint64 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint64 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint64 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint64 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// test/mocks/ExecutionFeesMock.sol\n\n// solhint-disable no-empty-blocks\ncontract ExecutionFeesMock is IExecutionFees {\n    function addExecutionFee(uint64 dstChainId, bytes32 transactionId) external payable {}\n\n    function recordExecutor(uint64 dstChainId, bytes32 transactionId, address executor) external {}\n\n    function claimExecutionFees(address executor) external {}\n\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated) {}\n\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed) {}\n\n    function executionFee(uint64 dstChainId, bytes32 transactionId) external view returns (uint256 fee) {}\n\n    function recordedExecutor(uint64 dstChainId, bytes32 transactionId) external view returns (address executor) {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionFees__AlreadyRecorded","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAddress","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAmount","type":"error"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"accumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"executionFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"recordedExecutor","outputs":[{"internalType":"address","name":"executor","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"accumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"addExecutionFee(uint64,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees(address)":{"notice":"Allows the executor to claim their unclaimed rewards."},"executionFee(uint64,bytes32)":{"notice":"Get the total execution fee for a transaction."},"recordExecutor(uint64,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."},"recordedExecutor(uint64,bytes32)":{"notice":"Get the address of the recorded executor for a transaction."},"unclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"accumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"addExecutionFee(uint64,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees(address)":{"details":"Will revert if the executor has no unclaimed rewards."},"executionFee(uint64,bytes32)":{"params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the execution fee for."}},"recordExecutor(uint64,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}},"recordedExecutor(uint64,bytes32)":{"details":"Will return address(0) if the executor is not recorded.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the recorded executor for."}},"unclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionFees__AlreadyRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"recordedExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"addExecutionFee(uint64,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees(address)\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"executionFee(uint64,bytes32)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the execution fee for.\"}},\"recordExecutor(uint64,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}},\"recordedExecutor(uint64,bytes32)\":{\"details\":\"Will return address(0) if the executor is not recorded.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the recorded executor for.\"}},\"unclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"addExecutionFee(uint64,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees(address)\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"executionFee(uint64,bytes32)\":{\"notice\":\"Get the total execution fee for a transaction.\"},\"recordExecutor(uint64,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"},\"recordedExecutor(uint64,bytes32)\":{\"notice\":\"Get the address of the recorded executor for a transaction.\"},\"unclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionFeesMock.sol\":\"IExecutionFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionFeesMock.sol\":{\"keccak256\":\"0xf0f82c55b2c09f5cea89df3ec42d21ade090180d696094c8e940bf71b9aa44f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45124fa60c0644308d439472496fdaf756495f85a03dcc0d3f4e1a53acfdf29\",\"dweb:/ipfs/Qma8HbPeFp6mZM8YWkezCiokSLZUSjGQuUXb5j8qi6sMSY\"]}},\"version\":1}"},"hashes":{"accumulatedRewards(address)":"73f273fc","addExecutionFee(uint64,bytes32)":"7b18c25c","claimExecutionFees(address)":"4e497dac","executionFee(uint64,bytes32)":"656a96d9","recordExecutor(uint64,bytes32,address)":"fd411b43","recordedExecutor(uint64,bytes32)":"c2bc3357","unclaimedRewards(address)":"949813b8"}}}
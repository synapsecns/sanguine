{"solidity/ExecutionServiceMock.sol:ExecutionServiceMock":{"code":"0x608060405234801561001057600080fd5b50610290806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806362014bad14610046578063c473e7e814610090578063e4e06522146100b5575b600080fd5b6000546100669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a761009e3660046101a6565b60009392505050565b604051908152602001610087565b6100ca6100c33660046101f6565b5050505050565b005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261010c57600080fd5b813567ffffffffffffffff80821115610127576101276100cc565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561016d5761016d6100cc565b8160405283815286602085880101111561018657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156101bb57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156101e057600080fd5b6101ec868287016100fb565b9150509250925092565b600080600080600060a0868803121561020e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561024157600080fd5b61024d888289016100fb565b915050929550929590935056fea2646970667358221220c15c20205132b64aecd1865fd1e7602a4f626d5e1e0fd8064e46f96b970b8ecf64736f6c63430008140033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c806362014bad14610046578063c473e7e814610090578063e4e06522146100b5575b600080fd5b6000546100669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a761009e3660046101a6565b60009392505050565b604051908152602001610087565b6100ca6100c33660046101f6565b5050505050565b005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261010c57600080fd5b813567ffffffffffffffff80821115610127576101276100cc565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561016d5761016d6100cc565b8160405283815286602085880101111561018657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156101bb57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156101e057600080fd5b6101ec868287016100fb565b9150509250925092565b600080600080600060a0868803121561020e57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561024157600080fd5b61024d888289016100fb565b915050929550929590935056fea2646970667358221220c15c20205132b64aecd1865fd1e7602a4f626d5e1e0fd8064e46f96b970b8ecf64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    function executorEOA() external view returns (address);\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// test/mocks/ExecutionServiceMock.sol\n\ncontract ExecutionServiceMock is IExecutionService {\n    address public executorEOA;\n\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external\n    {}\n\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256)\n    {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"1995:485:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"1995:485:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:26;;;;;;;;;;;;190:42:1;178:55;;;160:74;;148:2;133:18;2052:26:0;;;;;;;;2296:182;;;;;;:::i;:::-;2463:7;2296:182;;;;;;;;;1823:25:1;;;1811:2;1796:18;2296:182:0;1677:177:1;2085:205:0;;;;;;:::i;:::-;;;;;;;;;245:184:1;297:77;294:1;287:88;394:4;391:1;384:15;418:4;415:1;408:15;434:777;476:5;529:3;522:4;514:6;510:17;506:27;496:55;;547:1;544;537:12;496:55;583:6;570:20;609:18;646:2;642;639:10;636:36;;;652:18;;:::i;:::-;786:2;780:9;848:4;840:13;;691:66;836:22;;;860:2;832:31;828:40;816:53;;;884:18;;;904:22;;;881:46;878:72;;;930:18;;:::i;:::-;970:10;966:2;959:22;1005:2;997:6;990:18;1051:3;1044:4;1039:2;1031:6;1027:15;1023:26;1020:35;1017:55;;;1068:1;1065;1058:12;1017:55;1132:2;1125:4;1117:6;1113:17;1106:4;1098:6;1094:17;1081:54;1179:1;1172:4;1167:2;1159:6;1155:15;1151:26;1144:37;1199:6;1190:15;;;;;;434:777;;;;:::o;1216:456::-;1302:6;1310;1318;1371:2;1359:9;1350:7;1346:23;1342:32;1339:52;;;1387:1;1384;1377:12;1339:52;1423:9;1410:23;1400:33;;1480:2;1469:9;1465:18;1452:32;1442:42;;1535:2;1524:9;1520:18;1507:32;1562:18;1554:6;1551:30;1548:50;;;1594:1;1591;1584:12;1548:50;1617:49;1658:7;1649:6;1638:9;1634:22;1617:49;:::i;:::-;1607:59;;;1216:456;;;;;:::o;1859:594::-;1963:6;1971;1979;1987;1995;2048:3;2036:9;2027:7;2023:23;2019:33;2016:53;;;2065:1;2062;2055:12;2016:53;2101:9;2088:23;2078:33;;2158:2;2147:9;2143:18;2130:32;2120:42;;2209:2;2198:9;2194:18;2181:32;2171:42;;2260:2;2249:9;2245:18;2232:32;2222:42;;2315:3;2304:9;2300:19;2287:33;2343:18;2335:6;2332:30;2329:50;;;2375:1;2372;2365:12;2329:50;2398:49;2439:7;2430:6;2419:9;2415:22;2398:49;:::i;:::-;2388:59;;;1859:594;;;;;;;;:::o","abiDefinition":[{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"executionFee","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestExecution","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getExecutionFee(uint256,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint256,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","executionFee":"The fee paid for the execution.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executionFee\":\"The fee paid for the execution.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionServiceMock.sol\":\"ExecutionServiceMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionServiceMock.sol\":{\"keccak256\":\"0xa5935b3eb2c60e4d0189746ffa6925c813f9ea7f13e7c58b413c224e73ceb8e1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6bf9ad704d73f4a97c1a1622ca5f85dc5f6de28e1f51bc28854d71c8ba2b787c\",\"dweb:/ipfs/QmdrU4ZnLqsBepPhFsWsUTmTE1U6YEPxhJpM26dvRAg99C\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","getExecutionFee(uint256,uint256,bytes)":"c473e7e8","requestExecution(uint256,uint256,bytes32,uint256,bytes)":"e4e06522"}},"solidity/ExecutionServiceMock.sol:IExecutionService":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    function executorEOA() external view returns (address);\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// test/mocks/ExecutionServiceMock.sol\n\ncontract ExecutionServiceMock is IExecutionService {\n    address public executorEOA;\n\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external\n    {}\n\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256)\n    {}\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"executionFee","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestExecution","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getExecutionFee(uint256,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint256,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","executionFee":"The fee paid for the execution.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executionFee\":\"The fee paid for the execution.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/ExecutionServiceMock.sol\":\"IExecutionService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/ExecutionServiceMock.sol\":{\"keccak256\":\"0xa5935b3eb2c60e4d0189746ffa6925c813f9ea7f13e7c58b413c224e73ceb8e1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6bf9ad704d73f4a97c1a1622ca5f85dc5f6de28e1f51bc28854d71c8ba2b787c\",\"dweb:/ipfs/QmdrU4ZnLqsBepPhFsWsUTmTE1U6YEPxhJpM26dvRAg99C\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","getExecutionFee(uint256,uint256,bytes)":"c473e7e8","requestExecution(uint256,uint256,bytes32,uint256,bytes)":"e4e06522"}}}
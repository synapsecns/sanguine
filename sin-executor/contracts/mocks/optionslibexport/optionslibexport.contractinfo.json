{"solidity/OptionsLibExport.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099c1cf64c7e5ed06baa9609a2766e1c65fa0749d737b52577dbe02bb3317d12164736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099c1cf64c7e5ed06baa9609a2766e1c65fa0749d737b52577dbe02bb3317d12164736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsV1 memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptionsV1(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsV1 memory) {\n        return OptionsLib.decodeOptionsV1(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"558:1958:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;558:1958:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"558:1958:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0x40681fcd75b4ff3a23b4d5e36b6d5aa6af760bdf60981d4902604acef23ba6f4\",\"urls\":[\"bzz-raw://3016b4c389af71503c268421dbd4e6c00106f788e017e9dacaae2918e27e23bb\",\"dweb:/ipfs/QmPuVecuQAq8qBmtj8CVN1DYisXDmRHKno7FHzgzLbyjb1\"]}},\"version\":1}"},"hashes":{}},"solidity/OptionsLibExport.sol:OptionsLibMocks":{"code":"0x608060405234801561001057600080fd5b5061058a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806382c947b714610046578063c551274c1461006c578063d5e788a01461008c575b600080fd5b610059610054366004610216565b6100ba565b6040519081526020015b60405180910390f35b61007f61007a3660046102fa565b6100da565b604051610063919061039a565b61009f61009a3660046103f3565b6100e5565b60408051825181526020928301519281019290925201610063565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b60606100d482610102565b60408051808201909152600080825260208201526100d482610140565b60606100d460018360405160200161012c9190815181526020918201519181019190915260400190565b6040516020818303038152906040526101c8565b6040805180820190915260008082526020820152600080610160846101f4565b9092509050600160ff831610156101ac576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff8316600482015260240160405180910390fd5b808060200190518101906101c09190610473565b949350505050565b606082826040516020016101dd9291906104a5565b604051602081830303815290604052905092915050565b600060608280602001905181019061020c91906104c1565b9094909350915050565b60006020828403121561022857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461024c57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102a5576102a5610253565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156102f2576102f2610253565b604052919050565b60006040828403121561030c57600080fd5b610314610282565b82358152602083013560208201528091505092915050565b60005b8381101561034757818101518382015260200161032f565b50506000910152565b6000815180845261036881602086016020860161032c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061024c6020830184610350565b600067ffffffffffffffff8211156103c7576103c7610253565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006020828403121561040557600080fd5b813567ffffffffffffffff81111561041c57600080fd5b8201601f8101841361042d57600080fd5b803561044061043b826103ad565b6102ab565b81815285602083850101111561045557600080fd5b81602084016020830137600091810160200191909152949350505050565b60006040828403121561048557600080fd5b61048d610282565b82518152602083015160208201528091505092915050565b60ff831681526040602082015260006101c06040830184610350565b600080604083850312156104d457600080fd5b825160ff811681146104e557600080fd5b602084015190925067ffffffffffffffff81111561050257600080fd5b8301601f8101851361051357600080fd5b805161052161043b826103ad565b81815286602083850101111561053657600080fd5b61054782602083016020860161032c565b809350505050925092905056fea26469706673582212202463c00749d5cfce7243b122dd48b445941f35e6a5787b616682ac876fd6214f64736f6c63430008140033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c806382c947b714610046578063c551274c1461006c578063d5e788a01461008c575b600080fd5b610059610054366004610216565b6100ba565b6040519081526020015b60405180910390f35b61007f61007a3660046102fa565b6100da565b604051610063919061039a565b61009f61009a3660046103f3565b6100e5565b60408051825181526020928301519281019290925201610063565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b60606100d482610102565b60408051808201909152600080825260208201526100d482610140565b60606100d460018360405160200161012c9190815181526020918201519181019190915260400190565b6040516020818303038152906040526101c8565b6040805180820190915260008082526020820152600080610160846101f4565b9092509050600160ff831610156101ac576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff8316600482015260240160405180910390fd5b808060200190518101906101c09190610473565b949350505050565b606082826040516020016101dd9291906104a5565b604051602081830303815290604052905092915050565b600060608280602001905181019061020c91906104c1565b9094909350915050565b60006020828403121561022857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461024c57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102a5576102a5610253565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156102f2576102f2610253565b604052919050565b60006040828403121561030c57600080fd5b610314610282565b82358152602083013560208201528091505092915050565b60005b8381101561034757818101518382015260200161032f565b50506000910152565b6000815180845261036881602086016020860161032c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061024c6020830184610350565b600067ffffffffffffffff8211156103c7576103c7610253565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006020828403121561040557600080fd5b813567ffffffffffffffff81111561041c57600080fd5b8201601f8101841361042d57600080fd5b803561044061043b826103ad565b6102ab565b81815285602083850101111561045557600080fd5b81602084016020830137600091810160200191909152949350505050565b60006040828403121561048557600080fd5b61048d610282565b82518152602083015160208201528091505092915050565b60ff831681526040602082015260006101c06040830184610350565b600080604083850312156104d457600080fd5b825160ff811681146104e557600080fd5b602084015190925067ffffffffffffffff81111561050257600080fd5b8301601f8101851361051357600080fd5b805161052161043b826103ad565b81815286602083850101111561053657600080fd5b61054782602083016020860161032c565b809350505050925092905056fea26469706673582212202463c00749d5cfce7243b122dd48b445941f35e6a5787b616682ac876fd6214f64736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsV1 memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptionsV1(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsV1 memory) {\n        return OptionsLib.decodeOptionsV1(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"2874:465:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"2874:465:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3197:140;;;;;;:::i;:::-;;:::i;:::-;;;474:25:1;;;462:2;447:18;3197:140:0;;;;;;;;2905:143;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3054:137::-;;;;;;:::i;:::-;;:::i;:::-;;;;3588:13:1;;3570:32;;3658:4;3646:17;;;3640:24;3618:20;;;3611:54;;;;3543:18;3054:137:0;3376:295:1;3197:140:0;3265:7;2672:22;;;3291:39;3284:46;3197:140;-1:-1:-1;;3197:140:0:o;2905:143::-;2975:12;3006:35;3033:7;3006:26;:35::i;3054:137::-;-1:-1:-1;;;;;;;;;;;;;;;;;3152:32:0;3179:4;3152:26;:32::i;1578:167::-;1652:12;1683:55;611:1;1729:7;1718:19;;;;;;;3588:13:1;;3570:32;;3658:4;3646:17;;;3640:24;3618:20;;;3611:54;;;;3558:2;3543:18;;3376:295;1718:19:0;;;;;;;;;;;;;1683:22;:55::i;1911:603::-;-1:-1:-1;;;;;;;;;;;;;;;;;2007:13:0;2022:20;2046:28;2069:4;2046:22;:28::i;:::-;2006:68;;-1:-1:-1;2006:68:0;-1:-1:-1;611:1:0;2088:20;;;;2084:95;;;2131:37;;;;;3848:4:1;3836:17;;2131:37:0;;;3818:36:1;3791:18;;2131:37:0;;;;;;;2084:95;2486:7;2475:32;;;;;;;;;;;;:::i;:::-;2468:39;1911:603;-1:-1:-1;;;;1911:603:0:o;845:158::-;937:12;979:7;988;968:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;961:35;;845:158;;;;:::o;1282:181::-;1356:13;1371:20;1435:4;1424:32;;;;;;;;;;;;:::i;:::-;1403:53;;;;-1:-1:-1;1282:181:0;-1:-1:-1;;1282:181:0:o;14:309:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;181:9;168:23;231:42;224:5;220:54;213:5;210:65;200:93;;289:1;286;279:12;200:93;312:5;14:309;-1:-1:-1;;;14:309:1:o;510:184::-;562:77;559:1;552:88;659:4;656:1;649:15;683:4;680:1;673:15;699:250;770:2;764:9;;;800:15;;845:18;830:34;;866:22;;;827:62;824:88;;;892:18;;:::i;:::-;928:2;921:22;699:250;:::o;954:334::-;1025:2;1019:9;1081:2;1071:13;;1086:66;1067:86;1055:99;;1184:18;1169:34;;1205:22;;;1166:62;1163:88;;;1231:18;;:::i;:::-;1267:2;1260:22;954:334;;-1:-1:-1;954:334:1:o;1293:341::-;1376:6;1429:2;1417:9;1408:7;1404:23;1400:32;1397:52;;;1445:1;1442;1435:12;1397:52;1471:21;;:::i;:::-;1528:9;1515:23;1508:5;1501:38;1599:2;1588:9;1584:18;1571:32;1566:2;1559:5;1555:14;1548:56;1623:5;1613:15;;;1293:341;;;;:::o;1639:250::-;1724:1;1734:113;1748:6;1745:1;1742:13;1734:113;;;1824:11;;;1818:18;1805:11;;;1798:39;1770:2;1763:10;1734:113;;;-1:-1:-1;;1881:1:1;1863:16;;1856:27;1639:250::o;1894:329::-;1935:3;1973:5;1967:12;2000:6;1995:3;1988:19;2016:76;2085:6;2078:4;2073:3;2069:14;2062:4;2055:5;2051:16;2016:76;:::i;:::-;2137:2;2125:15;2142:66;2121:88;2112:98;;;;2212:4;2108:109;;1894:329;-1:-1:-1;;1894:329:1:o;2228:217::-;2375:2;2364:9;2357:21;2338:4;2395:44;2435:2;2424:9;2420:18;2412:6;2395:44;:::i;2450:245::-;2498:4;2531:18;2523:6;2520:30;2517:56;;;2553:18;;:::i;:::-;-1:-1:-1;2610:2:1;2598:15;2615:66;2594:88;2684:4;2590:99;;2450:245::o;2700:671::-;2768:6;2821:2;2809:9;2800:7;2796:23;2792:32;2789:52;;;2837:1;2834;2827:12;2789:52;2877:9;2864:23;2910:18;2902:6;2899:30;2896:50;;;2942:1;2939;2932:12;2896:50;2965:22;;3018:4;3010:13;;3006:27;-1:-1:-1;2996:55:1;;3047:1;3044;3037:12;2996:55;3083:2;3070:16;3108:48;3124:31;3152:2;3124:31;:::i;:::-;3108:48;:::i;:::-;3179:2;3172:5;3165:17;3219:7;3214:2;3209;3205;3201:11;3197:20;3194:33;3191:53;;;3240:1;3237;3230:12;3191:53;3295:2;3290;3286;3282:11;3277:2;3270:5;3266:14;3253:45;3339:1;3318:14;;;3334:2;3314:23;3307:34;;;;3322:5;2700:671;-1:-1:-1;;;;2700:671:1:o;3865:338::-;3959:6;4012:2;4000:9;3991:7;3987:23;3983:32;3980:52;;;4028:1;4025;4018:12;3980:52;4054:21;;:::i;:::-;4104:9;4098:16;4091:5;4084:31;4168:2;4157:9;4153:18;4147:25;4142:2;4135:5;4131:14;4124:49;4192:5;4182:15;;;3865:338;;;;:::o;4208:295::-;4391:4;4383:6;4379:17;4368:9;4361:36;4433:2;4428;4417:9;4413:18;4406:30;4342:4;4453:44;4493:2;4482:9;4478:18;4470:6;4453:44;:::i;4508:797::-;4594:6;4602;4655:2;4643:9;4634:7;4630:23;4626:32;4623:52;;;4671:1;4668;4661:12;4623:52;4703:9;4697:16;4753:4;4746:5;4742:16;4735:5;4732:27;4722:55;;4773:1;4770;4763:12;4722:55;4845:2;4830:18;;4824:25;4796:5;;-1:-1:-1;4872:18:1;4861:30;;4858:50;;;4904:1;4901;4894:12;4858:50;4927:22;;4980:4;4972:13;;4968:27;-1:-1:-1;4958:55:1;;5009:1;5006;4999:12;4958:55;5038:2;5032:9;5063:48;5079:31;5107:2;5079:31;:::i;5063:48::-;5134:2;5127:5;5120:17;5174:7;5169:2;5164;5160;5156:11;5152:20;5149:33;5146:53;;;5195:1;5192;5185:12;5146:53;5208:67;5272:2;5267;5260:5;5256:14;5251:2;5247;5243:11;5208:67;:::i;:::-;5294:5;5284:15;;;;;4508:797;;;;;:::o","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"},{"inputs":[{"internalType":"address","name":"convertable","type":"address"}],"name":"addressToBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"decodeOptions","outputs":[{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsV1","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsV1","name":"options","type":"tuple"}],"name":"encodeOptions","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"convertable\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsV1\",\"name\":\"options\",\"type\":\"tuple\"}],\"name\":\"encodeOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"OptionsLibMocks\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0x40681fcd75b4ff3a23b4d5e36b6d5aa6af760bdf60981d4902604acef23ba6f4\",\"urls\":[\"bzz-raw://3016b4c389af71503c268421dbd4e6c00106f788e017e9dacaae2918e27e23bb\",\"dweb:/ipfs/QmPuVecuQAq8qBmtj8CVN1DYisXDmRHKno7FHzgzLbyjb1\"]}},\"version\":1}"},"hashes":{"addressToBytes32(address)":"82c947b7","decodeOptions(bytes)":"d5e788a0","encodeOptions((uint256,uint256))":"c551274c"}},"solidity/OptionsLibExport.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0cfd1c9580b34a2c8b114d4320fa6c26056bbc32401197e5fbbdfc3e3e86e2a64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a0cfd1c9580b34a2c8b114d4320fa6c26056bbc32401197e5fbbdfc3e3e86e2a64736f6c63430008140033","info":{"source":"pragma solidity =0.8.20 ^0.8.0 ^0.8.13;\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/mocks/OptionsLibExport.sol\n\ncontract OptionsLibMocks {\n    function encodeOptions(OptionsV1 memory options) public view returns (bytes memory) {\n        return OptionsLib.encodeOptionsV1(options);\n    }\n\n    function decodeOptions(bytes memory data) public view returns (OptionsV1 memory) {\n        return OptionsLib.decodeOptionsV1(data);\n    }\n\n    function addressToBytes32(address convertable) public view returns (bytes32) {\n        return TypeCasts.addressToBytes32(convertable);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"2551:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;2551:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"2551:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/OptionsLibExport.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/OptionsLibExport.sol\":{\"keccak256\":\"0x40681fcd75b4ff3a23b4d5e36b6d5aa6af760bdf60981d4902604acef23ba6f4\",\"urls\":[\"bzz-raw://3016b4c389af71503c268421dbd4e6c00106f788e017e9dacaae2918e27e23bb\",\"dweb:/ipfs/QmPuVecuQAq8qBmtj8CVN1DYisXDmRHKno7FHzgzLbyjb1\"]}},\"version\":1}"},"hashes":{}}}
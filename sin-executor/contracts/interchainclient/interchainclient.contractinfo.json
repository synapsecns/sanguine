{"solidity/InterchainClientV1.sol:AppConfigLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f26782160e7d471735a7bfe4455ee81b40ee828a375617585f7d0dc6dc40ed564736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f26782160e7d471735a7bfe4455ee81b40ee828a375617585f7d0dc6dc40ed564736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"48197:1271:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;48197:1271:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"48197:1271:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"AppConfigLib__VersionInvalid","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"AppConfigLib__VersionInvalid\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"AppConfigLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:BatchingV1Lib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fb07fa8fbb36c550f6f0d69a88148206991137aa3f0cd4383cd6dbf2d6567ebb64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fb07fa8fbb36c550f6f0d69a88148206991137aa3f0cd4383cd6dbf2d6567ebb64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"59635:1219:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;59635:1219:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"59635:1219:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"BatchingV1__EntryIndexNotZero","type":"error"},{"inputs":[],"name":"BatchingV1__ProofNotEmpty","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"BatchingV1__EntryIndexNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchingV1__ProofNotEmpty\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"BatchingV1Lib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:IExecutionService":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestTxExecution","outputs":[],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"getExecutionFee(uint64,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`"}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint64,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestTxExecution(uint64,uint256,bytes32,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestTxExecution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint64,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"getExecutionFee(uint64,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestTxExecution(uint64,uint256,bytes32,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain in exchange for the execution fee, attached to the transaction as `msg.value`. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IExecutionService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","getExecutionFee(uint64,uint256,bytes)":"96fda4da","requestTxExecution(uint64,uint256,bytes32,bytes)":"58efb47d"}},"solidity/InterchainClientV1.sol:IInterchainApp":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"appReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getReceivingConfig","outputs":[{"internalType":"bytes","name":"appConfig","type":"bytes"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"appReceive(uint64,bytes32,uint64,uint64,bytes)":{"notice":"Allows the Interchain Client to pass the message to the Interchain App."},"getReceivingConfig()":{"notice":"Returns the verification configuration of the Interchain App."}},"notice":"Minimal interface for the Interchain App to work with the Interchain Client.","version":1},"developerDoc":{"kind":"dev","methods":{"appReceive(uint64,bytes32,uint64,uint64,bytes)":{"details":"App is responsible for keeping track of interchain clients, and must verify the message sender.","params":{"dbNonce":"The Interchain DB nonce of the batch containing the message entry.","entryIndex":"The index of the message entry within the batch.","message":"The message being sent.","sender":"Sender address on the source chain, as a bytes32 value.","srcChainId":"Chain ID of the source chain, where the message was sent from."}},"getReceivingConfig()":{"details":"This configuration is used by the Interchain Client to verify that message has been confirmed by the Interchain Modules on the destination chain. Note: V1 version of AppConfig includes the required responses count, and optimistic period after which the message is considered confirmed by the module. Following versions may include additional fields.","returns":{"appConfig":"   The versioned configuration of the Interchain App, encoded as bytes.","modules":"     The list of Interchain Modules that app is trusting to confirm the messages."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"appConfig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appReceive(uint64,bytes32,uint64,uint64,bytes)\":{\"details\":\"App is responsible for keeping track of interchain clients, and must verify the message sender.\",\"params\":{\"dbNonce\":\"The Interchain DB nonce of the batch containing the message entry.\",\"entryIndex\":\"The index of the message entry within the batch.\",\"message\":\"The message being sent.\",\"sender\":\"Sender address on the source chain, as a bytes32 value.\",\"srcChainId\":\"Chain ID of the source chain, where the message was sent from.\"}},\"getReceivingConfig()\":{\"details\":\"This configuration is used by the Interchain Client to verify that message has been confirmed by the Interchain Modules on the destination chain. Note: V1 version of AppConfig includes the required responses count, and optimistic period after which the message is considered confirmed by the module. Following versions may include additional fields.\",\"returns\":{\"appConfig\":\"   The versioned configuration of the Interchain App, encoded as bytes.\",\"modules\":\"     The list of Interchain Modules that app is trusting to confirm the messages.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"appReceive(uint64,bytes32,uint64,uint64,bytes)\":{\"notice\":\"Allows the Interchain Client to pass the message to the Interchain App.\"},\"getReceivingConfig()\":{\"notice\":\"Returns the verification configuration of the Interchain App.\"}},\"notice\":\"Minimal interface for the Interchain App to work with the Interchain Client.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainApp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"appReceive(uint64,bytes32,uint64,uint64,bytes)":"6e9fd609","getReceivingConfig()":"287bc057"}},"solidity/InterchainClientV1.sol:IInterchainClientV1":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"InterchainClientV1__BatchConflict","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__ChainIdNotLinked","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__ChainIdNotRemote","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__DstChainIdNotLocal","type":"error"},{"inputs":[],"name":"InterchainClientV1__ExecutionServiceZeroAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__FeeAmountBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"gasLeft","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__GasLeftBelowMin","type":"error"},{"inputs":[],"name":"InterchainClientV1__GuardZeroAddress","type":"error"},{"inputs":[{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"InterchainClientV1__LinkedClientNotEVM","type":"error"},{"inputs":[{"internalType":"uint256","name":"msgValue","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__MsgValueMismatch","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"InterchainClientV1__ReceiverNotICApp","type":"error"},{"inputs":[],"name":"InterchainClientV1__ReceiverZeroAddress","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"InterchainClientV1__ReceiverZeroRequiredResponses","type":"error"},{"inputs":[{"internalType":"uint256","name":"responsesAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__ResponsesAmountBelowMin","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxAlreadyExecuted","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxNotExecuted","type":"error"},{"inputs":[{"internalType":"uint16","name":"txVersion","type":"uint16"},{"internalType":"uint16","name":"required","type":"uint16"}],"name":"InterchainClientV1__TxVersionMismatch","type":"error"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"getExecutor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"getExecutorById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"uint256","name":"messageLen","type":"uint256"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"getLinkedClient","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"getLinkedClientEVM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct InterchainTransaction","name":"icTx","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"getTxReadinessV1","outputs":[{"internalType":"enum IInterchainClientV1.TxReadiness","name":"status","type":"uint8"},{"internalType":"bytes32","name":"firstArg","type":"bytes32"},{"internalType":"bytes32","name":"secondArg","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSendEVM","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"guard_","type":"address"}],"name":"setDefaultGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"writeExecutionProof","outputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getExecutor(bytes)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getExecutorById(bytes32)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getInterchainFee(uint64,address,address[],bytes,uint256)":{"notice":"Returns the fee for sending an Interchain message."},"getLinkedClient(uint64)":{"notice":"Returns the address of the linked client (as bytes32) for a specific chain ID."},"getLinkedClientEVM(uint64)":{"notice":"Returns the EVM address of the linked client for a specific chain ID."},"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":{"notice":"Returns the readiness status of a transaction to be executed."},"interchainExecute(uint256,bytes,bytes32[])":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint64,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"isExecutable(bytes,bytes32[])":{"notice":"Checks if a transaction is executable."},"setDefaultGuard(address)":{"notice":"Allows the contract owner to set the address of the Guard module. Note: batches marked as invalid by the Guard could not be used for message execution, if the app opts in to use the Guard."},"setLinkedClient(uint64,bytes32)":{"notice":"Sets the linked client for a specific chain ID."},"writeExecutionProof(bytes32)":{"notice":"Writes the proof of execution for a transaction into the InterchainDB."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getInterchainFee(uint64,address,address[],bytes,uint256)":{"params":{"dstChainId":"The chain ID of the destination chain.","messageLen":"The length of the message being sent.","options":"Execution options for the message sent, currently gas limit + native gas drop.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"getLinkedClient(uint64)":{"details":"Will return 0x0 if no client is linked for the chain ID."},"getLinkedClientEVM(uint64)":{"details":"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client."},"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":{"details":"Some of the possible statuses have additional arguments that are returned: - Ready: the transaction is ready to be executed. - AlreadyExecuted: the transaction has already been executed.   - `firstArg` is the transaction ID. - BatchAwaitingResponses: not enough responses have been received for the transaction.   - `firstArg` is the number of responses received.   - `secondArg` is the number of responses required. - BatchConflict: one of the modules have submitted a conflicting batch.   - `firstArg` is the address of the module.   - This is either one of the modules that the app trusts, or the Guard module used by the app. - ReceiverNotICApp: the receiver is not an Interchain app.  - `firstArg` is the receiver address. - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction. - TxWrongDstChainId: the destination chain ID does not match the local chain ID.   - `firstArg` is the destination chain ID. - UndeterminedRevert: the transaction will revert for another reason. Note: the arguments are abi-encoded bytes32 values (as their types could be different)."},"interchainExecute(uint256,bytes,bytes32[])":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The transaction data."}},"interchainSend(uint64,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."},"returns":{"desc":"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch."}},"isExecutable(bytes,bytes32[])":{"details":"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules","params":{"proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The InterchainTransaction struct to be checked."},"returns":{"_0":"bool Returns true if the transaction is executable, false otherwise."}},"setDefaultGuard(address)":{"params":{"guard_":"The address of the Guard module."}},"setLinkedClient(uint64,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"writeExecutionProof(bytes32)":{"details":"Will revert if the transaction has not been executed.","params":{"transactionId":"The ID of the transaction to write the proof for."},"returns":{"dbNonce":"        The database nonce of the batch containing the written proof for transaction.","entryIndex":"     The index of the written proof for transaction within the batch."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__BatchConflict\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__ChainIdNotLinked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__ChainIdNotRemote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__DstChainIdNotLocal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ExecutionServiceZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__GasLeftBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__GuardZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__LinkedClientNotEVM\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__MsgValueMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__ReceiverNotICApp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ReceiverZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__ReceiverZeroRequiredResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"responsesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__ResponsesAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxNotExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"required\",\"type\":\"uint16\"}],\"name\":\"InterchainClientV1__TxVersionMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getExecutorById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"messageLen\",\"type\":\"uint256\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLinkedClient\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLinkedClientEVM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct InterchainTransaction\",\"name\":\"icTx\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"getTxReadinessV1\",\"outputs\":[{\"internalType\":\"enum IInterchainClientV1.TxReadiness\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSendEVM\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard_\",\"type\":\"address\"}],\"name\":\"setDefaultGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"writeExecutionProof\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getInterchainFee(uint64,address,address[],bytes,uint256)\":{\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"messageLen\":\"The length of the message being sent.\",\"options\":\"Execution options for the message sent, currently gas limit + native gas drop.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"getLinkedClient(uint64)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID.\"},\"getLinkedClientEVM(uint64)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client.\"},\"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])\":{\"details\":\"Some of the possible statuses have additional arguments that are returned: - Ready: the transaction is ready to be executed. - AlreadyExecuted: the transaction has already been executed.   - `firstArg` is the transaction ID. - BatchAwaitingResponses: not enough responses have been received for the transaction.   - `firstArg` is the number of responses received.   - `secondArg` is the number of responses required. - BatchConflict: one of the modules have submitted a conflicting batch.   - `firstArg` is the address of the module.   - This is either one of the modules that the app trusts, or the Guard module used by the app. - ReceiverNotICApp: the receiver is not an Interchain app.  - `firstArg` is the receiver address. - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction. - TxWrongDstChainId: the destination chain ID does not match the local chain ID.   - `firstArg` is the destination chain ID. - UndeterminedRevert: the transaction will revert for another reason. Note: the arguments are abi-encoded bytes32 values (as their types could be different).\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint64,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"},\"returns\":{\"desc\":\"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch.\"}},\"isExecutable(bytes,bytes32[])\":{\"details\":\"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules\",\"params\":{\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The InterchainTransaction struct to be checked.\"},\"returns\":{\"_0\":\"bool Returns true if the transaction is executable, false otherwise.\"}},\"setDefaultGuard(address)\":{\"params\":{\"guard_\":\"The address of the Guard module.\"}},\"setLinkedClient(uint64,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"writeExecutionProof(bytes32)\":{\"details\":\"Will revert if the transaction has not been executed.\",\"params\":{\"transactionId\":\"The ID of the transaction to write the proof for.\"},\"returns\":{\"dbNonce\":\"        The database nonce of the batch containing the written proof for transaction.\",\"entryIndex\":\"     The index of the written proof for transaction within the batch.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutor(bytes)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getExecutorById(bytes32)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getInterchainFee(uint64,address,address[],bytes,uint256)\":{\"notice\":\"Returns the fee for sending an Interchain message.\"},\"getLinkedClient(uint64)\":{\"notice\":\"Returns the address of the linked client (as bytes32) for a specific chain ID.\"},\"getLinkedClientEVM(uint64)\":{\"notice\":\"Returns the EVM address of the linked client for a specific chain ID.\"},\"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])\":{\"notice\":\"Returns the readiness status of a transaction to be executed.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint64,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"isExecutable(bytes,bytes32[])\":{\"notice\":\"Checks if a transaction is executable.\"},\"setDefaultGuard(address)\":{\"notice\":\"Allows the contract owner to set the address of the Guard module. Note: batches marked as invalid by the Guard could not be used for message execution, if the app opts in to use the Guard.\"},\"setLinkedClient(uint64,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"},\"writeExecutionProof(bytes32)\":{\"notice\":\"Writes the proof of execution for a transaction into the InterchainDB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"getExecutor(bytes)":"f92a79ff","getExecutorById(bytes32)":"f1a61fac","getInterchainFee(uint64,address,address[],bytes,uint256)":"cbb3c631","getLinkedClient(uint64)":"2e568739","getLinkedClientEVM(uint64)":"35c4a191","getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":"c8cf9348","interchainExecute(uint256,bytes,bytes32[])":"53b67d74","interchainSend(uint64,bytes32,address,address[],bytes,bytes)":"547efb84","interchainSendEVM(uint64,address,address,address[],bytes,bytes)":"3f34448e","isExecutable(bytes,bytes32[])":"1450c281","setDefaultGuard(address)":"94bf49f4","setLinkedClient(uint64,bytes32)":"f3c66e2b","writeExecutionProof(bytes32)":"90e81077"}},"solidity/InterchainClientV1.sol:IInterchainDB":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes32","name":"existingBatchRoot","type":"bytes32"},{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"newBatch","type":"tuple"}],"name":"InterchainDB__BatchConflict","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"},{"internalType":"uint16","name":"required","type":"uint16"}],"name":"InterchainDB__BatchVersionMismatch","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainDB__ChainIdNotRemote","type":"error"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"uint64","name":"batchSize","type":"uint64"}],"name":"InterchainDB__EntryIndexOutOfRange","type":"error"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"InterchainDB__EntryRangeInvalid","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainDB__FeeAmountBelowMin","type":"error"},{"inputs":[],"name":"InterchainDB__ModulesNotProvided","type":"error"},{"inputs":[],"name":"DB_VERSION","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"batch","type":"tuple"}],"name":"checkBatchVerification","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"}],"name":"getBatch","outputs":[{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"}],"name":"getBatchLeafs","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"getBatchLeafsPaginated","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"getBatchRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"}],"name":"getBatchSize","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDBNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntryProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntryValue","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNextEntryIndex","outputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"}],"name":"getVersionedBatch","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestBatchVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"versionedBatch","type":"bytes"}],"name":"verifyRemoteBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"DB_VERSION()":{"notice":"Get the version of the Interchain DataBase."},"checkBatchVerification(address,(uint64,uint64,bytes32))":{"notice":"Check if the batch is verified by the Interchain Module on the destination chain. Note: returned zero value indicates that the module has not verified the batch."},"getBatch(uint64)":{"notice":"Get the finalized Interchain Batch with the given nonce."},"getBatchLeafs(uint64)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together)."},"getBatchLeafsPaginated(uint64,uint64,uint64)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error."},"getBatchRoot((uint64,uint64,uint64,bytes32,bytes32),bytes32[])":{"notice":"Get the batch root containing the Interchain Entry with the given index."},"getBatchSize(uint64)":{"notice":"Returns the size of the finalized batch with the given nonce."},"getDBNonce()":{"notice":"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch."},"getEntryProof(uint64,uint64)":{"notice":"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce."},"getEntryValue(uint64,uint64)":{"notice":"Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index. Entry value is calculated as the hash of the writer address and the written data hash. Note: the batch does not have to be finalized to fetch the entry value."},"getInterchainFee(uint64,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"getNextEntryIndex()":{"notice":"Get the index of the next entry to be written to the database."},"getVersionedBatch(uint64)":{"notice":"Get the versioned Interchain Batch with the given nonce. Note: will return a batch with an empty root if the batch does not exist, or is not finalized."},"requestBatchVerification(uint64,uint64,address[])":{"notice":"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch."},"verifyRemoteBatch(bytes)":{"notice":"Allows the Interchain Module to verify the batch coming from the remote chain. The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is finalized, the module SHOULD re-verify the batch with the correct root value. Note: The DB will only accept the batch of the same version as the DB itself."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint64,bytes32,address[])":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details."}},"version":1},"developerDoc":{"kind":"dev","methods":{"checkBatchVerification(address,(uint64,uint64,bytes32))":{"params":{"batch":"The Interchain Batch to check","dstModule":"The destination chain addresses of the Interchain Modules to use for verification"},"returns":{"moduleVerifiedAt":"   The block timestamp at which the batch was verified by the module,                             or ZERO if the module has not verified the batch."}},"getBatch(uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafs(uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafsPaginated(uint64,uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.","params":{"dbNonce":"The database nonce of the finalized batch","end":"The end index of the paginated leafs, exclusive","start":"The start index of the paginated leafs, inclusive"}},"getBatchRoot((uint64,uint64,uint64,bytes32,bytes32),bytes32[])":{"params":{"entry":"The Interchain Entry to get the batch root for","proof":"The Merkle proof of inclusion for the entry in the batch"}},"getBatchSize(uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getEntryProof(uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the finalized batch","entryIndex":"The index of the written entry within the batch"},"returns":{"proof":"      The Merkle proof of inclusion for the entry"}},"getEntryValue(uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the existing batch","entryIndex":"The index of the written entry within the batch"}},"getInterchainFee(uint64,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"getNextEntryIndex()":{"returns":{"dbNonce":"     The database nonce of the batch including the next entry","entryIndex":"  The index of the next entry within that batch"}},"getVersionedBatch(uint64)":{"params":{"dbNonce":"The database nonce of the batch"}},"requestBatchVerification(uint64,uint64,address[])":{"details":"Will revert if the batch with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the existing batch","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"verifyRemoteBatch(bytes)":{"details":"Will revert if the batch with the same nonce but a different non-empty root is already verified.","params":{"versionedBatch":"The versioned Interchain Batch to verify"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}},"writeEntryWithVerification(uint64,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"existingBatchRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"newBatch\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__BatchConflict\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"required\",\"type\":\"uint16\"}],\"name\":\"InterchainDB__BatchVersionMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__ChainIdNotRemote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"batchSize\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__EntryIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__EntryRangeInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__ModulesNotProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DB_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"checkBatchVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"}],\"name\":\"getBatchLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"getBatchLeafsPaginated\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"getBatchRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"}],\"name\":\"getBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDBNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntryProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntryValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEntryIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"}],\"name\":\"getVersionedBatch\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestBatchVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedBatch\",\"type\":\"bytes\"}],\"name\":\"verifyRemoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBatchVerification(address,(uint64,uint64,bytes32))\":{\"params\":{\"batch\":\"The Interchain Batch to check\",\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"moduleVerifiedAt\":\"   The block timestamp at which the batch was verified by the module,                             or ZERO if the module has not verified the batch.\"}},\"getBatch(uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafs(uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafsPaginated(uint64,uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"end\":\"The end index of the paginated leafs, exclusive\",\"start\":\"The start index of the paginated leafs, inclusive\"}},\"getBatchRoot((uint64,uint64,uint64,bytes32,bytes32),bytes32[])\":{\"params\":{\"entry\":\"The Interchain Entry to get the batch root for\",\"proof\":\"The Merkle proof of inclusion for the entry in the batch\"}},\"getBatchSize(uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getEntryProof(uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"entryIndex\":\"The index of the written entry within the batch\"},\"returns\":{\"proof\":\"      The Merkle proof of inclusion for the entry\"}},\"getEntryValue(uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"entryIndex\":\"The index of the written entry within the batch\"}},\"getInterchainFee(uint64,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"getNextEntryIndex()\":{\"returns\":{\"dbNonce\":\"     The database nonce of the batch including the next entry\",\"entryIndex\":\"  The index of the next entry within that batch\"}},\"getVersionedBatch(uint64)\":{\"params\":{\"dbNonce\":\"The database nonce of the batch\"}},\"requestBatchVerification(uint64,uint64,address[])\":{\"details\":\"Will revert if the batch with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"verifyRemoteBatch(bytes)\":{\"details\":\"Will revert if the batch with the same nonce but a different non-empty root is already verified.\",\"params\":{\"versionedBatch\":\"The versioned Interchain Batch to verify\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}},\"writeEntryWithVerification(uint64,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DB_VERSION()\":{\"notice\":\"Get the version of the Interchain DataBase.\"},\"checkBatchVerification(address,(uint64,uint64,bytes32))\":{\"notice\":\"Check if the batch is verified by the Interchain Module on the destination chain. Note: returned zero value indicates that the module has not verified the batch.\"},\"getBatch(uint64)\":{\"notice\":\"Get the finalized Interchain Batch with the given nonce.\"},\"getBatchLeafs(uint64)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\"},\"getBatchLeafsPaginated(uint64,uint64,uint64)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error.\"},\"getBatchRoot((uint64,uint64,uint64,bytes32,bytes32),bytes32[])\":{\"notice\":\"Get the batch root containing the Interchain Entry with the given index.\"},\"getBatchSize(uint64)\":{\"notice\":\"Returns the size of the finalized batch with the given nonce.\"},\"getDBNonce()\":{\"notice\":\"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch.\"},\"getEntryProof(uint64,uint64)\":{\"notice\":\"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce.\"},\"getEntryValue(uint64,uint64)\":{\"notice\":\"Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index. Entry value is calculated as the hash of the writer address and the written data hash. Note: the batch does not have to be finalized to fetch the entry value.\"},\"getInterchainFee(uint64,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"getNextEntryIndex()\":{\"notice\":\"Get the index of the next entry to be written to the database.\"},\"getVersionedBatch(uint64)\":{\"notice\":\"Get the versioned Interchain Batch with the given nonce. Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\"},\"requestBatchVerification(uint64,uint64,address[])\":{\"notice\":\"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch.\"},\"verifyRemoteBatch(bytes)\":{\"notice\":\"Allows the Interchain Module to verify the batch coming from the remote chain. The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is finalized, the module SHOULD re-verify the batch with the correct root value. Note: The DB will only accept the batch of the same version as the DB itself.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint64,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"DB_VERSION()":"15f53956","checkBatchVerification(address,(uint64,uint64,bytes32))":"e39682c1","getBatch(uint64)":"888775d9","getBatchLeafs(uint64)":"fc1ebc91","getBatchLeafsPaginated(uint64,uint64,uint64)":"1c679ac1","getBatchRoot((uint64,uint64,uint64,bytes32,bytes32),bytes32[])":"0166204f","getBatchSize(uint64)":"727a5f91","getDBNonce()":"f338140e","getEntryProof(uint64,uint64)":"fec8dfb9","getEntryValue(uint64,uint64)":"d180db6f","getInterchainFee(uint64,address[])":"b8ba4ba1","getNextEntryIndex()":"aa2f06ae","getVersionedBatch(uint64)":"c7265781","requestBatchVerification(uint64,uint64,address[])":"6c49312c","verifyRemoteBatch(bytes)":"d961a48e","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint64,bytes32,address[])":"eb20fbfd"}},"solidity/InterchainClientV1.sol:InterchainBatchLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c3f0b05e35e34d846e1ec7b87beaa9183eba47f21eccb6cb7ba75244d252dade64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c3f0b05e35e34d846e1ec7b87beaa9183eba47f21eccb6cb7ba75244d252dade64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"55163:2269:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;55163:2269:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"55163:2269:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainBatchLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainClientV1":{"code":"0x60a06040523480156200001157600080fd5b5060405162003950380380620039508339810160408190526200003491620000f0565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000083565b50506001600160a01b031660805262000128565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000eb57600080fd5b919050565b600080604083850312156200010457600080fd5b6200010f83620000d3565b91506200011f60208401620000d3565b90509250929050565b6080516137db620001756000396000818161047e01528181610c8401528181611201015281816118d70152818161199801528181611b110152818161250c015261269101526137db6000f3fe6080604052600436106101755760003560e01c80638da5cb5b116100cb578063d5e788a01161007f578063f2fde38b11610059578063f2fde38b146104e3578063f3c66e2b14610503578063f92a79ff1461052357600080fd5b8063d5e788a014610431578063e4c612471461046c578063f1a61fac146104a057600080fd5b806394bf49f4116100b057806394bf49f4146103c2578063c8cf9348146103e2578063cbb3c6311461041157600080fd5b80638da5cb5b1461035657806390e810771461038157600080fd5b806353b67d741161012d578063715018a611610107578063715018a6146102ec5780637813cd52146103015780638654ddd41461032957600080fd5b806353b67d7414610296578063547efb84146102ab578063695fd54f146102be57600080fd5b80632e5687391161015e5780632e5687391461020157806335c4a1911461022f5780633f34448e1461024f57600080fd5b80631450c2811461017a5780632a20521e146101af575b600080fd5b34801561018657600080fd5b5061019a61019536600461295f565b610543565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506001546101dc9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b34801561020d57600080fd5b5061022161021c3660046129ec565b610595565b6040519081526020016101a6565b34801561023b57600080fd5b506101dc61024a3660046129ec565b610608565b61026261025d366004612a2b565b6106cd565b604080518251815260208084015167ffffffffffffffff9081169183019190915292820151909216908201526060016101a6565b6102a96102a4366004612aff565b610721565b005b6102626102b9366004612b79565b610949565b3480156102ca57600080fd5b506102de6102d9366004612bb9565b610985565b6040516101a6929190612bd6565b3480156102f857600080fd5b506102a9610b7c565b34801561030d57600080fd5b50610316600181565b60405161ffff90911681526020016101a6565b34801561033557600080fd5b50610349610344366004612e2f565b610b90565b6040516101a69190612ebc565b34801561036257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101dc565b34801561038d57600080fd5b506103a161039c366004612ecf565b610bab565b6040805167ffffffffffffffff9384168152929091166020830152016101a6565b3480156103ce57600080fd5b506102a96103dd366004612bb9565b610d70565b3480156103ee57600080fd5b506104026103fd366004612ee8565b610e3e565b6040516101a693929190612f51565b34801561041d57600080fd5b5061022161042c366004612fa0565b61112b565b34801561043d57600080fd5b5061045161044c36600461303e565b61133c565b604080518251815260209283015192810192909252016101a6565b34801561047857600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ac57600080fd5b506101dc6104bb366004612ecf565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3480156104ef57600080fd5b506102a96104fe366004612bb9565b611359565b34801561050f57600080fd5b506102a961051e366004613073565b6113bd565b34801561052f57600080fd5b506101dc61053e36600461309f565b61141e565b600080610550868661146b565b905061055f8160c00151611576565b50600086866040516105729291906130e1565b60405180910390209050610588828287876115ff565b5060019695505050505050565b6000468267ffffffffffffffff16036105eb576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024015b60405180910390fd5b5067ffffffffffffffff1660009081526002602052604090205490565b6000468267ffffffffffffffff1603610659576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b5067ffffffffffffffff81166000908152600260205260409020548073ffffffffffffffffffffffffffffffffffffffff811681146106c7576040517fec3822b1000000000000000000000000000000000000000000000000000000008152600481018290526024016105e2565b50919050565b604080516060810182526000808252602082018190529181019190915273ffffffffffffffffffffffffffffffffffffffff89166107128b828b8b8b8b8b8b8b6117a8565b9b9a5050505050505050505050565b600061072d858561146b565b9050600085856040516107419291906130e1565b60405180910390209050610757828286866115ff565b600081815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560c083015161079b90611576565b9050806020015134146107e95760208101516040517f66f7ba5d00000000000000000000000000000000000000000000000000000000815234600482015260248101919091526044016105e2565b80518810156107f757805197505b60005a905088811161083f576040517f5dac469c00000000000000000000000000000000000000000000000000000000815260048101829052602481018a90526044016105e2565b60a084015173ffffffffffffffffffffffffffffffffffffffff16636e9fd6098a348760000151886080015189604001518a606001518b60e001516040518863ffffffff1660e01b815260040161089a9594939291906130f1565b6000604051808303818589803b1580156108b357600080fd5b5088f11580156108c7573d6000803e3d6000fd5b5050505050508360a001518460800151847f589f737f4049c62fcbcd8274eeacc86e17d29c6621f36e698bcc4c90525ce28f8760400151886060015189600001516040516109369392919067ffffffffffffffff93841681529183166020830152909116604082015260600190565b60405180910390a4505050505050505050565b60408051606081018252600080825260208201819052918101919091526109778a8a8a8a8a8a8a8a8a6117a8565b9a9950505050505050505050565b6109c66040518060800160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60608273ffffffffffffffffffffffffffffffffffffffff163b600003610a31576040517fa293ffd000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f287bc057000000000000000000000000000000000000000000000000000000001790529051600091829173ffffffffffffffffffffffffffffffffffffffff871691610aaf91613137565b600060405180830381855afa9150503d8060008114610aea576040519150601f19603f3d011682016040523d82523d6000602084013e610aef565b606091505b5091509150811580610b0057508051155b15610b4f576040517fa293ffd000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024016105e2565b606081806020019051810190610b659190613153565b94509050610b7281611d26565b9450505050915091565b610b84611dd5565b610b8e6000611e28565b565b6060610ba56001610ba084611e9d565b611f67565b92915050565b600081815260036020526040812054819073ffffffffffffffffffffffffffffffffffffffff1680610c0c576040517fe99eb48d000000000000000000000000000000000000000000000000000000008152600481018590526024016105e2565b60008482604051602001610c4092919091825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60408051808303601f1901815290829052805160208201207f2ad8c706000000000000000000000000000000000000000000000000000000008352600483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632ad8c7069060240160408051808303816000875af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190613268565b6040805167ffffffffffffffff80851682528316602082015292965090945073ffffffffffffffffffffffffffffffffffffffff84169187917f1c45fee34c18589980aa86a2b9910fac2a0be9beca86376b6d93fa4ce7f010ae910160405180910390a35050915091565b610d78611dd5565b73ffffffffffffffffffffffffffffffffffffffff8116610dc5576040517fc613c5a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa42a6dc10e430cab5d4ba037ea6d7eee30240c6b6d7dd5b12a3d2acf41e7264f9060200160405180910390a150565b600080600080610e4d87610b90565b6040517f1450c2810000000000000000000000000000000000000000000000000000000081529091503090631450c28190610e909084908a908a906004016132a2565b602060405180830381865afa925050508015610ec9575060408051601f3d908101601f19168201909252610ec691810190613305565b60015b61110e573d808015610ef7576040519150601f19603f3d011682016040523d82523d6000602084013e610efc565b606091505b506000610f0882611f93565b909650945090507f27f5146f000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610f615760019550611107565b7faeec3942000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610fb35760029550611107565b7f2f882ae6000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110055760039550611107565b7f5d6c0030000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110575760049550611107565b7f6326510c000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110a95760059550611107565b7f1515fcbb000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110fb5760069550611107565b60079550600094508493505b5050611120565b50600093508392508291506111229050565b505b93509350939050565b600061113688611ff3565b5073ffffffffffffffffffffffffffffffffffffffff8716611184576040517f51bf4f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157692505050565b506040517fb8ba4ba100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b8ba4ba19061123a908b908a908a9060040161337d565b602060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906133aa565b9050600061128984846120aa565b6040517f96fda4da00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8916906396fda4da906112e4908c9085908a908a906004016133ee565b602060405180830381865afa158015611301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132591906133aa565b61132f9083613447565b9998505050505050505050565b6040805180820190915260008082526020820152610ba582611576565b611361611dd5565b73ffffffffffffffffffffffffffffffffffffffff81166113b1576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016105e2565b6113ba81611e28565b50565b6113c5611dd5565b67ffffffffffffffff8216600081815260026020908152604091829020849055815192835282018390527ffdc2498138df0de25c8fc9bd75bb8e856dac69aaf28d3dd5e0fc48e5e9f6e93f910160405180910390a15050565b60006003600084846040516114349291906130e1565b604080519182900390912082526020820192909252016000205473ffffffffffffffffffffffffffffffffffffffff169392505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820181905260e0820152906114b584846120d1565b905061ffff8116600114611502576040517f2db100fa00000000000000000000000000000000000000000000000000000000815261ffff82166004820152600160248201526044016105e2565b61151461150f858561211b565b612176565b915046826020015167ffffffffffffffff161461156f5760208201516040517feaea034500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016105e2565b5092915050565b604080518082019091526000808252602082015260006115958361221b565b9050600161ffff821610156115dc576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff821660048201526024016105e2565b6115e583612266565b8060200190518101906115f8919061345a565b9392505050565b600061160e8560000151611ff3565b60008581526003602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615611670576040517fd80aeb91000000000000000000000000000000000000000000000000000000008152600481018590526024016105e2565b60006040518060600160405280876000015167ffffffffffffffff168152602001876040015167ffffffffffffffff1681526020016116b684888a606001518989612360565b815250905060006116c88760a0015190565b90506000806116d683610985565b8151919350915060000361172e576040517f9cd9aef400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b61174061173a8361241b565b85612480565b6000611751828685602001516125f0565b835190915081101561179c5782516040517f5113c6be0000000000000000000000000000000000000000000000000000000081526105e2918391600401918252602082015260400190565b50505050505050505050565b60408051606081018252600080825260208201819052918101919091526117ce8a611ff3565b50600089900361180a576040517fc005391c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8816611857576040517f51bf4f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61189685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157692505050565b506040517fb8ba4ba100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b8ba4ba190611910908e908c908c9060040161337d565b602060405180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906133aa565b905080341015611996576040517f8af7e3c2000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044016105e2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa2f06ae6040518163ffffffff1660e01b81526004016040805180830381865afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190613268565b83602001846040018267ffffffffffffffff1667ffffffffffffffff168152508267ffffffffffffffff1667ffffffffffffffff1681525050506000611af1338d8d866020015187604001518c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127ae92505050565b9050611afc81610b90565b805190602001208360000181815250506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663eb20fbfd85856020015188600001518f8f6040518663ffffffff1660e01b8152600401611b7794939291906134a9565b604080518083038185885af1158015611b94573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb99190613268565b91509150846020015167ffffffffffffffff168267ffffffffffffffff16148015611bfb5750846040015167ffffffffffffffff168167ffffffffffffffff16145b611c0757611c076134d3565b50506020810151348390039073ffffffffffffffffffffffffffffffffffffffff8c16906358efb47d908390611c3d8b8a6120aa565b88516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152611c7e939291908f908f90600401613502565b6000604051808303818588803b158015611c9757600080fd5b505af1158015611cab573d6000803e3d6000fd5b50505050508160a00151826080015185600001517f73b3ea77e781779ca7d3bd994ecd1ad739e22cda0120925bbf4e30de70ebc7e885604001518660600151876020015189888a60c001518b60e00151604051611d0e9796959493929190613532565b60405180910390a45050509998505050505050505050565b611d676040518060800160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000611d728361221b565b9050600161ffff82161015611db9576040517fb6e548c600000000000000000000000000000000000000000000000000000000815261ffff821660048201526024016105e2565b611dc283612266565b8060200190518101906115f89190613585565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b8e576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016105e2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060611f2982600001518360200151846040015185606001517fffffffffffffffff00000000000000000000000000000000000000000000000060c085901b1677ffffffffffffffff00000000000000000000000000000000608085901b16176fffffffffffffffff0000000000000000604084901b161767ffffffffffffffff821617949350505050565b82608001518360a001518460c001518560e00151604051602001611f519594939291906135f1565b6040516020818303038152906040529050919050565b60608282604051602001611f7c929190613634565b604051602081830303815290604052905092915050565b60008060006004845110611fcb5760208401517fffffffff000000000000000000000000000000000000000000000000000000001692505b6024845110611fdc57602484015191505b6044845110611fec575060448301515b9193909250565b6000468267ffffffffffffffff1603612044576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b5067ffffffffffffffff8116600090815260026020526040812054908190036120a5576040517fb8e8e0dc00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b919050565b6000601f19601f830116601f19601f8501166120c79060e2613447565b6115f89190613447565b600060028210156121125782826040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e292919061367f565b50503560f01c90565b366000600283101561215d5783836040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e292919061367f565b61216a8360028187613693565b915091505b9250929050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820181905260e0820152906121c2848401856136bd565b60e087015260c086015260a0850152608084015290506121f08160c081901c91608082901c91604081901c91565b67ffffffffffffffff9081166060870152908116604086015290811660208501521682525092915050565b600060028251101561225b57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e29190612ebc565b506020015160f01c90565b60606002825110156122a657816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e29190612ebc565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156122e3576122e3612c5f565b6040519080825280601f01601f19166020018201604052801561230d576020820181803683370190505b50915060008160208401836022870160045afa905080612359576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b600067ffffffffffffffff8416156123b0576040517fd9c5be6100000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526024016105e2565b81156123e8576040517f3537219200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020808201899052818301889052825180830384018152606090920190925280519101205b9695505050505050565b604081015160009061242f57506000919050565b60408201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161247857505060015473ffffffffffffffffffffffffffffffffffffffff1690565b506060015190565b73ffffffffffffffffffffffffffffffffffffffff8216156125ec57604080517fe39682c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152835167ffffffffffffffff908116602484015260208501511660448301529183015160648201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e39682c190608401602060405180830381865afa158015612553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257791906133aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036125ea576040517fd077d51a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b505b5050565b6000805b84518110156127a65760008582815181106126115761261161373e565b602090810291909101810151604080517fe39682c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152895167ffffffffffffffff9081166024840152948a015190941660448201529088015160648201529092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e39682c190608401602060405180830381865afa1580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906133aa565b90508061270a575050612796565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361277b576040517fd077d51a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016105e2565b426127868683613447565b1015612793578360010193505b50505b61279f8161376d565b90506125f4565b509392505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915260405180610100016040528061280646612884565b67ffffffffffffffff1681526020018867ffffffffffffffff1681526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020016128628a73ffffffffffffffffffffffffffffffffffffffff1690565b8152602001878152602001848152602001838152509050979650505050505050565b600067ffffffffffffffff8211156128d457604080517f6dfcc6500000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016105e2565b5090565b60008083601f8401126128ea57600080fd5b50813567ffffffffffffffff81111561290257600080fd5b60208301915083602082850101111561216f57600080fd5b60008083601f84011261292c57600080fd5b50813567ffffffffffffffff81111561294457600080fd5b6020830191508360208260051b850101111561216f57600080fd5b6000806000806040858703121561297557600080fd5b843567ffffffffffffffff8082111561298d57600080fd5b612999888389016128d8565b909650945060208701359150808211156129b257600080fd5b506129bf8782880161291a565b95989497509550505050565b67ffffffffffffffff811681146113ba57600080fd5b80356120a5816129cb565b6000602082840312156129fe57600080fd5b81356115f8816129cb565b73ffffffffffffffffffffffffffffffffffffffff811681146113ba57600080fd5b600080600080600080600080600060c08a8c031215612a4957600080fd5b8935612a54816129cb565b985060208a0135612a6481612a09565b975060408a0135612a7481612a09565b965060608a013567ffffffffffffffff80821115612a9157600080fd5b612a9d8d838e0161291a565b909850965060808c0135915080821115612ab657600080fd5b612ac28d838e016128d8565b909650945060a08c0135915080821115612adb57600080fd5b50612ae88c828d016128d8565b915080935050809150509295985092959850929598565b600080600080600060608688031215612b1757600080fd5b85359450602086013567ffffffffffffffff80821115612b3657600080fd5b612b4289838a016128d8565b90965094506040880135915080821115612b5b57600080fd5b50612b688882890161291a565b969995985093965092949392505050565b600080600080600080600080600060c08a8c031215612b9757600080fd5b8935612ba2816129cb565b985060208a0135975060408a0135612a7481612a09565b600060208284031215612bcb57600080fd5b81356115f881612a09565b600060a08201845183526020808601518185015260408601516040850152606086015173ffffffffffffffffffffffffffffffffffffffff808216606087015260a06080870152839150865180855260c087019250838801945060005b81811015612c51578551831684529484019492840192600101612c33565b509198975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612cb257612cb2612c5f565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ce157612ce1612c5f565b604052919050565b600067ffffffffffffffff821115612d0357612d03612c5f565b50601f01601f191660200190565b600082601f830112612d2257600080fd5b8135612d35612d3082612ce9565b612cb8565b818152846020838601011115612d4a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101008284031215612d7a57600080fd5b612d82612c8e565b9050612d8d826129e1565b8152612d9b602083016129e1565b6020820152612dac604083016129e1565b6040820152612dbd606083016129e1565b60608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff80821115612df157600080fd5b612dfd85838601612d11565b60c084015260e0840135915080821115612e1657600080fd5b50612e2384828501612d11565b60e08301525092915050565b600060208284031215612e4157600080fd5b813567ffffffffffffffff811115612e5857600080fd5b612e6484828501612d67565b949350505050565b60005b83811015612e87578181015183820152602001612e6f565b50506000910152565b60008151808452612ea8816020860160208601612e6c565b601f01601f19169290920160200192915050565b6020815260006115f86020830184612e90565b600060208284031215612ee157600080fd5b5035919050565b600080600060408486031215612efd57600080fd5b833567ffffffffffffffff80821115612f1557600080fd5b612f2187838801612d67565b94506020860135915080821115612f3757600080fd5b50612f448682870161291a565b9497909650939450505050565b6060810160088510612f8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b938152602081019290925260409091015290565b600080600080600080600060a0888a031215612fbb57600080fd5b8735612fc6816129cb565b96506020880135612fd681612a09565b9550604088013567ffffffffffffffff80821115612ff357600080fd5b612fff8b838c0161291a565b909750955060608a013591508082111561301857600080fd5b506130258a828b016128d8565b989b979a50959894979596608090950135949350505050565b60006020828403121561305057600080fd5b813567ffffffffffffffff81111561306757600080fd5b612e6484828501612d11565b6000806040838503121561308657600080fd5b8235613091816129cb565b946020939093013593505050565b600080602083850312156130b257600080fd5b823567ffffffffffffffff8111156130c957600080fd5b6130d5858286016128d8565b90969095509350505050565b8183823760009101908152919050565b600067ffffffffffffffff8088168352866020840152808616604084015280851660608401525060a0608083015261312c60a0830184612e90565b979650505050505050565b60008251613149818460208701612e6c565b9190910192915050565b6000806040838503121561316657600080fd5b825167ffffffffffffffff8082111561317e57600080fd5b818501915085601f83011261319257600080fd5b815160206131a2612d3083612ce9565b82815288828487010111156131b657600080fd5b6131c583838301848801612e6c565b878201519096509350828411156131db57600080fd5b838701935087601f8501126131ef57600080fd5b835191508282111561320357613203612c5f565b8160051b9250613214818401612cb8565b828152928401810192818101908985111561322e57600080fd5b948201945b84861015613258578551935061324884612a09565b8382529482019490820190613233565b8096505050505050509250929050565b6000806040838503121561327b57600080fd5b8251613286816129cb565b6020840151909250613297816129cb565b809150509250929050565b6040815260006132b56040830186612e90565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156132ed57600080fd5b8360051b808660208401370160200195945050505050565b60006020828403121561331757600080fd5b815180151581146115f857600080fd5b8183526000602080850194508260005b8581101561337257813561334a81612a09565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613337565b509495945050505050565b67ffffffffffffffff841681526040602082015260006133a1604083018486613327565b95945050505050565b6000602082840312156133bc57600080fd5b5051919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b67ffffffffffffffff851681528360208201526060604082015260006124116060830184866133c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ba557610ba5613418565b60006040828403121561346c57600080fd5b6040516040810181811067ffffffffffffffff8211171561348f5761348f612c5f565b604052825181526020928301519281019290925250919050565b67ffffffffffffffff85168152836020820152606060408201526000612411606083018486613327565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b67ffffffffffffffff8616815284602082015283604082015260806060820152600061312c6080830184866133c3565b600067ffffffffffffffff808a168352808916602084015280881660408401525085606083015284608083015260e060a083015261357360e0830185612e90565b82810360c08401526109778185612e90565b60006080828403121561359757600080fd5b6040516080810181811067ffffffffffffffff821117156135ba576135ba612c5f565b806040525082518152602083015160208201526040830151604082015260608301516135e581612a09565b60608201529392505050565b85815284602082015283604082015260a06060820152600061361660a0830185612e90565b82810360808401526136288185612e90565b98975050505050505050565b7fffff0000000000000000000000000000000000000000000000000000000000008360f01b16815260008251613671816002850160208701612e6c565b919091016002019392505050565b602081526000612e646020830184866133c3565b600080858511156136a357600080fd5b838611156136b057600080fd5b5050820193919092039150565b600080600080600060a086880312156136d557600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561370257600080fd5b61370e89838a01612d11565b9350608088013591508082111561372457600080fd5b5061373188828901612d11565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361379e5761379e613418565b506001019056fea26469706673582212200e9c9b259e76332b184b1e7bc56b0b9339296f9268b3ecefaa4f47129d872c1764736f6c63430008140033","runtime-code":"0x6080604052600436106101755760003560e01c80638da5cb5b116100cb578063d5e788a01161007f578063f2fde38b11610059578063f2fde38b146104e3578063f3c66e2b14610503578063f92a79ff1461052357600080fd5b8063d5e788a014610431578063e4c612471461046c578063f1a61fac146104a057600080fd5b806394bf49f4116100b057806394bf49f4146103c2578063c8cf9348146103e2578063cbb3c6311461041157600080fd5b80638da5cb5b1461035657806390e810771461038157600080fd5b806353b67d741161012d578063715018a611610107578063715018a6146102ec5780637813cd52146103015780638654ddd41461032957600080fd5b806353b67d7414610296578063547efb84146102ab578063695fd54f146102be57600080fd5b80632e5687391161015e5780632e5687391461020157806335c4a1911461022f5780633f34448e1461024f57600080fd5b80631450c2811461017a5780632a20521e146101af575b600080fd5b34801561018657600080fd5b5061019a61019536600461295f565b610543565b60405190151581526020015b60405180910390f35b3480156101bb57600080fd5b506001546101dc9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a6565b34801561020d57600080fd5b5061022161021c3660046129ec565b610595565b6040519081526020016101a6565b34801561023b57600080fd5b506101dc61024a3660046129ec565b610608565b61026261025d366004612a2b565b6106cd565b604080518251815260208084015167ffffffffffffffff9081169183019190915292820151909216908201526060016101a6565b6102a96102a4366004612aff565b610721565b005b6102626102b9366004612b79565b610949565b3480156102ca57600080fd5b506102de6102d9366004612bb9565b610985565b6040516101a6929190612bd6565b3480156102f857600080fd5b506102a9610b7c565b34801561030d57600080fd5b50610316600181565b60405161ffff90911681526020016101a6565b34801561033557600080fd5b50610349610344366004612e2f565b610b90565b6040516101a69190612ebc565b34801561036257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101dc565b34801561038d57600080fd5b506103a161039c366004612ecf565b610bab565b6040805167ffffffffffffffff9384168152929091166020830152016101a6565b3480156103ce57600080fd5b506102a96103dd366004612bb9565b610d70565b3480156103ee57600080fd5b506104026103fd366004612ee8565b610e3e565b6040516101a693929190612f51565b34801561041d57600080fd5b5061022161042c366004612fa0565b61112b565b34801561043d57600080fd5b5061045161044c36600461303e565b61133c565b604080518251815260209283015192810192909252016101a6565b34801561047857600080fd5b506101dc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ac57600080fd5b506101dc6104bb366004612ecf565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b3480156104ef57600080fd5b506102a96104fe366004612bb9565b611359565b34801561050f57600080fd5b506102a961051e366004613073565b6113bd565b34801561052f57600080fd5b506101dc61053e36600461309f565b61141e565b600080610550868661146b565b905061055f8160c00151611576565b50600086866040516105729291906130e1565b60405180910390209050610588828287876115ff565b5060019695505050505050565b6000468267ffffffffffffffff16036105eb576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024015b60405180910390fd5b5067ffffffffffffffff1660009081526002602052604090205490565b6000468267ffffffffffffffff1603610659576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b5067ffffffffffffffff81166000908152600260205260409020548073ffffffffffffffffffffffffffffffffffffffff811681146106c7576040517fec3822b1000000000000000000000000000000000000000000000000000000008152600481018290526024016105e2565b50919050565b604080516060810182526000808252602082018190529181019190915273ffffffffffffffffffffffffffffffffffffffff89166107128b828b8b8b8b8b8b8b6117a8565b9b9a5050505050505050505050565b600061072d858561146b565b9050600085856040516107419291906130e1565b60405180910390209050610757828286866115ff565b600081815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560c083015161079b90611576565b9050806020015134146107e95760208101516040517f66f7ba5d00000000000000000000000000000000000000000000000000000000815234600482015260248101919091526044016105e2565b80518810156107f757805197505b60005a905088811161083f576040517f5dac469c00000000000000000000000000000000000000000000000000000000815260048101829052602481018a90526044016105e2565b60a084015173ffffffffffffffffffffffffffffffffffffffff16636e9fd6098a348760000151886080015189604001518a606001518b60e001516040518863ffffffff1660e01b815260040161089a9594939291906130f1565b6000604051808303818589803b1580156108b357600080fd5b5088f11580156108c7573d6000803e3d6000fd5b5050505050508360a001518460800151847f589f737f4049c62fcbcd8274eeacc86e17d29c6621f36e698bcc4c90525ce28f8760400151886060015189600001516040516109369392919067ffffffffffffffff93841681529183166020830152909116604082015260600190565b60405180910390a4505050505050505050565b60408051606081018252600080825260208201819052918101919091526109778a8a8a8a8a8a8a8a8a6117a8565b9a9950505050505050505050565b6109c66040518060800160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60608273ffffffffffffffffffffffffffffffffffffffff163b600003610a31576040517fa293ffd000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f287bc057000000000000000000000000000000000000000000000000000000001790529051600091829173ffffffffffffffffffffffffffffffffffffffff871691610aaf91613137565b600060405180830381855afa9150503d8060008114610aea576040519150601f19603f3d011682016040523d82523d6000602084013e610aef565b606091505b5091509150811580610b0057508051155b15610b4f576040517fa293ffd000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024016105e2565b606081806020019051810190610b659190613153565b94509050610b7281611d26565b9450505050915091565b610b84611dd5565b610b8e6000611e28565b565b6060610ba56001610ba084611e9d565b611f67565b92915050565b600081815260036020526040812054819073ffffffffffffffffffffffffffffffffffffffff1680610c0c576040517fe99eb48d000000000000000000000000000000000000000000000000000000008152600481018590526024016105e2565b60008482604051602001610c4092919091825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60408051808303601f1901815290829052805160208201207f2ad8c706000000000000000000000000000000000000000000000000000000008352600483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632ad8c7069060240160408051808303816000875af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190613268565b6040805167ffffffffffffffff80851682528316602082015292965090945073ffffffffffffffffffffffffffffffffffffffff84169187917f1c45fee34c18589980aa86a2b9910fac2a0be9beca86376b6d93fa4ce7f010ae910160405180910390a35050915091565b610d78611dd5565b73ffffffffffffffffffffffffffffffffffffffff8116610dc5576040517fc613c5a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa42a6dc10e430cab5d4ba037ea6d7eee30240c6b6d7dd5b12a3d2acf41e7264f9060200160405180910390a150565b600080600080610e4d87610b90565b6040517f1450c2810000000000000000000000000000000000000000000000000000000081529091503090631450c28190610e909084908a908a906004016132a2565b602060405180830381865afa925050508015610ec9575060408051601f3d908101601f19168201909252610ec691810190613305565b60015b61110e573d808015610ef7576040519150601f19603f3d011682016040523d82523d6000602084013e610efc565b606091505b506000610f0882611f93565b909650945090507f27f5146f000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610f615760019550611107565b7faeec3942000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610fb35760029550611107565b7f2f882ae6000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110055760039550611107565b7f5d6c0030000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110575760049550611107565b7f6326510c000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110a95760059550611107565b7f1515fcbb000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016110fb5760069550611107565b60079550600094508493505b5050611120565b50600093508392508291506111229050565b505b93509350939050565b600061113688611ff3565b5073ffffffffffffffffffffffffffffffffffffffff8716611184576040517f51bf4f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157692505050565b506040517fb8ba4ba100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b8ba4ba19061123a908b908a908a9060040161337d565b602060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906133aa565b9050600061128984846120aa565b6040517f96fda4da00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff8916906396fda4da906112e4908c9085908a908a906004016133ee565b602060405180830381865afa158015611301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132591906133aa565b61132f9083613447565b9998505050505050505050565b6040805180820190915260008082526020820152610ba582611576565b611361611dd5565b73ffffffffffffffffffffffffffffffffffffffff81166113b1576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016105e2565b6113ba81611e28565b50565b6113c5611dd5565b67ffffffffffffffff8216600081815260026020908152604091829020849055815192835282018390527ffdc2498138df0de25c8fc9bd75bb8e856dac69aaf28d3dd5e0fc48e5e9f6e93f910160405180910390a15050565b60006003600084846040516114349291906130e1565b604080519182900390912082526020820192909252016000205473ffffffffffffffffffffffffffffffffffffffff169392505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820181905260e0820152906114b584846120d1565b905061ffff8116600114611502576040517f2db100fa00000000000000000000000000000000000000000000000000000000815261ffff82166004820152600160248201526044016105e2565b61151461150f858561211b565b612176565b915046826020015167ffffffffffffffff161461156f5760208201516040517feaea034500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff90911660048201526024016105e2565b5092915050565b604080518082019091526000808252602082015260006115958361221b565b9050600161ffff821610156115dc576040517f2b346f3700000000000000000000000000000000000000000000000000000000815261ffff821660048201526024016105e2565b6115e583612266565b8060200190518101906115f8919061345a565b9392505050565b600061160e8560000151611ff3565b60008581526003602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615611670576040517fd80aeb91000000000000000000000000000000000000000000000000000000008152600481018590526024016105e2565b60006040518060600160405280876000015167ffffffffffffffff168152602001876040015167ffffffffffffffff1681526020016116b684888a606001518989612360565b815250905060006116c88760a0015190565b90506000806116d683610985565b8151919350915060000361172e576040517f9cd9aef400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b61174061173a8361241b565b85612480565b6000611751828685602001516125f0565b835190915081101561179c5782516040517f5113c6be0000000000000000000000000000000000000000000000000000000081526105e2918391600401918252602082015260400190565b50505050505050505050565b60408051606081018252600080825260208201819052918101919091526117ce8a611ff3565b50600089900361180a576040517fc005391c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8816611857576040517f51bf4f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61189685858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157692505050565b506040517fb8ba4ba100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b8ba4ba190611910908e908c908c9060040161337d565b602060405180830381865afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195191906133aa565b905080341015611996576040517f8af7e3c2000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044016105e2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa2f06ae6040518163ffffffff1660e01b81526004016040805180830381865afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190613268565b83602001846040018267ffffffffffffffff1667ffffffffffffffff168152508267ffffffffffffffff1667ffffffffffffffff1681525050506000611af1338d8d866020015187604001518c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127ae92505050565b9050611afc81610b90565b805190602001208360000181815250506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663eb20fbfd85856020015188600001518f8f6040518663ffffffff1660e01b8152600401611b7794939291906134a9565b604080518083038185885af1158015611b94573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611bb99190613268565b91509150846020015167ffffffffffffffff168267ffffffffffffffff16148015611bfb5750846040015167ffffffffffffffff168167ffffffffffffffff16145b611c0757611c076134d3565b50506020810151348390039073ffffffffffffffffffffffffffffffffffffffff8c16906358efb47d908390611c3d8b8a6120aa565b88516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152611c7e939291908f908f90600401613502565b6000604051808303818588803b158015611c9757600080fd5b505af1158015611cab573d6000803e3d6000fd5b50505050508160a00151826080015185600001517f73b3ea77e781779ca7d3bd994ecd1ad739e22cda0120925bbf4e30de70ebc7e885604001518660600151876020015189888a60c001518b60e00151604051611d0e9796959493929190613532565b60405180910390a45050509998505050505050505050565b611d676040518060800160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000611d728361221b565b9050600161ffff82161015611db9576040517fb6e548c600000000000000000000000000000000000000000000000000000000815261ffff821660048201526024016105e2565b611dc283612266565b8060200190518101906115f89190613585565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b8e576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016105e2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060611f2982600001518360200151846040015185606001517fffffffffffffffff00000000000000000000000000000000000000000000000060c085901b1677ffffffffffffffff00000000000000000000000000000000608085901b16176fffffffffffffffff0000000000000000604084901b161767ffffffffffffffff821617949350505050565b82608001518360a001518460c001518560e00151604051602001611f519594939291906135f1565b6040516020818303038152906040529050919050565b60608282604051602001611f7c929190613634565b604051602081830303815290604052905092915050565b60008060006004845110611fcb5760208401517fffffffff000000000000000000000000000000000000000000000000000000001692505b6024845110611fdc57602484015191505b6044845110611fec575060448301515b9193909250565b6000468267ffffffffffffffff1603612044576040517fd61b800a00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b5067ffffffffffffffff8116600090815260026020526040812054908190036120a5576040517fb8e8e0dc00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff831660048201526024016105e2565b919050565b6000601f19601f830116601f19601f8501166120c79060e2613447565b6115f89190613447565b600060028210156121125782826040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e292919061367f565b50503560f01c90565b366000600283101561215d5783836040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e292919061367f565b61216a8360028187613693565b915091505b9250929050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820181905260e0820152906121c2848401856136bd565b60e087015260c086015260a0850152608084015290506121f08160c081901c91608082901c91604081901c91565b67ffffffffffffffff9081166060870152908116604086015290811660208501521682525092915050565b600060028251101561225b57816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e29190612ebc565b506020015160f01c90565b60606002825110156122a657816040517fb0818b620000000000000000000000000000000000000000000000000000000081526004016105e29190612ebc565b81517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018067ffffffffffffffff8111156122e3576122e3612c5f565b6040519080825280601f01601f19166020018201604052801561230d576020820181803683370190505b50915060008160208401836022870160045afa905080612359576040517f101e44fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050919050565b600067ffffffffffffffff8416156123b0576040517fd9c5be6100000000000000000000000000000000000000000000000000000000815267ffffffffffffffff851660048201526024016105e2565b81156123e8576040517f3537219200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020808201899052818301889052825180830384018152606090920190925280519101205b9695505050505050565b604081015160009061242f57506000919050565b60408201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161247857505060015473ffffffffffffffffffffffffffffffffffffffff1690565b506060015190565b73ffffffffffffffffffffffffffffffffffffffff8216156125ec57604080517fe39682c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152835167ffffffffffffffff908116602484015260208501511660448301529183015160648201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e39682c190608401602060405180830381865afa158015612553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257791906133aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036125ea576040517fd077d51a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016105e2565b505b5050565b6000805b84518110156127a65760008582815181106126115761261161373e565b602090810291909101810151604080517fe39682c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152895167ffffffffffffffff9081166024840152948a015190941660448201529088015160648201529092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e39682c190608401602060405180830381865afa1580156126d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fc91906133aa565b90508061270a575050612796565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361277b576040517fd077d51a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016105e2565b426127868683613447565b1015612793578360010193505b50505b61279f8161376d565b90506125f4565b509392505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915260405180610100016040528061280646612884565b67ffffffffffffffff1681526020018867ffffffffffffffff1681526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020016128628a73ffffffffffffffffffffffffffffffffffffffff1690565b8152602001878152602001848152602001838152509050979650505050505050565b600067ffffffffffffffff8211156128d457604080517f6dfcc6500000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016105e2565b5090565b60008083601f8401126128ea57600080fd5b50813567ffffffffffffffff81111561290257600080fd5b60208301915083602082850101111561216f57600080fd5b60008083601f84011261292c57600080fd5b50813567ffffffffffffffff81111561294457600080fd5b6020830191508360208260051b850101111561216f57600080fd5b6000806000806040858703121561297557600080fd5b843567ffffffffffffffff8082111561298d57600080fd5b612999888389016128d8565b909650945060208701359150808211156129b257600080fd5b506129bf8782880161291a565b95989497509550505050565b67ffffffffffffffff811681146113ba57600080fd5b80356120a5816129cb565b6000602082840312156129fe57600080fd5b81356115f8816129cb565b73ffffffffffffffffffffffffffffffffffffffff811681146113ba57600080fd5b600080600080600080600080600060c08a8c031215612a4957600080fd5b8935612a54816129cb565b985060208a0135612a6481612a09565b975060408a0135612a7481612a09565b965060608a013567ffffffffffffffff80821115612a9157600080fd5b612a9d8d838e0161291a565b909850965060808c0135915080821115612ab657600080fd5b612ac28d838e016128d8565b909650945060a08c0135915080821115612adb57600080fd5b50612ae88c828d016128d8565b915080935050809150509295985092959850929598565b600080600080600060608688031215612b1757600080fd5b85359450602086013567ffffffffffffffff80821115612b3657600080fd5b612b4289838a016128d8565b90965094506040880135915080821115612b5b57600080fd5b50612b688882890161291a565b969995985093965092949392505050565b600080600080600080600080600060c08a8c031215612b9757600080fd5b8935612ba2816129cb565b985060208a0135975060408a0135612a7481612a09565b600060208284031215612bcb57600080fd5b81356115f881612a09565b600060a08201845183526020808601518185015260408601516040850152606086015173ffffffffffffffffffffffffffffffffffffffff808216606087015260a06080870152839150865180855260c087019250838801945060005b81811015612c51578551831684529484019492840192600101612c33565b509198975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612cb257612cb2612c5f565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ce157612ce1612c5f565b604052919050565b600067ffffffffffffffff821115612d0357612d03612c5f565b50601f01601f191660200190565b600082601f830112612d2257600080fd5b8135612d35612d3082612ce9565b612cb8565b818152846020838601011115612d4a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101008284031215612d7a57600080fd5b612d82612c8e565b9050612d8d826129e1565b8152612d9b602083016129e1565b6020820152612dac604083016129e1565b6040820152612dbd606083016129e1565b60608201526080820135608082015260a082013560a082015260c082013567ffffffffffffffff80821115612df157600080fd5b612dfd85838601612d11565b60c084015260e0840135915080821115612e1657600080fd5b50612e2384828501612d11565b60e08301525092915050565b600060208284031215612e4157600080fd5b813567ffffffffffffffff811115612e5857600080fd5b612e6484828501612d67565b949350505050565b60005b83811015612e87578181015183820152602001612e6f565b50506000910152565b60008151808452612ea8816020860160208601612e6c565b601f01601f19169290920160200192915050565b6020815260006115f86020830184612e90565b600060208284031215612ee157600080fd5b5035919050565b600080600060408486031215612efd57600080fd5b833567ffffffffffffffff80821115612f1557600080fd5b612f2187838801612d67565b94506020860135915080821115612f3757600080fd5b50612f448682870161291a565b9497909650939450505050565b6060810160088510612f8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b938152602081019290925260409091015290565b600080600080600080600060a0888a031215612fbb57600080fd5b8735612fc6816129cb565b96506020880135612fd681612a09565b9550604088013567ffffffffffffffff80821115612ff357600080fd5b612fff8b838c0161291a565b909750955060608a013591508082111561301857600080fd5b506130258a828b016128d8565b989b979a50959894979596608090950135949350505050565b60006020828403121561305057600080fd5b813567ffffffffffffffff81111561306757600080fd5b612e6484828501612d11565b6000806040838503121561308657600080fd5b8235613091816129cb565b946020939093013593505050565b600080602083850312156130b257600080fd5b823567ffffffffffffffff8111156130c957600080fd5b6130d5858286016128d8565b90969095509350505050565b8183823760009101908152919050565b600067ffffffffffffffff8088168352866020840152808616604084015280851660608401525060a0608083015261312c60a0830184612e90565b979650505050505050565b60008251613149818460208701612e6c565b9190910192915050565b6000806040838503121561316657600080fd5b825167ffffffffffffffff8082111561317e57600080fd5b818501915085601f83011261319257600080fd5b815160206131a2612d3083612ce9565b82815288828487010111156131b657600080fd5b6131c583838301848801612e6c565b878201519096509350828411156131db57600080fd5b838701935087601f8501126131ef57600080fd5b835191508282111561320357613203612c5f565b8160051b9250613214818401612cb8565b828152928401810192818101908985111561322e57600080fd5b948201945b84861015613258578551935061324884612a09565b8382529482019490820190613233565b8096505050505050509250929050565b6000806040838503121561327b57600080fd5b8251613286816129cb565b6020840151909250613297816129cb565b809150509250929050565b6040815260006132b56040830186612e90565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156132ed57600080fd5b8360051b808660208401370160200195945050505050565b60006020828403121561331757600080fd5b815180151581146115f857600080fd5b8183526000602080850194508260005b8581101561337257813561334a81612a09565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613337565b509495945050505050565b67ffffffffffffffff841681526040602082015260006133a1604083018486613327565b95945050505050565b6000602082840312156133bc57600080fd5b5051919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b67ffffffffffffffff851681528360208201526060604082015260006124116060830184866133c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610ba557610ba5613418565b60006040828403121561346c57600080fd5b6040516040810181811067ffffffffffffffff8211171561348f5761348f612c5f565b604052825181526020928301519281019290925250919050565b67ffffffffffffffff85168152836020820152606060408201526000612411606083018486613327565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b67ffffffffffffffff8616815284602082015283604082015260806060820152600061312c6080830184866133c3565b600067ffffffffffffffff808a168352808916602084015280881660408401525085606083015284608083015260e060a083015261357360e0830185612e90565b82810360c08401526109778185612e90565b60006080828403121561359757600080fd5b6040516080810181811067ffffffffffffffff821117156135ba576135ba612c5f565b806040525082518152602083015160208201526040830151604082015260608301516135e581612a09565b60608201529392505050565b85815284602082015283604082015260a06060820152600061361660a0830185612e90565b82810360808401526136288185612e90565b98975050505050505050565b7fffff0000000000000000000000000000000000000000000000000000000000008360f01b16815260008251613671816002850160208701612e6c565b919091016002019392505050565b602081526000612e646020830184866133c3565b600080858511156136a357600080fd5b838611156136b057600080fd5b5050820193919092039150565b600080600080600060a086880312156136d557600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561370257600080fd5b61370e89838a01612d11565b9350608088013591508082111561372457600080fd5b5061373188828901612d11565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361379e5761379e613418565b506001019056fea26469706673582212200e9c9b259e76332b184b1e7bc56b0b9339296f9268b3ecefaa4f47129d872c1764736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"84590:21316:0:-:0;;;85730:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;85788:6;-1:-1:-1;;;;;52446:26:0;;52442:95;;52495:31;;-1:-1:-1;;;52495:31:0;;52523:1;52495:31;;;640:51:1;613:18;;52495:31:0;;;;;;;52442:95;52546:32;52565:12;52546:18;:32::i;:::-;-1:-1:-1;;;;;;;85806:28:0::1;;::::0;84590:21316;;54085:187;54158:16;54177:6;;-1:-1:-1;;;;;54193:17:0;;;-1:-1:-1;;;;;;54193:17:0;;;;;;54225:40;;54177:6;;;;;;;54225:40;;54158:16;54225:40;54148:124;54085:187;:::o;14:177:1:-;93:13;;-1:-1:-1;;;;;135:31:1;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;494:203::-;84590:21316:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"84590:21316:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;90062:409;;;;;;;;;;-1:-1:-1;90062:409:0;;;;;:::i;:::-;;:::i;:::-;;;1653:14:1;;1646:22;1628:41;;1616:2;1601:18;90062:409:0;;;;;;;;85374:27;;;;;;;;;;-1:-1:-1;85374:27:0;;;;;;;;;;;1856:42:1;1844:55;;;1826:74;;1814:2;1799:18;85374:27:0;1680:226:1;93501:235:0;;;;;;;;;;-1:-1:-1;93501:235:0;;;;;:::i;:::-;;:::i;:::-;;;2578:25:1;;;2566:2;2551:18;93501:235:0;2432:177:1;93782:558:0;;;;;;;;;;-1:-1:-1;93782:558:0;;;;;:::i;:::-;;:::i;86854:498::-;;;;;;:::i;:::-;;:::i;:::-;;;;4472:13:1;;4454:32;;4533:4;4521:17;;;4515:24;4558:18;4614:21;;;4592:20;;;4585:51;;;;4684:17;;;4678:24;4674:33;;;4652:20;;;4645:63;4442:2;4427:18;86854:498:0;4228:486:1;87397:1717:0;;;;;;:::i;:::-;;:::i;:::-;;86384:425;;;;;;:::i;:::-;;:::i;94657:837::-;;;;;;;;;;-1:-1:-1;94657:837:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;53466:101::-;;;;;;;;;;;;;:::i;84973:41::-;;;;;;;;;;;;85013:1;84973:41;;;;;8429:6:1;8417:19;;;8399:38;;8387:2;8372:18;84973:41:0;8255:188:1;95566:283:0;;;;;;;;;;-1:-1:-1;95566:283:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;52811:85::-;;;;;;;;;;-1:-1:-1;52857:7:0;52883:6;;;52811:85;;89160:523;;;;;;;;;;-1:-1:-1;89160:523:0;;;;;:::i;:::-;;:::i;:::-;;;;12493:18:1;12538:15;;;12520:34;;12590:15;;;;12585:2;12570:18;;12563:43;12456:18;89160:523:0;12313:299:1;85886:237:0;;;;;;;;;;-1:-1:-1;85886:237:0;;;;;:::i;:::-;;:::i;90565:1567::-;;;;;;;;;;-1:-1:-1;90565:1567:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;92533:922::-;;;;;;;;;;-1:-1:-1;92533:922:0;;;;;:::i;:::-;;:::i;94420:149::-;;;;;;;;;;-1:-1:-1;94420:149:0;;;;;:::i;:::-;;:::i;:::-;;;;15698:13:1;;15680:32;;15768:4;15756:17;;;15750:24;15728:20;;;15721:54;;;;15653:18;94420:149:0;15480:301:1;85106:38:0;;;;;;;;;;;;;;;92358:130;;;;;;;;;;-1:-1:-1;92358:130:0;;;;;:::i;:::-;92429:7;92455:26;;;:11;:26;;;;;;;;;92358:130;53716:215;;;;;;;;;;-1:-1:-1;53716:215:0;;;;;:::i;:::-;;:::i;86168:171::-;;;;;;;;;;-1:-1:-1;86168:171:0;;;;;:::i;:::-;;:::i;92177:136::-;;;;;;;;;;-1:-1:-1;92177:136:0;;;;;:::i;:::-;;:::i;90062:409::-;90159:4;90175:33;90211:36;90237:9;;90211:25;:36::i;:::-;90175:72;;90304:30;:4;:12;;;:28;:30::i;:::-;;90344:21;90378:9;;90368:20;;;;;;;:::i;:::-;;;;;;;;90344:44;;90398:45;90416:4;90422:13;90437:5;;90398:17;:45::i;:::-;-1:-1:-1;90460:4:0;;90062:409;-1:-1:-1;;;;;;90062:409:0:o;93501:235::-;93565:7;93599:13;93588:7;:24;;;93584:107;;93635:45;;;;;16968:18:1;16956:31;;93635:45:0;;;16938:50:1;16911:18;;93635:45:0;;;;;;;;93584:107;-1:-1:-1;93707:22:0;;;;;;:13;:22;;;;;;;93501:235::o;93782:558::-;93849:23;93899:13;93888:7;:24;;;93884:107;;93935:45;;;;;16968:18:1;16956:31;;93935:45:0;;;16938:50:1;16911:18;;93935:45:0;16794:200:1;93884:107:0;-1:-1:-1;94023:22:0;;;94000:20;94023:22;;;:13;:22;;;;;;;94198:32;;;:50;;94194:140;;94271:52;;;;;;;;2578:25:1;;;2551:18;;94271:52:0;2432:177:1;94194:140:0;93874:466;93782:558;;;:::o;86854:498::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;87206:25:0;;;87250:95;87266:10;87206:25;87295:19;87316:10;;87328:7;;87337;;87250:15;:95::i;:::-;87243:102;86854:498;-1:-1:-1;;;;;;;;;;;86854:498:0:o;87397:1717::-;87573:33;87609:38;87635:11;;87609:25;:38::i;:::-;87573:74;;87657:21;87691:11;;87681:22;;;;;;;:::i;:::-;;;;;;;;87657:46;;87713:45;87731:4;87737:13;87752:5;;87713:17;:45::i;:::-;87768:26;;;;:11;:26;;;;;:39;;;;87797:10;87768:39;;;87852:12;;;;:30;;:28;:30::i;:::-;87818:64;;87909:14;:25;;;87896:9;:38;87892:150;;88005:25;;;;87957:74;;;;;87994:9;87957:74;;;17173:25:1;17214:18;;;17207:34;;;;17146:18;;87957:74:0;16999:248:1;87892:150:0;88203:23;;:34;-1:-1:-1;88199:74:0;;;88250:23;;;-1:-1:-1;88199:74:0;88378:15;88396:9;88378:27;;88430:8;88419:7;:19;88415:111;;88461:54;;;;;;;;17173:25:1;;;17214:18;;;17207:34;;;17146:18;;88461:54:0;16999:248:1;88415:111:0;88664:16;;;;88649:62;;;88717:8;88734:9;88771:4;:15;;;88808:4;:14;;;88845:4;:12;;;88883:4;:15;;;88921:4;:12;;;88649:295;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;89081:4;:16;;;89065:4;:14;;;89002:13;88959:148;89017:4;:12;;;89031:4;:15;;;89048:4;:15;;;88959:148;;;;;;;18025:18:1;18070:15;;;18052:34;;18122:15;;;18117:2;18102:18;;18095:43;18174:15;;;18169:2;18154:18;;18147:43;18003:2;17988:18;;17819:377;88959:148:0;;;;;;;;87563:1551;;;;87397:1717;;;;;:::o;86384:425::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;86714:88:0;86730:10;86742:8;86752:19;86773:10;;86785:7;;86794;;86714:15;:88::i;:::-;86707:95;86384:425;-1:-1:-1;;;;;;;;;;86384:425:0:o;94657:837::-;94753:25;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;94753:25:0;94780:24;94876:8;:20;;;94900:1;94876:25;94872:109;;94924:46;;;;;1856:42:1;1844:55;;94924:46:0;;;1826:74:1;1799:18;;94924:46:0;1680:226:1;94872:109:0;95139:53;;;;;;;;;;;;;;;;;;;;;;95119:74;;95066:12;;;;95119:19;;;;:74;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;95065:128;;;;95208:7;95207:8;:34;;;-1:-1:-1;95219:17:0;;:22;95207:34;95203:118;;;95264:46;;;;;1856:42:1;1844:55;;95264:46:0;;;1826:74:1;1799:18;;95264:46:0;1680:226:1;95203:118:0;95330:26;95404:10;95393:42;;;;;;;;;;;;:::i;:::-;95366:69;-1:-1:-1;95366:69:0;-1:-1:-1;95454:33:0;95366:69;95454:31;:33::i;:::-;95445:42;;94810:684;;;94657:837;;;:::o;53466:101::-;52704:13;:11;:13::i;:::-;53530:30:::1;53557:1;53530:18;:30::i;:::-;53466:101::o:0;95566:283::-;95649:12;95680:162;85013:1;95783:48;95826:4;95783:42;:48::i;:::-;95680:42;:162::i;:::-;95673:169;95566:283;-1:-1:-1;;95566:283:0:o;89160:523::-;89230:14;89294:26;;;:11;:26;;;;;;89230:14;;89294:26;;;89330:108;;89379:48;;;;;;;;2578:25:1;;;2551:18;;89379:48:0;2432:177:1;89330:108:0;89447:18;89479:13;89494:8;89468:35;;;;;;;;20199:25:1;;;20272:42;20260:55;20255:2;20240:18;;20233:83;20187:2;20172:18;;20025:297;89468:35:0;;;;;;;-1:-1:-1;;89468:35:0;;;;;;;89577:16;;89468:35;89577:16;;;89537:57;;;;;;2578:25:1;89468:35:0;-1:-1:-1;89551:13:0;89537:39;;;;;2551:18:1;;89537:57:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;89609:67;;;12493:18:1;12538:15;;;12520:34;;12590:15;;12585:2;12570:18;;12563:43;89513:81:0;;-1:-1:-1;89513:81:0;;-1:-1:-1;89609:67:0;;;;89631:13;;89609:67;;12456:18:1;89609:67:0;;;;;;;89265:418;;89160:523;;;:::o;85886:237::-;52704:13;:11;:13::i;:::-;85959:19:::1;::::0;::::1;85955:95;;86001:38;;;;;;;;;;;;;;85955:95;86059:12;:20:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;86094:22:::1;::::0;1826:74:1;;;86094:22:0::1;::::0;1814:2:1;1799:18;86094:22:0::1;;;;;;;85886:237:::0;:::o;90565:1567::-;90721:18;90741:16;90759:17;90792:22;90817:23;90835:4;90817:17;:23::i;:::-;90854:35;;;;;90792:48;;-1:-1:-1;90854:4:0;;:17;;:35;;90792:48;;90883:5;;;;90854:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;90854:35:0;;;;;;;;-1:-1:-1;;90854:35:0;;;;;;;;;;;;:::i;:::-;;;90850:1276;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;91008:15;91071:28;91089:9;91071:17;:28::i;:::-;91037:62;;-1:-1:-1;91037:62:0;-1:-1:-1;91037:62:0;-1:-1:-1;91117:58:0;;;;;91113:1003;;91204:27;91195:36;;91113:1003;;;91256:64;;;;;91252:864;;91349:34;91340:43;;91252:864;;;91408:54;;;;;91404:712;;91491:25;91482:34;;91404:712;;;91541:57;;;;;91537:579;;91627:28;91618:37;;91537:579;;;91680:70;;;;;91676:440;;91779:41;91770:50;;91676:440;;;91845:59;;;;;91841:275;;91933:29;91924:38;;91841:275;;;92010:30;;-1:-1:-1;92069:1:0;;-1:-1:-1;92069:1:0;;-1:-1:-1;91841:275:0;90994:1132;90963:1163;90850:1276;;;-1:-1:-1;90927:17:0;;-1:-1:-1;90927:17:0;;-1:-1:-1;90927:17:0;;-1:-1:-1;90919:32:0;;-1:-1:-1;90919:32:0;90850:1276;90782:1350;90565:1567;;;;;;;;:::o;92533:922::-;92775:11;92802:31;92822:10;92802:19;:31::i;:::-;-1:-1:-1;92847:33:0;;;92843:120;;92903:49;;;;;;;;;;;;;;92843:120;93040:25;:7;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;93040:23:0;;-1:-1:-1;;;93040:25:0:i;:::-;-1:-1:-1;93127:69:0;;;;;:45;93141:13;93127:45;;;;:69;;93173:10;;93185;;;;93127:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;93121:75;-1:-1:-1;93257:19:0;93279:64;93316:7;93332:10;93279:36;:64::i;:::-;93360:88;;;;;93257:86;;-1:-1:-1;93360:54:0;;;;;;:88;;93415:10;;93257:86;;93440:7;;;;93360:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;93353:95;;;;:::i;:::-;;92533:922;-1:-1:-1;;;;;;;;;92533:922:0:o;94420:149::-;-1:-1:-1;;;;;;;;;;;;;;;;;94530:32:0;:14;:30;:32::i;53716:215::-;52704:13;:11;:13::i;:::-;53800:22:::1;::::0;::::1;53796:91;;53845:31;::::0;::::1;::::0;;53873:1:::1;53845:31;::::0;::::1;1826:74:1::0;1799:18;;53845:31:0::1;1680:226:1::0;53796:91:0::1;53896:28;53915:8;53896:18;:28::i;:::-;53716:215:::0;:::o;86168:171::-;52704:13;:11;:13::i;:::-;86254:22:::1;::::0;::::1;;::::0;;;:13:::1;:22;::::0;;;;;;;;:31;;;86300:32;;24005:50:1;;;24071:18;;24064:34;;;86300:32:0::1;::::0;23978:18:1;86300:32:0::1;;;;;;;86168:171:::0;;:::o;92177:136::-;92247:7;92273:11;:33;92295:9;;92285:20;;;;;;;:::i;:::-;;;;;;;;;;;92273:33;;;;;;;;;;-1:-1:-1;92273:33:0;;;;;92177:136;-1:-1:-1;;;92177:136:0:o;103624:560::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103800:24:0;:11;;:22;:24::i;:::-;103783:41;-1:-1:-1;103838:25:0;;;85013:1;103838:25;103834:125;;103886:62;;;;;24289:6:1;24322:15;;103886:62:0;;;24304:34:1;85013:1:0;24354:18:1;;;24347:43;24252:18;;103886:62:0;24109:287:1;103834:125:0;103975:68;104018:24;:11;;:22;:24::i;:::-;103975:42;:68::i;:::-;103968:75;;104076:13;104057:4;:15;;;:32;;;104053:125;;104151:15;;;;104112:55;;;;;16968:18:1;16956:31;;;104112:55:0;;;16938:50:1;16911:18;;104112:55:0;16794:200:1;104053:125:0;103773:411;103624:560;;;;:::o;50315:597::-;-1:-1:-1;;;;;;;;;;;;;;;;;50410:14:0;50427:27;:4;:25;:27::i;:::-;50410:44;-1:-1:-1;50092:1:0;50468:20;;;;50464:93;;;50511:35;;;;;8429:6:1;8417:19;;50511:35:0;;;8399:38:1;8372:18;;50511:35:0;8255:188:1;50464:93:0;50864:27;:4;:25;:27::i;:::-;50853:52;;;;;;;;;;;;:::i;:::-;50846:59;50315:597;-1:-1:-1;;;50315:597:0:o;99235:1574::-;99420:20;99443:36;99463:4;:15;;;99443:19;:36::i;:::-;99531:1;99493:26;;;:11;:26;;;;;;99420:59;;-1:-1:-1;99493:40:0;:26;:40;99489:130;;99556:52;;;;;;;;2578:25:1;;;2551:18;;99556:52:0;2432:177:1;99489:130:0;99701:28;99732:327;;;;;;;;99774:4;:15;;;99732:327;;;;;;99812:4;:12;;;99732:327;;;;;;99849:199;99905:12;99945:13;99988:4;:15;;;100028:5;;99849:26;:199::i;:::-;99732:327;;;99701:358;;100069:16;100088:35;:4;:16;;;7993:1;7883:121;100088:35;100069:54;;100134:28;100164:32;100200:33;100224:8;100200:23;:33::i;:::-;100247:27;;100133:100;;-1:-1:-1;100133:100:0;-1:-1:-1;100247:27:0;:32;100243:129;;100302:59;;;;;1856:42:1;1844:55;;100302:59:0;;;1826:74:1;1799:18;;100302:59:0;1680:226:1;100243:129:0;100446:51;100469:20;100479:9;100469;:20::i;:::-;100491:5;100446:22;:51::i;:::-;100507:26;100536:79;100564:15;100581:5;100588:9;:26;;;100536:27;:79::i;:::-;100650:27;;100507:108;;-1:-1:-1;100629:48:0;;100625:178;;;100764:27;;100700:92;;;;;;;100744:18;;100700:92;;17173:25:1;;;17229:2;17214:18;;17207:34;17161:2;17146:18;;16999:248;100625:178:0;99410:1399;;;;;;99235:1574;;;;:::o;96251:2605::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;96559:31:0;96579:10;96559:19;:31::i;:::-;-1:-1:-1;96616:1:0;96604:13;;;96600:92;;96640:41;;;;;;;;;;;;;;96600:92;96705:33;;;96701:120;;96761:49;;;;;;;;;;;;;;96701:120;96898:25;:7;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;96898:23:0;;-1:-1:-1;;;96898:25:0:i;:::-;-1:-1:-1;96959:69:0;;;;;96933:23;;96959:45;96973:13;96959:45;;;;:69;;97005:10;;97017;;;;96959:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;96933:95;;97054:15;97042:9;:27;97038:130;;;97092:65;;;;;97130:9;97092:65;;;17173:25:1;17214:18;;;17207:34;;;17146:18;;97092:65:0;16999:248:1;97038:130:0;97225:13;97211:46;;;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;97178:4;:12;;97192:4;:15;;97177:82;;;;;;;;;;;;;;;;;;97269:33;97305:304;97381:10;97452;97418:8;97485:4;:12;;;97523:4;:15;;;97561:7;;97305:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;97591:7;;97305:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;97305:50:0;;-1:-1:-1;;;97305:304:0:i;:::-;97269:340;;97650:23;97668:4;97650:17;:23::i;:::-;97640:34;;;;;;97619:4;:18;;:55;;;;;97804:14;97820:17;97855:13;97841:55;;;97921:15;97951:4;:15;;;97968:4;:18;;;97988:10;;97841:158;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;97803:196;;;;98031:4;:12;;;98020:23;;:7;:23;;;:56;;;;;98061:4;:15;;;98047:29;;:10;:29;;;98020:56;98013:64;;;;:::i;:::-;-1:-1:-1;;98318:15:0;;;;98166:9;:27;;;;98213:57;;;;;;98166:27;;98362:68;98399:7;98415;98362:36;:68::i;:::-;98459:18;;98213:305;;;;;;;;;;;;;;98459:18;98500:7;;;;98213:305;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;98716:4;:16;;;98688:4;:14;;;98572:4;:18;;;98533:316;98604:4;:12;;;98630:4;:15;;;98659:4;:15;;;98746;98775:12;98801:4;:12;;;98827:4;:12;;;98533:316;;;;;;;;;;;;:::i;:::-;;;;;;;;96549:2307;;;96251:2605;;;;;;;;;;;:::o;48540:608::-;48609:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48609:18:0;48639:14;48656:27;:4;:25;:27::i;:::-;48639:44;-1:-1:-1;48307:1:0;48697:23;;;;48693:98;;;48743:37;;;;;8429:6:1;8417:19;;48743:37:0;;;8399:38:1;8372:18;;48743:37:0;8255:188:1;48693:98:0;49098:27;:4;:25;:27::i;:::-;49087:54;;;;;;;;;;;;:::i;52969:162::-;52857:7;52883:6;53028:23;52883:6;12644:10;53028:23;53024:101;;53074:40;;;;;12644:10;53074:40;;;1826:74:1;1799:18;;53074:40:0;1680:226:1;54085:187:0;54158:16;54177:6;;;54193:17;;;;;;;;;;54225:40;;54177:6;;;;;;;54225:40;;54158:16;54225:40;54148:124;54085:187;:::o;62133:409::-;62225:12;62280:107;62295:11;:22;;;62319:11;:22;;;62343:11;:19;;;62364:11;:22;;;63760:26;63783:3;63760:26;;;;63791;63814:3;63791:26;;;;63759:59;63822:22;63842:2;63822:22;;;;63759:86;63848:19;;;63759:108;63515:369;;;;;;;62280:107;62401:11;:21;;;62436:11;:23;;;62473:11;:19;;;62506:11;:19;;;62256:279;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;62249:286;;62133:409;;;:::o;8575:165::-;8668:12;8716:7;8725;8699:34;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8692:41;;8575:165;;;;:::o;104510:1394::-;104609:15;104626:16;104644:17;104946:1;104925:10;:17;:22;104921:490;;105370:4;105354:21;;105348:28;105273:18;105344:43;;-1:-1:-1;104921:490:0;105445:2;105424:10;:17;:23;105420:225;;105615:4;105603:10;105599:21;105593:28;105581:40;;105420:225;105679:2;105658:10;:17;:23;105654:244;;-1:-1:-1;105868:4:0;105852:21;;105846:28;105654:244;104510:1394;;;;;:::o;100900:369::-;100968:20;101015:13;101004:7;:24;;;101000:107;;101051:45;;;;;16968:18:1;16956:31;;101051:45:0;;;16938:50:1;16911:18;;101051:45:0;16794:200:1;101000:107:0;-1:-1:-1;101131:22:0;;;;;;;:13;:22;;;;;;;101167:17;;;101163:100;;101207:45;;;;;16968:18:1;16956:31;;101207:45:0;;;16938:50:1;16911:18;;101207:45:0;16794:200:1;101163:100:0;100900:369;;;:::o;62965:544::-;63049:7;-1:-1:-1;;7669:2:0;7650:6;;7649:23;-1:-1:-1;;7669:2:0;7650:6;;7649:23;63441:32;;:3;:32;:::i;:::-;:61;;;;:::i;8912:432::-;8988:14;8282:1;9018:40;;9014:129;;;9115:16;;9081:51;;;;;;;;;;;;:::i;9014:129::-;-1:-1:-1;;9290:37:0;9285:3;9281:47;;8912:432::o;9572:287::-;9648:14;;8282:1;9678:40;;9674:129;;;9775:16;;9741:51;;;;;;;;;;;;:::i;9674:129::-;9819:33;:16;8282:1;9819:16;;:33;:::i;:::-;9812:40;;;;9572:287;;;;;;:::o;62548:411::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;62783:69:0;;;;;;:::i;:::-;62755:12;;;62698:154;62741:12;;;62698:154;62723:16;;;62698:154;62707:14;;;62698:154;;-1:-1:-1;62930:22:0;62698:154;64116:3;64087:32;;;;64179:3;64150:32;;;;64239:2;64210:31;;;;63890:415;62930:22;62862:90;;;;62911:15;;;62862:90;;;;62897:12;;;62862:90;;;;62880:15;;;62862:90;;;;-1:-1:-1;62863:4:0;62548:411;-1:-1:-1;;62548:411:0:o;10027:503::-;10111:14;8282:1;10141:16;:23;:40;10137:129;;;10238:16;10204:51;;;;;;;;;;;:::i;10137:129::-;-1:-1:-1;10507:4:0;10485:27;10479:34;10474:3;10470:44;;10027:503::o;10844:1060::-;10928:20;8282:1;10964:16;:23;:40;10960:129;;;11061:16;11027:51;;;;;;;;;;;:::i;10960:129::-;11247:23;;:40;;;11317:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11317:17:0;;11307:27;;11458:8;11794:6;11787:4;11778:7;11774:18;11766:6;11759:4;11741:16;11737:27;11731:4;11724:5;11713:88;11706:95;;11825:3;11820:78;;11851:36;;;;;;;;;;;;;;11820:78;10950:954;;10844:1060;;;:::o;60199:653::-;60388:17;60492:15;;;;60488:94;;60530:41;;;;;16968:18:1;16956:31;;60530:41:0;;;16938:50:1;16911:18;;60530:41:0;16794:200:1;60488:94:0;60595:17;;60591:82;;60635:27;;;;;;;;;;;;;;60591:82;59558:31;;;;;;;17173:25:1;;;17214:18;;;17207:34;;;59558:31:0;;;;;;;;;17146:18:1;;;;59558:31:0;;;59548:42;;;;;60769:76;60762:83;60199:653;-1:-1:-1;;;;;;60199:653:0:o;101800:331::-;101895:19;;;;101872:7;;101891:96;;-1:-1:-1;101974:1:0;;101800:331;-1:-1:-1;101800:331:0:o;101891:96::-;102000:19;;;;:47;;101996:97;;-1:-1:-1;;102070:12:0;;;;;101800:331::o;101996:97::-;-1:-1:-1;102109:15:0;;;;101800:331::o;101350:372::-;101455:19;;;;101451:265;;101512:65;;;;;;:51;30239:55:1;;;101512:65:0;;;30221:74:1;30372:13;;30314:18;30368:22;;;30348:18;;;30341:50;30363:2;30437:15;;30431:22;30427:31;30407:18;;;30400:59;30501:15;;;30495:22;30475:18;;;30468:50;101490:19:0;;101526:13;101512:51;;;;30193:19:1;;101512:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;101490:87;;55143:17;101595:11;:29;101591:115;;101651:40;;;;;1856:42:1;1844:55;;101651:40:0;;;1826:74:1;1799:18;;101651:40:0;1680:226:1;101591:115:0;101476:240;101451:265;101350:372;;:::o;102307:1130::-;102511:26;;102553:878;102577:15;:22;102573:1;:26;102553:878;;;102620:14;102637:15;102653:1;102637:18;;;;;;;;:::i;:::-;;;;;;;;;;;;102691:66;;;;;;:51;30239:55:1;;;102691:66:0;;;30221:74:1;30372:13;;30314:18;30368:22;;;30348:18;;;30341:50;30437:15;;;30431:22;30427:31;;;30407:18;;;30400:59;30501:15;;;30495:22;30475:18;;;30468:50;102637:18:0;;-1:-1:-1;102669:19:0;;102705:13;102691:51;;;;30193:19:1;;102691:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;102669:88;-1:-1:-1;102669:88:0;102856:78;;102911:8;;;;102856:78;55143:17;103044:11;:29;103040:116;;103100:41;;;;;1856:42:1;1844:55;;103100:41:0;;;1826:74:1;1799:18;;103100:41:0;1680:226:1;103040:116:0;103301:15;103268:30;103282:16;103268:11;:30;:::i;:::-;:48;103264:157;;;103368:20;;;;;103264:157;102606:825;;102553:878;102601:3;;;:::i;:::-;;;102553:878;;;;102307:1130;;;;;:::o;61422:705::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;61767:353:0;;;;;;;;61815:32;61833:13;61815:17;:32::i;:::-;61767:353;;;;;;61935:10;61767:353;;;;;;62006:7;61767:353;;;;;;62039:10;61767:353;;;;;;61872:37;61899:9;7847:22;;;7750:127;61872:37;61767:353;;;;61972:11;61767:353;;;;62072:7;61767:353;;;;62102:7;61767:353;;;61760:360;;61422:705;;;;;;;;;:::o;26171:213::-;26227:6;26257:16;26249:24;;26245:103;;;26327:2;26296:41;;;;;;;;31352:36:1;;;;31404:18;;;31397:34;;;31325:18;;26296:41:0;31171:266:1;26245:103:0;-1:-1:-1;26371:5:0;26171:213::o;14:347:1:-;65:8;75:6;129:3;122:4;114:6;110:17;106:27;96:55;;147:1;144;137:12;96:55;-1:-1:-1;170:20:1;;213:18;202:30;;199:50;;;245:1;242;235:12;199:50;282:4;274:6;270:17;258:29;;334:3;327:4;318:6;310;306:19;302:30;299:39;296:59;;;351:1;348;341:12;366:367;429:8;439:6;493:3;486:4;478:6;474:17;470:27;460:55;;511:1;508;501:12;460:55;-1:-1:-1;534:20:1;;577:18;566:30;;563:50;;;609:1;606;599:12;563:50;646:4;638:6;634:17;622:29;;706:3;699:4;689:6;686:1;682:14;674:6;670:27;666:38;663:47;660:67;;;723:1;720;713:12;738:745;844:6;852;860;868;921:2;909:9;900:7;896:23;892:32;889:52;;;937:1;934;927:12;889:52;977:9;964:23;1006:18;1047:2;1039:6;1036:14;1033:34;;;1063:1;1060;1053:12;1033:34;1102:58;1152:7;1143:6;1132:9;1128:22;1102:58;:::i;:::-;1179:8;;-1:-1:-1;1076:84:1;-1:-1:-1;1267:2:1;1252:18;;1239:32;;-1:-1:-1;1283:16:1;;;1280:36;;;1312:1;1309;1302:12;1280:36;;1351:72;1415:7;1404:8;1393:9;1389:24;1351:72;:::i;:::-;738:745;;;;-1:-1:-1;1442:8:1;-1:-1:-1;;;;738:745:1:o;1911:129::-;1996:18;1989:5;1985:30;1978:5;1975:41;1965:69;;2030:1;2027;2020:12;2045:132;2112:20;;2141:30;2112:20;2141:30;:::i;2182:245::-;2240:6;2293:2;2281:9;2272:7;2268:23;2264:32;2261:52;;;2309:1;2306;2299:12;2261:52;2348:9;2335:23;2367:30;2391:5;2367:30;:::i;2614:154::-;2700:42;2693:5;2689:54;2682:5;2679:65;2669:93;;2758:1;2755;2748:12;2773:1450;2925:6;2933;2941;2949;2957;2965;2973;2981;2989;3042:3;3030:9;3021:7;3017:23;3013:33;3010:53;;;3059:1;3056;3049:12;3010:53;3098:9;3085:23;3117:30;3141:5;3117:30;:::i;:::-;3166:5;-1:-1:-1;3223:2:1;3208:18;;3195:32;3236:33;3195:32;3236:33;:::i;:::-;3288:7;-1:-1:-1;3347:2:1;3332:18;;3319:32;3360:33;3319:32;3360:33;:::i;:::-;3412:7;-1:-1:-1;3470:2:1;3455:18;;3442:32;3493:18;3523:14;;;3520:34;;;3550:1;3547;3540:12;3520:34;3589:70;3651:7;3642:6;3631:9;3627:22;3589:70;:::i;:::-;3678:8;;-1:-1:-1;3563:96:1;-1:-1:-1;3766:3:1;3751:19;;3738:33;;-1:-1:-1;3783:16:1;;;3780:36;;;3812:1;3809;3802:12;3780:36;3851:60;3903:7;3892:8;3881:9;3877:24;3851:60;:::i;:::-;3930:8;;-1:-1:-1;3825:86:1;-1:-1:-1;4018:3:1;4003:19;;3990:33;;-1:-1:-1;4035:16:1;;;4032:36;;;4064:1;4061;4054:12;4032:36;;4103:60;4155:7;4144:8;4133:9;4129:24;4103:60;:::i;:::-;4077:86;;4182:8;4172:18;;;4209:8;4199:18;;;2773:1450;;;;;;;;;;;:::o;4719:813::-;4834:6;4842;4850;4858;4866;4919:2;4907:9;4898:7;4894:23;4890:32;4887:52;;;4935:1;4932;4925:12;4887:52;4971:9;4958:23;4948:33;;5032:2;5021:9;5017:18;5004:32;5055:18;5096:2;5088:6;5085:14;5082:34;;;5112:1;5109;5102:12;5082:34;5151:58;5201:7;5192:6;5181:9;5177:22;5151:58;:::i;:::-;5228:8;;-1:-1:-1;5125:84:1;-1:-1:-1;5316:2:1;5301:18;;5288:32;;-1:-1:-1;5332:16:1;;;5329:36;;;5361:1;5358;5351:12;5329:36;;5400:72;5464:7;5453:8;5442:9;5438:24;5400:72;:::i;:::-;4719:813;;;;-1:-1:-1;4719:813:1;;-1:-1:-1;5491:8:1;;5374:98;4719:813;-1:-1:-1;;;4719:813:1:o;5537:1377::-;5689:6;5697;5705;5713;5721;5729;5737;5745;5753;5806:3;5794:9;5785:7;5781:23;5777:33;5774:53;;;5823:1;5820;5813:12;5774:53;5862:9;5849:23;5881:30;5905:5;5881:30;:::i;:::-;5930:5;-1:-1:-1;5982:2:1;5967:18;;5954:32;;-1:-1:-1;6038:2:1;6023:18;;6010:32;6051:33;6010:32;6051:33;:::i;6919:247::-;6978:6;7031:2;7019:9;7010:7;7006:23;7002:32;6999:52;;;7047:1;7044;7037:12;6999:52;7086:9;7073:23;7105:31;7130:5;7105:31;:::i;7171:1079::-;7399:4;7447:3;7436:9;7432:19;7484:6;7478:13;7467:9;7460:32;7511:4;7569:2;7561:6;7557:15;7551:22;7546:2;7535:9;7531:18;7524:50;7630:4;7622:6;7618:17;7612:24;7605:4;7594:9;7590:20;7583:54;7684:4;7676:6;7672:17;7666:24;7709:42;7807:2;7793:12;7789:21;7782:4;7771:9;7767:20;7760:51;7848:3;7842;7831:9;7827:19;7820:32;7872:6;7861:17;;7907:6;7901:13;7938:6;7930;7923:22;7976:3;7965:9;7961:19;7954:26;;8015:2;8007:6;8003:15;7989:29;;8036:1;8046:178;8060:6;8057:1;8054:13;8046:178;;;8125:13;;8121:22;;8109:35;;8199:15;;;;8164:12;;;;8082:1;8075:9;8046:178;;;-1:-1:-1;8241:3:1;;7171:1079;-1:-1:-1;;;;;;;;7171:1079:1:o;8448:184::-;8500:77;8497:1;8490:88;8597:4;8594:1;8587:15;8621:4;8618:1;8611:15;8637:255;8709:2;8703:9;8751:6;8739:19;;8788:18;8773:34;;8809:22;;;8770:62;8767:88;;;8835:18;;:::i;:::-;8871:2;8864:22;8637:255;:::o;8897:334::-;8968:2;8962:9;9024:2;9014:13;;-1:-1:-1;;9010:86:1;8998:99;;9127:18;9112:34;;9148:22;;;9109:62;9106:88;;;9174:18;;:::i;:::-;9210:2;9203:22;8897:334;;-1:-1:-1;8897:334:1:o;9236:245::-;9284:4;9317:18;9309:6;9306:30;9303:56;;;9339:18;;:::i;:::-;-1:-1:-1;9396:2:1;9384:15;-1:-1:-1;;9380:88:1;9470:4;9376:99;;9236:245::o;9486:462::-;9528:5;9581:3;9574:4;9566:6;9562:17;9558:27;9548:55;;9599:1;9596;9589:12;9548:55;9635:6;9622:20;9666:48;9682:31;9710:2;9682:31;:::i;:::-;9666:48;:::i;:::-;9739:2;9730:7;9723:19;9785:3;9778:4;9773:2;9765:6;9761:15;9757:26;9754:35;9751:55;;;9802:1;9799;9792:12;9751:55;9867:2;9860:4;9852:6;9848:17;9841:4;9832:7;9828:18;9815:55;9915:1;9890:16;;;9908:4;9886:27;9879:38;;;;9894:7;9486:462;-1:-1:-1;;;9486:462:1:o;9953:981::-;10021:5;10069:6;10057:9;10052:3;10048:19;10044:32;10041:52;;;10089:1;10086;10079:12;10041:52;10111:22;;:::i;:::-;10102:31;;10156:28;10174:9;10156:28;:::i;:::-;10149:5;10142:43;10217:37;10250:2;10239:9;10235:18;10217:37;:::i;:::-;10212:2;10205:5;10201:14;10194:61;10287:37;10320:2;10309:9;10305:18;10287:37;:::i;:::-;10282:2;10275:5;10271:14;10264:61;10357:37;10390:2;10379:9;10375:18;10357:37;:::i;:::-;10352:2;10345:5;10341:14;10334:61;10456:3;10445:9;10441:19;10428:33;10422:3;10415:5;10411:15;10404:58;10523:3;10512:9;10508:19;10495:33;10489:3;10482:5;10478:15;10471:58;10580:3;10569:9;10565:19;10552:33;10604:18;10645:2;10637:6;10634:14;10631:34;;;10661:1;10658;10651:12;10631:34;10698:45;10739:3;10730:6;10719:9;10715:22;10698:45;:::i;:::-;10692:3;10685:5;10681:15;10674:70;10797:3;10786:9;10782:19;10769:33;10753:49;;10827:2;10817:8;10814:16;10811:36;;;10843:1;10840;10833:12;10811:36;;10880:47;10923:3;10912:8;10901:9;10897:24;10880:47;:::i;:::-;10874:3;10867:5;10863:15;10856:72;;9953:981;;;;:::o;10939:373::-;11037:6;11090:2;11078:9;11069:7;11065:23;11061:32;11058:52;;;11106:1;11103;11096:12;11058:52;11146:9;11133:23;11179:18;11171:6;11168:30;11165:50;;;11211:1;11208;11201:12;11165:50;11234:72;11298:7;11289:6;11278:9;11274:22;11234:72;:::i;:::-;11224:82;10939:373;-1:-1:-1;;;;10939:373:1:o;11317:250::-;11402:1;11412:113;11426:6;11423:1;11420:13;11412:113;;;11502:11;;;11496:18;11483:11;;;11476:39;11448:2;11441:10;11412:113;;;-1:-1:-1;;11559:1:1;11541:16;;11534:27;11317:250::o;11572:329::-;11613:3;11651:5;11645:12;11678:6;11673:3;11666:19;11694:76;11763:6;11756:4;11751:3;11747:14;11740:4;11733:5;11729:16;11694:76;:::i;:::-;11815:2;11803:15;-1:-1:-1;;11799:88:1;11790:98;;;;11890:4;11786:109;;11572:329;-1:-1:-1;;11572:329:1:o;11906:217::-;12053:2;12042:9;12035:21;12016:4;12073:44;12113:2;12102:9;12098:18;12090:6;12073:44;:::i;12128:180::-;12187:6;12240:2;12228:9;12219:7;12215:23;12211:32;12208:52;;;12256:1;12253;12246:12;12208:52;-1:-1:-1;12279:23:1;;12128:180;-1:-1:-1;12128:180:1:o;12617:709::-;12751:6;12759;12767;12820:2;12808:9;12799:7;12795:23;12791:32;12788:52;;;12836:1;12833;12826:12;12788:52;12876:9;12863:23;12905:18;12946:2;12938:6;12935:14;12932:34;;;12962:1;12959;12952:12;12932:34;12985:72;13049:7;13040:6;13029:9;13025:22;12985:72;:::i;:::-;12975:82;;13110:2;13099:9;13095:18;13082:32;13066:48;;13139:2;13129:8;13126:16;13123:36;;;13155:1;13152;13145:12;13123:36;;13194:72;13258:7;13247:8;13236:9;13232:24;13194:72;:::i;:::-;12617:709;;13285:8;;-1:-1:-1;13168:98:1;;-1:-1:-1;;;;12617:709:1:o;13331:543::-;13535:2;13520:18;;13568:1;13557:13;;13547:201;;13604:77;13601:1;13594:88;13705:4;13702:1;13695:15;13733:4;13730:1;13723:15;13547:201;13757:25;;;13813:2;13798:18;;13791:34;;;;13856:2;13841:18;;;13834:34;13331:543;:::o;13879:1089::-;14011:6;14019;14027;14035;14043;14051;14059;14112:3;14100:9;14091:7;14087:23;14083:33;14080:53;;;14129:1;14126;14119:12;14080:53;14168:9;14155:23;14187:30;14211:5;14187:30;:::i;:::-;14236:5;-1:-1:-1;14293:2:1;14278:18;;14265:32;14306:33;14265:32;14306:33;:::i;:::-;14358:7;-1:-1:-1;14416:2:1;14401:18;;14388:32;14439:18;14469:14;;;14466:34;;;14496:1;14493;14486:12;14466:34;14535:70;14597:7;14588:6;14577:9;14573:22;14535:70;:::i;:::-;14624:8;;-1:-1:-1;14509:96:1;-1:-1:-1;14712:2:1;14697:18;;14684:32;;-1:-1:-1;14728:16:1;;;14725:36;;;14757:1;14754;14747:12;14725:36;;14796:60;14848:7;14837:8;14826:9;14822:24;14796:60;:::i;:::-;13879:1089;;;;-1:-1:-1;13879:1089:1;;;;;;14957:3;14942:19;;;14929:33;;13879:1089;-1:-1:-1;;;;13879:1089:1:o;15155:320::-;15223:6;15276:2;15264:9;15255:7;15251:23;15247:32;15244:52;;;15292:1;15289;15282:12;15244:52;15332:9;15319:23;15365:18;15357:6;15354:30;15351:50;;;15397:1;15394;15387:12;15351:50;15420:49;15461:7;15452:6;15441:9;15437:22;15420:49;:::i;15786:313::-;15853:6;15861;15914:2;15902:9;15893:7;15889:23;15885:32;15882:52;;;15930:1;15927;15920:12;15882:52;15969:9;15956:23;15988:30;16012:5;15988:30;:::i;:::-;16037:5;16089:2;16074:18;;;;16061:32;;-1:-1:-1;;;15786:313:1:o;16104:409::-;16174:6;16182;16235:2;16223:9;16214:7;16210:23;16206:32;16203:52;;;16251:1;16248;16241:12;16203:52;16291:9;16278:23;16324:18;16316:6;16313:30;16310:50;;;16356:1;16353;16346:12;16310:50;16395:58;16445:7;16436:6;16425:9;16421:22;16395:58;:::i;:::-;16472:8;;16369:84;;-1:-1:-1;16104:409:1;-1:-1:-1;;;;16104:409:1:o;16518:271::-;16701:6;16693;16688:3;16675:33;16657:3;16727:16;;16752:13;;;16727:16;16518:271;-1:-1:-1;16518:271:1:o;17252:562::-;17468:4;17497:18;17554:2;17546:6;17542:15;17531:9;17524:34;17594:6;17589:2;17578:9;17574:18;17567:34;17649:2;17641:6;17637:15;17632:2;17621:9;17617:18;17610:43;17701:2;17693:6;17689:15;17684:2;17673:9;17669:18;17662:43;;17742:3;17736;17725:9;17721:19;17714:32;17763:45;17803:3;17792:9;17788:19;17780:6;17763:45;:::i;:::-;17755:53;17252:562;-1:-1:-1;;;;;;;17252:562:1:o;18201:287::-;18330:3;18368:6;18362:13;18384:66;18443:6;18438:3;18431:4;18423:6;18419:17;18384:66;:::i;:::-;18466:16;;;;;18201:287;-1:-1:-1;;18201:287:1:o;18493:1527::-;18606:6;18614;18667:2;18655:9;18646:7;18642:23;18638:32;18635:52;;;18683:1;18680;18673:12;18635:52;18716:9;18710:16;18745:18;18786:2;18778:6;18775:14;18772:34;;;18802:1;18799;18792:12;18772:34;18840:6;18829:9;18825:22;18815:32;;18885:7;18878:4;18874:2;18870:13;18866:27;18856:55;;18907:1;18904;18897:12;18856:55;18936:2;18930:9;18958:4;18984:48;19000:31;19028:2;19000:31;:::i;18984:48::-;19055:2;19048:5;19041:17;19095:7;19090:2;19085;19081;19077:11;19073:20;19070:33;19067:53;;;19116:1;19113;19106:12;19067:53;19129:67;19193:2;19188;19181:5;19177:14;19172:2;19168;19164:11;19129:67;:::i;:::-;19251:18;;;19245:25;19215:5;;-1:-1:-1;19245:25:1;-1:-1:-1;19282:16:1;;;19279:36;;;19311:1;19308;19301:12;19279:36;19349:8;19338:9;19334:24;19324:34;;19396:7;19389:4;19385:2;19381:13;19377:27;19367:55;;19418:1;19415;19408:12;19367:55;19447:2;19441:9;19431:19;;19469:2;19465;19462:10;19459:36;;;19475:18;;:::i;:::-;19521:2;19518:1;19514:10;19504:20;;19544:28;19568:2;19564;19560:11;19544:28;:::i;:::-;19606:15;;;19676:11;;;19672:20;;;19637:12;;;;19704:19;;;19701:39;;;19736:1;19733;19726:12;19701:39;19760:11;;;;19780:210;19796:6;19791:3;19788:15;19780:210;;;19869:3;19863:10;19850:23;;19886:31;19911:5;19886:31;:::i;:::-;19930:18;;;19813:12;;;;19968;;;;19780:210;;;20009:5;19999:15;;;;;;;;18493:1527;;;;;:::o;20327:381::-;20404:6;20412;20465:2;20453:9;20444:7;20440:23;20436:32;20433:52;;;20481:1;20478;20471:12;20433:52;20513:9;20507:16;20532:30;20556:5;20532:30;:::i;:::-;20631:2;20616:18;;20610:25;20581:5;;-1:-1:-1;20644:32:1;20610:25;20644:32;:::i;:::-;20695:7;20685:17;;;20327:381;;;;;:::o;20713:644::-;20948:2;20937:9;20930:21;20911:4;20974:44;21014:2;21003:9;20999:18;20991:6;20974:44;:::i;:::-;21066:9;21058:6;21054:22;21049:2;21038:9;21034:18;21027:50;21101:6;21093;21086:22;21131:66;21123:6;21120:78;21117:98;;;21211:1;21208;21201:12;21117:98;21245:6;21242:1;21238:14;21299:6;21291;21286:2;21278:6;21274:15;21261:45;21327:19;21348:2;21323:28;;20713:644;-1:-1:-1;;;;;20713:644:1:o;21362:277::-;21429:6;21482:2;21470:9;21461:7;21457:23;21453:32;21450:52;;;21498:1;21495;21488:12;21450:52;21530:9;21524:16;21583:5;21576:13;21569:21;21562:5;21559:32;21549:60;;21605:1;21602;21595:12;21644:545;21744:6;21739:3;21732:19;21714:3;21770:4;21799:2;21794:3;21790:12;21783:19;;21825:5;21848:1;21858:306;21872:6;21869:1;21866:13;21858:306;;;21949:6;21936:20;21969:33;21994:7;21969:33;:::i;:::-;22040:42;22027:56;22015:69;;22104:12;;;;22139:15;;;;21894:1;21887:9;21858:306;;;-1:-1:-1;22180:3:1;;21644:545;-1:-1:-1;;;;;21644:545:1:o;22194:382::-;22421:18;22413:6;22409:31;22398:9;22391:50;22477:2;22472;22461:9;22457:18;22450:30;22372:4;22497:73;22566:2;22555:9;22551:18;22543:6;22535;22497:73;:::i;:::-;22489:81;22194:382;-1:-1:-1;;;;;22194:382:1:o;22581:184::-;22651:6;22704:2;22692:9;22683:7;22679:23;22675:32;22672:52;;;22720:1;22717;22710:12;22672:52;-1:-1:-1;22743:16:1;;22581:184;-1:-1:-1;22581:184:1:o;22770:325::-;22858:6;22853:3;22846:19;22910:6;22903:5;22896:4;22891:3;22887:14;22874:43;;22962:1;22955:4;22946:6;22941:3;22937:16;22933:27;22926:38;22828:3;23084:4;-1:-1:-1;;23009:2:1;23001:6;22997:15;22993:88;22988:3;22984:98;22980:109;22973:116;;22770:325;;;;:::o;23100:409::-;23323:18;23315:6;23311:31;23300:9;23293:50;23379:6;23374:2;23363:9;23359:18;23352:34;23422:2;23417;23406:9;23402:18;23395:30;23274:4;23442:61;23499:2;23488:9;23484:18;23476:6;23468;23442:61;:::i;23514:184::-;23566:77;23563:1;23556:88;23663:4;23660:1;23653:15;23687:4;23684:1;23677:15;23703:125;23768:9;;;23789:10;;;23786:36;;;23802:18;;:::i;24401:503::-;24498:6;24551:2;24539:9;24530:7;24526:23;24522:32;24519:52;;;24567:1;24564;24557:12;24519:52;24600:2;24594:9;24642:2;24634:6;24630:15;24711:6;24699:10;24696:22;24675:18;24663:10;24660:34;24657:62;24654:88;;;24722:18;;:::i;:::-;24758:2;24751:22;24797:16;;24782:32;;24868:2;24853:18;;;24847:25;24830:15;;;24823:50;;;;-1:-1:-1;24789:6:1;24401:503;-1:-1:-1;24401:503:1:o;24909:453::-;25164:18;25156:6;25152:31;25141:9;25134:50;25220:6;25215:2;25204:9;25200:18;25193:34;25263:2;25258;25247:9;25243:18;25236:30;25115:4;25283:73;25352:2;25341:9;25337:18;25329:6;25321;25283:73;:::i;25367:184::-;25419:77;25416:1;25409:88;25516:4;25513:1;25506:15;25540:4;25537:1;25530:15;25556:482;25807:18;25799:6;25795:31;25784:9;25777:50;25863:6;25858:2;25847:9;25843:18;25836:34;25906:6;25901:2;25890:9;25886:18;25879:34;25949:3;25944:2;25933:9;25929:18;25922:31;25758:4;25970:62;26027:3;26016:9;26012:19;26004:6;25996;25970:62;:::i;26043:795::-;26333:4;26362:18;26419:2;26411:6;26407:15;26396:9;26389:34;26471:2;26463:6;26459:15;26454:2;26443:9;26439:18;26432:43;26523:2;26515:6;26511:15;26506:2;26495:9;26491:18;26484:43;;26563:6;26558:2;26547:9;26543:18;26536:34;26607:6;26601:3;26590:9;26586:19;26579:35;26651:3;26645;26634:9;26630:19;26623:32;26678:45;26718:3;26707:9;26703:19;26695:6;26678:45;:::i;:::-;26772:9;26764:6;26760:22;26754:3;26743:9;26739:19;26732:51;26800:32;26825:6;26817;26800:32;:::i;26843:692::-;26942:6;26995:3;26983:9;26974:7;26970:23;26966:33;26963:53;;;27012:1;27009;27002:12;26963:53;27045:2;27039:9;27087:3;27079:6;27075:16;27157:6;27145:10;27142:22;27121:18;27109:10;27106:34;27103:62;27100:88;;;27168:18;;:::i;:::-;27208:10;27204:2;27197:22;;27249:9;27243:16;27235:6;27228:32;27314:2;27303:9;27299:18;27293:25;27288:2;27280:6;27276:15;27269:50;27373:2;27362:9;27358:18;27352:25;27347:2;27339:6;27335:15;27328:50;27421:2;27410:9;27406:18;27400:25;27434:31;27459:5;27434:31;:::i;:::-;27493:2;27481:15;;27474:30;27485:6;26843:692;-1:-1:-1;;;26843:692:1:o;27540:624::-;27848:6;27837:9;27830:25;27891:6;27886:2;27875:9;27871:18;27864:34;27934:6;27929:2;27918:9;27914:18;27907:34;27977:3;27972:2;27961:9;27957:18;27950:31;27811:4;28004:45;28044:3;28033:9;28029:19;28021:6;28004:45;:::i;:::-;28098:9;28090:6;28086:22;28080:3;28069:9;28065:19;28058:51;28126:32;28151:6;28143;28126:32;:::i;:::-;28118:40;27540:624;-1:-1:-1;;;;;;;;27540:624:1:o;28169:440::-;28376:66;28367:6;28362:3;28358:16;28354:89;28349:3;28342:102;28324:3;28473:6;28467:13;28489:74;28556:6;28552:1;28547:3;28543:11;28536:4;28528:6;28524:17;28489:74;:::i;:::-;28583:16;;;;28601:1;28579:24;;28169:440;-1:-1:-1;;;28169:440:1:o;28614:244::-;28771:2;28760:9;28753:21;28734:4;28791:61;28848:2;28837:9;28833:18;28825:6;28817;28791:61;:::i;28863:331::-;28968:9;28979;29021:8;29009:10;29006:24;29003:44;;;29043:1;29040;29033:12;29003:44;29072:6;29062:8;29059:20;29056:40;;;29092:1;29089;29082:12;29056:40;-1:-1:-1;;29118:23:1;;;29163:25;;;;;-1:-1:-1;28863:331:1:o;29199:776::-;29343:6;29351;29359;29367;29375;29428:3;29416:9;29407:7;29403:23;29399:33;29396:53;;;29445:1;29442;29435:12;29396:53;29481:9;29468:23;29458:33;;29538:2;29527:9;29523:18;29510:32;29500:42;;29589:2;29578:9;29574:18;29561:32;29551:42;;29644:2;29633:9;29629:18;29616:32;29667:18;29708:2;29700:6;29697:14;29694:34;;;29724:1;29721;29714:12;29694:34;29747:49;29788:7;29779:6;29768:9;29764:22;29747:49;:::i;:::-;29737:59;;29849:3;29838:9;29834:19;29821:33;29805:49;;29879:2;29869:8;29866:16;29863:36;;;29895:1;29892;29885:12;29863:36;;29918:51;29961:7;29950:8;29939:9;29935:24;29918:51;:::i;:::-;29908:61;;;29199:776;;;;;;;;:::o;30529:184::-;30581:77;30578:1;30571:88;30678:4;30675:1;30668:15;30702:4;30699:1;30692:15;30718:195;30757:3;30788:66;30781:5;30778:77;30775:103;;30858:18;;:::i;:::-;-1:-1:-1;30905:1:1;30894:13;;30718:195::o","abiDefinition":[{"inputs":[{"internalType":"address","name":"interchainDB","type":"address"},{"internalType":"address","name":"owner_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"AppConfigLib__VersionInvalid","type":"error"},{"inputs":[{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"BatchingV1__EntryIndexNotZero","type":"error"},{"inputs":[],"name":"BatchingV1__ProofNotEmpty","type":"error"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"InterchainClientV1__BatchConflict","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__ChainIdNotLinked","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__ChainIdNotRemote","type":"error"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"InterchainClientV1__DstChainIdNotLocal","type":"error"},{"inputs":[],"name":"InterchainClientV1__ExecutionServiceZeroAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__FeeAmountBelowMin","type":"error"},{"inputs":[{"internalType":"uint256","name":"gasLeft","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__GasLeftBelowMin","type":"error"},{"inputs":[],"name":"InterchainClientV1__GuardZeroAddress","type":"error"},{"inputs":[{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"InterchainClientV1__LinkedClientNotEVM","type":"error"},{"inputs":[{"internalType":"uint256","name":"msgValue","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__MsgValueMismatch","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"InterchainClientV1__ReceiverNotICApp","type":"error"},{"inputs":[],"name":"InterchainClientV1__ReceiverZeroAddress","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"InterchainClientV1__ReceiverZeroRequiredResponses","type":"error"},{"inputs":[{"internalType":"uint256","name":"responsesAmount","type":"uint256"},{"internalType":"uint256","name":"minRequired","type":"uint256"}],"name":"InterchainClientV1__ResponsesAmountBelowMin","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxAlreadyExecuted","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxNotExecuted","type":"error"},{"inputs":[{"internalType":"uint16","name":"txVersion","type":"uint16"},{"internalType":"uint16","name":"required","type":"uint16"}],"name":"InterchainClientV1__TxVersionMismatch","type":"error"},{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"OptionsLib__VersionInvalid","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"bytes","name":"versionedPayload","type":"bytes"}],"name":"VersionedPayload__PayloadTooShort","type":"error"},{"inputs":[],"name":"VersionedPayload__PrecompileFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guard","type":"address"}],"name":"DefaultGuardSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":true,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionProofWritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"srcChainId","type":"uint64"},{"indexed":true,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"dstChainId","type":"uint64"},{"indexed":true,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"chainId","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"LinkedClientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"CLIENT_VERSION","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INTERCHAIN_DB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedOptions","type":"bytes"}],"name":"decodeOptions","outputs":[{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsV1","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultGuard","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct InterchainTransaction","name":"icTx","type":"tuple"}],"name":"encodeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"getAppReceivingConfigV1","outputs":[{"components":[{"internalType":"uint256","name":"requiredResponses","type":"uint256"},{"internalType":"uint256","name":"optimisticPeriod","type":"uint256"},{"internalType":"uint256","name":"guardFlag","type":"uint256"},{"internalType":"address","name":"guard","type":"address"}],"internalType":"struct AppConfigV1","name":"config","type":"tuple"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedTx","type":"bytes"}],"name":"getExecutor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"getExecutorById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"uint256","name":"messageLen","type":"uint256"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"getLinkedClient","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"}],"name":"getLinkedClientEVM","outputs":[{"internalType":"address","name":"linkedClientEVM","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct InterchainTransaction","name":"icTx","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"getTxReadinessV1","outputs":[{"internalType":"enum IInterchainClientV1.TxReadiness","name":"status","type":"uint8"},{"internalType":"bytes32","name":"firstArg","type":"bytes32"},{"internalType":"bytes32","name":"secondArg","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSendEVM","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedTx","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"guard","type":"address"}],"name":"setDefaultGuard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainId","type":"uint64"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"writeExecutionProof","outputs":[{"internalType":"uint64","name":"dbNonce","type":"uint64"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"DefaultGuardSet(address)":{"notice":"Emitted when the Guard module is set."},"ExecutionProofWritten(bytes32,uint64,uint64,address)":{"notice":"Emitted when the proof of execution is written to InterchainDB. This allows the source chain to verify that the transaction was executed by a specific executor, if necessary."},"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)":{"notice":"Emitted when an interchain transaction is received by the InterchainClientV1. The Receiver on the destination chain has just received the message sent from the source chain."},"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)":{"notice":"Emitted when a new interchain transaction is sent through the InterchainClientV1. The Receiver on the destination chain will receive the specified message once the transaction is executed."},"LinkedClientSet(uint64,bytes32)":{"notice":"Emitted when the InterchainClientV1 deployment on a remote chain is linked."}},"kind":"user","methods":{"CLIENT_VERSION()":{"notice":"Version of the InterchainClient contract. Sent and received transactions must have the same version."},"INTERCHAIN_DB()":{"notice":"Address of the InterchainDB contract, set at the time of deployment."},"decodeOptions(bytes)":{"notice":"Decodes the encoded options data into a OptionsV1 struct."},"defaultGuard()":{"notice":"Address of the Guard module used to verify the validity of batches. Note: batches marked as invalid by the Guard could not be used for message execution, if the app opts in to use the Guard."},"encodeTransaction((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes))":{"notice":"Encodes the transaction data into a bytes format."},"getAppReceivingConfigV1(address)":{"notice":"Gets the V1 app config and trusted modules for the receiving app."},"getExecutorById(bytes32)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getInterchainFee(uint64,address,address[],bytes,uint256)":{"notice":"Returns the fee for sending an Interchain message."},"getLinkedClient(uint64)":{"notice":"Returns the address of the linked client (as bytes32) for a specific chain ID."},"getLinkedClientEVM(uint64)":{"notice":"Returns the EVM address of the linked client for a specific chain ID."},"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":{"notice":"Returns the readiness status of a transaction to be executed."},"interchainExecute(uint256,bytes,bytes32[])":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint64,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"setLinkedClient(uint64,bytes32)":{"notice":"Sets the linked client for a specific chain ID."},"writeExecutionProof(bytes32)":{"notice":"Writes the proof of execution for a transaction into the InterchainDB."}},"version":1},"developerDoc":{"details":"Implements the operations of the Interchain Execution Layer.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}]},"events":{"DefaultGuardSet(address)":{"params":{"guard":"The address of the Guard module."}},"ExecutionProofWritten(bytes32,uint64,uint64,address)":{"params":{"dbNonce":"The nonce of batch containing the written proof's DB entry.","entryIndex":"The index of the written proof's DB entry in the batch.","executor":"The address of the executor that completed the transaction.","transactionId":"The unique identifier of the interchain transaction."}},"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)":{"params":{"dbNonce":"The nonce of batch containing the transaction's DB entry.","dstReceiver":"The receiver of the transaction on the destination chain.","entryIndex":"The index of the transaction's DB entry in the batch.","srcChainId":"The chain ID of the source chain.","srcSender":"The sender of the transaction on the source chain.","transactionId":"The unique identifier of the interchain transaction."}},"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)":{"params":{"dbNonce":"The nonce of batch containing the transaction's DB entry.","dstChainId":"The chain ID of the destination chain.","dstReceiver":"The receiver of the transaction on the destination chain.","entryIndex":"The index of the transaction's DB entry in the batch.","executionFee":"The fee paid to execute the transaction on the destination chain.","message":"The payload of the message being sent.","options":"The execution options for the transaction.","srcSender":"The sender of the transaction on the source chain.","transactionId":"The unique identifier of the interchain transaction.","verificationFee":"The fee paid to verify the batch on the destination chain."}},"LinkedClientSet(uint64,bytes32)":{"params":{"chainId":"The chain ID of the remote chain.","client":"The address of the InterchainClientV1 deployment on the remote chain."}}},"kind":"dev","methods":{"getInterchainFee(uint64,address,address[],bytes,uint256)":{"params":{"dstChainId":"The chain ID of the destination chain.","messageLen":"The length of the message being sent.","options":"Execution options for the message sent, currently gas limit + native gas drop.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"getLinkedClient(uint64)":{"details":"Will return 0x0 if no client is linked for the chain ID."},"getLinkedClientEVM(uint64)":{"details":"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client."},"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":{"details":"Some of the possible statuses have additional arguments that are returned: - Ready: the transaction is ready to be executed. - AlreadyExecuted: the transaction has already been executed.   - `firstArg` is the transaction ID. - BatchAwaitingResponses: not enough responses have been received for the transaction.   - `firstArg` is the number of responses received.   - `secondArg` is the number of responses required. - BatchConflict: one of the modules have submitted a conflicting batch.   - `firstArg` is the address of the module.   - This is either one of the modules that the app trusts, or the Guard module used by the app. - ReceiverNotICApp: the receiver is not an Interchain app.  - `firstArg` is the receiver address. - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction. - TxWrongDstChainId: the destination chain ID does not match the local chain ID.   - `firstArg` is the destination chain ID. - UndeterminedRevert: the transaction will revert for another reason. Note: the arguments are abi-encoded bytes32 values (as their types could be different)."},"interchainExecute(uint256,bytes,bytes32[])":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The transaction data."}},"interchainSend(uint64,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."},"returns":{"desc":"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setLinkedClient(uint64,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"writeExecutionProof(bytes32)":{"details":"Will revert if the transaction has not been executed.","params":{"transactionId":"The ID of the transaction to write the proof for."},"returns":{"dbNonce":"        The database nonce of the batch containing the written proof for transaction.","entryIndex":"     The index of the written proof for transaction within the batch."}}},"stateVariables":{"_linkedClient":{"details":"Address of the InterchainClient contract on the remote chain"},"_txExecutor":{"details":"Executor address that completed the transaction. Address(0) if not executed yet."}},"title":"InterchainClientV1","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interchainDB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"AppConfigLib__VersionInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"BatchingV1__EntryIndexNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchingV1__ProofNotEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__BatchConflict\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__ChainIdNotLinked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__ChainIdNotRemote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"InterchainClientV1__DstChainIdNotLocal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ExecutionServiceZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__FeeAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__GasLeftBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__GuardZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__LinkedClientNotEVM\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__MsgValueMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__ReceiverNotICApp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ReceiverZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InterchainClientV1__ReceiverZeroRequiredResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"responsesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__ResponsesAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxNotExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"required\",\"type\":\"uint16\"}],\"name\":\"InterchainClientV1__TxVersionMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"OptionsLib__VersionInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedPayload\",\"type\":\"bytes\"}],\"name\":\"VersionedPayload__PayloadTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionedPayload__PrecompileFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"DefaultGuardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionProofWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"LinkedClientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIENT_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERCHAIN_DB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGuard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct InterchainTransaction\",\"name\":\"icTx\",\"type\":\"tuple\"}],\"name\":\"encodeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getAppReceivingConfigV1\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredResponses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimisticPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardFlag\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"internalType\":\"struct AppConfigV1\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getExecutorById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"messageLen\",\"type\":\"uint256\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLinkedClient\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLinkedClientEVM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"linkedClientEVM\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct InterchainTransaction\",\"name\":\"icTx\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"getTxReadinessV1\",\"outputs\":[{\"internalType\":\"enum IInterchainClientV1.TxReadiness\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSendEVM\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"setDefaultGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"writeExecutionProof\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements the operations of the Interchain Execution Layer.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"DefaultGuardSet(address)\":{\"params\":{\"guard\":\"The address of the Guard module.\"}},\"ExecutionProofWritten(bytes32,uint64,uint64,address)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the written proof's DB entry.\",\"entryIndex\":\"The index of the written proof's DB entry in the batch.\",\"executor\":\"The address of the executor that completed the transaction.\",\"transactionId\":\"The unique identifier of the interchain transaction.\"}},\"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the transaction's DB entry.\",\"dstReceiver\":\"The receiver of the transaction on the destination chain.\",\"entryIndex\":\"The index of the transaction's DB entry in the batch.\",\"srcChainId\":\"The chain ID of the source chain.\",\"srcSender\":\"The sender of the transaction on the source chain.\",\"transactionId\":\"The unique identifier of the interchain transaction.\"}},\"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the transaction's DB entry.\",\"dstChainId\":\"The chain ID of the destination chain.\",\"dstReceiver\":\"The receiver of the transaction on the destination chain.\",\"entryIndex\":\"The index of the transaction's DB entry in the batch.\",\"executionFee\":\"The fee paid to execute the transaction on the destination chain.\",\"message\":\"The payload of the message being sent.\",\"options\":\"The execution options for the transaction.\",\"srcSender\":\"The sender of the transaction on the source chain.\",\"transactionId\":\"The unique identifier of the interchain transaction.\",\"verificationFee\":\"The fee paid to verify the batch on the destination chain.\"}},\"LinkedClientSet(uint64,bytes32)\":{\"params\":{\"chainId\":\"The chain ID of the remote chain.\",\"client\":\"The address of the InterchainClientV1 deployment on the remote chain.\"}}},\"kind\":\"dev\",\"methods\":{\"getInterchainFee(uint64,address,address[],bytes,uint256)\":{\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"messageLen\":\"The length of the message being sent.\",\"options\":\"Execution options for the message sent, currently gas limit + native gas drop.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"getLinkedClient(uint64)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID.\"},\"getLinkedClientEVM(uint64)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client.\"},\"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])\":{\"details\":\"Some of the possible statuses have additional arguments that are returned: - Ready: the transaction is ready to be executed. - AlreadyExecuted: the transaction has already been executed.   - `firstArg` is the transaction ID. - BatchAwaitingResponses: not enough responses have been received for the transaction.   - `firstArg` is the number of responses received.   - `secondArg` is the number of responses required. - BatchConflict: one of the modules have submitted a conflicting batch.   - `firstArg` is the address of the module.   - This is either one of the modules that the app trusts, or the Guard module used by the app. - ReceiverNotICApp: the receiver is not an Interchain app.  - `firstArg` is the receiver address. - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction. - TxWrongDstChainId: the destination chain ID does not match the local chain ID.   - `firstArg` is the destination chain ID. - UndeterminedRevert: the transaction will revert for another reason. Note: the arguments are abi-encoded bytes32 values (as their types could be different).\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint64,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"},\"returns\":{\"desc\":\"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setLinkedClient(uint64,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"writeExecutionProof(bytes32)\":{\"details\":\"Will revert if the transaction has not been executed.\",\"params\":{\"transactionId\":\"The ID of the transaction to write the proof for.\"},\"returns\":{\"dbNonce\":\"        The database nonce of the batch containing the written proof for transaction.\",\"entryIndex\":\"     The index of the written proof for transaction within the batch.\"}}},\"stateVariables\":{\"_linkedClient\":{\"details\":\"Address of the InterchainClient contract on the remote chain\"},\"_txExecutor\":{\"details\":\"Executor address that completed the transaction. Address(0) if not executed yet.\"}},\"title\":\"InterchainClientV1\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultGuardSet(address)\":{\"notice\":\"Emitted when the Guard module is set.\"},\"ExecutionProofWritten(bytes32,uint64,uint64,address)\":{\"notice\":\"Emitted when the proof of execution is written to InterchainDB. This allows the source chain to verify that the transaction was executed by a specific executor, if necessary.\"},\"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)\":{\"notice\":\"Emitted when an interchain transaction is received by the InterchainClientV1. The Receiver on the destination chain has just received the message sent from the source chain.\"},\"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)\":{\"notice\":\"Emitted when a new interchain transaction is sent through the InterchainClientV1. The Receiver on the destination chain will receive the specified message once the transaction is executed.\"},\"LinkedClientSet(uint64,bytes32)\":{\"notice\":\"Emitted when the InterchainClientV1 deployment on a remote chain is linked.\"}},\"kind\":\"user\",\"methods\":{\"CLIENT_VERSION()\":{\"notice\":\"Version of the InterchainClient contract. Sent and received transactions must have the same version.\"},\"INTERCHAIN_DB()\":{\"notice\":\"Address of the InterchainDB contract, set at the time of deployment.\"},\"decodeOptions(bytes)\":{\"notice\":\"Decodes the encoded options data into a OptionsV1 struct.\"},\"defaultGuard()\":{\"notice\":\"Address of the Guard module used to verify the validity of batches. Note: batches marked as invalid by the Guard could not be used for message execution, if the app opts in to use the Guard.\"},\"encodeTransaction((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes))\":{\"notice\":\"Encodes the transaction data into a bytes format.\"},\"getAppReceivingConfigV1(address)\":{\"notice\":\"Gets the V1 app config and trusted modules for the receiving app.\"},\"getExecutorById(bytes32)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getInterchainFee(uint64,address,address[],bytes,uint256)\":{\"notice\":\"Returns the fee for sending an Interchain message.\"},\"getLinkedClient(uint64)\":{\"notice\":\"Returns the address of the linked client (as bytes32) for a specific chain ID.\"},\"getLinkedClientEVM(uint64)\":{\"notice\":\"Returns the EVM address of the linked client for a specific chain ID.\"},\"getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])\":{\"notice\":\"Returns the readiness status of a transaction to be executed.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint64,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"setLinkedClient(uint64,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"},\"writeExecutionProof(bytes32)\":{\"notice\":\"Writes the proof of execution for a transaction into the InterchainDB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"CLIENT_VERSION()":"7813cd52","INTERCHAIN_DB()":"e4c61247","decodeOptions(bytes)":"d5e788a0","defaultGuard()":"2a20521e","encodeTransaction((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes))":"8654ddd4","getAppReceivingConfigV1(address)":"695fd54f","getExecutor(bytes)":"f92a79ff","getExecutorById(bytes32)":"f1a61fac","getInterchainFee(uint64,address,address[],bytes,uint256)":"cbb3c631","getLinkedClient(uint64)":"2e568739","getLinkedClientEVM(uint64)":"35c4a191","getTxReadinessV1((uint64,uint64,uint64,uint64,bytes32,bytes32,bytes,bytes),bytes32[])":"c8cf9348","interchainExecute(uint256,bytes,bytes32[])":"53b67d74","interchainSend(uint64,bytes32,address,address[],bytes,bytes)":"547efb84","interchainSendEVM(uint64,address,address,address[],bytes,bytes)":"3f34448e","isExecutable(bytes,bytes32[])":"1450c281","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setDefaultGuard(address)":"94bf49f4","setLinkedClient(uint64,bytes32)":"f3c66e2b","transferOwnership(address)":"f2fde38b","writeExecutionProof(bytes32)":"90e81077"}},"solidity/InterchainClientV1.sol:InterchainClientV1Events":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"guard","type":"address"}],"name":"DefaultGuardSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":true,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionProofWritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"srcChainId","type":"uint64"},{"indexed":true,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"dbNonce","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"dstChainId","type":"uint64"},{"indexed":true,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"chainId","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"LinkedClientSet","type":"event"}],"userDoc":{"events":{"DefaultGuardSet(address)":{"notice":"Emitted when the Guard module is set."},"ExecutionProofWritten(bytes32,uint64,uint64,address)":{"notice":"Emitted when the proof of execution is written to InterchainDB. This allows the source chain to verify that the transaction was executed by a specific executor, if necessary."},"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)":{"notice":"Emitted when an interchain transaction is received by the InterchainClientV1. The Receiver on the destination chain has just received the message sent from the source chain."},"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)":{"notice":"Emitted when a new interchain transaction is sent through the InterchainClientV1. The Receiver on the destination chain will receive the specified message once the transaction is executed."},"LinkedClientSet(uint64,bytes32)":{"notice":"Emitted when the InterchainClientV1 deployment on a remote chain is linked."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"DefaultGuardSet(address)":{"params":{"guard":"The address of the Guard module."}},"ExecutionProofWritten(bytes32,uint64,uint64,address)":{"params":{"dbNonce":"The nonce of batch containing the written proof's DB entry.","entryIndex":"The index of the written proof's DB entry in the batch.","executor":"The address of the executor that completed the transaction.","transactionId":"The unique identifier of the interchain transaction."}},"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)":{"params":{"dbNonce":"The nonce of batch containing the transaction's DB entry.","dstReceiver":"The receiver of the transaction on the destination chain.","entryIndex":"The index of the transaction's DB entry in the batch.","srcChainId":"The chain ID of the source chain.","srcSender":"The sender of the transaction on the source chain.","transactionId":"The unique identifier of the interchain transaction."}},"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)":{"params":{"dbNonce":"The nonce of batch containing the transaction's DB entry.","dstChainId":"The chain ID of the destination chain.","dstReceiver":"The receiver of the transaction on the destination chain.","entryIndex":"The index of the transaction's DB entry in the batch.","executionFee":"The fee paid to execute the transaction on the destination chain.","message":"The payload of the message being sent.","options":"The execution options for the transaction.","srcSender":"The sender of the transaction on the source chain.","transactionId":"The unique identifier of the interchain transaction.","verificationFee":"The fee paid to verify the batch on the destination chain."}},"LinkedClientSet(uint64,bytes32)":{"params":{"chainId":"The chain ID of the remote chain.","client":"The address of the InterchainClientV1 deployment on the remote chain."}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"}],\"name\":\"DefaultGuardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionProofWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dbNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"LinkedClientSet\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"DefaultGuardSet(address)\":{\"params\":{\"guard\":\"The address of the Guard module.\"}},\"ExecutionProofWritten(bytes32,uint64,uint64,address)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the written proof's DB entry.\",\"entryIndex\":\"The index of the written proof's DB entry in the batch.\",\"executor\":\"The address of the executor that completed the transaction.\",\"transactionId\":\"The unique identifier of the interchain transaction.\"}},\"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the transaction's DB entry.\",\"dstReceiver\":\"The receiver of the transaction on the destination chain.\",\"entryIndex\":\"The index of the transaction's DB entry in the batch.\",\"srcChainId\":\"The chain ID of the source chain.\",\"srcSender\":\"The sender of the transaction on the source chain.\",\"transactionId\":\"The unique identifier of the interchain transaction.\"}},\"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)\":{\"params\":{\"dbNonce\":\"The nonce of batch containing the transaction's DB entry.\",\"dstChainId\":\"The chain ID of the destination chain.\",\"dstReceiver\":\"The receiver of the transaction on the destination chain.\",\"entryIndex\":\"The index of the transaction's DB entry in the batch.\",\"executionFee\":\"The fee paid to execute the transaction on the destination chain.\",\"message\":\"The payload of the message being sent.\",\"options\":\"The execution options for the transaction.\",\"srcSender\":\"The sender of the transaction on the source chain.\",\"transactionId\":\"The unique identifier of the interchain transaction.\",\"verificationFee\":\"The fee paid to verify the batch on the destination chain.\"}},\"LinkedClientSet(uint64,bytes32)\":{\"params\":{\"chainId\":\"The chain ID of the remote chain.\",\"client\":\"The address of the InterchainClientV1 deployment on the remote chain.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"DefaultGuardSet(address)\":{\"notice\":\"Emitted when the Guard module is set.\"},\"ExecutionProofWritten(bytes32,uint64,uint64,address)\":{\"notice\":\"Emitted when the proof of execution is written to InterchainDB. This allows the source chain to verify that the transaction was executed by a specific executor, if necessary.\"},\"InterchainTransactionReceived(bytes32,uint64,uint64,uint64,bytes32,bytes32)\":{\"notice\":\"Emitted when an interchain transaction is received by the InterchainClientV1. The Receiver on the destination chain has just received the message sent from the source chain.\"},\"InterchainTransactionSent(bytes32,uint64,uint64,uint64,bytes32,bytes32,uint256,uint256,bytes,bytes)\":{\"notice\":\"Emitted when a new interchain transaction is sent through the InterchainClientV1. The Receiver on the destination chain will receive the specified message once the transaction is executed.\"},\"LinkedClientSet(uint64,bytes32)\":{\"notice\":\"Emitted when the InterchainClientV1 deployment on a remote chain is linked.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1Events\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainEntryLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a324c01d25ea68eeb905e3571698768934294a12b0a64f6b8cc6aa931b99c9664736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209a324c01d25ea68eeb905e3571698768934294a12b0a64f6b8cc6aa931b99c9664736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"58213:1386:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58213:1386:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"58213:1386:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainEntryLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainTransactionLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ffd49ce2ae32e6b3dd23264bc5d23297b17395c4cfd5fb058539207ee5f88a64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ffd49ce2ae32e6b3dd23264bc5d23297b17395c4cfd5fb058539207ee5f88a64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"61310:2997:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;61310:2997:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"61310:2997:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainTransactionLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:MathLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f32bf47012f54c61f250dc9b92e16c85de5ef8a6a6ec53069ebd1f893e78160164736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f32bf47012f54c61f250dc9b92e16c85de5ef8a6a6ec53069ebd1f893e78160164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"7288:403:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;7288:403:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"7288:403:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"MathLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022273eb7cef967f78d8540d7878ce1280a0a1faf36bda95cea922bb3aa1396b864736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022273eb7cef967f78d8540d7878ce1280a0a1faf36bda95cea922bb3aa1396b864736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"49987:1229:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;49987:1229:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"49987:1229:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint16","name":"version","type":"uint16"}],"name":"OptionsLib__VersionInvalid","type":"error"}],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"OptionsLib__VersionInvalid\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:SafeCast":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4be831c487a85f658d7b6c23411485ae62357cfc5eb3d2f8ffc86817bebf09d64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4be831c487a85f658d7b6c23411485ae62357cfc5eb3d2f8ffc86817bebf09d64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"13644:33927:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;13644:33927:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"13644:33927:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220da338a10af43a6b320f1ae95da6a00fc7ce2d71d911b989854af5484aa7ae52b64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220da338a10af43a6b320f1ae95da6a00fc7ce2d71d911b989854af5484aa7ae52b64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"7726:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;7726:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"7726:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:VersionedPayloadLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122034d4abfde9cab5aec9b3f33e798e998d116a363f7fa45f28f330928a8419c57c64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122034d4abfde9cab5aec9b3f33e798e998d116a363f7fa45f28f330928a8419c57c64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    /// @notice Emitted when the Guard module is set.\n    /// @param guard    The address of the Guard module.\n    event DefaultGuardSet(address guard);\n\n    /// @notice Emitted when the InterchainClientV1 deployment on a remote chain is linked.\n    /// @param chainId   The chain ID of the remote chain.\n    /// @param client    The address of the InterchainClientV1 deployment on the remote chain.\n    event LinkedClientSet(uint64 chainId, bytes32 client);\n\n    /// @notice Emitted when a new interchain transaction is sent through the InterchainClientV1.\n    /// The Receiver on the destination chain will receive the specified message once the transaction is executed.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param dstChainId       The chain ID of the destination chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    /// @param verificationFee  The fee paid to verify the batch on the destination chain.\n    /// @param executionFee     The fee paid to execute the transaction on the destination chain.\n    /// @param options          The execution options for the transaction.\n    /// @param message          The payload of the message being sent.\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 dstChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    /// @notice Emitted when an interchain transaction is received by the InterchainClientV1.\n    /// The Receiver on the destination chain has just received the message sent from the source chain.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the transaction's DB entry.\n    /// @param entryIndex       The index of the transaction's DB entry in the batch.\n    /// @param srcChainId       The chain ID of the source chain.\n    /// @param srcSender        The sender of the transaction on the source chain.\n    /// @param dstReceiver      The receiver of the transaction on the destination chain.\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        uint64 srcChainId,\n        bytes32 indexed srcSender,\n        bytes32 indexed dstReceiver\n    );\n\n    /// @notice Emitted when the proof of execution is written to InterchainDB. This allows the source chain\n    /// to verify that the transaction was executed by a specific executor, if necessary.\n    /// @param transactionId    The unique identifier of the interchain transaction.\n    /// @param dbNonce          The nonce of batch containing the written proof's DB entry.\n    /// @param entryIndex       The index of the written proof's DB entry in the batch.\n    /// @param executor         The address of the executor that completed the transaction.\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint64 dbNonce, uint64 entryIndex, address indexed executor\n    );\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain in exchange for\n    /// the execution fee, attached to the transaction as `msg.value`.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param options              The options to use for the execution.\n    function requestTxExecution(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        bytes memory options\n    )\n        external\n        payable;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint64 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    /// @notice Allows the Interchain Client to pass the message to the Interchain App.\n    /// @dev App is responsible for keeping track of interchain clients, and must verify the message sender.\n    /// @param srcChainId   Chain ID of the source chain, where the message was sent from.\n    /// @param sender       Sender address on the source chain, as a bytes32 value.\n    /// @param dbNonce      The Interchain DB nonce of the batch containing the message entry.\n    /// @param entryIndex   The index of the message entry within the batch.\n    /// @param message      The message being sent.\n    function appReceive(\n        uint64 srcChainId,\n        bytes32 sender,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    /// @notice Returns the verification configuration of the Interchain App.\n    /// @dev This configuration is used by the Interchain Client to verify that message has been confirmed\n    /// by the Interchain Modules on the destination chain.\n    /// Note: V1 version of AppConfig includes the required responses count, and optimistic period after which\n    /// the message is considered confirmed by the module. Following versions may include additional fields.\n    /// @return appConfig    The versioned configuration of the Interchain App, encoded as bytes.\n    /// @return modules      The list of Interchain Modules that app is trusting to confirm the messages.\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/Math.sol\n\nlibrary MathLib {\n    /// @notice Rounds up to the nearest multiple of 32.\n    /// Note: Returns zero on overflows instead of reverting. This is fine for practical\n    /// use cases, as this is used for determining the size of the payload in memory.\n    function roundUpToWord(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return (x + 31) \u0026 ~uint256(31);\n        }\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/VersionedPayload.sol\n\n// solhint-disable no-inline-assembly\n// solhint-disable ordering\nlibrary VersionedPayloadLib {\n    /// @notice Amount of bytes reserved for the version (uint16) in the versioned payload\n    uint256 internal constant VERSION_LENGTH = 2;\n\n    error VersionedPayload__PayloadTooShort(bytes versionedPayload);\n    error VersionedPayload__PrecompileFailed();\n\n    /// @notice Encodes the versioned payload into a single bytes array.\n    /// @param version  The payload's version.\n    /// @param payload  The payload to encode.\n    function encodeVersionedPayload(uint16 version, bytes memory payload) internal pure returns (bytes memory) {\n        return abi.encodePacked(version, payload);\n    }\n\n    /// @notice Extracts the version from the versioned payload (calldata reference).\n    /// @param versionedPayload     The versioned payload (calldata reference).\n    function getVersion(bytes calldata versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            version := shr(240, calldataload(versionedPayload.offset))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (calldata reference).\n    /// @dev The extracted payload is also returned as a calldata reference.\n    /// @param versionedPayload     The versioned payload.\n    function getPayload(bytes calldata versionedPayload) internal pure returns (bytes calldata) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        return versionedPayload[VERSION_LENGTH:];\n    }\n\n    /// @notice Extracts the version from the versioned payload (memory reference).\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getVersionFromMemory(bytes memory versionedPayload) internal pure returns (uint16 version) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        assembly {\n            // We are only interested in the highest 16 bits of the loaded full 32 bytes word.\n            // We add 0x20 to skip the length of the bytes array.\n            version := shr(240, mload(add(versionedPayload, 0x20)))\n        }\n    }\n\n    /// @notice Extracts the payload from the versioned payload (memory reference).\n    /// @dev The extracted payload is copied into a new memory location. Use `getPayload` when possible\n    /// to avoid extra memory allocation.\n    /// @param versionedPayload     The versioned payload (memory reference).\n    function getPayloadFromMemory(bytes memory versionedPayload) internal view returns (bytes memory payload) {\n        if (versionedPayload.length \u003c VERSION_LENGTH) {\n            revert VersionedPayload__PayloadTooShort(versionedPayload);\n        }\n        // Figure how many bytes to copy and allocate the memory for the extracted payload.\n        uint256 toCopy;\n        unchecked {\n            toCopy = versionedPayload.length - VERSION_LENGTH;\n        }\n        payload = new bytes(toCopy);\n        // Use identity precompile (0x04) to copy the payload. Unlike MCOPY, this is available on all EVM chains.\n        bool res;\n        assembly {\n            // We add 0x20 to skip the length of the bytes array.\n            // We add 0x02 to skip the 2 bytes reserved for the version.\n            // Copy the payload to the previously allocated memory.\n            res := staticcall(gas(), 0x04, add(versionedPayload, 0x22), toCopy, add(payload, 0x20), toCopy)\n        }\n        if (!res) {\n            revert VersionedPayload__PrecompileFailed();\n        }\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value \u003e type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value \u003e type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value \u003e type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value \u003e type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value \u003e type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value \u003e type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value \u003e type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value \u003e type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value \u003e type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value \u003e type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value \u003e type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value \u003e type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value \u003e type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value \u003e type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value \u003e type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value \u003e type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value \u003e type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value \u003e type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value \u003e type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value \u003e type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value \u003e type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value \u003e type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value \u003e type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value \u003e type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value \u003e type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value \u003e type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value \u003e type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value \u003e type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value \u003e type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value \u003e type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value \u003e type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value \u003c 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value \u003e uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n}\n\n// contracts/libs/AppConfig.sol\n\n// TODO: all of these could fit into a single 32 bytes slot\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n    uint256 guardFlag;\n    address guard;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\n/// @dev Signals that the app opted out of using any Guard module.\nuint8 constant APP_CONFIG_GUARD_DISABLED = 0;\n/// @dev Signals that the app uses the default Guard module provided by InterchainClient contract.\nuint8 constant APP_CONFIG_GUARD_DEFAULT = 1;\n/// @dev Signals that the app uses a custom Guard module.\nuint8 constant APP_CONFIG_GUARD_CUSTOM = 2;\n\nlibrary AppConfigLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal view returns (AppConfigV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (AppConfigV1));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    using VersionedPayloadLib for bytes;\n\n    uint16 internal constant OPTIONS_V1 = 1;\n\n    error OptionsLib__VersionInvalid(uint16 version);\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal view returns (OptionsV1 memory) {\n        uint16 version = data.getVersionFromMemory();\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__VersionInvalid(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(data.getPayloadFromMemory(), (OptionsV1));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload(OPTIONS_V1, abi.encode(options));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\ntype BatchKey is uint128;\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    bytes32 batchRoot;\n}\n\n/// @dev Signals that the module has not verified any batch with the given key.\nuint256 constant BATCH_UNVERIFIED = 0;\n/// @dev Signals that the module has verified a conflicting batch with the given key.\nuint256 constant BATCH_CONFLICT = type(uint256).max;\n\nlibrary InterchainBatchLib {\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint64 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: SafeCast.toUint64(block.chainid), dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Encodes the InterchainBatch struct into a non-versioned batch payload.\n    function encodeBatch(InterchainBatch memory batch) internal pure returns (bytes memory) {\n        return abi.encode(encodeBatchKey(batch.srcChainId, batch.dbNonce), batch.batchRoot);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in calldata.\n    function decodeBatch(bytes calldata data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Decodes the InterchainBatch struct from a non-versioned batch payload in memory.\n    function decodeBatchFromMemory(bytes memory data) internal pure returns (InterchainBatch memory batch) {\n        BatchKey key;\n        (key, batch.batchRoot) = abi.decode(data, (BatchKey, bytes32));\n        (batch.srcChainId, batch.dbNonce) = decodeBatchKey(key);\n    }\n\n    /// @notice Encodes the uint128 key of the batch from uint64 srcChainId and uint64 dbNonce.\n    function encodeBatchKey(uint64 srcChainId, uint64 dbNonce) internal pure returns (BatchKey) {\n        return BatchKey.wrap((uint128(srcChainId) \u003c\u003c 64) | dbNonce);\n    }\n\n    /// @notice Decodes the uint128 key of the batch into uint64 srcChainId and uint64 dbNonce.\n    function decodeBatchKey(BatchKey key) internal pure returns (uint64 srcChainId, uint64 dbNonce) {\n        srcChainId = uint64(BatchKey.unwrap(key) \u003e\u003e 64);\n        dbNonce = uint64(BatchKey.unwrap(key));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    uint64 srcChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint64 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return getEntryValue(entry.srcWriter, entry.dataHash);\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function getEntryValue(bytes32 srcWriter, bytes32 dataHash) internal pure returns (bytes32) {\n        return keccak256(abi.encode(srcWriter, dataHash));\n    }\n}\n\n// contracts/libs/BatchingV1.sol\n\nlibrary BatchingV1Lib {\n    error BatchingV1__EntryIndexNotZero(uint64 entryIndex);\n    error BatchingV1__ProofNotEmpty();\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param srcWriter    The entry writer of the source chain\n    /// @param dataHash     The hash of the data of the entry\n    /// @param entryIndex   The index of the entry in the batch\n    /// @param proof        The Merkle proof of inclusion for the entry in the batch\n    /// @return batchRoot   The root of the batch containing the entry\n    function getBatchRoot(\n        bytes32 srcWriter,\n        bytes32 dataHash,\n        uint64 entryIndex,\n        bytes32[] calldata proof\n    )\n        internal\n        pure\n        returns (bytes32 batchRoot)\n    {\n        // In \"no batching\" mode: entry index is 0, proof is empty\n        if (entryIndex != 0) {\n            revert BatchingV1__EntryIndexNotZero(entryIndex);\n        }\n        if (proof.length != 0) {\n            revert BatchingV1__ProofNotEmpty();\n        }\n        // In \"no batching\" mode: the batch root is the same as the entry value\n        return InterchainEntryLib.getEntryValue({srcWriter: srcWriter, dataHash: dataHash});\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\ntype ICTxHeader is uint256;\n\nstruct InterchainTransaction {\n    uint64 srcChainId;\n    uint64 dstChainId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcSender;\n    bytes32 dstReceiver;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint64 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    using MathLib for uint256;\n    using VersionedPayloadLib for bytes;\n\n    function constructLocalTransaction(\n        address srcSender,\n        uint64 dstChainId,\n        bytes32 dstReceiver,\n        uint64 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: SafeCast.toUint64(block.chainid),\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(\n            encodeTxHeader(transaction.srcChainId, transaction.dstChainId, transaction.dbNonce, transaction.entryIndex),\n            transaction.srcSender,\n            transaction.dstReceiver,\n            transaction.options,\n            transaction.message\n        );\n    }\n\n    function decodeTransaction(bytes calldata transaction) internal pure returns (InterchainTransaction memory icTx) {\n        ICTxHeader header;\n        (header, icTx.srcSender, icTx.dstReceiver, icTx.options, icTx.message) =\n            abi.decode(transaction, (ICTxHeader, bytes32, bytes32, bytes, bytes));\n        (icTx.srcChainId, icTx.dstChainId, icTx.dbNonce, icTx.entryIndex) = decodeTxHeader(header);\n    }\n\n    function payloadSize(uint256 optionsLen, uint256 messageLen) internal pure returns (uint256) {\n        // 2 bytes are reserved for the transaction version\n        // + 5 fields * 32 bytes (3 values for static, 2 offsets for dynamic) + 2 * 32 bytes (lengths for dynamic) = 226\n        // (srcChainId, dstChainId, dbNonce, entryIndex) are merged into a single 32 bytes field\n        // Both options and message are dynamic fields, which are padded up to 32 bytes\n        return 226 + optionsLen.roundUpToWord() + messageLen.roundUpToWord();\n    }\n\n    function encodeTxHeader(\n        uint64 srcChainId,\n        uint64 dstChainId,\n        uint64 dbNonce,\n        uint64 entryIndex\n    )\n        internal\n        pure\n        returns (ICTxHeader)\n    {\n        return ICTxHeader.wrap(\n            (uint256(srcChainId) \u003c\u003c 192) | (uint256(dstChainId) \u003c\u003c 128) | (uint256(dbNonce) \u003c\u003c 64) | uint256(entryIndex)\n        );\n    }\n\n    function decodeTxHeader(ICTxHeader header)\n        internal\n        pure\n        returns (uint64 srcChainId, uint64 dstChainId, uint64 dbNonce, uint64 entryIndex)\n    {\n        srcChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 192);\n        dstChainId = uint64(ICTxHeader.unwrap(header) \u003e\u003e 128);\n        dbNonce = uint64(ICTxHeader.unwrap(header) \u003e\u003e 64);\n        entryIndex = uint64(ICTxHeader.unwrap(header));\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    enum TxReadiness {\n        Ready,\n        AlreadyExecuted,\n        BatchAwaitingResponses,\n        BatchConflict,\n        ReceiverNotICApp,\n        ReceiverZeroRequiredResponses,\n        TxWrongDstChainId,\n        UndeterminedRevert\n    }\n\n    error InterchainClientV1__BatchConflict(address module);\n    error InterchainClientV1__ChainIdNotLinked(uint64 chainId);\n    error InterchainClientV1__ChainIdNotRemote(uint64 chainId);\n    error InterchainClientV1__DstChainIdNotLocal(uint64 chainId);\n    error InterchainClientV1__ExecutionServiceZeroAddress();\n    error InterchainClientV1__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainClientV1__GasLeftBelowMin(uint256 gasLeft, uint256 minRequired);\n    error InterchainClientV1__GuardZeroAddress();\n    error InterchainClientV1__LinkedClientNotEVM(bytes32 client);\n    error InterchainClientV1__MsgValueMismatch(uint256 msgValue, uint256 required);\n    error InterchainClientV1__ReceiverNotICApp(address receiver);\n    error InterchainClientV1__ReceiverZeroAddress();\n    error InterchainClientV1__ReceiverZeroRequiredResponses(address receiver);\n    error InterchainClientV1__ResponsesAmountBelowMin(uint256 responsesAmount, uint256 minRequired);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxVersionMismatch(uint16 txVersion, uint16 required);\n\n    /// @notice Allows the contract owner to set the address of the Guard module.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    /// @param guard_       The address of the Guard module.\n    function setDefaultGuard(address guard_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint64 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the readiness status of a transaction to be executed.\n    /// @dev Some of the possible statuses have additional arguments that are returned:\n    /// - Ready: the transaction is ready to be executed.\n    /// - AlreadyExecuted: the transaction has already been executed.\n    ///   - `firstArg` is the transaction ID.\n    /// - BatchAwaitingResponses: not enough responses have been received for the transaction.\n    ///   - `firstArg` is the number of responses received.\n    ///   - `secondArg` is the number of responses required.\n    /// - BatchConflict: one of the modules have submitted a conflicting batch.\n    ///   - `firstArg` is the address of the module.\n    ///   - This is either one of the modules that the app trusts, or the Guard module used by the app.\n    /// - ReceiverNotICApp: the receiver is not an Interchain app.\n    ///  - `firstArg` is the receiver address.\n    /// - ReceiverZeroRequiredResponses: the app config requires zero responses for the transaction.\n    /// - TxWrongDstChainId: the destination chain ID does not match the local chain ID.\n    ///   - `firstArg` is the destination chain ID.\n    /// - UndeterminedRevert: the transaction will revert for another reason.\n    ///\n    /// Note: the arguments are abi-encoded bytes32 values (as their types could be different).\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param messageLen           The length of the message being sent.\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint64 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint64 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    error InterchainDB__BatchConflict(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__BatchVersionMismatch(uint16 version, uint16 required);\n    error InterchainDB__ChainIdNotRemote(uint64 chainId);\n    error InterchainDB__EntryIndexOutOfRange(uint64 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__EntryRangeInvalid(uint64 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__FeeAmountBelowMin(uint256 feeAmount, uint256 minRequired);\n    error InterchainDB__ModulesNotProvided();\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint64 dstChainId,\n        uint64 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint64 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// The module SHOULD verify the exact finalized batch from the remote chain. If the batch with a given nonce\n    /// is not finalized or does not exist, module CAN verify it with an empty root value. Once the batch is\n    /// finalized, the module SHOULD re-verify the batch with the correct root value.\n    /// Note: The DB will only accept the batch of the same version as the DB itself.\n    /// @dev Will revert if the batch with the same nonce but a different non-empty root is already verified.\n    /// @param versionedBatch   The versioned Interchain Batch to verify\n    function verifyRemoteBatch(bytes memory versionedBatch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint64 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint64 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint64 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint64 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint64 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the versioned Interchain Batch with the given nonce.\n    /// Note: will return a batch with an empty root if the batch does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the batch\n    function getVersionedBatch(uint64 dbNonce) external view returns (bytes memory);\n\n    /// @notice Get the Interchain Entry's value written on the local chain with the given batch nonce and entry index.\n    /// Entry value is calculated as the hash of the writer address and the written data hash.\n    /// Note: the batch does not have to be finalized to fetch the entry value.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntryValue(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint64 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint64);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint64 dbNonce, uint64 entryIndex);\n\n    /// @notice Check if the batch is verified by the Interchain Module on the destination chain.\n    /// Note: returned zero value indicates that the module has not verified the batch.\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @param batch        The Interchain Batch to check\n    /// @return moduleVerifiedAt    The block timestamp at which the batch was verified by the module,\n    ///                             or ZERO if the module has not verified the batch.\n    function checkBatchVerification(\n        address dstModule,\n        InterchainBatch memory batch\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n\n    /// @notice Get the batch root containing the Interchain Entry with the given index.\n    /// @param entry         The Interchain Entry to get the batch root for\n    /// @param proof         The Merkle proof of inclusion for the entry in the batch\n    function getBatchRoot(InterchainEntry memory entry, bytes32[] memory proof) external pure returns (bytes32);\n\n    /// @notice Get the version of the Interchain DataBase.\n    // solhint-disable-next-line func-name-mixedcase\n    function DB_VERSION() external pure returns (uint16);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    using VersionedPayloadLib for bytes;\n\n    /// @notice Version of the InterchainClient contract. Sent and received transactions must have the same version.\n    uint16 public constant CLIENT_VERSION = 1;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the Guard module used to verify the validity of batches.\n    /// Note: batches marked as invalid by the Guard could not be used for message execution,\n    /// if the app opts in to use the Guard.\n    address public defaultGuard;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint64 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setDefaultGuard(address guard) external onlyOwner {\n        if (guard == address(0)) {\n            revert InterchainClientV1__GuardZeroAddress();\n        }\n        defaultGuard = guard;\n        emit DefaultGuardSet(guard);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint64 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint64 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = receiver.addressToBytes32();\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(transaction);\n        bytes32 transactionId = keccak256(transaction);\n        _assertExecutable(icTx, transactionId, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__MsgValueMismatch(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Check the the Executor has provided big enough gas limit for the whole transaction.\n        uint256 gasLeft = gasleft();\n        if (gasLeft \u003c= gasLimit) {\n            revert InterchainClientV1__GasLeftBelowMin(gasLeft, gasLimit);\n        }\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(icTx.dstReceiver.bytes32ToAddress()).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint64 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = _assertCorrectTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        bytes32 transactionId = keccak256(encodedTx);\n        _assertExecutable(icTx, transactionId, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    // solhint-disable-next-line code-complexity\n    function getTxReadinessV1(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        returns (TxReadiness status, bytes32 firstArg, bytes32 secondArg)\n    {\n        bytes memory encodedTx = encodeTransaction(icTx);\n        try this.isExecutable(encodedTx, proof) returns (bool) {\n            return (TxReadiness.Ready, 0, 0);\n        } catch (bytes memory errorData) {\n            bytes4 selector;\n            (selector, firstArg, secondArg) = _decodeRevertData(errorData);\n            if (selector == InterchainClientV1__TxAlreadyExecuted.selector) {\n                status = TxReadiness.AlreadyExecuted;\n            } else if (selector == InterchainClientV1__ResponsesAmountBelowMin.selector) {\n                status = TxReadiness.BatchAwaitingResponses;\n            } else if (selector == InterchainClientV1__BatchConflict.selector) {\n                status = TxReadiness.BatchConflict;\n            } else if (selector == InterchainClientV1__ReceiverNotICApp.selector) {\n                status = TxReadiness.ReceiverNotICApp;\n            } else if (selector == InterchainClientV1__ReceiverZeroRequiredResponses.selector) {\n                status = TxReadiness.ReceiverZeroRequiredResponses;\n            } else if (selector == InterchainClientV1__DstChainIdNotLocal.selector) {\n                status = TxReadiness.TxWrongDstChainId;\n            } else {\n                status = TxReadiness.UndeterminedRevert;\n                firstArg = 0;\n                secondArg = 0;\n            }\n        }\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        return _txExecutor[keccak256(encodedTx)];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint64 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        uint256 messageLen\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee from ExecutionService\n        uint256 payloadSize = InterchainTransactionLib.payloadSize(options.length, messageLen);\n        fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, payloadSize, options);\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint64 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint64 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = linkedClient.bytes32ToAddress();\n        // Check that the linked client address fits into the EVM address space\n        if (linkedClientEVM.addressToBytes32() != linkedClient) {\n            revert InterchainClientV1__LinkedClientNotEVM(linkedClient);\n        }\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external view returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    /// @notice Gets the V1 app config and trusted modules for the receiving app.\n    function getAppReceivingConfigV1(address receiver)\n        public\n        view\n        returns (AppConfigV1 memory config, address[] memory modules)\n    {\n        // First, check that receiver is a contract\n        if (receiver.code.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        // Then, use a low-level static call to get the config and modules\n        (bool success, bytes memory returnData) =\n            receiver.staticcall(abi.encodeCall(IInterchainApp.getReceivingConfig, ()));\n        if (!success || returnData.length == 0) {\n            revert InterchainClientV1__ReceiverNotICApp(receiver);\n        }\n        bytes memory encodedConfig;\n        (encodedConfig, modules) = abi.decode(returnData, (bytes, address[]));\n        config = encodedConfig.decodeAppConfigV1();\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) public pure returns (bytes memory) {\n        return VersionedPayloadLib.encodeVersionedPayload({\n            version: CLIENT_VERSION,\n            payload: InterchainTransactionLib.encodeTransaction(icTx)\n        });\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint64 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) {\n            revert InterchainClientV1__ReceiverZeroAddress();\n        }\n        if (srcExecutionService == address(0)) {\n            revert InterchainClientV1__ExecutionServiceZeroAddress();\n        }\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountBelowMin(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = keccak256(encodeTransaction(icTx));\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint64 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        IExecutionService(srcExecutionService).requestTxExecution{value: executionFee}({\n            dstChainId: icTx.dstChainId,\n            txPayloadSize: InterchainTransactionLib.payloadSize(options.length, message.length),\n            transactionId: desc.transactionId,\n            options: options\n        });\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32 transactionId,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected batch based on interchain transaction data\n        InterchainBatch memory batch = InterchainBatch({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            batchRoot: BatchingV1Lib.getBatchRoot({\n                srcWriter: linkedClient,\n                dataHash: transactionId,\n                entryIndex: icTx.entryIndex,\n                proof: proof\n            })\n        });\n        address receiver = icTx.dstReceiver.bytes32ToAddress();\n        (AppConfigV1 memory appConfig, address[] memory approvedModules) = getAppReceivingConfigV1(receiver);\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ReceiverZeroRequiredResponses(receiver);\n        }\n        // Verify against the Guard if the app opts in to use it\n        _assertNoGuardConflict(_getGuard(appConfig), batch);\n        uint256 finalizedResponses = _getFinalizedResponsesCount(approvedModules, batch, appConfig.optimisticPeriod);\n        if (finalizedResponses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__ResponsesAmountBelowMin(finalizedResponses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint64 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__ChainIdNotRemote(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__ChainIdNotLinked(chainId);\n        }\n    }\n\n    /// @dev Asserts that the Guard has not submitted a conflicting batch.\n    function _assertNoGuardConflict(address guard, InterchainBatch memory batch) internal view {\n        if (guard != address(0)) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(guard, batch);\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(guard);\n            }\n        }\n    }\n\n    /// @dev Returns the Guard address to use for the given app config.\n    function _getGuard(AppConfigV1 memory appConfig) internal view returns (address) {\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DISABLED) {\n            return address(0);\n        }\n        if (appConfig.guardFlag == APP_CONFIG_GUARD_DEFAULT) {\n            return defaultGuard;\n        }\n        return appConfig.guard;\n    }\n\n    /// @dev Counts the number of finalized responses for the given batch.\n    /// Note: Reverts if a conflicting batch has been verified by any of the approved modules.\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainBatch memory batch,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            address module = approvedModules[i];\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkBatchVerification(module, batch);\n            // No-op if the module has not verified anything with the same batch key\n            if (confirmedAt == BATCH_UNVERIFIED) {\n                continue;\n            }\n            // Revert if the module has verified a conflicting batch with the same batch key\n            if (confirmedAt == BATCH_CONFLICT) {\n                revert InterchainClientV1__BatchConflict(module);\n            }\n            // The module has verified this exact batch, check if optimistic period has passed\n            if (confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                unchecked {\n                    ++finalizedResponses;\n                }\n            }\n        }\n    }\n\n    /// @dev Asserts that the transaction version is correct and that the transaction is for the current chain.\n    /// Note: returns the decoded transaction for chaining purposes.\n    function _assertCorrectTransaction(bytes calldata versionedTx)\n        internal\n        view\n        returns (InterchainTransaction memory icTx)\n    {\n        uint16 version = versionedTx.getVersion();\n        if (version != CLIENT_VERSION) {\n            revert InterchainClientV1__TxVersionMismatch(version, CLIENT_VERSION);\n        }\n        icTx = InterchainTransactionLib.decodeTransaction(versionedTx.getPayload());\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__DstChainIdNotLocal(icTx.dstChainId);\n        }\n    }\n\n    // solhint-disable no-inline-assembly\n    /// @dev Decodes the revert data into a selector and two arguments.\n    /// Zero values are returned if the revert data is not long enough.\n    /// Note: this is only used in `getTxReadinessV1` to decode the revert data,\n    /// so usage of assembly is not a security risk.\n    function _decodeRevertData(bytes memory revertData)\n        internal\n        pure\n        returns (bytes4 selector, bytes32 firstArg, bytes32 secondArg)\n    {\n        // The easiest way to load the bytes chunks onto the stack is to use assembly.\n        // Each time we try to load a value, we check if the revert data is long enough.\n        // We add 0x20 to skip the length field of the revert data.\n        if (revertData.length \u003e= 4) {\n            // Load the first 32 bytes, then apply the mask that has only the 4 highest bytes set.\n            // There is no need to shift, as `bytesN` variables are right-aligned.\n            // https://github.com/ProjectOpenSea/seaport/blob/2ff6ea37/contracts/helpers/SeaportRouter.sol#L161-L175\n            selector = bytes4(0xFFFFFFFF);\n            assembly {\n                selector := and(mload(add(revertData, 0x20)), selector)\n            }\n        }\n        if (revertData.length \u003e= 36) {\n            // Skip the length field + selector to get the 32 bytes of the first argument.\n            assembly {\n                firstArg := mload(add(revertData, 0x24))\n            }\n        }\n        if (revertData.length \u003e= 68) {\n            // Skip the length field + selector + first argument to get the 32 bytes of the second argument.\n            assembly {\n                secondArg := mload(add(revertData, 0x44))\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"8114:3792:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;8114:3792:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"8114:3792:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"versionedPayload","type":"bytes"}],"name":"VersionedPayload__PayloadTooShort","type":"error"},{"inputs":[],"name":"VersionedPayload__PrecompileFailed","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"versionedPayload\",\"type\":\"bytes\"}],\"name\":\"VersionedPayload__PayloadTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VersionedPayload__PrecompileFailed\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"VersionedPayloadLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0xb4fda4fbe46a07f355f51f0fc9872a4c1cf45b571ae8b7084a49aa24edf5d756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3ce8be506b6eb90909efdc896c447b83cf07ec6f131705649f59be89149ce5b\",\"dweb:/ipfs/QmQvKJbUARp5ofix3HeHoCv989MNkJZhVNEPJPbgkzEqsP\"]}},\"version\":1}"},"hashes":{}}}
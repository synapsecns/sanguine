{"solidity/InterchainClientV1.sol:AppConfigLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201cd9271d917d6ec52de0b232f209a7b4eea900bb2d794c50a839a58737f5697064736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201cd9271d917d6ec52de0b232f209a7b4eea900bb2d794c50a839a58737f5697064736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"7054:2072:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;7054:2072:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"7054:2072:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"AppConfigLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AppConfigLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"AppConfigLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:IExecutionFees":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionFees__AlreadyRecorded","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAddress","type":"error"},{"inputs":[],"name":"ExecutionFees__ZeroAmount","type":"error"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"accumulatedRewards","outputs":[{"internalType":"uint256","name":"accumulated","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"addExecutionFee","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"claimExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"executionFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"executor","type":"address"}],"name":"recordExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"recordedExecutor","outputs":[{"internalType":"address","name":"executor","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unclaimedRewards","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"accumulatedRewards(address)":{"notice":"Get the accumulated rewards for an executor."},"addExecutionFee(uint256,bytes32)":{"notice":"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions."},"claimExecutionFees(address)":{"notice":"Allows the executor to claim their unclaimed rewards."},"executionFee(uint256,bytes32)":{"notice":"Get the total execution fee for a transaction."},"recordExecutor(uint256,bytes32,address)":{"notice":"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor."},"recordedExecutor(uint256,bytes32)":{"notice":"Get the address of the recorded executor for a transaction."},"unclaimedRewards(address)":{"notice":"Get the unclaimed rewards for an executor."}},"version":1},"developerDoc":{"kind":"dev","methods":{"accumulatedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}},"addExecutionFee(uint256,bytes32)":{"details":"Will revert if the executor is already recorded for the transaction.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to add the execution fee to."}},"claimExecutionFees(address)":{"details":"Will revert if the executor has no unclaimed rewards."},"executionFee(uint256,bytes32)":{"params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the execution fee for."}},"recordExecutor(uint256,bytes32,address)":{"details":"Could only be called by the Recorder.","params":{"dstChainId":"The chain id of the destination chain.","executor":"The address of the executor who completed the transaction.","transactionId":"The id of the transaction to record the executor for."}},"recordedExecutor(uint256,bytes32)":{"details":"Will return address(0) if the executor is not recorded.","params":{"dstChainId":"The chain id of the destination chain.","transactionId":"The id of the transaction to get the recorded executor for."}},"unclaimedRewards(address)":{"params":{"executor":"The address of the executor to get the rewards for."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionFees__AlreadyRecorded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFees__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"addExecutionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"claimExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"recordExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"recordedExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulatedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}},\"addExecutionFee(uint256,bytes32)\":{\"details\":\"Will revert if the executor is already recorded for the transaction.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to add the execution fee to.\"}},\"claimExecutionFees(address)\":{\"details\":\"Will revert if the executor has no unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the execution fee for.\"}},\"recordExecutor(uint256,bytes32,address)\":{\"details\":\"Could only be called by the Recorder.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executor\":\"The address of the executor who completed the transaction.\",\"transactionId\":\"The id of the transaction to record the executor for.\"}},\"recordedExecutor(uint256,bytes32)\":{\"details\":\"Will return address(0) if the executor is not recorded.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"transactionId\":\"The id of the transaction to get the recorded executor for.\"}},\"unclaimedRewards(address)\":{\"params\":{\"executor\":\"The address of the executor to get the rewards for.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulatedRewards(address)\":{\"notice\":\"Get the accumulated rewards for an executor.\"},\"addExecutionFee(uint256,bytes32)\":{\"notice\":\"Add the execution fee for a transaction. The attached value will be added to the rewards for the executor completing the transaction. Note: this could be used to store the execution fee for a new transaction, or to add more funds to the execution fee of an existing transaction. Therefore this function is payable, and does not implement any caller restrictions.\"},\"claimExecutionFees(address)\":{\"notice\":\"Allows the executor to claim their unclaimed rewards.\"},\"executionFee(uint256,bytes32)\":{\"notice\":\"Get the total execution fee for a transaction.\"},\"recordExecutor(uint256,bytes32,address)\":{\"notice\":\"Record the executor (who completed the transaction) for a transaction, and update the accumulated rewards for the executor.\"},\"recordedExecutor(uint256,bytes32)\":{\"notice\":\"Get the address of the recorded executor for a transaction.\"},\"unclaimedRewards(address)\":{\"notice\":\"Get the unclaimed rewards for an executor.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IExecutionFees\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"accumulatedRewards(address)":"73f273fc","addExecutionFee(uint256,bytes32)":"ffecec7e","claimExecutionFees(address)":"4e497dac","executionFee(uint256,bytes32)":"936fd4db","recordExecutor(uint256,bytes32,address)":"0676b706","recordedExecutor(uint256,bytes32)":"d01e09a6","unclaimedRewards(address)":"949813b8"}},"solidity/InterchainClientV1.sol:IExecutionService":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"executorEOA","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"getExecutionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"txPayloadSize","type":"uint256"},{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"executionFee","type":"uint256"},{"internalType":"bytes","name":"options","type":"bytes"}],"name":"requestExecution","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"executorEOA()":{"notice":"Get the address of the EOA account that will be used to execute transactions on the remote chains."},"getExecutionFee(uint256,uint256,bytes)":{"notice":"Get the execution fee for executing an Interchain Transaction on a remote chain."},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"notice":"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getExecutionFee(uint256,uint256,bytes)":{"params":{"dstChainId":"The chain id of the destination chain.","options":"The options to use for the execution.","txPayloadSize":"The size of the transaction payload to use for the execution."}},"requestExecution(uint256,uint256,bytes32,uint256,bytes)":{"details":"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.","params":{"dstChainId":"The chain id of the destination chain.","executionFee":"The fee paid for the execution.","options":"The options to use for the execution.","transactionId":"The id of the transaction to execute.","txPayloadSize":"The size of the transaction payload to use for the execution."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"executorEOA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"getExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txPayloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"requestExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExecutionFee(uint256,uint256,bytes)\":{\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"options\":\"The options to use for the execution.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"details\":\"Could only be called by `InterchainClient` contracts. Will revert if the execution fee is not big enough.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain.\",\"executionFee\":\"The fee paid for the execution.\",\"options\":\"The options to use for the execution.\",\"transactionId\":\"The id of the transaction to execute.\",\"txPayloadSize\":\"The size of the transaction payload to use for the execution.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executorEOA()\":{\"notice\":\"Get the address of the EOA account that will be used to execute transactions on the remote chains.\"},\"getExecutionFee(uint256,uint256,bytes)\":{\"notice\":\"Get the execution fee for executing an Interchain Transaction on a remote chain.\"},\"requestExecution(uint256,uint256,bytes32,uint256,bytes)\":{\"notice\":\"Request the execution of an Interchain Transaction on a remote chain. Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient event with the same transactionId, then execute the transaction on the remote chain: `dstInterchainClient.executeTransaction(transactionPayload)` Once the execution is confirmed on the source chain, the off-chain actor will be able to claim `executionFee` in the ExecutionFees contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IExecutionService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"executorEOA()":"62014bad","getExecutionFee(uint256,uint256,bytes)":"c473e7e8","requestExecution(uint256,uint256,bytes32,uint256,bytes)":"e4e06522"}},"solidity/InterchainClientV1.sol:IInterchainApp":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"appReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getReceivingConfig","outputs":[{"internalType":"bytes","name":"appConfig","type":"bytes"},{"internalType":"address[]","name":"modules","type":"address[]"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Minimal interface for the Interchain App to work with the Interchain Client.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"appReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceivingConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"appConfig\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Minimal interface for the Interchain App to work with the Interchain Client.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainApp\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"appReceive(uint256,bytes32,uint256,uint64,bytes)":"68a69847","getReceivingConfig()":"287bc057"}},"solidity/InterchainClientV1.sol:IInterchainClientV1":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__FeeAmountTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__IncorrectDstChainId","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__IncorrectMsgValue","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__NoLinkedClient","type":"error"},{"inputs":[{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"InterchainClientV1__NotEVMClient","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__NotEnoughResponses","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__NotRemoteChainId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxAlreadyExecuted","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxNotExecuted","type":"error"},{"inputs":[],"name":"InterchainClientV1__ZeroReceiver","type":"error"},{"inputs":[],"name":"InterchainClientV1__ZeroRequiredResponses","type":"error"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"}],"name":"getExecutor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"getExecutorById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"getLinkedClient","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"getLinkedClientEVM","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSendEVM","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executionFees_","type":"address"}],"name":"setExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"writeExecutionProof","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getExecutor(bytes)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getExecutorById(bytes32)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getInterchainFee(uint256,address,address[],bytes,bytes)":{"notice":"Returns the fee for sending an Interchain message."},"getLinkedClient(uint256)":{"notice":"Returns the address of the linked client (as bytes32) for a specific chain ID."},"getLinkedClientEVM(uint256)":{"notice":"Returns the EVM address of the linked client for a specific chain ID."},"interchainExecute(uint256,bytes,bytes32[])":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"isExecutable(bytes,bytes32[])":{"notice":"Checks if a transaction is executable."},"setExecutionFees(address)":{"notice":"Sets the address of the ExecutionFees contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."},"writeExecutionProof(bytes32)":{"notice":"Writes the proof of execution for a transaction into the InterchainDB."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getInterchainFee(uint256,address,address[],bytes,bytes)":{"params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, currently gas limit + native gas drop.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"getLinkedClient(uint256)":{"details":"Will return 0x0 if no client is linked for the chain ID."},"getLinkedClientEVM(uint256)":{"details":"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client."},"interchainExecute(uint256,bytes,bytes32[])":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The transaction data."}},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."},"returns":{"desc":"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch."}},"isExecutable(bytes,bytes32[])":{"details":"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules","params":{"proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The InterchainTransaction struct to be checked."},"returns":{"_0":"bool Returns true if the transaction is executable, false otherwise."}},"setExecutionFees(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"executionFees_":"The address of the ExecutionFees contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"writeExecutionProof(bytes32)":{"details":"Will revert if the transaction has not been executed.","params":{"transactionId":"The ID of the transaction to write the proof for."},"returns":{"dbNonce":"        The database nonce of the batch containing the written proof for transaction.","entryIndex":"     The index of the written proof for transaction within the batch."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__FeeAmountTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectDstChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NoLinkedClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__NotEVMClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NotEnoughResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NotRemoteChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxNotExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ZeroReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ZeroRequiredResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getExecutorById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getLinkedClient\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getLinkedClientEVM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSendEVM\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionFees_\",\"type\":\"address\"}],\"name\":\"setExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"writeExecutionProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getInterchainFee(uint256,address,address[],bytes,bytes)\":{\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, currently gas limit + native gas drop.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"getLinkedClient(uint256)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID.\"},\"getLinkedClientEVM(uint256)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"},\"returns\":{\"desc\":\"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch.\"}},\"isExecutable(bytes,bytes32[])\":{\"details\":\"Determines if a transaction meets the criteria to be executed based on: - If approved modules have written to the InterchainDB - If the threshold of approved modules have been met - If the optimistic window has passed for all modules\",\"params\":{\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The InterchainTransaction struct to be checked.\"},\"returns\":{\"_0\":\"bool Returns true if the transaction is executable, false otherwise.\"}},\"setExecutionFees(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"executionFees_\":\"The address of the ExecutionFees contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"writeExecutionProof(bytes32)\":{\"details\":\"Will revert if the transaction has not been executed.\",\"params\":{\"transactionId\":\"The ID of the transaction to write the proof for.\"},\"returns\":{\"dbNonce\":\"        The database nonce of the batch containing the written proof for transaction.\",\"entryIndex\":\"     The index of the written proof for transaction within the batch.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExecutor(bytes)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getExecutorById(bytes32)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getInterchainFee(uint256,address,address[],bytes,bytes)\":{\"notice\":\"Returns the fee for sending an Interchain message.\"},\"getLinkedClient(uint256)\":{\"notice\":\"Returns the address of the linked client (as bytes32) for a specific chain ID.\"},\"getLinkedClientEVM(uint256)\":{\"notice\":\"Returns the EVM address of the linked client for a specific chain ID.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"isExecutable(bytes,bytes32[])\":{\"notice\":\"Checks if a transaction is executable.\"},\"setExecutionFees(address)\":{\"notice\":\"Sets the address of the ExecutionFees contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"},\"writeExecutionProof(bytes32)\":{\"notice\":\"Writes the proof of execution for a transaction into the InterchainDB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"getExecutor(bytes)":"f92a79ff","getExecutorById(bytes32)":"f1a61fac","getInterchainFee(uint256,address,address[],bytes,bytes)":"3c383e7b","getLinkedClient(uint256)":"aa102ec4","getLinkedClientEVM(uint256)":"02172a35","interchainExecute(uint256,bytes,bytes32[])":"53b67d74","interchainSend(uint256,bytes32,address,address[],bytes,bytes)":"98939d28","interchainSendEVM(uint256,address,address,address[],bytes,bytes)":"827f940d","isExecutable(bytes,bytes32[])":"1450c281","setExecutionFees(address)":"3dc68b87","setLinkedClient(uint256,bytes32)":"f34234c8","writeExecutionProof(bytes32)":"90e81077"}},"solidity/InterchainClientV1.sol:IInterchainDB":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchNotFinalized","type":"error"},{"inputs":[{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes32","name":"existingBatchRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"newBatch","type":"tuple"}],"name":"InterchainDB__ConflictingBatches","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"uint64","name":"batchSize","type":"uint64"}],"name":"InterchainDB__EntryIndexOutOfRange","type":"error"},{"inputs":[{"internalType":"uint256","name":"actualFee","type":"uint256"},{"internalType":"uint256","name":"expectedFee","type":"uint256"}],"name":"InterchainDB__IncorrectFeeAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"InterchainDB__InvalidEntryRange","type":"error"},{"inputs":[],"name":"InterchainDB__NoModulesSpecified","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainDB__SameChainId","type":"error"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"checkVerification","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatch","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchLeafs","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"getBatchLeafsPaginated","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchSize","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDBNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntry","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntryProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNextEntryIndex","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestBatchVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"batch","type":"tuple"}],"name":"verifyRemoteBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"notice":"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry."},"getBatch(uint256)":{"notice":"Get the finalized Interchain Batch with the given nonce."},"getBatchLeafs(uint256)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together)."},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error."},"getBatchSize(uint256)":{"notice":"Returns the size of the finalized batch with the given nonce."},"getDBNonce()":{"notice":"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch."},"getEntry(uint256,uint64)":{"notice":"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry."},"getEntryProof(uint256,uint64)":{"notice":"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce."},"getInterchainFee(uint256,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"getNextEntryIndex()":{"notice":"Get the index of the next entry to be written to the database."},"requestBatchVerification(uint256,uint256,address[])":{"notice":"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch."},"verifyRemoteBatch((uint256,uint256,bytes32))":{"notice":"Allows the Interchain Module to verify the batch coming from the remote chain."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint256,bytes32,address[])":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details."}},"version":1},"developerDoc":{"kind":"dev","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"params":{"dstModule":"The destination chain addresses of the Interchain Modules to use for verification","entry":"The Interchain Entry to read"},"returns":{"moduleVerifiedAt":"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry."}},"getBatch(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafs(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.","params":{"dbNonce":"The database nonce of the finalized batch","end":"The end index of the paginated leafs, exclusive","start":"The start index of the paginated leafs, inclusive"}},"getBatchSize(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getEntry(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the existing batch","entryIndex":"The index of the written entry within the batch"}},"getEntryProof(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the finalized batch","entryIndex":"The index of the written entry within the batch"},"returns":{"proof":"      The Merkle proof of inclusion for the entry"}},"getInterchainFee(uint256,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"getNextEntryIndex()":{"returns":{"dbNonce":"     The database nonce of the batch including the next entry","entryIndex":"  The index of the next entry within that batch"}},"requestBatchVerification(uint256,uint256,address[])":{"details":"Will revert if the batch with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the existing batch","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"verifyRemoteBatch((uint256,uint256,bytes32))":{"params":{"batch":"The Interchain Batch to confirm"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}},"writeEntryWithVerification(uint256,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"existingBatchRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"newBatch\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__ConflictingBatches\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"batchSize\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__EntryIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFee\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__IncorrectFeeAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__InvalidEntryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__NoModulesSpecified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__SameChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"checkVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"getBatchLeafsPaginated\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDBNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntryProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEntryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestBatchVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"verifyRemoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"params\":{\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\",\"entry\":\"The Interchain Entry to read\"},\"returns\":{\"moduleVerifiedAt\":\"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry.\"}},\"getBatch(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafs(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"end\":\"The end index of the paginated leafs, exclusive\",\"start\":\"The start index of the paginated leafs, inclusive\"}},\"getBatchSize(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getEntry(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"entryIndex\":\"The index of the written entry within the batch\"}},\"getEntryProof(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"entryIndex\":\"The index of the written entry within the batch\"},\"returns\":{\"proof\":\"      The Merkle proof of inclusion for the entry\"}},\"getInterchainFee(uint256,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"getNextEntryIndex()\":{\"returns\":{\"dbNonce\":\"     The database nonce of the batch including the next entry\",\"entryIndex\":\"  The index of the next entry within that batch\"}},\"requestBatchVerification(uint256,uint256,address[])\":{\"details\":\"Will revert if the batch with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"params\":{\"batch\":\"The Interchain Batch to confirm\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"notice\":\"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry.\"},\"getBatch(uint256)\":{\"notice\":\"Get the finalized Interchain Batch with the given nonce.\"},\"getBatchLeafs(uint256)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\"},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error.\"},\"getBatchSize(uint256)\":{\"notice\":\"Returns the size of the finalized batch with the given nonce.\"},\"getDBNonce()\":{\"notice\":\"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch.\"},\"getEntry(uint256,uint64)\":{\"notice\":\"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry.\"},\"getEntryProof(uint256,uint64)\":{\"notice\":\"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce.\"},\"getInterchainFee(uint256,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"getNextEntryIndex()\":{\"notice\":\"Get the index of the next entry to be written to the database.\"},\"requestBatchVerification(uint256,uint256,address[])\":{\"notice\":\"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch.\"},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"notice\":\"Allows the Interchain Module to verify the batch coming from the remote chain.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"IInterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":"67b1f42e","getBatch(uint256)":"5ac44282","getBatchLeafs(uint256)":"d63020bb","getBatchLeafsPaginated(uint256,uint64,uint64)":"25a1641d","getBatchSize(uint256)":"b955e9b9","getDBNonce()":"f338140e","getEntry(uint256,uint64)":"1725fd30","getEntryProof(uint256,uint64)":"4f84d040","getInterchainFee(uint256,address[])":"fc7686ec","getNextEntryIndex()":"aa2f06ae","requestBatchVerification(uint256,uint256,address[])":"84b1c8b8","verifyRemoteBatch((uint256,uint256,bytes32))":"05d0728c","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint256,bytes32,address[])":"67c769af"}},"solidity/InterchainClientV1.sol:InterchainBatchLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220189ad798ff6364664de59fb6e83830e7966d9e9389852d9be6916ede102221e064736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220189ad798ff6364664de59fb6e83830e7966d9e9389852d9be6916ede102221e064736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"9776:842:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;9776:842:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"9776:842:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainBatchLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainClientV1":{"code":"0x60a06040523480156200001157600080fd5b5060405162002b7638038062002b768339810160408190526200003491620000f0565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000083565b50506001600160a01b031660805262000128565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000eb57600080fd5b919050565b600080604083850312156200010457600080fd5b6200010f83620000d3565b91506200011f60208401620000d3565b90509250929050565b608051612a086200016e600039600081816103bd0152818161062101528181610bc0015281816114de0152818161159f015281816116fd0152611b9c0152612a086000f3fe6080604052600436106101445760003560e01c80638da5cb5b116100c0578063e4c6124711610074578063f2fde38b11610059578063f2fde38b14610422578063f34234c814610442578063f92a79ff1461046257600080fd5b8063e4c61247146103ab578063f1a61fac146103df57600080fd5b806398939d28116100a557806398939d281461033d578063aa102ec414610350578063d5e788a01461037057600080fd5b80638da5cb5b146102d457806390e81077146102ff57600080fd5b806353b67d74116101175780637341eaf9116100fc5780637341eaf91461023b5780637c80a90f14610268578063827f940d1461029557600080fd5b806353b67d7414610213578063715018a61461022657600080fd5b806302172a35146101495780631450c281146101935780633c383e7b146101c35780633dc68b87146101f1575b600080fd5b34801561015557600080fd5b50610169610164366004611c98565b610482565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561019f57600080fd5b506101b36101ae366004611d3f565b61052e565b604051901515815260200161018a565b3480156101cf57600080fd5b506101e36101de366004611dcd565b610598565b60405190815260200161018a565b3480156101fd57600080fd5b5061021161020c366004611e83565b6107f4565b005b610211610221366004611ea7565b610875565b34801561023257600080fd5b50610211610a6e565b34801561024757600080fd5b506001546101699073ffffffffffffffffffffffffffffffffffffffff1681565b34801561027457600080fd5b5061028861028336600461204a565b610a82565b60405161018a919061216f565b6102a86102a3366004612182565b610a93565b6040805182518152602080840151908201529181015167ffffffffffffffff169082015260600161018a565b3480156102e057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610169565b34801561030b57600080fd5b5061031f61031a366004611c98565b610ae7565b6040805192835267ffffffffffffffff90911660208301520161018a565b6102a861034b36600461224d565b610ca6565b34801561035c57600080fd5b506101e361036b366004611c98565b610ce2565b34801561037c57600080fd5b5061039061038b366004612284565b610d33565b6040805182518152602092830151928101929092520161018a565b3480156103b757600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b3480156103eb57600080fd5b506101696103fa366004611c98565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b34801561042e57600080fd5b5061021161043d366004611e83565b610d50565b34801561044e57600080fd5b5061021161045d3660046122b9565b610db4565b34801561046e57600080fd5b5061016961047d3660046122db565b610e0b565b60004682036104c5576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b506000818152600260205260409020548073ffffffffffffffffffffffffffffffffffffffff81168114610528576040517f0a55a4eb000000000000000000000000000000000000000000000000000000008152600481018290526024016104bc565b50919050565b60008061057086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905061057f8160c00151610ef7565b5061058b818585610f7b565b5060019695505050505050565b60006105a3896111b6565b506105e385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ef792505050565b506040517ffc7686ec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fc7686ec9061065a908c908b908b90600401612373565b602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612396565b905073ffffffffffffffffffffffffffffffffffffffff8816156107e857600061073860008b6000801b6000808b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525061124692505050565b90508873ffffffffffffffffffffffffffffffffffffffff1663c473e7e88b8360405160200161076891906123af565b6040516020818303038152906040525189896040518563ffffffff1660e01b81526004016107999493929190612465565b602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612396565b6107e490836124b4565b9150505b98975050505050505050565b6107fc61130b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fec02f15d78cdfc4beeba45f31cfad25089004e5e3d72727168dd96a77d1f2f829060200160405180910390a150565b60006108b685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905060006108c5828585610f7b565b600081815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560c08401519192509061090d90610ef7565b90508060200151341461095b5760208101516040517f2b36102500000000000000000000000000000000000000000000000000000000815234600482015260248101919091526044016104bc565b805188101561096957805197505b606083015173ffffffffffffffffffffffffffffffffffffffff166368a6984789348660000151876020015188608001518960a001518a60e001516040518863ffffffff1660e01b81526004016109c49594939291906124c7565b6000604051808303818589803b1580156109dd57600080fd5b5088f11580156109f1573d6000803e3d6000fd5b5050505050508260a0015167ffffffffffffffff168360800151837f9c887f38b8f2330ee9894137eb60cf6ab904c5d2063ddc0baa7a77bfd1880e8c866000015187602001518860600151604051610a5c939291909283526020830191909152604082015260600190565b60405180910390a45050505050505050565b610a7661130b565b610a80600061135e565b565b6060610a8d826113d3565b92915050565b604080516060810182526000808252602082018190529181019190915273ffffffffffffffffffffffffffffffffffffffff8916610ad88b828b8b8b8b8b8b8b6113fc565b9b9a5050505050505050505050565b600081815260036020526040812054819073ffffffffffffffffffffffffffffffffffffffff1680610b48576040517fe99eb48d000000000000000000000000000000000000000000000000000000008152600481018590526024016104bc565b60008482604051602001610b7c92919091825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60408051808303601f1901815290829052805160208201207f2ad8c706000000000000000000000000000000000000000000000000000000008352600483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632ad8c7069060240160408051808303816000875af1158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190612512565b60405173ffffffffffffffffffffffffffffffffffffffff85168152919550935067ffffffffffffffff841690859087907f810ecf3e461a7f5c46c0bbbca8680cf65de59e78e521d58d569e03969d08648c9060200160405180910390a45050915091565b6040805160608101825260008082526020820181905291810191909152610cd48a8a8a8a8a8a8a8a8a6113fc565b9a9950505050505050505050565b6000468203610d20576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b5060009081526002602052604090205490565b6040805180820190915260008082526020820152610a8d82610ef7565b610d5861130b565b73ffffffffffffffffffffffffffffffffffffffff8116610da8576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016104bc565b610db18161135e565b50565b610dbc61130b565b60008281526002602090815260409182902083905581518481529081018390527fb6b5dc04cc1c35fc7a8c8342e378dccc610c6589ef3bcfcd6eaf0304913f889a910160405180910390a15050565b600080610e4d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905060036000610e5c83611ad1565b815260208101919091526040016000205473ffffffffffffffffffffffffffffffffffffffff16949350505050565b610ee36040518061010001604052806000815260200160008019168152602001600081526020016000801916815260200160008152602001600067ffffffffffffffff16815260200160608152602001606081525090565b81806020019051810190610a8d9190612587565b6040805180820190915260008082526020820152600080610f1784611b01565b9092509050600160ff83161015610f5f576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff831660048201526024016104bc565b80806020019051810190610f73919061269c565b949350505050565b600080610f8b85600001516111b6565b905046856040015114610fd25784604001516040517f973253820000000000000000000000000000000000000000000000000000000081526004016104bc91815260200190565b610fdb85611ad1565b60008181526003602052604090205490925073ffffffffffffffffffffffffffffffffffffffff161561103d576040517fd80aeb91000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b60006040518060a0016040528087600001518152602001876080015181526020018760a0015167ffffffffffffffff16815260200183815260200184815250905060008061108c886060015190565b73ffffffffffffffffffffffffffffffffffffffff1663287bc0576040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fe91908101906126b8565b91509150600061110d83611b23565b805190915060000361114b576040517fa09e214300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115e83868b8b8660200151611b8b565b82519091508110156111a95781516040517f0bce4e850000000000000000000000000000000000000000000000000000000081526104bc918391600401918252602082015260400190565b5050505050509392505050565b60004682036111f4576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b5060008181526002602052604081205490819003611241576040517f9a45110f000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b919050565b61129e6040518061010001604052806000815260200160008019168152602001600081526020016000801916815260200160008152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6040518061010001604052804681526020016112cd8a73ffffffffffffffffffffffffffffffffffffffff1690565b81526020018881526020018781526020018681526020018567ffffffffffffffff168152602001848152602001838152509050979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a80576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016104bc565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816040516020016113e691906123af565b6040516020818303038152906040529050919050565b60408051606081018252600080825260208201819052918101919091526114228a6111b6565b50600089900361145e576040517f0b3e41a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61149d85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ef792505050565b506040517ffc7686ec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fc7686ec90611517908e908c908c90600401612373565b602060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190612396565b90508034101561159d576040517f9557ee49000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044016104bc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa2f06ae6040518163ffffffff1660e01b81526004016040805180830381865afa158015611607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162b9190612512565b83602001846040018267ffffffffffffffff1667ffffffffffffffff1681525082815250505060006116e4338d8d866020015187604001518c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124692505050565b90506116ef81611ad1565b8360000181815250506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367c769af85856040015188600001518f8f6040518663ffffffff1660e01b8152600401611763949392919061278e565b604080518083038185885af1158015611780573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117a59190612512565b915091508460200151821480156117d35750846040015167ffffffffffffffff168167ffffffffffffffff16145b6117df576117df6127ae565b50503482810390831461188857600154604080840151865191517fffecec7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169263ffecec7e92859261185592909190600401918252602082015260400190565b6000604051808303818588803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b50505050505b73ffffffffffffffffffffffffffffffffffffffff8b1615611a51578a73ffffffffffffffffffffffffffffffffffffffff1663e4e065228e6118ca856113d3565b5187516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815261190e9392919087908f908f906004016127dd565b600060405180830381600087803b15801561192857600080fd5b505af115801561193c573d6000803e3d6000fd5b5050505060008b73ffffffffffffffffffffffffffffffffffffffff166362014bad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190612809565b600154604085810151885191517f0676b7060000000000000000000000000000000000000000000000000000000081526004810191909152602481019190915273ffffffffffffffffffffffffffffffffffffffff8084166044830152929350911690630676b70690606401600060405180830381600087803b158015611a3757600080fd5b505af1158015611a4b573d6000803e3d6000fd5b50505050505b8160a0015167ffffffffffffffff16826080015185600001517f1b22d6c0b67f6f17a9004833bfb5afbaea4602457bd57e1d128cb997fb30161b85604001518660200151876060015189888a60c001518b60e00151604051611ab99796959493929190612826565b60405180910390a45050509998505050505050505050565b600081604051602001611ae491906123af565b604051602081830303815290604052805190602001209050919050565b6000606082806020019051810190611b199190612869565b9094909350915050565b6040805180820190915260008082526020820152600080611b4384611b01565b9092509050600160ff83161015610f5f576040517fc3e3b66600000000000000000000000000000000000000000000000000000000815260ff831660048201526024016104bc565b6000805b8651811015611c8e5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367b1f42e898481518110611be857611be86128c0565b60200260200101518989896040518563ffffffff1660e01b8152600401611c1294939291906128ef565b602060405180830381865afa158015611c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c539190612396565b90508015801590611c6c575042611c6a85836124b4565b105b15611c7d57611c7a8361299a565b92505b50611c878161299a565b9050611b8f565b5095945050505050565b600060208284031215611caa57600080fd5b5035919050565b60008083601f840112611cc357600080fd5b50813567ffffffffffffffff811115611cdb57600080fd5b602083019150836020828501011115611cf357600080fd5b9250929050565b60008083601f840112611d0c57600080fd5b50813567ffffffffffffffff811115611d2457600080fd5b6020830191508360208260051b8501011115611cf357600080fd5b60008060008060408587031215611d5557600080fd5b843567ffffffffffffffff80821115611d6d57600080fd5b611d7988838901611cb1565b90965094506020870135915080821115611d9257600080fd5b50611d9f87828801611cfa565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610db157600080fd5b60008060008060008060008060a0898b031215611de957600080fd5b883597506020890135611dfb81611dab565b9650604089013567ffffffffffffffff80821115611e1857600080fd5b611e248c838d01611cfa565b909850965060608b0135915080821115611e3d57600080fd5b611e498c838d01611cb1565b909650945060808b0135915080821115611e6257600080fd5b50611e6f8b828c01611cb1565b999c989b5096995094979396929594505050565b600060208284031215611e9557600080fd5b8135611ea081611dab565b9392505050565b600080600080600060608688031215611ebf57600080fd5b85359450602086013567ffffffffffffffff80821115611ede57600080fd5b611eea89838a01611cb1565b90965094506040880135915080821115611f0357600080fd5b50611f1088828901611cfa565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f7457611f74611f21565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fa357611fa3611f21565b604052919050565b67ffffffffffffffff81168114610db157600080fd5b803561124181611fab565b600067ffffffffffffffff821115611fe657611fe6611f21565b50601f01601f191660200190565b600082601f83011261200557600080fd5b813561201861201382611fcc565b611f7a565b81815284602083860101111561202d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561205c57600080fd5b813567ffffffffffffffff8082111561207457600080fd5b90830190610100828603121561208957600080fd5b612091611f50565b82358152602083013560208201526040830135604082015260608301356060820152608083013560808201526120c960a08401611fc1565b60a082015260c0830135828111156120e057600080fd5b6120ec87828601611ff4565b60c08301525060e08301358281111561210457600080fd5b61211087828601611ff4565b60e08301525095945050505050565b60005b8381101561213a578181015183820152602001612122565b50506000910152565b6000815180845261215b81602086016020860161211f565b601f01601f19169290920160200192915050565b602081526000611ea06020830184612143565b600080600080600080600080600060c08a8c0312156121a057600080fd5b8935985060208a01356121b281611dab565b975060408a01356121c281611dab565b965060608a013567ffffffffffffffff808211156121df57600080fd5b6121eb8d838e01611cfa565b909850965060808c013591508082111561220457600080fd5b6122108d838e01611cb1565b909650945060a08c013591508082111561222957600080fd5b506122368c828d01611cb1565b915080935050809150509295985092959850929598565b600080600080600080600080600060c08a8c03121561226b57600080fd5b8935985060208a0135975060408a01356121c281611dab565b60006020828403121561229657600080fd5b813567ffffffffffffffff8111156122ad57600080fd5b610f7384828501611ff4565b600080604083850312156122cc57600080fd5b50508035926020909101359150565b600080602083850312156122ee57600080fd5b823567ffffffffffffffff81111561230557600080fd5b61231185828601611cb1565b90969095509350505050565b8183526000602080850194508260005b8581101561236857813561234081611dab565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161232d565b509495945050505050565b83815260406020820152600061238d60408301848661231d565b95945050505050565b6000602082840312156123a857600080fd5b5051919050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a082015267ffffffffffffffff60a08301511660c0820152600060c08301516101008060e0850152612414610120850183612143565b915060e0850151601f1985840301828601526124308382612143565b9695505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b84815283602082015260606040820152600061243060608301848661243a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610a8d57610a8d612485565b85815284602082015283604082015267ffffffffffffffff8316606082015260a0608082015260006124fc60a0830184612143565b979650505050505050565b805161124181611fab565b6000806040838503121561252557600080fd5b82519150602083015161253781611fab565b809150509250929050565b600082601f83011261255357600080fd5b815161256161201382611fcc565b81815284602083860101111561257657600080fd5b610f7382602083016020870161211f565b60006020828403121561259957600080fd5b815167ffffffffffffffff808211156125b157600080fd5b9083019061010082860312156125c657600080fd5b6125ce611f50565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015261260660a08401612507565b60a082015260c08301518281111561261d57600080fd5b61262987828601612542565b60c08301525060e08301518281111561264157600080fd5b61211087828601612542565b60006040828403121561265f57600080fd5b6040516040810181811067ffffffffffffffff8211171561268257612682611f21565b604052825181526020928301519281019290925250919050565b6000604082840312156126ae57600080fd5b611ea0838361264d565b600080604083850312156126cb57600080fd5b825167ffffffffffffffff808211156126e357600080fd5b6126ef86838701612542565b935060209150818501518181111561270657600080fd5b8501601f8101871361271757600080fd5b80518281111561272957612729611f21565b8060051b925061273a848401611f7a565b818152928201840192848101908985111561275457600080fd5b928501925b8484101561277e578351925061276e83611dab565b8282529285019290850190612759565b8096505050505050509250929050565b84815283602082015260606040820152600061243060608301848661231d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b86815285602082015284604082015283606082015260a0608082015260006107e860a08301848661243a565b60006020828403121561281b57600080fd5b8151611ea081611dab565b87815286602082015285604082015284606082015283608082015260e060a0820152600061285760e0830185612143565b82810360c08401526107e48185612143565b6000806040838503121561287c57600080fd5b825160ff8116811461288d57600080fd5b602084015190925067ffffffffffffffff8111156128aa57600080fd5b6128b685828601612542565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff85168152835160208201526020840151604082015267ffffffffffffffff604085015116606082015260608401516080820152608084015160a082015260e060c08201528160e082015260006101007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561298057600080fd5b8360051b8086838601379290920190910195945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129cb576129cb612485565b506001019056fea264697066735822122040aa75ce03874eddc820b27bf9a9c0e7d2aac4f616abc66edb34797ab01be45364736f6c63430008140033","runtime-code":"0x6080604052600436106101445760003560e01c80638da5cb5b116100c0578063e4c6124711610074578063f2fde38b11610059578063f2fde38b14610422578063f34234c814610442578063f92a79ff1461046257600080fd5b8063e4c61247146103ab578063f1a61fac146103df57600080fd5b806398939d28116100a557806398939d281461033d578063aa102ec414610350578063d5e788a01461037057600080fd5b80638da5cb5b146102d457806390e81077146102ff57600080fd5b806353b67d74116101175780637341eaf9116100fc5780637341eaf91461023b5780637c80a90f14610268578063827f940d1461029557600080fd5b806353b67d7414610213578063715018a61461022657600080fd5b806302172a35146101495780631450c281146101935780633c383e7b146101c35780633dc68b87146101f1575b600080fd5b34801561015557600080fd5b50610169610164366004611c98565b610482565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561019f57600080fd5b506101b36101ae366004611d3f565b61052e565b604051901515815260200161018a565b3480156101cf57600080fd5b506101e36101de366004611dcd565b610598565b60405190815260200161018a565b3480156101fd57600080fd5b5061021161020c366004611e83565b6107f4565b005b610211610221366004611ea7565b610875565b34801561023257600080fd5b50610211610a6e565b34801561024757600080fd5b506001546101699073ffffffffffffffffffffffffffffffffffffffff1681565b34801561027457600080fd5b5061028861028336600461204a565b610a82565b60405161018a919061216f565b6102a86102a3366004612182565b610a93565b6040805182518152602080840151908201529181015167ffffffffffffffff169082015260600161018a565b3480156102e057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610169565b34801561030b57600080fd5b5061031f61031a366004611c98565b610ae7565b6040805192835267ffffffffffffffff90911660208301520161018a565b6102a861034b36600461224d565b610ca6565b34801561035c57600080fd5b506101e361036b366004611c98565b610ce2565b34801561037c57600080fd5b5061039061038b366004612284565b610d33565b6040805182518152602092830151928101929092520161018a565b3480156103b757600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b3480156103eb57600080fd5b506101696103fa366004611c98565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b34801561042e57600080fd5b5061021161043d366004611e83565b610d50565b34801561044e57600080fd5b5061021161045d3660046122b9565b610db4565b34801561046e57600080fd5b5061016961047d3660046122db565b610e0b565b60004682036104c5576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b506000818152600260205260409020548073ffffffffffffffffffffffffffffffffffffffff81168114610528576040517f0a55a4eb000000000000000000000000000000000000000000000000000000008152600481018290526024016104bc565b50919050565b60008061057086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905061057f8160c00151610ef7565b5061058b818585610f7b565b5060019695505050505050565b60006105a3896111b6565b506105e385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ef792505050565b506040517ffc7686ec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fc7686ec9061065a908c908b908b90600401612373565b602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190612396565b905073ffffffffffffffffffffffffffffffffffffffff8816156107e857600061073860008b6000801b6000808b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525061124692505050565b90508873ffffffffffffffffffffffffffffffffffffffff1663c473e7e88b8360405160200161076891906123af565b6040516020818303038152906040525189896040518563ffffffff1660e01b81526004016107999493929190612465565b602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612396565b6107e490836124b4565b9150505b98975050505050505050565b6107fc61130b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fec02f15d78cdfc4beeba45f31cfad25089004e5e3d72727168dd96a77d1f2f829060200160405180910390a150565b60006108b685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905060006108c5828585610f7b565b600081815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560c08401519192509061090d90610ef7565b90508060200151341461095b5760208101516040517f2b36102500000000000000000000000000000000000000000000000000000000815234600482015260248101919091526044016104bc565b805188101561096957805197505b606083015173ffffffffffffffffffffffffffffffffffffffff166368a6984789348660000151876020015188608001518960a001518a60e001516040518863ffffffff1660e01b81526004016109c49594939291906124c7565b6000604051808303818589803b1580156109dd57600080fd5b5088f11580156109f1573d6000803e3d6000fd5b5050505050508260a0015167ffffffffffffffff168360800151837f9c887f38b8f2330ee9894137eb60cf6ab904c5d2063ddc0baa7a77bfd1880e8c866000015187602001518860600151604051610a5c939291909283526020830191909152604082015260600190565b60405180910390a45050505050505050565b610a7661130b565b610a80600061135e565b565b6060610a8d826113d3565b92915050565b604080516060810182526000808252602082018190529181019190915273ffffffffffffffffffffffffffffffffffffffff8916610ad88b828b8b8b8b8b8b8b6113fc565b9b9a5050505050505050505050565b600081815260036020526040812054819073ffffffffffffffffffffffffffffffffffffffff1680610b48576040517fe99eb48d000000000000000000000000000000000000000000000000000000008152600481018590526024016104bc565b60008482604051602001610b7c92919091825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60408051808303601f1901815290829052805160208201207f2ad8c706000000000000000000000000000000000000000000000000000000008352600483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632ad8c7069060240160408051808303816000875af1158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190612512565b60405173ffffffffffffffffffffffffffffffffffffffff85168152919550935067ffffffffffffffff841690859087907f810ecf3e461a7f5c46c0bbbca8680cf65de59e78e521d58d569e03969d08648c9060200160405180910390a45050915091565b6040805160608101825260008082526020820181905291810191909152610cd48a8a8a8a8a8a8a8a8a6113fc565b9a9950505050505050505050565b6000468203610d20576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b5060009081526002602052604090205490565b6040805180820190915260008082526020820152610a8d82610ef7565b610d5861130b565b73ffffffffffffffffffffffffffffffffffffffff8116610da8576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016104bc565b610db18161135e565b50565b610dbc61130b565b60008281526002602090815260409182902083905581518481529081018390527fb6b5dc04cc1c35fc7a8c8342e378dccc610c6589ef3bcfcd6eaf0304913f889a910160405180910390a15050565b600080610e4d84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8b92505050565b905060036000610e5c83611ad1565b815260208101919091526040016000205473ffffffffffffffffffffffffffffffffffffffff16949350505050565b610ee36040518061010001604052806000815260200160008019168152602001600081526020016000801916815260200160008152602001600067ffffffffffffffff16815260200160608152602001606081525090565b81806020019051810190610a8d9190612587565b6040805180820190915260008082526020820152600080610f1784611b01565b9092509050600160ff83161015610f5f576040517fbd91a21500000000000000000000000000000000000000000000000000000000815260ff831660048201526024016104bc565b80806020019051810190610f73919061269c565b949350505050565b600080610f8b85600001516111b6565b905046856040015114610fd25784604001516040517f973253820000000000000000000000000000000000000000000000000000000081526004016104bc91815260200190565b610fdb85611ad1565b60008181526003602052604090205490925073ffffffffffffffffffffffffffffffffffffffff161561103d576040517fd80aeb91000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b60006040518060a0016040528087600001518152602001876080015181526020018760a0015167ffffffffffffffff16815260200183815260200184815250905060008061108c886060015190565b73ffffffffffffffffffffffffffffffffffffffff1663287bc0576040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fe91908101906126b8565b91509150600061110d83611b23565b805190915060000361114b576040517fa09e214300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115e83868b8b8660200151611b8b565b82519091508110156111a95781516040517f0bce4e850000000000000000000000000000000000000000000000000000000081526104bc918391600401918252602082015260400190565b5050505050509392505050565b60004682036111f4576040517f57516f69000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b5060008181526002602052604081205490819003611241576040517f9a45110f000000000000000000000000000000000000000000000000000000008152600481018390526024016104bc565b919050565b61129e6040518061010001604052806000815260200160008019168152602001600081526020016000801916815260200160008152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6040518061010001604052804681526020016112cd8a73ffffffffffffffffffffffffffffffffffffffff1690565b81526020018881526020018781526020018681526020018567ffffffffffffffff168152602001848152602001838152509050979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a80576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016104bc565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816040516020016113e691906123af565b6040516020818303038152906040529050919050565b60408051606081018252600080825260208201819052918101919091526114228a6111b6565b50600089900361145e576040517f0b3e41a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61149d85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ef792505050565b506040517ffc7686ec00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fc7686ec90611517908e908c908c90600401612373565b602060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190612396565b90508034101561159d576040517f9557ee49000000000000000000000000000000000000000000000000000000008152346004820152602481018290526044016104bc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa2f06ae6040518163ffffffff1660e01b81526004016040805180830381865afa158015611607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162b9190612512565b83602001846040018267ffffffffffffffff1667ffffffffffffffff1681525082815250505060006116e4338d8d866020015187604001518c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061124692505050565b90506116ef81611ad1565b8360000181815250506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367c769af85856040015188600001518f8f6040518663ffffffff1660e01b8152600401611763949392919061278e565b604080518083038185885af1158015611780573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117a59190612512565b915091508460200151821480156117d35750846040015167ffffffffffffffff168167ffffffffffffffff16145b6117df576117df6127ae565b50503482810390831461188857600154604080840151865191517fffecec7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169263ffecec7e92859261185592909190600401918252602082015260400190565b6000604051808303818588803b15801561186e57600080fd5b505af1158015611882573d6000803e3d6000fd5b50505050505b73ffffffffffffffffffffffffffffffffffffffff8b1615611a51578a73ffffffffffffffffffffffffffffffffffffffff1663e4e065228e6118ca856113d3565b5187516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815261190e9392919087908f908f906004016127dd565b600060405180830381600087803b15801561192857600080fd5b505af115801561193c573d6000803e3d6000fd5b5050505060008b73ffffffffffffffffffffffffffffffffffffffff166362014bad6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190612809565b600154604085810151885191517f0676b7060000000000000000000000000000000000000000000000000000000081526004810191909152602481019190915273ffffffffffffffffffffffffffffffffffffffff8084166044830152929350911690630676b70690606401600060405180830381600087803b158015611a3757600080fd5b505af1158015611a4b573d6000803e3d6000fd5b50505050505b8160a0015167ffffffffffffffff16826080015185600001517f1b22d6c0b67f6f17a9004833bfb5afbaea4602457bd57e1d128cb997fb30161b85604001518660200151876060015189888a60c001518b60e00151604051611ab99796959493929190612826565b60405180910390a45050509998505050505050505050565b600081604051602001611ae491906123af565b604051602081830303815290604052805190602001209050919050565b6000606082806020019051810190611b199190612869565b9094909350915050565b6040805180820190915260008082526020820152600080611b4384611b01565b9092509050600160ff83161015610f5f576040517fc3e3b66600000000000000000000000000000000000000000000000000000000815260ff831660048201526024016104bc565b6000805b8651811015611c8e5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166367b1f42e898481518110611be857611be86128c0565b60200260200101518989896040518563ffffffff1660e01b8152600401611c1294939291906128ef565b602060405180830381865afa158015611c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c539190612396565b90508015801590611c6c575042611c6a85836124b4565b105b15611c7d57611c7a8361299a565b92505b50611c878161299a565b9050611b8f565b5095945050505050565b600060208284031215611caa57600080fd5b5035919050565b60008083601f840112611cc357600080fd5b50813567ffffffffffffffff811115611cdb57600080fd5b602083019150836020828501011115611cf357600080fd5b9250929050565b60008083601f840112611d0c57600080fd5b50813567ffffffffffffffff811115611d2457600080fd5b6020830191508360208260051b8501011115611cf357600080fd5b60008060008060408587031215611d5557600080fd5b843567ffffffffffffffff80821115611d6d57600080fd5b611d7988838901611cb1565b90965094506020870135915080821115611d9257600080fd5b50611d9f87828801611cfa565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610db157600080fd5b60008060008060008060008060a0898b031215611de957600080fd5b883597506020890135611dfb81611dab565b9650604089013567ffffffffffffffff80821115611e1857600080fd5b611e248c838d01611cfa565b909850965060608b0135915080821115611e3d57600080fd5b611e498c838d01611cb1565b909650945060808b0135915080821115611e6257600080fd5b50611e6f8b828c01611cb1565b999c989b5096995094979396929594505050565b600060208284031215611e9557600080fd5b8135611ea081611dab565b9392505050565b600080600080600060608688031215611ebf57600080fd5b85359450602086013567ffffffffffffffff80821115611ede57600080fd5b611eea89838a01611cb1565b90965094506040880135915080821115611f0357600080fd5b50611f1088828901611cfa565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f7457611f74611f21565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fa357611fa3611f21565b604052919050565b67ffffffffffffffff81168114610db157600080fd5b803561124181611fab565b600067ffffffffffffffff821115611fe657611fe6611f21565b50601f01601f191660200190565b600082601f83011261200557600080fd5b813561201861201382611fcc565b611f7a565b81815284602083860101111561202d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561205c57600080fd5b813567ffffffffffffffff8082111561207457600080fd5b90830190610100828603121561208957600080fd5b612091611f50565b82358152602083013560208201526040830135604082015260608301356060820152608083013560808201526120c960a08401611fc1565b60a082015260c0830135828111156120e057600080fd5b6120ec87828601611ff4565b60c08301525060e08301358281111561210457600080fd5b61211087828601611ff4565b60e08301525095945050505050565b60005b8381101561213a578181015183820152602001612122565b50506000910152565b6000815180845261215b81602086016020860161211f565b601f01601f19169290920160200192915050565b602081526000611ea06020830184612143565b600080600080600080600080600060c08a8c0312156121a057600080fd5b8935985060208a01356121b281611dab565b975060408a01356121c281611dab565b965060608a013567ffffffffffffffff808211156121df57600080fd5b6121eb8d838e01611cfa565b909850965060808c013591508082111561220457600080fd5b6122108d838e01611cb1565b909650945060a08c013591508082111561222957600080fd5b506122368c828d01611cb1565b915080935050809150509295985092959850929598565b600080600080600080600080600060c08a8c03121561226b57600080fd5b8935985060208a0135975060408a01356121c281611dab565b60006020828403121561229657600080fd5b813567ffffffffffffffff8111156122ad57600080fd5b610f7384828501611ff4565b600080604083850312156122cc57600080fd5b50508035926020909101359150565b600080602083850312156122ee57600080fd5b823567ffffffffffffffff81111561230557600080fd5b61231185828601611cb1565b90969095509350505050565b8183526000602080850194508260005b8581101561236857813561234081611dab565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161232d565b509495945050505050565b83815260406020820152600061238d60408301848661231d565b95945050505050565b6000602082840312156123a857600080fd5b5051919050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a082015267ffffffffffffffff60a08301511660c0820152600060c08301516101008060e0850152612414610120850183612143565b915060e0850151601f1985840301828601526124308382612143565b9695505050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b84815283602082015260606040820152600061243060608301848661243a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610a8d57610a8d612485565b85815284602082015283604082015267ffffffffffffffff8316606082015260a0608082015260006124fc60a0830184612143565b979650505050505050565b805161124181611fab565b6000806040838503121561252557600080fd5b82519150602083015161253781611fab565b809150509250929050565b600082601f83011261255357600080fd5b815161256161201382611fcc565b81815284602083860101111561257657600080fd5b610f7382602083016020870161211f565b60006020828403121561259957600080fd5b815167ffffffffffffffff808211156125b157600080fd5b9083019061010082860312156125c657600080fd5b6125ce611f50565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015261260660a08401612507565b60a082015260c08301518281111561261d57600080fd5b61262987828601612542565b60c08301525060e08301518281111561264157600080fd5b61211087828601612542565b60006040828403121561265f57600080fd5b6040516040810181811067ffffffffffffffff8211171561268257612682611f21565b604052825181526020928301519281019290925250919050565b6000604082840312156126ae57600080fd5b611ea0838361264d565b600080604083850312156126cb57600080fd5b825167ffffffffffffffff808211156126e357600080fd5b6126ef86838701612542565b935060209150818501518181111561270657600080fd5b8501601f8101871361271757600080fd5b80518281111561272957612729611f21565b8060051b925061273a848401611f7a565b818152928201840192848101908985111561275457600080fd5b928501925b8484101561277e578351925061276e83611dab565b8282529285019290850190612759565b8096505050505050509250929050565b84815283602082015260606040820152600061243060608301848661231d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b86815285602082015284604082015283606082015260a0608082015260006107e860a08301848661243a565b60006020828403121561281b57600080fd5b8151611ea081611dab565b87815286602082015285604082015284606082015283608082015260e060a0820152600061285760e0830185612143565b82810360c08401526107e48185612143565b6000806040838503121561287c57600080fd5b825160ff8116811461288d57600080fd5b602084015190925067ffffffffffffffff8111156128aa57600080fd5b6128b685828601612542565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff85168152835160208201526020840151604082015267ffffffffffffffff604085015116606082015260608401516080820152608084015160a082015260e060c08201528160e082015260006101007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561298057600080fd5b8360051b8086838601379290920190910195945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129cb576129cb612485565b506001019056fea264697066735822122040aa75ce03874eddc820b27bf9a9c0e7d2aac4f616abc66edb34797ab01be45364736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"38895:15531:0:-:0;;;39640:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;39698:6;-1:-1:-1;;;;;19726:26:0;;19722:95;;19775:31;;-1:-1:-1;;;19775:31:0;;19803:1;19775:31;;;640:51:1;613:18;;19775:31:0;;;;;;;19722:95;19826:32;19845:12;19826:18;:32::i;:::-;-1:-1:-1;;;;;;;39716:28:0::1;;::::0;38895:15531;;21365:187;21438:16;21457:6;;-1:-1:-1;;;;;21473:17:0;;;-1:-1:-1;;;;;;21473:17:0;;;;;;21505:40;;21457:6;;;;;;;21505:40;;21438:16;21505:40;21428:124;21365:187;:::o;14:177:1:-;93:13;;-1:-1:-1;;;;;135:31:1;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;494:203::-;38895:15531:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"38895:15531:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46279:571;;;;;;;;;;-1:-1:-1;46279:571:0;;;;;:::i;:::-;;:::i;:::-;;;375:42:1;363:55;;;345:74;;333:2;318:18;46279:571:0;;;;;;;;43758:357;;;;;;;;;;-1:-1:-1;43758:357:0;;;;;:::i;:::-;;:::i;:::-;;;2069:14:1;;2062:22;2044:41;;2032:2;2017:18;43758:357:0;1904:187:1;44615:1336:0;;;;;;;;;;-1:-1:-1;44615:1336:0;;;;;:::i;:::-;;:::i;:::-;;;3643:25:1;;;3631:2;3616:18;44615:1336:0;3497:177:1;39796:163:0;;;;;;;;;;-1:-1:-1;39796:163:0;;;;;:::i;:::-;;:::i;:::-;;41364:1445;;;;;;:::i;:::-;;:::i;20746:101::-;;;;;;;;;;;;;:::i;39282:28::-;;;;;;;;;;-1:-1:-1;39282:28:0;;;;;;;;46922:147;;;;;;;;;;-1:-1:-1;46922:147:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;40692:508::-;;;;;;:::i;:::-;;:::i;:::-;;;;10123:13:1;;10105:32;;10193:4;10181:17;;;10175:24;10153:20;;;10146:54;10248:17;;;10242:24;10268:18;10238:49;10216:20;;;10209:79;10093:2;10078:18;40692:508:0;9881:413:1;20091:85:0;;;;;;;;;;-1:-1:-1;20137:7:0;20163:6;;;20091:85;;42855:524;;;;;;;;;;-1:-1:-1;42855:524:0;;;;;:::i;:::-;;:::i;:::-;;;;10656:25:1;;;10729:18;10717:31;;;10712:2;10697:18;;10690:59;10629:18;42855:524:0;10484:271:1;40221:426:0;;;;;;:::i;:::-;;:::i;45997:236::-;;;;;;;;;;-1:-1:-1;45997:236:0;;;;;:::i;:::-;;:::i;47149:149::-;;;;;;;;;;-1:-1:-1;47149:149:0;;;;;:::i;:::-;;:::i;:::-;;;;12794:13:1;;12776:32;;12864:4;12852:17;;;12846:24;12824:20;;;12817:54;;;;12749:18;47149:149:0;12578:299:1;39139:38:0;;;;;;;;;;;;;;;44440:130;;;;;;;;;;-1:-1:-1;44440:130:0;;;;;:::i;:::-;44511:7;44537:26;;;:11;:26;;;;;;;;;44440:130;20996:215;;;;;;;;;;-1:-1:-1;20996:215:0;;;;;:::i;:::-;;:::i;40004:172::-;;;;;;;;;;-1:-1:-1;40004:172:0;;;;;:::i;:::-;;:::i;44160:235::-;;;;;;;;;;-1:-1:-1;44160:235:0;;;;;:::i;:::-;;:::i;46279:571::-;46347:23;46397:13;46386:7;:24;46382:107;;46433:45;;;;;;;;3643:25:1;;;3616:18;;46433:45:0;;;;;;;;46382:107;-1:-1:-1;46498:20:0;46521:22;;;:13;:22;;;;;;;13251;;;46705:59;;46701:143;;46787:46;;;;;;;;3643:25:1;;;3616:18;;46787:46:0;3497:177:1;46701:143:0;46372:478;46279:571;;;:::o;43758:357::-;43855:4;43871:33;43907:53;43950:9;;43907:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;43907:42:0;;-1:-1:-1;;;43907:53:0:i;:::-;43871:89;;44017:30;:4;:12;;;:28;:30::i;:::-;;44057;44075:4;44081:5;;44057:17;:30::i;:::-;-1:-1:-1;44104:4:0;;43758:357;-1:-1:-1;;;;;;43758:357:0:o;44615:1336::-;44862:11;44889:31;44909:10;44889:19;:31::i;:::-;;44998:25;:7;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;44998:23:0;;-1:-1:-1;;;44998:25:0:i;:::-;-1:-1:-1;45085:69:0;;;;;:45;45099:13;45085:45;;;;:69;;45131:10;;45143;;;;45085:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;45079:75;-1:-1:-1;45230:33:0;;;;45226:719;;45473:33;45509:304;45597:1;45661:10;45630:1;45509:304;;45698:1;45729;45757:7;;45509:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;45509:304:0;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;45791:7:0;;-1:-1:-1;45791:7:0;;;;45509:304;;45791:7;;;;45509:304;;;;;;;;;-1:-1:-1;45509:50:0;;-1:-1:-1;;;45509:304:0:i;:::-;45473:340;;45852:19;45834:54;;;45889:10;45912:4;45901:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;:23;45926:7;;45834:100;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;45827:107;;;;:::i;:::-;;;45265:680;45226:719;44615:1336;;;;;;;;;;:::o;39796:163::-;19984:13;:11;:13::i;:::-;39875::::1;:30:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;39920:32:::1;::::0;345:74:1;;;39920:32:0::1;::::0;333:2:1;318:18;39920:32:0::1;;;;;;;39796:163:::0;:::o;41364:1445::-;41540:33;41576:55;41619:11;;41576:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;41576:42:0;;-1:-1:-1;;;41576:55:0:i;:::-;41540:91;;41641:21;41665:30;41683:4;41689:5;;41665:17;:30::i;:::-;41705:26;;;;:11;:26;;;;;:39;;;;41734:10;41705:39;;;41789:12;;;;41641:54;;-1:-1:-1;41705:26:0;41789:30;;:28;:30::i;:::-;41755:64;;41846:14;:25;;;41833:9;:38;41829:151;;41943:25;;;;41894:75;;;;;41932:9;41894:75;;;16894:25:1;16935:18;;;16928:34;;;;16867:18;;41894:75:0;16720:248:1;41829:151:0;42141:23;;:34;-1:-1:-1;42137:74:0;;;42188:23;;;-1:-1:-1;42137:74:0;42377:16;;;;42335:71;;;42412:8;42429:9;42466:4;:15;;;42503:4;:14;;;42540:4;:12;;;42578:4;:15;;;42616:4;:12;;;42335:304;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42726:4;:15;;;42654:148;;42712:4;:12;;;42697:13;42654:148;42743:4;:15;;;42760:4;:14;;;42776:4;:16;;;42654:148;;;;;;;17707:25:1;;;17763:2;17748:18;;17741:34;;;;17806:2;17791:18;;17784:34;17695:2;17680:18;;17505:319;42654:148:0;;;;;;;;41530:1279;;;41364:1445;;;;;:::o;20746:101::-;19984:13;:11;:13::i;:::-;20810:30:::1;20837:1;20810:18;:30::i;:::-;20746:101::o:0;46922:147::-;47007:12;47038:24;:4;:22;:24::i;:::-;47031:31;46922:147;-1:-1:-1;;46922:147:0:o;40692:508::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;13251:22:0;;;41098:95;41114:10;13251:22;41143:19;41164:10;;41176:7;;41185;;41098:15;:95::i;:::-;41091:102;40692:508;-1:-1:-1;;;;;;;;;;;40692:508:0:o;42855:524::-;42925:15;42990:26;;;:11;:26;;;;;;42925:15;;42990:26;;;43026:108;;43075:48;;;;;;;;3643:25:1;;;3616:18;;43075:48:0;3497:177:1;43026:108:0;43143:18;43175:13;43190:8;43164:35;;;;;;;;18003:25:1;;;18076:42;18064:55;18059:2;18044:18;;18037:83;17991:2;17976:18;;17829:297;43164:35:0;;;;;;;-1:-1:-1;;43164:35:0;;;;;;;43273:16;;43164:35;43273:16;;;43233:57;;;;;;3643:25:1;43164:35:0;-1:-1:-1;43247:13:0;43233:39;;;;;3616:18:1;;43233:57:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;43305:67;;375:42:1;363:55;;345:74;;43209:81:0;;-1:-1:-1;43209:81:0;-1:-1:-1;43305:67:0;;;;43209:81;;43327:13;;43305:67;;333:2:1;318:18;43305:67:0;;;;;;;42961:418;;42855:524;;;:::o;40221:426::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;40552:88:0;40568:10;40580:8;40590:19;40611:10;;40623:7;;40632;;40552:15;:88::i;:::-;40545:95;40221:426;-1:-1:-1;;;;;;;;;;40221:426:0:o;45997:236::-;46062:7;46096:13;46085:7;:24;46081:107;;46132:45;;;;;;;;3643:25:1;;;3616:18;;46132:45:0;3497:177:1;46081:107:0;-1:-1:-1;46204:22:0;;;;:13;:22;;;;;;;45997:236::o;47149:149::-;-1:-1:-1;;;;;;;;;;;;;;;;;47259:32:0;:14;:30;:32::i;20996:215::-;19984:13;:11;:13::i;:::-;21080:22:::1;::::0;::::1;21076:91;;21125:31;::::0;::::1;::::0;;21153:1:::1;21125:31;::::0;::::1;345:74:1::0;318:18;;21125:31:0::1;199:226:1::0;21076:91:0::1;21176:28;21195:8;21176:18;:28::i;:::-;20996:215:::0;:::o;40004:172::-;19984:13;:11;:13::i;:::-;40091:22:::1;::::0;;;:13:::1;:22;::::0;;;;;;;;:31;;;40137:32;;16894:25:1;;;16935:18;;;16928:34;;;40137:32:0::1;::::0;16867:18:1;40137:32:0::1;;;;;;;40004:172:::0;;:::o;44160:235::-;44230:7;44249:33;44285:53;44328:9;;44285:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;44285:42:0;;-1:-1:-1;;;44285:53:0:i;:::-;44249:89;;44355:11;:33;44367:20;:4;:18;:20::i;:::-;44355:33;;;;;;;;;;;-1:-1:-1;44355:33:0;;;;;44160:235;-1:-1:-1;;;;44160:235:0:o;18159:174::-;18233:28;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18233:28:0;18291:9;18280:46;;;;;;;;;;;;:::i;12490:603::-;-1:-1:-1;;;;;;;;;;;;;;;;;12586:13:0;12601:20;12625:28;12648:4;12625:22;:28::i;:::-;12585:68;;-1:-1:-1;12585:68:0;-1:-1:-1;11190:1:0;12667:20;;;;12663:95;;;12710:37;;;;;20607:4:1;20595:17;;12710:37:0;;;20577:36:1;20550:18;;12710:37:0;20435:184:1;12663:95:0;13065:7;13054:32;;;;;;;;;;;;:::i;:::-;13047:39;12490:603;-1:-1:-1;;;;12490:603:0:o;51167:1563::-;51324:21;51361:20;51384:36;51404:4;:15;;;51384:19;:36::i;:::-;51361:59;;51453:13;51434:4;:15;;;:32;51430:126;;51529:4;:15;;;51489:56;;;;;;;;;3643:25:1;;3631:2;3616:18;;3497:177;51430:126:0;51581:20;:4;:18;:20::i;:::-;51653:1;51615:26;;;:11;:26;;;;;;51565:36;;-1:-1:-1;51615:40:0;:26;:40;51611:130;;51678:52;;;;;;;;3643:25:1;;;3616:18;;51678:52:0;3497:177:1;51611:130:0;51814:30;51847:218;;;;;;;;51889:4;:15;;;51847:218;;;;51927:4;:12;;;51847:218;;;;51965:4;:15;;;51847:218;;;;;;52005:12;51847:218;;;;52041:13;51847:218;;;51814:251;;52076:29;52107:35;52173:44;52200:4;:16;;;13397:1;13287:121;52173:44;52158:79;;;:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;52158:81:0;;;;;;;;;;;;:::i;:::-;52075:164;;;;52249:28;52280:36;:16;:34;:36::i;:::-;52330:27;;52249:67;;-1:-1:-1;52330:27:0;:32;52326:113;;52385:43;;;;;;;;;;;;;;52326:113;52448:17;52468:91;52496:18;52516:7;52525:5;;52532:9;:26;;;52468:27;:91::i;:::-;52585:27;;52448:111;;-1:-1:-1;52573:39:0;;52569:155;;;52685:27;;52635:78;;;;;;;52674:9;;52635:78;;16894:25:1;;;16950:2;16935:18;;16928:34;16882:2;16867:18;;16720:248;52569:155:0;51351:1379;;;;;;51167:1563;;;;;:::o;52821:368::-;52890:20;52937:13;52926:7;:24;52922:107;;52973:45;;;;;;;;3643:25:1;;;3616:18;;52973:45:0;3497:177:1;52922:107:0;-1:-1:-1;53053:22:0;;;;:13;:22;;;;;;;53089:17;;;53085:98;;53129:43;;;;;;;;3643:25:1;;;3616:18;;53129:43:0;3497:177:1;53085:98:0;52821:368;;;:::o;17306:688::-;17590:40;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17590:40:0;17653:334;;;;;;;;17701:13;17653:334;;;;17739:37;17766:9;13251:22;;;13154:127;17739:37;17653:334;;;;17802:10;17653:334;;;;17839:11;17653:334;;;;17873:7;17653:334;;;;17906:10;17653:334;;;;;;17939:7;17653:334;;;;17969:7;17653:334;;;17646:341;;17306:688;;;;;;;;;:::o;20249:162::-;20137:7;20163:6;20308:23;20163:6;14148:10;20308:23;20304:101;;20354:40;;;;;14148:10;20354:40;;;345:74:1;318:18;;20354:40:0;199:226:1;21365:187:0;21438:16;21457:6;;;21473:17;;;;;;;;;;21505:40;;21457:6;;;;;;;21505:40;;21438:16;21505:40;21428:124;21365:187;:::o;18000:153::-;18092:12;18134:11;18123:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;18116:30;;18000:153;;;:::o;47700:3039::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;48009:31:0;48029:10;48009:19;:31::i;:::-;-1:-1:-1;48066:1:0;48054:13;;;48050:60;;48076:34;;;;;;;;;;;;;;48050:60;48188:25;:7;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;48188:23:0;;-1:-1:-1;;;48188:25:0:i;:::-;-1:-1:-1;48249:69:0;;;;;48223:23;;48249:45;48263:13;48249:45;;;;:69;;48295:10;;48307;;;;48249:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;48223:95;;48344:15;48332:9;:27;48328:128;;;48382:63;;;;;48418:9;48382:63;;;16894:25:1;16935:18;;;16928:34;;;16867:18;;48382:63:0;16720:248:1;48328:128:0;48513:13;48499:46;;;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;48466:4;:12;;48480:4;:15;;48465:82;;;;;;;;;;;;;;48557:33;48593:304;48669:10;48740;48706:8;48773:4;:12;;;48811:4;:15;;;48849:7;;48593:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;48879:7;;48593:304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;48593:50:0;;-1:-1:-1;;;48593:304:0:i;:::-;48557:340;;48928:20;:4;:18;:20::i;:::-;48907:4;:18;;:41;;;;;49078:15;49095:17;49130:13;49116:55;;;49196:15;49226:4;:15;;;49243:4;:18;;;49263:10;;49116:158;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;49077:197;;;;49306:4;:12;;;49295:7;:23;:56;;;;;49336:4;:15;;;49322:29;;:10;:29;;;49295:56;49288:64;;;;:::i;:::-;-1:-1:-1;;49441:9:0;:27;;;;49492:16;;49488:150;;49539:13;;49591:15;;;;;49608:18;;49524:103;;;;;49539:13;;;;;49524:45;;49577:12;;49524:103;;49591:15;;49608:18;49524:103;;16894:25:1;;;16950:2;16935:18;;16928:34;16882:2;16867:18;;16720:248;49524:103:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49488:150;49726:33;;;;49722:680;;49793:19;49775:55;;;49861:10;50014:24;:4;:22;:24::i;:::-;:31;50078:18;;49775:414;;;;;;;;;;;;;50014:31;50078:18;50128:12;;50167:7;;;;49775:414;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50203:22;50246:19;50228:50;;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;50309:13;;50339:15;;;;;50356:18;;50294:97;;;;;;;;24197:25:1;;;;24238:18;;;24231:34;;;;50309:13:0;24301:55:1;;;24281:18;;;24274:83;50203:77:0;;-1:-1:-1;50309:13:0;;;50294:44;;24170:18:1;;50294:97:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49761:641;49722:680;50513:4;:15;;;50416:316;;50487:4;:12;;;50455:4;:18;;;50416:316;50542:4;:15;;;50571:4;:14;;;50599:4;:16;;;50629:15;50658:12;50684:4;:12;;;50710:4;:12;;;50416:316;;;;;;;;;;;;:::i;:::-;;;;;;;;47999:2740;;;47700:3039;;;;;;;;;;;:::o;18339:155::-;18427:7;18474:11;18463:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;18453:34;;;;;;18446:41;;18339:155;;;:::o;11861:181::-;11935:13;11950:20;12014:4;12003:32;;;;;;;;;;;;:::i;:::-;11982:53;;;;-1:-1:-1;11861:181:0;-1:-1:-1;;11861:181:0:o;8504:620::-;-1:-1:-1;;;;;;;;;;;;;;;;;8604:13:0;8619:22;8645:30;8670:4;8645:24;:30::i;:::-;8603:72;;-1:-1:-1;8603:72:0;-1:-1:-1;7112:1:0;8689:23;;;;8685:100;;;8735:39;;;;;20607:4:1;20595:17;;8735:39:0;;;20577:36:1;20550:18;;8735:39:0;20435:184:1;53702:722:0;53942:26;;53984:434;54008:15;:22;54004:1;:26;53984:434;;;54051:19;54087:13;54073:46;;;54120:15;54136:1;54120:18;;;;;;;;:::i;:::-;;;;;;;54140:7;54149:5;;54073:82;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;54051:104;-1:-1:-1;54285:16:0;;;;;:68;;-1:-1:-1;54338:15:0;54305:30;54319:16;54305:11;:30;:::i;:::-;:48;54285:68;54281:127;;;54373:20;;;:::i;:::-;;;54281:127;-1:-1:-1;54032:3:0;;;:::i;:::-;;;53984:434;;;;53702:722;;;;;;;:::o;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;430:347::-;481:8;491:6;545:3;538:4;530:6;526:17;522:27;512:55;;563:1;560;553:12;512:55;-1:-1:-1;586:20:1;;629:18;618:30;;615:50;;;661:1;658;651:12;615:50;698:4;690:6;686:17;674:29;;750:3;743:4;734:6;726;722:19;718:30;715:39;712:59;;;767:1;764;757:12;712:59;430:347;;;;;:::o;782:367::-;845:8;855:6;909:3;902:4;894:6;890:17;886:27;876:55;;927:1;924;917:12;876:55;-1:-1:-1;950:20:1;;993:18;982:30;;979:50;;;1025:1;1022;1015:12;979:50;1062:4;1054:6;1050:17;1038:29;;1122:3;1115:4;1105:6;1102:1;1098:14;1090:6;1086:27;1082:38;1079:47;1076:67;;;1139:1;1136;1129:12;1154:745;1260:6;1268;1276;1284;1337:2;1325:9;1316:7;1312:23;1308:32;1305:52;;;1353:1;1350;1343:12;1305:52;1393:9;1380:23;1422:18;1463:2;1455:6;1452:14;1449:34;;;1479:1;1476;1469:12;1449:34;1518:58;1568:7;1559:6;1548:9;1544:22;1518:58;:::i;:::-;1595:8;;-1:-1:-1;1492:84:1;-1:-1:-1;1683:2:1;1668:18;;1655:32;;-1:-1:-1;1699:16:1;;;1696:36;;;1728:1;1725;1718:12;1696:36;;1767:72;1831:7;1820:8;1809:9;1805:24;1767:72;:::i;:::-;1154:745;;;;-1:-1:-1;1858:8:1;-1:-1:-1;;;;1154:745:1:o;2096:154::-;2182:42;2175:5;2171:54;2164:5;2161:65;2151:93;;2240:1;2237;2230:12;2255:1237;2399:6;2407;2415;2423;2431;2439;2447;2455;2508:3;2496:9;2487:7;2483:23;2479:33;2476:53;;;2525:1;2522;2515:12;2476:53;2561:9;2548:23;2538:33;;2621:2;2610:9;2606:18;2593:32;2634:31;2659:5;2634:31;:::i;:::-;2684:5;-1:-1:-1;2740:2:1;2725:18;;2712:32;2763:18;2793:14;;;2790:34;;;2820:1;2817;2810:12;2790:34;2859:70;2921:7;2912:6;2901:9;2897:22;2859:70;:::i;:::-;2948:8;;-1:-1:-1;2833:96:1;-1:-1:-1;3036:2:1;3021:18;;3008:32;;-1:-1:-1;3052:16:1;;;3049:36;;;3081:1;3078;3071:12;3049:36;3120:60;3172:7;3161:8;3150:9;3146:24;3120:60;:::i;:::-;3199:8;;-1:-1:-1;3094:86:1;-1:-1:-1;3287:3:1;3272:19;;3259:33;;-1:-1:-1;3304:16:1;;;3301:36;;;3333:1;3330;3323:12;3301:36;;3372:60;3424:7;3413:8;3402:9;3398:24;3372:60;:::i;:::-;2255:1237;;;;-1:-1:-1;2255:1237:1;;-1:-1:-1;2255:1237:1;;;;;;3451:8;-1:-1:-1;;;2255:1237:1:o;3679:247::-;3738:6;3791:2;3779:9;3770:7;3766:23;3762:32;3759:52;;;3807:1;3804;3797:12;3759:52;3846:9;3833:23;3865:31;3890:5;3865:31;:::i;:::-;3915:5;3679:247;-1:-1:-1;;;3679:247:1:o;3931:813::-;4046:6;4054;4062;4070;4078;4131:2;4119:9;4110:7;4106:23;4102:32;4099:52;;;4147:1;4144;4137:12;4099:52;4183:9;4170:23;4160:33;;4244:2;4233:9;4229:18;4216:32;4267:18;4308:2;4300:6;4297:14;4294:34;;;4324:1;4321;4314:12;4294:34;4363:58;4413:7;4404:6;4393:9;4389:22;4363:58;:::i;:::-;4440:8;;-1:-1:-1;4337:84:1;-1:-1:-1;4528:2:1;4513:18;;4500:32;;-1:-1:-1;4544:16:1;;;4541:36;;;4573:1;4570;4563:12;4541:36;;4612:72;4676:7;4665:8;4654:9;4650:24;4612:72;:::i;:::-;3931:813;;;;-1:-1:-1;3931:813:1;;-1:-1:-1;4703:8:1;;4586:98;3931:813;-1:-1:-1;;;3931:813:1:o;4749:184::-;4801:77;4798:1;4791:88;4898:4;4895:1;4888:15;4922:4;4919:1;4912:15;4938:255;5010:2;5004:9;5052:6;5040:19;;5089:18;5074:34;;5110:22;;;5071:62;5068:88;;;5136:18;;:::i;:::-;5172:2;5165:22;4938:255;:::o;5198:334::-;5269:2;5263:9;5325:2;5315:13;;-1:-1:-1;;5311:86:1;5299:99;;5428:18;5413:34;;5449:22;;;5410:62;5407:88;;;5475:18;;:::i;:::-;5511:2;5504:22;5198:334;;-1:-1:-1;5198:334:1:o;5537:129::-;5622:18;5615:5;5611:30;5604:5;5601:41;5591:69;;5656:1;5653;5646:12;5671:132;5738:20;;5767:30;5738:20;5767:30;:::i;5808:245::-;5856:4;5889:18;5881:6;5878:30;5875:56;;;5911:18;;:::i;:::-;-1:-1:-1;5968:2:1;5956:15;-1:-1:-1;;5952:88:1;6042:4;5948:99;;5808:245::o;6058:462::-;6100:5;6153:3;6146:4;6138:6;6134:17;6130:27;6120:55;;6171:1;6168;6161:12;6120:55;6207:6;6194:20;6238:48;6254:31;6282:2;6254:31;:::i;:::-;6238:48;:::i;:::-;6311:2;6302:7;6295:19;6357:3;6350:4;6345:2;6337:6;6333:15;6329:26;6326:35;6323:55;;;6374:1;6371;6364:12;6323:55;6439:2;6432:4;6424:6;6420:17;6413:4;6404:7;6400:18;6387:55;6487:1;6462:16;;;6480:4;6458:27;6451:38;;;;6466:7;6058:462;-1:-1:-1;;;6058:462:1:o;6525:1156::-;6622:6;6675:2;6663:9;6654:7;6650:23;6646:32;6643:52;;;6691:1;6688;6681:12;6643:52;6731:9;6718:23;6760:18;6801:2;6793:6;6790:14;6787:34;;;6817:1;6814;6807:12;6787:34;6840:22;;;;6896:6;6878:16;;;6874:29;6871:49;;;6916:1;6913;6906:12;6871:49;6942:22;;:::i;:::-;7000:2;6987:16;6980:5;6973:31;7057:2;7053;7049:11;7036:25;7031:2;7024:5;7020:14;7013:49;7115:2;7111;7107:11;7094:25;7089:2;7082:5;7078:14;7071:49;7173:2;7169;7165:11;7152:25;7147:2;7140:5;7136:14;7129:49;7232:3;7228:2;7224:12;7211:26;7205:3;7198:5;7194:15;7187:51;7271:31;7297:3;7293:2;7289:12;7271:31;:::i;:::-;7265:3;7258:5;7254:15;7247:56;7349:3;7345:2;7341:12;7328:26;7379:2;7369:8;7366:16;7363:36;;;7395:1;7392;7385:12;7363:36;7432:44;7468:7;7457:8;7453:2;7449:17;7432:44;:::i;:::-;7426:3;7419:5;7415:15;7408:69;;7523:3;7519:2;7515:12;7502:26;7553:2;7543:8;7540:16;7537:36;;;7569:1;7566;7559:12;7537:36;7606:44;7642:7;7631:8;7627:2;7623:17;7606:44;:::i;:::-;7600:3;7589:15;;7582:69;-1:-1:-1;7593:5:1;6525:1156;-1:-1:-1;;;;;6525:1156:1:o;7686:250::-;7771:1;7781:113;7795:6;7792:1;7789:13;7781:113;;;7871:11;;;7865:18;7852:11;;;7845:39;7817:2;7810:10;7781:113;;;-1:-1:-1;;7928:1:1;7910:16;;7903:27;7686:250::o;7941:329::-;7982:3;8020:5;8014:12;8047:6;8042:3;8035:19;8063:76;8132:6;8125:4;8120:3;8116:14;8109:4;8102:5;8098:16;8063:76;:::i;:::-;8184:2;8172:15;-1:-1:-1;;8168:88:1;8159:98;;;;8259:4;8155:109;;7941:329;-1:-1:-1;;7941:329:1:o;8275:217::-;8422:2;8411:9;8404:21;8385:4;8442:44;8482:2;8471:9;8467:18;8459:6;8442:44;:::i;8497:1379::-;8650:6;8658;8666;8674;8682;8690;8698;8706;8714;8767:3;8755:9;8746:7;8742:23;8738:33;8735:53;;;8784:1;8781;8774:12;8735:53;8820:9;8807:23;8797:33;;8880:2;8869:9;8865:18;8852:32;8893:31;8918:5;8893:31;:::i;:::-;8943:5;-1:-1:-1;9000:2:1;8985:18;;8972:32;9013:33;8972:32;9013:33;:::i;:::-;9065:7;-1:-1:-1;9123:2:1;9108:18;;9095:32;9146:18;9176:14;;;9173:34;;;9203:1;9200;9193:12;9173:34;9242:70;9304:7;9295:6;9284:9;9280:22;9242:70;:::i;:::-;9331:8;;-1:-1:-1;9216:96:1;-1:-1:-1;9419:3:1;9404:19;;9391:33;;-1:-1:-1;9436:16:1;;;9433:36;;;9465:1;9462;9455:12;9433:36;9504:60;9556:7;9545:8;9534:9;9530:24;9504:60;:::i;:::-;9583:8;;-1:-1:-1;9478:86:1;-1:-1:-1;9671:3:1;9656:19;;9643:33;;-1:-1:-1;9688:16:1;;;9685:36;;;9717:1;9714;9707:12;9685:36;;9756:60;9808:7;9797:8;9786:9;9782:24;9756:60;:::i;:::-;9730:86;;9835:8;9825:18;;;9862:8;9852:18;;;8497:1379;;;;;;;;;;;:::o;10760:1306::-;10913:6;10921;10929;10937;10945;10953;10961;10969;10977;11030:3;11018:9;11009:7;11005:23;11001:33;10998:53;;;11047:1;11044;11037:12;10998:53;11083:9;11070:23;11060:33;;11140:2;11129:9;11125:18;11112:32;11102:42;;11194:2;11183:9;11179:18;11166:32;11207:31;11232:5;11207:31;:::i;12253:320::-;12321:6;12374:2;12362:9;12353:7;12349:23;12345:32;12342:52;;;12390:1;12387;12380:12;12342:52;12430:9;12417:23;12463:18;12455:6;12452:30;12449:50;;;12495:1;12492;12485:12;12449:50;12518:49;12559:7;12550:6;12539:9;12535:22;12518:49;:::i;12882:248::-;12950:6;12958;13011:2;12999:9;12990:7;12986:23;12982:32;12979:52;;;13027:1;13024;13017:12;12979:52;-1:-1:-1;;13050:23:1;;;13120:2;13105:18;;;13092:32;;-1:-1:-1;12882:248:1:o;13135:409::-;13205:6;13213;13266:2;13254:9;13245:7;13241:23;13237:32;13234:52;;;13282:1;13279;13272:12;13234:52;13322:9;13309:23;13355:18;13347:6;13344:30;13341:50;;;13387:1;13384;13377:12;13341:50;13426:58;13476:7;13467:6;13456:9;13452:22;13426:58;:::i;:::-;13503:8;;13400:84;;-1:-1:-1;13135:409:1;-1:-1:-1;;;;13135:409:1:o;13549:545::-;13649:6;13644:3;13637:19;13619:3;13675:4;13704:2;13699:3;13695:12;13688:19;;13730:5;13753:1;13763:306;13777:6;13774:1;13771:13;13763:306;;;13854:6;13841:20;13874:33;13899:7;13874:33;:::i;:::-;13945:42;13932:56;13920:69;;14009:12;;;;14044:15;;;;13799:1;13792:9;13763:306;;;-1:-1:-1;14085:3:1;;13549:545;-1:-1:-1;;;;;13549:545:1:o;14099:359::-;14316:6;14305:9;14298:25;14359:2;14354;14343:9;14339:18;14332:30;14279:4;14379:73;14448:2;14437:9;14433:18;14425:6;14417;14379:73;:::i;:::-;14371:81;14099:359;-1:-1:-1;;;;;14099:359:1:o;14463:184::-;14533:6;14586:2;14574:9;14565:7;14561:23;14557:32;14554:52;;;14602:1;14599;14592:12;14554:52;-1:-1:-1;14625:16:1;;14463:184;-1:-1:-1;14463:184:1:o;14652:1023::-;14857:2;14846:9;14839:21;14902:6;14896:13;14891:2;14880:9;14876:18;14869:41;14964:2;14956:6;14952:15;14946:22;14941:2;14930:9;14926:18;14919:50;15023:2;15015:6;15011:15;15005:22;15000:2;14989:9;14985:18;14978:50;15083:2;15075:6;15071:15;15065:22;15059:3;15048:9;15044:19;15037:51;15143:3;15135:6;15131:16;15125:23;15119:3;15108:9;15104:19;15097:52;15215:18;15208:3;15200:6;15196:16;15190:23;15186:48;15180:3;15169:9;15165:19;15158:77;14820:4;15282:3;15274:6;15270:16;15264:23;15306:6;15349:2;15343:3;15332:9;15328:19;15321:31;15375:51;15421:3;15410:9;15406:19;15392:12;15375:51;:::i;:::-;15361:65;;15475:3;15467:6;15463:16;15457:23;-1:-1:-1;;15532:9:1;15524:6;15520:22;15516:95;15511:2;15500:9;15496:18;15489:123;15629:40;15662:6;15646:14;15629:40;:::i;:::-;15621:48;14652:1023;-1:-1:-1;;;;;;14652:1023:1:o;15680:325::-;15768:6;15763:3;15756:19;15820:6;15813:5;15806:4;15801:3;15797:14;15784:43;;15872:1;15865:4;15856:6;15851:3;15847:16;15843:27;15836:38;15738:3;15994:4;-1:-1:-1;;15919:2:1;15911:6;15907:15;15903:88;15898:3;15894:98;15890:109;15883:116;;15680:325;;;;:::o;16010:386::-;16223:6;16212:9;16205:25;16266:6;16261:2;16250:9;16246:18;16239:34;16309:2;16304;16293:9;16289:18;16282:30;16186:4;16329:61;16386:2;16375:9;16371:18;16363:6;16355;16329:61;:::i;16401:184::-;16453:77;16450:1;16443:88;16550:4;16547:1;16540:15;16574:4;16571:1;16564:15;16590:125;16655:9;;;16676:10;;;16673:36;;;16689:18;;:::i;16973:527::-;17230:6;17219:9;17212:25;17273:6;17268:2;17257:9;17253:18;17246:34;17316:6;17311:2;17300:9;17296:18;17289:34;17371:18;17363:6;17359:31;17354:2;17343:9;17339:18;17332:59;17428:3;17422;17411:9;17407:19;17400:32;17193:4;17449:45;17489:3;17478:9;17474:19;17466:6;17449:45;:::i;:::-;17441:53;16973:527;-1:-1:-1;;;;;;;16973:527:1:o;18131:136::-;18209:13;;18231:30;18209:13;18231:30;:::i;18272:310::-;18350:6;18358;18411:2;18399:9;18390:7;18386:23;18382:32;18379:52;;;18427:1;18424;18417:12;18379:52;18456:9;18450:16;18440:26;;18509:2;18498:9;18494:18;18488:25;18522:30;18546:5;18522:30;:::i;:::-;18571:5;18561:15;;;18272:310;;;;;:::o;18840:441::-;18893:5;18946:3;18939:4;18931:6;18927:17;18923:27;18913:55;;18964:1;18961;18954:12;18913:55;18993:6;18987:13;19024:48;19040:31;19068:2;19040:31;:::i;19024:48::-;19097:2;19088:7;19081:19;19143:3;19136:4;19131:2;19123:6;19119:15;19115:26;19112:35;19109:55;;;19160:1;19157;19150:12;19109:55;19173:77;19247:2;19240:4;19231:7;19227:18;19220:4;19212:6;19208:17;19173:77;:::i;19286:1144::-;19394:6;19447:2;19435:9;19426:7;19422:23;19418:32;19415:52;;;19463:1;19460;19453:12;19415:52;19496:9;19490:16;19525:18;19566:2;19558:6;19555:14;19552:34;;;19582:1;19579;19572:12;19552:34;19605:22;;;;19661:6;19643:16;;;19639:29;19636:49;;;19681:1;19678;19671:12;19636:49;19707:22;;:::i;:::-;19758:2;19752:9;19745:5;19738:24;19808:2;19804;19800:11;19794:18;19789:2;19782:5;19778:14;19771:42;19859:2;19855;19851:11;19845:18;19840:2;19833:5;19829:14;19822:42;19910:2;19906;19902:11;19896:18;19891:2;19884:5;19880:14;19873:42;19962:3;19958:2;19954:12;19948:19;19942:3;19935:5;19931:15;19924:44;20001:42;20038:3;20034:2;20030:12;20001:42;:::i;:::-;19995:3;19988:5;19984:15;19977:67;20083:3;20079:2;20075:12;20069:19;20113:2;20103:8;20100:16;20097:36;;;20129:1;20126;20119:12;20097:36;20166:55;20213:7;20202:8;20198:2;20194:17;20166:55;:::i;:::-;20160:3;20153:5;20149:15;20142:80;;20261:3;20257:2;20253:12;20247:19;20291:2;20281:8;20278:16;20275:36;;;20307:1;20304;20297:12;20275:36;20344:55;20391:7;20380:8;20376:2;20372:17;20344:55;:::i;20624:475::-;20691:5;20739:4;20727:9;20722:3;20718:19;20714:30;20711:50;;;20757:1;20754;20747:12;20711:50;20790:4;20784:11;20834:4;20826:6;20822:17;20905:6;20893:10;20890:22;20869:18;20857:10;20854:34;20851:62;20848:88;;;20916:18;;:::i;:::-;20952:4;20945:24;21017:16;;21002:32;;21088:2;21073:18;;;21067:25;21050:15;;;21043:50;;;;-1:-1:-1;20987:6:1;20624:475;-1:-1:-1;20624:475:1:o;21104:252::-;21200:6;21253:2;21241:9;21232:7;21228:23;21224:32;21221:52;;;21269:1;21266;21259:12;21221:52;21292:58;21342:7;21331:9;21292:58;:::i;21361:1213::-;21474:6;21482;21535:2;21523:9;21514:7;21510:23;21506:32;21503:52;;;21551:1;21548;21541:12;21503:52;21584:9;21578:16;21613:18;21654:2;21646:6;21643:14;21640:34;;;21670:1;21667;21660:12;21640:34;21693:60;21745:7;21736:6;21725:9;21721:22;21693:60;:::i;:::-;21683:70;;21772:2;21762:12;;21820:2;21809:9;21805:18;21799:25;21849:2;21839:8;21836:16;21833:36;;;21865:1;21862;21855:12;21833:36;21888:24;;21943:4;21935:13;;21931:27;-1:-1:-1;21921:55:1;;21972:1;21969;21962:12;21921:55;22001:2;21995:9;22023:2;22019;22016:10;22013:36;;;22029:18;;:::i;:::-;22075:2;22072:1;22068:10;22058:20;;22098:28;22122:2;22118;22114:11;22098:28;:::i;:::-;22160:15;;;22230:11;;;22226:20;;;22191:12;;;;22258:19;;;22255:39;;;22290:1;22287;22280:12;22255:39;22314:11;;;;22334:210;22350:6;22345:3;22342:15;22334:210;;;22423:3;22417:10;22404:23;;22440:31;22465:5;22440:31;:::i;:::-;22484:18;;;22367:12;;;;22522;;;;22334:210;;;22563:5;22553:15;;;;;;;;21361:1213;;;;;:::o;22579:430::-;22824:6;22813:9;22806:25;22867:6;22862:2;22851:9;22847:18;22840:34;22910:2;22905;22894:9;22890:18;22883:30;22787:4;22930:73;22999:2;22988:9;22984:18;22976:6;22968;22930:73;:::i;23014:184::-;23066:77;23063:1;23056:88;23163:4;23160:1;23153:15;23187:4;23184:1;23177:15;23203:531;23472:6;23461:9;23454:25;23515:6;23510:2;23499:9;23495:18;23488:34;23558:6;23553:2;23542:9;23538:18;23531:34;23601:6;23596:2;23585:9;23581:18;23574:34;23645:3;23639;23628:9;23624:19;23617:32;23435:4;23666:62;23723:3;23712:9;23708:19;23700:6;23692;23666:62;:::i;23739:251::-;23809:6;23862:2;23850:9;23841:7;23837:23;23833:32;23830:52;;;23878:1;23875;23868:12;23830:52;23910:9;23904:16;23929:31;23954:5;23929:31;:::i;24368:737::-;24701:6;24690:9;24683:25;24744:6;24739:2;24728:9;24724:18;24717:34;24787:6;24782:2;24771:9;24767:18;24760:34;24830:6;24825:2;24814:9;24810:18;24803:34;24874:6;24868:3;24857:9;24853:19;24846:35;24918:3;24912;24901:9;24897:19;24890:32;24664:4;24945:45;24985:3;24974:9;24970:19;24962:6;24945:45;:::i;:::-;25039:9;25031:6;25027:22;25021:3;25010:9;25006:19;24999:51;25067:32;25092:6;25084;25067:32;:::i;25110:485::-;25196:6;25204;25257:2;25245:9;25236:7;25232:23;25228:32;25225:52;;;25273:1;25270;25263:12;25225:52;25305:9;25299:16;25355:4;25348:5;25344:16;25337:5;25334:27;25324:55;;25375:1;25372;25365:12;25324:55;25447:2;25432:18;;25426:25;25398:5;;-1:-1:-1;25474:18:1;25463:30;;25460:50;;;25506:1;25503;25496:12;25460:50;25529:60;25581:7;25572:6;25561:9;25557:22;25529:60;:::i;:::-;25519:70;;;25110:485;;;;;:::o;25859:184::-;25911:77;25908:1;25901:88;26008:4;26005:1;25998:15;26032:4;26029:1;26022:15;26048:1041;26369:42;26361:6;26357:55;26346:9;26339:74;26455:6;26449:13;26444:2;26433:9;26429:18;26422:41;26517:2;26509:6;26505:15;26499:22;26494:2;26483:9;26479:18;26472:50;26586:18;26580:2;26572:6;26568:15;26562:22;26558:47;26553:2;26542:9;26538:18;26531:75;26661:2;26653:6;26649:15;26643:22;26637:3;26626:9;26622:19;26615:51;26721:3;26713:6;26709:16;26703:23;26697:3;26686:9;26682:19;26675:52;26764:3;26758;26747:9;26743:19;26736:32;26805:6;26799:3;26788:9;26784:19;26777:35;26320:4;26831:3;26857:66;26849:6;26846:78;26843:98;;;26937:1;26934;26927:12;26843:98;26971:6;26968:1;26964:14;27028:6;27020;27015:2;27004:9;27000:18;26987:48;27056:22;;;;27052:31;;;;26048:1041;-1:-1:-1;;;;;26048:1041:1:o;27094:195::-;27133:3;27164:66;27157:5;27154:77;27151:103;;27234:18;;:::i;:::-;-1:-1:-1;27281:1:1;27270:13;;27094:195::o","abiDefinition":[{"inputs":[{"internalType":"address","name":"interchainDB","type":"address"},{"internalType":"address","name":"owner_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"AppConfigLib__IncorrectVersion","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__FeeAmountTooLow","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__IncorrectDstChainId","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__IncorrectMsgValue","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__NoLinkedClient","type":"error"},{"inputs":[{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"InterchainClientV1__NotEVMClient","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainClientV1__NotEnoughResponses","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainClientV1__NotRemoteChainId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxAlreadyExecuted","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"InterchainClientV1__TxNotExecuted","type":"error"},{"inputs":[],"name":"InterchainClientV1__ZeroReceiver","type":"error"},{"inputs":[],"name":"InterchainClientV1__ZeroRequiredResponses","type":"error"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"executionFees","type":"address"}],"name":"ExecutionFeesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionProofWritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"chainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"LinkedClientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"INTERCHAIN_DB","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedOptions","type":"bytes"}],"name":"decodeOptions","outputs":[{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"uint256","name":"gasAirdrop","type":"uint256"}],"internalType":"struct OptionsV1","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"internalType":"struct InterchainTransaction","name":"icTx","type":"tuple"}],"name":"encodeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"executionFees","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedTx","type":"bytes"}],"name":"getExecutor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"getExecutorById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"getLinkedClient","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"getLinkedClientEVM","outputs":[{"internalType":"address","name":"linkedClientEVM","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"transaction","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"interchainExecute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSend","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"srcExecutionService","type":"address"},{"internalType":"address[]","name":"srcModules","type":"address[]"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"interchainSendEVM","outputs":[{"components":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"internalType":"struct InterchainTxDescriptor","name":"desc","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encodedTx","type":"bytes"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"isExecutable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"executionFees_","type":"address"}],"name":"setExecutionFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"setLinkedClient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"writeExecutionProof","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"INTERCHAIN_DB()":{"notice":"Address of the InterchainDB contract, set at the time of deployment."},"decodeOptions(bytes)":{"notice":"Decodes the encoded options data into a OptionsV1 struct."},"encodeTransaction((uint256,bytes32,uint256,bytes32,uint256,uint64,bytes,bytes))":{"notice":"Encodes the transaction data into a bytes format."},"executionFees()":{"notice":"Address of the contract that handles execution fees. Can be updated by the owner."},"getExecutorById(bytes32)":{"notice":"Returns the address of the executor for a transaction that has been sent to the local chain."},"getInterchainFee(uint256,address,address[],bytes,bytes)":{"notice":"Returns the fee for sending an Interchain message."},"getLinkedClient(uint256)":{"notice":"Returns the address of the linked client (as bytes32) for a specific chain ID."},"getLinkedClientEVM(uint256)":{"notice":"Returns the EVM address of the linked client for a specific chain ID."},"interchainExecute(uint256,bytes,bytes32[])":{"notice":"Executes a transaction that has been sent via the Interchain."},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"notice":"Sends a message to another chain via the Interchain Communication Protocol."},"setExecutionFees(address)":{"notice":"Sets the address of the ExecutionFees contract."},"setLinkedClient(uint256,bytes32)":{"notice":"Sets the linked client for a specific chain ID."},"writeExecutionProof(bytes32)":{"notice":"Writes the proof of execution for a transaction into the InterchainDB."}},"version":1},"developerDoc":{"details":"Implements the operations of the Interchain Execution Layer.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"getInterchainFee(uint256,address,address[],bytes,bytes)":{"params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, currently gas limit + native gas drop.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."}},"getLinkedClient(uint256)":{"details":"Will return 0x0 if no client is linked for the chain ID."},"getLinkedClientEVM(uint256)":{"details":"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client."},"interchainExecute(uint256,bytes,bytes32[])":{"details":"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.","params":{"gasLimit":"The gas limit to use for the execution.","proof":"The Merkle proof for transaction execution, fetched from the source chain.","transaction":"The transaction data."}},"interchainSend(uint256,bytes32,address,address[],bytes,bytes)":{"details":"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.","params":{"dstChainId":"The chain ID of the destination chain.","message":"The message being sent.","options":"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.","receiver":"The address of the receiver on the destination chain.","srcExecutionService":"The address of the execution service to use for the message.","srcModules":"The source modules involved in the message sending."},"returns":{"desc":"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setExecutionFees(address)":{"details":"Only callable by the contract owner or an authorized account.","params":{"executionFees_":"The address of the ExecutionFees contract."}},"setLinkedClient(uint256,bytes32)":{"details":"Stores the address of the linked client in a mapping with the chain ID as the key.","params":{"chainId":"The chain ID for which the client is being set.","client":"The address of the client being linked."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"writeExecutionProof(bytes32)":{"details":"Will revert if the transaction has not been executed.","params":{"transactionId":"The ID of the transaction to write the proof for."},"returns":{"dbNonce":"        The database nonce of the batch containing the written proof for transaction.","entryIndex":"     The index of the written proof for transaction within the batch."}}},"stateVariables":{"_linkedClient":{"details":"Address of the InterchainClient contract on the remote chain"},"_txExecutor":{"details":"Executor address that completed the transaction. Address(0) if not executed yet."}},"title":"InterchainClientV1","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interchainDB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"AppConfigLib__IncorrectVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__FeeAmountTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectDstChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__IncorrectMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NoLinkedClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__NotEVMClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NotEnoughResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainClientV1__NotRemoteChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"InterchainClientV1__TxNotExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ZeroReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainClientV1__ZeroRequiredResponses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executionFees\",\"type\":\"address\"}],\"name\":\"ExecutionFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionProofWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"LinkedClientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERCHAIN_DB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAirdrop\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionsV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct InterchainTransaction\",\"name\":\"icTx\",\"type\":\"tuple\"}],\"name\":\"encodeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getExecutorById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getLinkedClient\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getLinkedClientEVM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"linkedClientEVM\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transaction\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"interchainExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSend\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcExecutionService\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"interchainSendEVM\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct InterchainTxDescriptor\",\"name\":\"desc\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isExecutable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionFees_\",\"type\":\"address\"}],\"name\":\"setExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"setLinkedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"writeExecutionProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements the operations of the Interchain Execution Layer.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getInterchainFee(uint256,address,address[],bytes,bytes)\":{\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, currently gas limit + native gas drop.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"}},\"getLinkedClient(uint256)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID.\"},\"getLinkedClientEVM(uint256)\":{\"details\":\"Will return 0x0 if no client is linked for the chain ID. Will revert if the client is not an EVM client.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"details\":\"The transaction must have been previously sent and recorded. Transaction data includes the requested gas limit, but the executors could specify a different gas limit. If the specified gas limit is lower than requested, the requested gas limit will be used. Otherwise, the specified gas limit will be used. This allows to execute the transactions with requested gas limit set too low.\",\"params\":{\"gasLimit\":\"The gas limit to use for the execution.\",\"proof\":\"The Merkle proof for transaction execution, fetched from the source chain.\",\"transaction\":\"The transaction data.\"}},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"details\":\"Charges a fee for the message, which is payable upon calling this function: - Verification fees: paid to every module that verifies the message. - Execution fee: paid to the executor that executes the message. Note: while a specific execution service is specified to request the execution of the message, any executor is able to execute the message on destination chain, earning the execution fee.\",\"params\":{\"dstChainId\":\"The chain ID of the destination chain.\",\"message\":\"The message being sent.\",\"options\":\"Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\",\"receiver\":\"The address of the receiver on the destination chain.\",\"srcExecutionService\":\"The address of the execution service to use for the message.\",\"srcModules\":\"The source modules involved in the message sending.\"},\"returns\":{\"desc\":\"The descriptor of the sent transaction: - transactionId: the ID of the transaction that was sent. - dbNonce: the database nonce of the batch containing the written entry for transaction. - entryIndex: the index of the written entry for transaction within the batch.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExecutionFees(address)\":{\"details\":\"Only callable by the contract owner or an authorized account.\",\"params\":{\"executionFees_\":\"The address of the ExecutionFees contract.\"}},\"setLinkedClient(uint256,bytes32)\":{\"details\":\"Stores the address of the linked client in a mapping with the chain ID as the key.\",\"params\":{\"chainId\":\"The chain ID for which the client is being set.\",\"client\":\"The address of the client being linked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"writeExecutionProof(bytes32)\":{\"details\":\"Will revert if the transaction has not been executed.\",\"params\":{\"transactionId\":\"The ID of the transaction to write the proof for.\"},\"returns\":{\"dbNonce\":\"        The database nonce of the batch containing the written proof for transaction.\",\"entryIndex\":\"     The index of the written proof for transaction within the batch.\"}}},\"stateVariables\":{\"_linkedClient\":{\"details\":\"Address of the InterchainClient contract on the remote chain\"},\"_txExecutor\":{\"details\":\"Executor address that completed the transaction. Address(0) if not executed yet.\"}},\"title\":\"InterchainClientV1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"INTERCHAIN_DB()\":{\"notice\":\"Address of the InterchainDB contract, set at the time of deployment.\"},\"decodeOptions(bytes)\":{\"notice\":\"Decodes the encoded options data into a OptionsV1 struct.\"},\"encodeTransaction((uint256,bytes32,uint256,bytes32,uint256,uint64,bytes,bytes))\":{\"notice\":\"Encodes the transaction data into a bytes format.\"},\"executionFees()\":{\"notice\":\"Address of the contract that handles execution fees. Can be updated by the owner.\"},\"getExecutorById(bytes32)\":{\"notice\":\"Returns the address of the executor for a transaction that has been sent to the local chain.\"},\"getInterchainFee(uint256,address,address[],bytes,bytes)\":{\"notice\":\"Returns the fee for sending an Interchain message.\"},\"getLinkedClient(uint256)\":{\"notice\":\"Returns the address of the linked client (as bytes32) for a specific chain ID.\"},\"getLinkedClientEVM(uint256)\":{\"notice\":\"Returns the EVM address of the linked client for a specific chain ID.\"},\"interchainExecute(uint256,bytes,bytes32[])\":{\"notice\":\"Executes a transaction that has been sent via the Interchain.\"},\"interchainSend(uint256,bytes32,address,address[],bytes,bytes)\":{\"notice\":\"Sends a message to another chain via the Interchain Communication Protocol.\"},\"setExecutionFees(address)\":{\"notice\":\"Sets the address of the ExecutionFees contract.\"},\"setLinkedClient(uint256,bytes32)\":{\"notice\":\"Sets the linked client for a specific chain ID.\"},\"writeExecutionProof(bytes32)\":{\"notice\":\"Writes the proof of execution for a transaction into the InterchainDB.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"INTERCHAIN_DB()":"e4c61247","decodeOptions(bytes)":"d5e788a0","encodeTransaction((uint256,bytes32,uint256,bytes32,uint256,uint64,bytes,bytes))":"7c80a90f","executionFees()":"7341eaf9","getExecutor(bytes)":"f92a79ff","getExecutorById(bytes32)":"f1a61fac","getInterchainFee(uint256,address,address[],bytes,bytes)":"3c383e7b","getLinkedClient(uint256)":"aa102ec4","getLinkedClientEVM(uint256)":"02172a35","interchainExecute(uint256,bytes,bytes32[])":"53b67d74","interchainSend(uint256,bytes32,address,address[],bytes,bytes)":"98939d28","interchainSendEVM(uint256,address,address,address[],bytes,bytes)":"827f940d","isExecutable(bytes,bytes32[])":"1450c281","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setExecutionFees(address)":"3dc68b87","setLinkedClient(uint256,bytes32)":"f34234c8","transferOwnership(address)":"f2fde38b","writeExecutionProof(bytes32)":"90e81077"}},"solidity/InterchainClientV1.sol:InterchainClientV1Events":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"executionFees","type":"address"}],"name":"ExecutionFeesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutionProofWritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"}],"name":"InterchainTransactionReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"entryIndex","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcSender","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dstReceiver","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"verificationFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionFee","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"InterchainTransactionSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"chainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"client","type":"bytes32"}],"name":"LinkedClientSet","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executionFees\",\"type\":\"address\"}],\"name\":\"ExecutionFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutionProofWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"}],\"name\":\"InterchainTransactionReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcSender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dstReceiver\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verificationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"InterchainTransactionSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"client\",\"type\":\"bytes32\"}],\"name\":\"LinkedClientSet\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainClientV1Events\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainEntryLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207df97795adc36bfa2a124b0e32ee87d6517567614f4b2883cd56755a3885fcd864736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207df97795adc36bfa2a124b0e32ee87d6517567614f4b2883cd56755a3885fcd864736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"15203:1633:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;15203:1633:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"15203:1633:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainEntryLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:InterchainTransactionLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220976e88f89cb6894cb1cdd79d19e0fe21d1e18f91aac48248f8217fb012cd70fd64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220976e88f89cb6894cb1cdd79d19e0fe21d1e18f91aac48248f8217fb012cd70fd64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"17267:1229:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;17267:1229:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"17267:1229:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"InterchainTransactionLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:OptionsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d3c48aa4bdcd4f8847fb604258c8fc05449b878e8a002915035628b8245b3e0764736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d3c48aa4bdcd4f8847fb604258c8fc05449b878e8a002915035628b8245b3e0764736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"11137:1958:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;11137:1958:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"11137:1958:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"uint8","name":"version","type":"uint8"}],"name":"OptionsLib__IncorrectVersion","type":"error"}],"userDoc":{"kind":"user","methods":{},"notice":"A library for encoding and decoding Interchain options related to interchain messages.","version":1},"developerDoc":{"kind":"dev","methods":{},"title":"OptionsLib","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"OptionsLib__IncorrectVersion\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for encoding and decoding Interchain options related to interchain messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"OptionsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainClientV1.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/InterchainClientV1.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085121091adc223a7cb7854694f214e32c803556d53772dcbd2522b2823e1574164736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085121091adc223a7cb7854694f214e32c803556d53772dcbd2522b2823e1574164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0 ^0.8.13 ^0.8.20;\n\n// contracts/events/InterchainClientV1Events.sol\n\nabstract contract InterchainClientV1Events {\n    event ExecutionFeesSet(address executionFees);\n    event LinkedClientSet(uint256 chainId, bytes32 client);\n\n    // TODO: figure out indexing\n\n    event InterchainTransactionSent(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 dstChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver,\n        uint256 verificationFee,\n        uint256 executionFee,\n        bytes options,\n        bytes message\n    );\n\n    event InterchainTransactionReceived(\n        bytes32 indexed transactionId,\n        uint256 indexed dbNonce,\n        uint64 indexed entryIndex,\n        uint256 srcChainId,\n        bytes32 srcSender,\n        bytes32 dstReceiver\n    );\n\n    event ExecutionProofWritten(\n        bytes32 indexed transactionId, uint256 indexed dbNonce, uint64 indexed entryIndex, address executor\n    );\n}\n\n// contracts/interfaces/IExecutionFees.sol\n\ninterface IExecutionFees {\n    error ExecutionFees__AlreadyRecorded(uint256 dstChainId, bytes32 transactionId, address executor);\n    error ExecutionFees__ZeroAddress();\n    error ExecutionFees__ZeroAmount();\n\n    /// @notice Add the execution fee for a transaction. The attached value will be added to the\n    /// rewards for the executor completing the transaction.\n    /// Note: this could be used to store the execution fee for a new transaction, or to add more\n    /// funds to the execution fee of an existing transaction. Therefore this function is payable,\n    /// and does not implement any caller restrictions.\n    /// @dev Will revert if the executor is already recorded for the transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to add the execution fee to.\n    function addExecutionFee(uint256 dstChainId, bytes32 transactionId) external payable;\n\n    /// @notice Record the executor (who completed the transaction) for a transaction,\n    /// and update the accumulated rewards for the executor.\n    /// @dev Could only be called by the Recorder.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to record the executor for.\n    /// @param executor             The address of the executor who completed the transaction.\n    function recordExecutor(uint256 dstChainId, bytes32 transactionId, address executor) external;\n\n    /// @notice Allows the executor to claim their unclaimed rewards.\n    /// @dev Will revert if the executor has no unclaimed rewards.\n    function claimExecutionFees(address executor) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the accumulated rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function accumulatedRewards(address executor) external view returns (uint256 accumulated);\n\n    /// @notice Get the unclaimed rewards for an executor.\n    /// @param executor             The address of the executor to get the rewards for.\n    function unclaimedRewards(address executor) external view returns (uint256 unclaimed);\n\n    /// @notice Get the total execution fee for a transaction.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the execution fee for.\n    function executionFee(uint256 dstChainId, bytes32 transactionId) external view returns (uint256 fee);\n\n    /// @notice Get the address of the recorded executor for a transaction.\n    /// @dev Will return address(0) if the executor is not recorded.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param transactionId        The id of the transaction to get the recorded executor for.\n    function recordedExecutor(uint256 dstChainId, bytes32 transactionId) external view returns (address executor);\n}\n\n// contracts/interfaces/IExecutionService.sol\n\ninterface IExecutionService {\n    /// @notice Request the execution of an Interchain Transaction on a remote chain.\n    /// Note: the off-chain actor needs to fetch the transaction payload from the InterchainClient\n    /// event with the same transactionId, then execute the transaction on the remote chain:\n    /// `dstInterchainClient.executeTransaction(transactionPayload)`\n    /// Once the execution is confirmed on the source chain, the off-chain actor will be able\n    /// to claim `executionFee` in the ExecutionFees contract.\n    /// @dev Could only be called by `InterchainClient` contracts.\n    /// Will revert if the execution fee is not big enough.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param transactionId        The id of the transaction to execute.\n    /// @param executionFee         The fee paid for the execution.\n    /// @param options              The options to use for the execution.\n    function requestExecution(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes32 transactionId,\n        uint256 executionFee,\n        bytes memory options\n    )\n        external;\n\n    /// @notice Get the address of the EOA account that will be used to execute transactions on the\n    /// remote chains.\n    function executorEOA() external view returns (address);\n\n    /// @notice Get the execution fee for executing an Interchain Transaction on a remote chain.\n    /// @param dstChainId           The chain id of the destination chain.\n    /// @param txPayloadSize        The size of the transaction payload to use for the execution.\n    /// @param options              The options to use for the execution.\n    function getExecutionFee(\n        uint256 dstChainId,\n        uint256 txPayloadSize,\n        bytes memory options\n    )\n        external\n        view\n        returns (uint256);\n}\n\n// contracts/interfaces/IInterchainApp.sol\n\n/// @notice Minimal interface for the Interchain App to work with the Interchain Client.\ninterface IInterchainApp {\n    function appReceive(\n        uint256 srcChainId,\n        bytes32 sender,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes calldata message\n    )\n        external\n        payable;\n\n    function getReceivingConfig() external view returns (bytes memory appConfig, address[] memory modules);\n}\n\n// contracts/libs/AppConfig.sol\n\nstruct AppConfigV1 {\n    uint256 requiredResponses;\n    uint256 optimisticPeriod;\n}\n\nusing AppConfigLib for AppConfigV1 global;\n\nlibrary AppConfigLib {\n    uint8 constant APP_CONFIG_V1 = 1;\n\n    error AppConfigLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned app config into a bytes format.\n    /// @param version      The version of the app config.\n    /// @param appConfig    The app config to encode.\n    function encodeVersionedAppConfig(uint8 version, bytes memory appConfig) internal pure returns (bytes memory) {\n        return abi.encode(version, appConfig);\n    }\n\n    /// @notice Decodes versioned app config from a bytes format back into a version and app config.\n    /// @param data         The versioned app config data in bytes format.\n    /// @return version     The version of the app config.\n    /// @return appConfig   The app config as bytes.\n    function decodeVersionedAppConfig(bytes memory data)\n        internal\n        pure\n        returns (uint8 version, bytes memory appConfig)\n    {\n        (version, appConfig) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 app config into a bytes format.\n    /// @param appConfig    The AppConfigV1 to encode.\n    function encodeAppConfigV1(AppConfigV1 memory appConfig) internal pure returns (bytes memory) {\n        return encodeVersionedAppConfig(APP_CONFIG_V1, abi.encode(appConfig));\n    }\n\n    /// @notice Decodes app config (V1 or higher) from a bytes format back into an AppConfigV1 struct.\n    /// @param data         The app config data in bytes format.\n    function decodeAppConfigV1(bytes memory data) internal pure returns (AppConfigV1 memory) {\n        (uint8 version, bytes memory appConfig) = decodeVersionedAppConfig(data);\n        if (version \u003c APP_CONFIG_V1) {\n            revert AppConfigLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(appConfig, (AppConfigV1));\n    }\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/Options.sol\n\n/// @notice Struct to hold V1 of options data.\n/// @dev Next versions have to use the fields from the previous version and add new fields at the end.\n/// @param gasLimit The gas limit for the transaction.\n/// @param gasAirdrop The amount of gas to airdrop.\nstruct OptionsV1 {\n    uint256 gasLimit;\n    uint256 gasAirdrop;\n}\n\nusing OptionsLib for OptionsV1 global;\n\n/// @title OptionsLib\n/// @notice A library for encoding and decoding Interchain options related to interchain messages.\nlibrary OptionsLib {\n    uint8 constant OPTIONS_V1 = 1;\n\n    error OptionsLib__IncorrectVersion(uint8 version);\n\n    /// @notice Encodes versioned options into a bytes format.\n    /// @param version      The version of the options.\n    /// @param options      The options to encode.\n    function encodeVersionedOptions(uint8 version, bytes memory options) internal pure returns (bytes memory) {\n        return abi.encode(version, options);\n    }\n\n    /// @notice Decodes versioned options from a bytes format back into a version and options.\n    /// @param data         The versioned options data in bytes format.\n    /// @return version     The version of the options.\n    /// @return options     The options as bytes.\n    function decodeVersionedOptions(bytes memory data) internal pure returns (uint8 version, bytes memory options) {\n        (version, options) = abi.decode(data, (uint8, bytes));\n    }\n\n    /// @notice Encodes V1 options into a bytes format.\n    /// @param options      The OptionsV1 to encode.\n    function encodeOptionsV1(OptionsV1 memory options) internal pure returns (bytes memory) {\n        return encodeVersionedOptions(OPTIONS_V1, abi.encode(options));\n    }\n\n    /// @notice Decodes options (V1 or higher) from a bytes format back into an OptionsV1 struct.\n    /// @param data         The options data in bytes format.\n    function decodeOptionsV1(bytes memory data) internal pure returns (OptionsV1 memory) {\n        (uint8 version, bytes memory options) = decodeVersionedOptions(data);\n        if (version \u003c OPTIONS_V1) {\n            revert OptionsLib__IncorrectVersion(version);\n        }\n        // Structs of the same version will always be decoded correctly.\n        // Following versions will be decoded correctly if they have the same fields as the previous version,\n        // and new fields at the end: abi.decode ignores the extra bytes in the decoded payload.\n        return abi.decode(options, (OptionsV1));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nusing InterchainEntryLib for InterchainEntry global;\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/libs/InterchainTransaction.sol\n\nstruct InterchainTransaction {\n    uint256 srcChainId;\n    bytes32 srcSender;\n    uint256 dstChainId;\n    bytes32 dstReceiver;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes options;\n    bytes message;\n}\n\nstruct InterchainTxDescriptor {\n    bytes32 transactionId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n}\n\nusing InterchainTransactionLib for InterchainTransaction global;\n\nlibrary InterchainTransactionLib {\n    function constructLocalTransaction(\n        address srcSender,\n        uint256 dstChainId,\n        bytes32 dstReceiver,\n        uint256 dbNonce,\n        uint64 entryIndex,\n        bytes memory options,\n        bytes memory message\n    )\n        internal\n        view\n        returns (InterchainTransaction memory transaction)\n    {\n        return InterchainTransaction({\n            srcChainId: block.chainid,\n            srcSender: TypeCasts.addressToBytes32(srcSender),\n            dstChainId: dstChainId,\n            dstReceiver: dstReceiver,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            options: options,\n            message: message\n        });\n    }\n\n    function encodeTransaction(InterchainTransaction memory transaction) internal pure returns (bytes memory) {\n        return abi.encode(transaction);\n    }\n\n    function decodeTransaction(bytes memory encodedTx) internal pure returns (InterchainTransaction memory) {\n        return abi.decode(encodedTx, (InterchainTransaction));\n    }\n\n    function transactionId(InterchainTransaction memory transaction) internal pure returns (bytes32) {\n        return keccak256(abi.encode(transaction));\n    }\n}\n\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// contracts/interfaces/IInterchainClientV1.sol\n\ninterface IInterchainClientV1 {\n    error InterchainClientV1__FeeAmountTooLow(uint256 actual, uint256 required);\n    error InterchainClientV1__IncorrectDstChainId(uint256 chainId);\n    error InterchainClientV1__IncorrectMsgValue(uint256 actual, uint256 required);\n    error InterchainClientV1__NoLinkedClient(uint256 chainId);\n    error InterchainClientV1__NotEnoughResponses(uint256 actual, uint256 required);\n    error InterchainClientV1__NotEVMClient(bytes32 client);\n    error InterchainClientV1__NotRemoteChainId(uint256 chainId);\n    error InterchainClientV1__TxAlreadyExecuted(bytes32 transactionId);\n    error InterchainClientV1__TxNotExecuted(bytes32 transactionId);\n    error InterchainClientV1__ZeroReceiver();\n    error InterchainClientV1__ZeroRequiredResponses();\n\n    /**\n     * @notice Sets the address of the ExecutionFees contract.\n     * @dev Only callable by the contract owner or an authorized account.\n     * @param executionFees_ The address of the ExecutionFees contract.\n     */\n    function setExecutionFees(address executionFees_) external;\n\n    /**\n     * @notice Sets the linked client for a specific chain ID.\n     * @dev Stores the address of the linked client in a mapping with the chain ID as the key.\n     * @param chainId The chain ID for which the client is being set.\n     * @param client The address of the client being linked.\n     */\n    function setLinkedClient(uint256 chainId, bytes32 client) external;\n\n    /**\n     * @notice Sends a message to another chain via the Interchain Communication Protocol.\n     * @dev Charges a fee for the message, which is payable upon calling this function:\n     * - Verification fees: paid to every module that verifies the message.\n     * - Execution fee: paid to the executor that executes the message.\n     * Note: while a specific execution service is specified to request the execution of the message,\n     * any executor is able to execute the message on destination chain, earning the execution fee.\n     * @param dstChainId The chain ID of the destination chain.\n     * @param receiver The address of the receiver on the destination chain.\n     * @param srcExecutionService The address of the execution service to use for the message.\n     * @param srcModules The source modules involved in the message sending.\n     * @param options Execution options for the message sent, encoded as bytes, currently gas limit + native gas drop.\n     * @param message The message being sent.\n     * @return desc The descriptor of the sent transaction:\n     * - transactionId: the ID of the transaction that was sent.\n     * - dbNonce: the database nonce of the batch containing the written entry for transaction.\n     * - entryIndex: the index of the written entry for transaction within the batch.\n     */\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc);\n\n    /**\n     * @notice Executes a transaction that has been sent via the Interchain.\n     * @dev The transaction must have been previously sent and recorded.\n     * Transaction data includes the requested gas limit, but the executors could specify a different gas limit.\n     * If the specified gas limit is lower than requested, the requested gas limit will be used.\n     * Otherwise, the specified gas limit will be used.\n     * This allows to execute the transactions with requested gas limit set too low.\n     * @param gasLimit          The gas limit to use for the execution.\n     * @param transaction       The transaction data.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     */\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable;\n\n    /// @notice Writes the proof of execution for a transaction into the InterchainDB.\n    /// @dev Will revert if the transaction has not been executed.\n    /// @param transactionId    The ID of the transaction to write the proof for.\n    /// @return dbNonce         The database nonce of the batch containing the written proof for transaction.\n    /// @return entryIndex      The index of the written proof for transaction within the batch.\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /**\n     * @notice Checks if a transaction is executable.\n     * @dev Determines if a transaction meets the criteria to be executed based on:\n     * - If approved modules have written to the InterchainDB\n     * - If the threshold of approved modules have been met\n     * - If the optimistic window has passed for all modules\n     * @param transaction       The InterchainTransaction struct to be checked.\n     * @param proof             The Merkle proof for transaction execution, fetched from the source chain.\n     * @return bool Returns true if the transaction is executable, false otherwise.\n     */\n    function isExecutable(bytes calldata transaction, bytes32[] calldata proof) external view returns (bool);\n\n    /// @notice Returns the fee for sending an Interchain message.\n    /// @param dstChainId           The chain ID of the destination chain.\n    /// @param srcExecutionService  The address of the execution service to use for the message.\n    /// @param srcModules           The source modules involved in the message sending.\n    /// @param options              Execution options for the message sent, currently gas limit + native gas drop.\n    /// @param message              The message being sent.\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutor(bytes calldata transaction) external view returns (address);\n\n    /// @notice Returns the address of the executor for a transaction that has been sent to the local chain.\n    function getExecutorById(bytes32 transactionId) external view returns (address);\n\n    /// @notice Returns the address of the linked client (as bytes32) for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    function getLinkedClient(uint256 chainId) external view returns (bytes32);\n\n    /// @notice Returns the EVM address of the linked client for a specific chain ID.\n    /// @dev Will return 0x0 if no client is linked for the chain ID.\n    /// Will revert if the client is not an EVM client.\n    function getLinkedClientEVM(uint256 chainId) external view returns (address);\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/InterchainClientV1.sol\n\n/**\n * @title InterchainClientV1\n * @dev Implements the operations of the Interchain Execution Layer.\n */\ncontract InterchainClientV1 is Ownable, InterchainClientV1Events, IInterchainClientV1 {\n    using AppConfigLib for bytes;\n    using OptionsLib for bytes;\n\n    /// @notice Address of the InterchainDB contract, set at the time of deployment.\n    address public immutable INTERCHAIN_DB;\n\n    /// @notice Address of the contract that handles execution fees. Can be updated by the owner.\n    address public executionFees;\n\n    /// @dev Address of the InterchainClient contract on the remote chain\n    mapping(uint256 chainId =\u003e bytes32 remoteClient) internal _linkedClient;\n    /// @dev Executor address that completed the transaction. Address(0) if not executed yet.\n    mapping(bytes32 transactionId =\u003e address executor) internal _txExecutor;\n\n    constructor(address interchainDB, address owner_) Ownable(owner_) {\n        INTERCHAIN_DB = interchainDB;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setExecutionFees(address executionFees_) external onlyOwner {\n        executionFees = executionFees_;\n        emit ExecutionFeesSet(executionFees_);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function setLinkedClient(uint256 chainId, bytes32 client) external onlyOwner {\n        _linkedClient[chainId] = client;\n        emit LinkedClientSet(chainId, client);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        return _interchainSend(dstChainId, receiver, srcExecutionService, srcModules, options, message);\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function interchainSendEVM(\n        uint256 dstChainId,\n        address receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        payable\n        returns (InterchainTxDescriptor memory desc)\n    {\n        bytes32 receiverBytes32 = TypeCasts.addressToBytes32(receiver);\n        return _interchainSend(dstChainId, receiverBytes32, srcExecutionService, srcModules, options, message);\n    }\n\n    // TODO: Handle the case where receiver does not implement the IInterchainApp interface (or does not exist at all)\n    // @inheritdoc IInterchainClientV1\n    function interchainExecute(\n        uint256 gasLimit,\n        bytes calldata transaction,\n        bytes32[] calldata proof\n    )\n        external\n        payable\n    {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(transaction);\n        bytes32 transactionId = _assertExecutable(icTx, proof);\n        _txExecutor[transactionId] = msg.sender;\n\n        OptionsV1 memory decodedOptions = icTx.options.decodeOptionsV1();\n        if (msg.value != decodedOptions.gasAirdrop) {\n            revert InterchainClientV1__IncorrectMsgValue(msg.value, decodedOptions.gasAirdrop);\n        }\n        // We should always use at least as much as the requested gas limit.\n        // The executor can specify a higher gas limit if they wanted.\n        if (decodedOptions.gasLimit \u003e gasLimit) gasLimit = decodedOptions.gasLimit;\n        // Pass the full msg.value to the app: we have already checked that it matches the requested gas airdrop.\n        IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).appReceive{gas: gasLimit, value: msg.value}({\n            srcChainId: icTx.srcChainId,\n            sender: icTx.srcSender,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            message: icTx.message\n        });\n        emit InterchainTransactionReceived(\n            transactionId, icTx.dbNonce, icTx.entryIndex, icTx.srcChainId, icTx.srcSender, icTx.dstReceiver\n        );\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function writeExecutionProof(bytes32 transactionId) external returns (uint256 dbNonce, uint64 entryIndex) {\n        address executor = _txExecutor[transactionId];\n        if (executor == address(0)) {\n            revert InterchainClientV1__TxNotExecuted(transactionId);\n        }\n        bytes memory proof = abi.encode(transactionId, executor);\n        (dbNonce, entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntry(keccak256(proof));\n        emit ExecutionProofWritten(transactionId, dbNonce, entryIndex, executor);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // @inheritdoc IInterchainClientV1\n    function isExecutable(bytes calldata encodedTx, bytes32[] calldata proof) external view returns (bool) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        // Check that options could be decoded\n        icTx.options.decodeOptionsV1();\n        _assertExecutable(icTx, proof);\n        return true;\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutor(bytes calldata encodedTx) external view returns (address) {\n        InterchainTransaction memory icTx = InterchainTransactionLib.decodeTransaction(encodedTx);\n        return _txExecutor[icTx.transactionId()];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getExecutorById(bytes32 transactionId) external view returns (address) {\n        return _txExecutor[transactionId];\n    }\n\n    // @inheritdoc IInterchainClientV1\n    function getInterchainFee(\n        uint256 dstChainId,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        external\n        view\n        returns (uint256 fee)\n    {\n        _assertLinkedClient(dstChainId);\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        // Verification fee from InterchainDB\n        fee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        // Add execution fee, if ExecutionService is provided\n        if (srcExecutionService != address(0)) {\n            // Construct a mock InterchainTransaction to calculate the execution fee.\n            // We don't care about values for static fields, as we are only interested in the payload size.\n            InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n                srcSender: address(0),\n                dstReceiver: 0,\n                dstChainId: dstChainId,\n                dbNonce: 0,\n                entryIndex: 0,\n                options: options,\n                message: message\n            });\n            fee += IExecutionService(srcExecutionService).getExecutionFee(dstChainId, abi.encode(icTx).length, options);\n        }\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClient(uint256 chainId) external view returns (bytes32) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        return _linkedClient[chainId];\n    }\n\n    /// @inheritdoc IInterchainClientV1\n    function getLinkedClientEVM(uint256 chainId) external view returns (address linkedClientEVM) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        bytes32 linkedClient = _linkedClient[chainId];\n        linkedClientEVM = TypeCasts.bytes32ToAddress(linkedClient);\n        // Check that the linked client address fits into the EVM address space\n        if (TypeCasts.addressToBytes32(linkedClientEVM) != linkedClient) {\n            revert InterchainClientV1__NotEVMClient(linkedClient);\n        }\n    }\n\n    /// @notice Encodes the transaction data into a bytes format.\n    function encodeTransaction(InterchainTransaction memory icTx) external pure returns (bytes memory) {\n        return icTx.encodeTransaction();\n    }\n\n    /// @notice Decodes the encoded options data into a OptionsV1 struct.\n    function decodeOptions(bytes memory encodedOptions) external pure returns (OptionsV1 memory) {\n        return encodedOptions.decodeOptionsV1();\n    }\n\n    // ═════════════════════════════════════════════════ INTERNAL ══════════════════════════════════════════════════════\n\n    /// @dev Internal logic for sending a message to another chain.\n    function _interchainSend(\n        uint256 dstChainId,\n        bytes32 receiver,\n        address srcExecutionService,\n        address[] calldata srcModules,\n        bytes calldata options,\n        bytes calldata message\n    )\n        internal\n        returns (InterchainTxDescriptor memory desc)\n    {\n        _assertLinkedClient(dstChainId);\n        if (receiver == 0) revert InterchainClientV1__ZeroReceiver();\n        // Check that options could be decoded on destination chain\n        options.decodeOptionsV1();\n        uint256 verificationFee = IInterchainDB(INTERCHAIN_DB).getInterchainFee(dstChainId, srcModules);\n        if (msg.value \u003c verificationFee) {\n            revert InterchainClientV1__FeeAmountTooLow(msg.value, verificationFee);\n        }\n        (desc.dbNonce, desc.entryIndex) = IInterchainDB(INTERCHAIN_DB).getNextEntryIndex();\n        InterchainTransaction memory icTx = InterchainTransactionLib.constructLocalTransaction({\n            srcSender: msg.sender,\n            dstReceiver: receiver,\n            dstChainId: dstChainId,\n            dbNonce: desc.dbNonce,\n            entryIndex: desc.entryIndex,\n            options: options,\n            message: message\n        });\n        desc.transactionId = icTx.transactionId();\n        // Sanity check: nonce returned from DB should match the nonce used to construct the transaction\n        {\n            (uint256 dbNonce, uint64 entryIndex) = IInterchainDB(INTERCHAIN_DB).writeEntryWithVerification{\n                value: verificationFee\n            }(icTx.dstChainId, desc.transactionId, srcModules);\n            assert(dbNonce == desc.dbNonce \u0026\u0026 entryIndex == desc.entryIndex);\n        }\n        uint256 executionFee;\n        unchecked {\n            executionFee = msg.value - verificationFee;\n        }\n        if (executionFee \u003e 0) {\n            IExecutionFees(executionFees).addExecutionFee{value: executionFee}(icTx.dstChainId, desc.transactionId);\n        }\n        // TODO: consider disallowing the use of empty srcExecutionService\n        if (srcExecutionService != address(0)) {\n            IExecutionService(srcExecutionService).requestExecution({\n                dstChainId: dstChainId,\n                // TODO: there should be a way to calculate the payload size without encoding the transaction\n                txPayloadSize: icTx.encodeTransaction().length,\n                transactionId: desc.transactionId,\n                executionFee: executionFee,\n                options: options\n            });\n            address srcExecutorEOA = IExecutionService(srcExecutionService).executorEOA();\n            IExecutionFees(executionFees).recordExecutor(icTx.dstChainId, desc.transactionId, srcExecutorEOA);\n        }\n        emit InterchainTransactionSent(\n            desc.transactionId,\n            icTx.dbNonce,\n            icTx.entryIndex,\n            icTx.dstChainId,\n            icTx.srcSender,\n            icTx.dstReceiver,\n            verificationFee,\n            executionFee,\n            icTx.options,\n            icTx.message\n        );\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Asserts that the transaction is executable. Returns the transactionId for chaining purposes.\n    function _assertExecutable(\n        InterchainTransaction memory icTx,\n        bytes32[] calldata proof\n    )\n        internal\n        view\n        returns (bytes32 transactionId)\n    {\n        bytes32 linkedClient = _assertLinkedClient(icTx.srcChainId);\n        if (icTx.dstChainId != block.chainid) {\n            revert InterchainClientV1__IncorrectDstChainId(icTx.dstChainId);\n        }\n        transactionId = icTx.transactionId();\n        if (_txExecutor[transactionId] != address(0)) {\n            revert InterchainClientV1__TxAlreadyExecuted(transactionId);\n        }\n        // Construct expected entry based on icTransaction data\n        InterchainEntry memory icEntry = InterchainEntry({\n            srcChainId: icTx.srcChainId,\n            dbNonce: icTx.dbNonce,\n            entryIndex: icTx.entryIndex,\n            srcWriter: linkedClient,\n            dataHash: transactionId\n        });\n        (bytes memory encodedAppConfig, address[] memory approvedDstModules) =\n            IInterchainApp(TypeCasts.bytes32ToAddress(icTx.dstReceiver)).getReceivingConfig();\n        AppConfigV1 memory appConfig = encodedAppConfig.decodeAppConfigV1();\n        if (appConfig.requiredResponses == 0) {\n            revert InterchainClientV1__ZeroRequiredResponses();\n        }\n        uint256 responses = _getFinalizedResponsesCount(approvedDstModules, icEntry, proof, appConfig.optimisticPeriod);\n        if (responses \u003c appConfig.requiredResponses) {\n            revert InterchainClientV1__NotEnoughResponses(responses, appConfig.requiredResponses);\n        }\n    }\n\n    /// @dev Asserts that the chain is linked and returns the linked client address.\n    function _assertLinkedClient(uint256 chainId) internal view returns (bytes32 linkedClient) {\n        if (chainId == block.chainid) {\n            revert InterchainClientV1__NotRemoteChainId(chainId);\n        }\n        linkedClient = _linkedClient[chainId];\n        if (linkedClient == 0) {\n            revert InterchainClientV1__NoLinkedClient(chainId);\n        }\n    }\n\n    /**\n     * @dev Calculates the number of responses that are considered finalized within the optimistic time period.\n     * @param approvedModules       Approved modules that could have confirmed the entry.\n     * @param icEntry               The InterchainEntry to confirm.\n     * @param optimisticPeriod      The time period in seconds within which a response is considered valid.\n     * @return finalizedResponses   The count of responses that are finalized within the optimistic time period.\n     */\n    function _getFinalizedResponsesCount(\n        address[] memory approvedModules,\n        InterchainEntry memory icEntry,\n        bytes32[] calldata proof,\n        uint256 optimisticPeriod\n    )\n        internal\n        view\n        returns (uint256 finalizedResponses)\n    {\n        for (uint256 i = 0; i \u003c approvedModules.length; ++i) {\n            uint256 confirmedAt = IInterchainDB(INTERCHAIN_DB).checkVerification(approvedModules[i], icEntry, proof);\n            // readEntry() returns 0 if entry hasn't been confirmed by the module, so we check for that as well\n            if (confirmedAt != 0 \u0026\u0026 confirmedAt + optimisticPeriod \u003c block.timestamp) {\n                ++finalizedResponses;\n            }\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"13130:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;13130:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"13130:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainClientV1.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainClientV1.sol\":{\"keccak256\":\"0x339fa758bd6a5b9f548af5b212c61e031282c413855a18f5a135413cf11b686c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ecde9e8c7e7a7942c1199cc7dbb71d71fe2ee42c2b3bd9fe751b8cebbf24fb\",\"dweb:/ipfs/QmPBs6SUqBRrchgQnm62UDAqHFq2iG4J7ARobh7iQUfTFa\"]}},\"version\":1}"},"hashes":{}}}
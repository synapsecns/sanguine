{"solidity/InterchainDB.sol:IInterchainDB":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchNotFinalized","type":"error"},{"inputs":[{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes32","name":"existingBatchRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"newBatch","type":"tuple"}],"name":"InterchainDB__ConflictingBatches","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"uint64","name":"batchSize","type":"uint64"}],"name":"InterchainDB__EntryIndexOutOfRange","type":"error"},{"inputs":[{"internalType":"uint256","name":"actualFee","type":"uint256"},{"internalType":"uint256","name":"expectedFee","type":"uint256"}],"name":"InterchainDB__IncorrectFeeAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"InterchainDB__InvalidEntryRange","type":"error"},{"inputs":[],"name":"InterchainDB__NoModulesSpecified","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainDB__SameChainId","type":"error"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"checkVerification","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatch","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchLeafs","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"getBatchLeafsPaginated","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchSize","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDBNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntry","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntryProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNextEntryIndex","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestBatchVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"batch","type":"tuple"}],"name":"verifyRemoteBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"notice":"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry."},"getBatch(uint256)":{"notice":"Get the finalized Interchain Batch with the given nonce."},"getBatchLeafs(uint256)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together)."},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error."},"getBatchSize(uint256)":{"notice":"Returns the size of the finalized batch with the given nonce."},"getDBNonce()":{"notice":"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch."},"getEntry(uint256,uint64)":{"notice":"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry."},"getEntryProof(uint256,uint64)":{"notice":"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce."},"getInterchainFee(uint256,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"getNextEntryIndex()":{"notice":"Get the index of the next entry to be written to the database."},"requestBatchVerification(uint256,uint256,address[])":{"notice":"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch."},"verifyRemoteBatch((uint256,uint256,bytes32))":{"notice":"Allows the Interchain Module to verify the batch coming from the remote chain."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint256,bytes32,address[])":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details."}},"version":1},"developerDoc":{"kind":"dev","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"params":{"dstModule":"The destination chain addresses of the Interchain Modules to use for verification","entry":"The Interchain Entry to read"},"returns":{"moduleVerifiedAt":"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry."}},"getBatch(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafs(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.","params":{"dbNonce":"The database nonce of the finalized batch","end":"The end index of the paginated leafs, exclusive","start":"The start index of the paginated leafs, inclusive"}},"getBatchSize(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getEntry(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the existing batch","entryIndex":"The index of the written entry within the batch"}},"getEntryProof(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the finalized batch","entryIndex":"The index of the written entry within the batch"},"returns":{"proof":"      The Merkle proof of inclusion for the entry"}},"getInterchainFee(uint256,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"getNextEntryIndex()":{"returns":{"dbNonce":"     The database nonce of the batch including the next entry","entryIndex":"  The index of the next entry within that batch"}},"requestBatchVerification(uint256,uint256,address[])":{"details":"Will revert if the batch with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the existing batch","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"verifyRemoteBatch((uint256,uint256,bytes32))":{"params":{"batch":"The Interchain Batch to confirm"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}},"writeEntryWithVerification(uint256,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"existingBatchRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"newBatch\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__ConflictingBatches\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"batchSize\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__EntryIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFee\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__IncorrectFeeAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__InvalidEntryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__NoModulesSpecified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__SameChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"checkVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"getBatchLeafsPaginated\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDBNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntryProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEntryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestBatchVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"verifyRemoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"params\":{\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\",\"entry\":\"The Interchain Entry to read\"},\"returns\":{\"moduleVerifiedAt\":\"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry.\"}},\"getBatch(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafs(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"end\":\"The end index of the paginated leafs, exclusive\",\"start\":\"The start index of the paginated leafs, inclusive\"}},\"getBatchSize(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getEntry(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"entryIndex\":\"The index of the written entry within the batch\"}},\"getEntryProof(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"entryIndex\":\"The index of the written entry within the batch\"},\"returns\":{\"proof\":\"      The Merkle proof of inclusion for the entry\"}},\"getInterchainFee(uint256,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"getNextEntryIndex()\":{\"returns\":{\"dbNonce\":\"     The database nonce of the batch including the next entry\",\"entryIndex\":\"  The index of the next entry within that batch\"}},\"requestBatchVerification(uint256,uint256,address[])\":{\"details\":\"Will revert if the batch with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"params\":{\"batch\":\"The Interchain Batch to confirm\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"notice\":\"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry.\"},\"getBatch(uint256)\":{\"notice\":\"Get the finalized Interchain Batch with the given nonce.\"},\"getBatchLeafs(uint256)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\"},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error.\"},\"getBatchSize(uint256)\":{\"notice\":\"Returns the size of the finalized batch with the given nonce.\"},\"getDBNonce()\":{\"notice\":\"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch.\"},\"getEntry(uint256,uint64)\":{\"notice\":\"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry.\"},\"getEntryProof(uint256,uint64)\":{\"notice\":\"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce.\"},\"getInterchainFee(uint256,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"getNextEntryIndex()\":{\"notice\":\"Get the index of the next entry to be written to the database.\"},\"requestBatchVerification(uint256,uint256,address[])\":{\"notice\":\"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch.\"},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"notice\":\"Allows the Interchain Module to verify the batch coming from the remote chain.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"IInterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":"67b1f42e","getBatch(uint256)":"5ac44282","getBatchLeafs(uint256)":"d63020bb","getBatchLeafsPaginated(uint256,uint64,uint64)":"25a1641d","getBatchSize(uint256)":"b955e9b9","getDBNonce()":"f338140e","getEntry(uint256,uint64)":"1725fd30","getEntryProof(uint256,uint64)":"4f84d040","getInterchainFee(uint256,address[])":"fc7686ec","getNextEntryIndex()":"aa2f06ae","requestBatchVerification(uint256,uint256,address[])":"84b1c8b8","verifyRemoteBatch((uint256,uint256,bytes32))":"05d0728c","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint256,bytes32,address[])":"67c769af"}},"solidity/InterchainDB.sol:IInterchainModule":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainModule__IncorrectSourceChainId","type":"error"},{"inputs":[{"internalType":"uint256","name":"actual","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InterchainModule__InsufficientFee","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"InterchainModule__NotInterchainDB","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainModule__SameChainId","type":"error"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getModuleFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"batch","type":"tuple"}],"name":"requestBatchVerification","outputs":[],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"getModuleFee(uint256,uint256)":{"notice":"Get the Module fee for verifying a batch on the specified destination chain."},"requestBatchVerification(uint256,(uint256,uint256,bytes32))":{"notice":"Request the verification of a batch from the Interchain DataBase by the module. If the batch is not yet finalized, the verification on destination chain will be delayed until the finalization is done and batch root is saved on the source chain. Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`. Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain, with no guarantee of ordering."}},"notice":"Every Module may opt a different method to confirm the verified entries on destination chain, therefore this is not a part of a common interface.","version":1},"developerDoc":{"kind":"dev","methods":{"getModuleFee(uint256,uint256)":{"params":{"dbNonce":"The database nonce of the batch on the source chain","dstChainId":"The chain id of the destination chain"}},"requestBatchVerification(uint256,(uint256,uint256,bytes32))":{"details":"Could be only called by the Interchain DataBase contract.","params":{"batch":"The batch to verify","dstChainId":"The chain id of the destination chain"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainModule__IncorrectSourceChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InterchainModule__InsufficientFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InterchainModule__NotInterchainDB\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainModule__SameChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getModuleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"requestBatchVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getModuleFee(uint256,uint256)\":{\"params\":{\"dbNonce\":\"The database nonce of the batch on the source chain\",\"dstChainId\":\"The chain id of the destination chain\"}},\"requestBatchVerification(uint256,(uint256,uint256,bytes32))\":{\"details\":\"Could be only called by the Interchain DataBase contract.\",\"params\":{\"batch\":\"The batch to verify\",\"dstChainId\":\"The chain id of the destination chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getModuleFee(uint256,uint256)\":{\"notice\":\"Get the Module fee for verifying a batch on the specified destination chain.\"},\"requestBatchVerification(uint256,(uint256,uint256,bytes32))\":{\"notice\":\"Request the verification of a batch from the Interchain DataBase by the module. If the batch is not yet finalized, the verification on destination chain will be delayed until the finalization is done and batch root is saved on the source chain. Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`. Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain, with no guarantee of ordering.\"}},\"notice\":\"Every Module may opt a different method to confirm the verified entries on destination chain, therefore this is not a part of a common interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"IInterchainModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{"getModuleFee(uint256,uint256)":"4a114f72","requestBatchVerification(uint256,(uint256,uint256,bytes32))":"3fdcec74"}},"solidity/InterchainDB.sol:InterchainBatchLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7d25a07baf33c8c0c3c3b18779d4ded954e36c04768f89d179841475dea846b64736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7d25a07baf33c8c0c3c3b18779d4ded954e36c04768f89d179841475dea846b64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"1189:842:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1189:842:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"1189:842:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"InterchainBatchLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainDB.sol:InterchainDB":{"code":"0x608060405234801561001057600080fd5b50611545806100206000396000f3fe6080604052600436106100dd5760003560e01c806367c769af1161007f578063b955e9b911610059578063b955e9b91461029a578063d63020bb146102d3578063f338140e146102f3578063fc7686ec1461030857600080fd5b806367c769af1461025f57806384b1c8b814610272578063aa2f06ae1461028557600080fd5b80632ad8c706116100bb5780632ad8c706146101a65780634f84d040146101e45780635ac442821461020457806367b1f42e1461023157600080fd5b806305d0728c146100e25780631725fd301461010457806325a1641d14610179575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461100d565b610328565b005b34801561011057600080fd5b5061012461011f3660046110a8565b610489565b6040516101709190600060a082019050825182526020830151602083015267ffffffffffffffff6040840151166040830152606083015160608301526080830151608083015292915050565b60405180910390f35b34801561018557600080fd5b506101996101943660046110d4565b610532565b6040516101709190611110565b3480156101b257600080fd5b506101c66101c1366004611154565b61061e565b6040805192835267ffffffffffffffff909116602083015201610170565b3480156101f057600080fd5b506101996101ff3660046110a8565b610633565b34801561021057600080fd5b5061022461021f366004611154565b61065f565b604051610170919061116d565b34801561023d57600080fd5b5061025161024c3660046111fe565b6106e2565b604051908152602001610170565b6101c661026d3660046112c3565b6107bf565b6101026102803660046112c3565b61085f565b34801561029157600080fd5b506101c66108bc565b3480156102a657600080fd5b506102ba6102b5366004611154565b6108d1565b60405167ffffffffffffffff9091168152602001610170565b3480156102df57600080fd5b506101996102ee366004611154565b6108fa565b3480156102ff57600080fd5b50600054610251565b34801561031457600080fd5b506102516103233660046112fe565b61096f565b805146810361036a576040517ffc2dee9a0000000000000000000000000000000000000000000000000000000081524660048201526024015b60405180910390fd5b60006103758361098e565b336000908152600160208181526040808420858552825280842081518083019092528054808352930154918101919091529293509003610439576040805180820182524281528582018051602080840191825233600081815260018084528782208a8352845290879020955186559251949092019390935587518389015192518551928352938201529283015260608201527fbdb1c58ad0991a7df73dd7d1e0c63ba29dd69af7d09838990eef8127de1a548c9060800160405180910390a1610483565b83604001518160200151146104835760208101516040517f4f70133a000000000000000000000000000000000000000000000000000000008152610361913391879060040161134a565b50505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526104be83836109d1565b6105298383600086815481106104d6576104d661138f565b60009182526020822060029091020154815473ffffffffffffffffffffffffffffffffffffffff9091169190889081106105125761051261138f565b906000526020600020906002020160010154610a4b565b90505b92915050565b606061053d84610acd565b5067ffffffffffffffff831615158061056157508167ffffffffffffffff16600114155b156105b3576040517fedcdbfea0000000000000000000000000000000000000000000000000000000081526004810185905267ffffffffffffffff808516602483015283166044820152606401610361565b6040805160018082528183019092529060208083019080368337019050509050600084815481106105e6576105e661138f565b9060005260206000209060020201600101548160008151811061060b5761060b61138f565b6020026020010181815250509392505050565b60008061062a83610b11565b91509150915091565b606061063e83610acd565b5061064983836109d1565b5050604080516000815260208101909152919050565b604080516060810182526000808252602082018190529181019190915261068582610acd565b5061052c826000848154811061069d5761069d61138f565b90600052602060002090600202016001015460408051606080820183526000808352602080840182905292840152825190810183524681529081019390935282015290565b8251600090468103610722576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b821561073157600091506107b6565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260408120816107608861098e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061079a87610c15565b9050808260200151146107ae5760006107b1565b81515b935050505b50949350505050565b600080854681036107fe576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b61080786610b11565b90935091506000610846848860408051606080820183526000808352602080840182905292840152825190810183524681529081019390935282015290565b905061085488828888610c38565b505094509492505050565b8346810361089b576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b60006108a68561065f565b90506108b486828686610c38565b505050505050565b6000806108c860005490565b92600092509050565b6000806108dd83610dac565b90508083106108ed5760006108f0565b60015b60ff169392505050565b606061090582610acd565b506040805160018082528183019092529060208083019080368337019050509050600082815481106109395761093961138f565b9060005260206000209060020201600101548160008151811061095e5761095e61138f565b602002602001018181525050919050565b60006109858461097e60005490565b8585610dec565b95945050505050565b6000816000015182602001516040516020016109b4929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b60006109dc836108d1565b90508067ffffffffffffffff168267ffffffffffffffff1610610a46576040517f759b436e0000000000000000000000000000000000000000000000000000000081526004810184905267ffffffffffffffff808416602483015282166044820152606401610361565b505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040518060a001604052804681526020018681526020018567ffffffffffffffff168152602001610aba8573ffffffffffffffffffffffffffffffffffffffff1690565b815260200183905290505b949350505050565b600054808210610b0c576040517ffa1681ec00000000000000000000000000000000000000000000000000000000815260048101839052602401610361565b919050565b600080546040805180820182523380825260208083018781526001860187558680529251600286027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301929092558251468152918201849052818301526060810185905290519192917f8adbf0953083a65c138963c649cd1eabd31fa900ecd1cd5d6b5b530fbfa417719181900360800190a1915091565b6060808201516080830151604080516020810193909352820152600091016109b4565b600080610c4b8686602001518686610dec565b91509150803414610c91576040517ffb7d661000000000000000000000000000000000000000000000000000000000815234600482015260248101829052604401610361565b8260005b81811015610d5b57858582818110610caf57610caf61138f565b9050602002016020810190610cc491906113be565b73ffffffffffffffffffffffffffffffffffffffff16633fdcec74858381518110610cf157610cf161138f565b60200260200101518a8a6040518463ffffffff1660e01b8152600401610d189291906113d9565b6000604051808303818588803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050505080610d5490611437565b9050610c95565b507f9f201dd0d5465cd198596655528d58e40b6ee2715d5e8bdab49f7e1b1dde771787876020015188604001518888604051610d9b95949392919061146f565b60405180910390a150505050505050565b60005480821115610b0c576040517f77a0269c00000000000000000000000000000000000000000000000000000000815260048101839052602401610361565b6060600082808203610e2a576040517f98ca492a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff811115610e4357610e43610f8e565b604051908082528060200260200182016040528015610e6c578160200160208202803683370190505b50925060005b8181101561085457858582818110610e8c57610e8c61138f565b9050602002016020810190610ea191906113be565b6040517f4a114f72000000000000000000000000000000000000000000000000000000008152600481018a90526024810189905273ffffffffffffffffffffffffffffffffffffffff9190911690634a114f7290604401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3991906114e3565b848281518110610f4b57610f4b61138f565b602002602001018181525050838181518110610f6957610f6961138f565b602002602001015183610f7c91906114fc565b9250610f8781611437565b9050610e72565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611007577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60006060828403121561101f57600080fd5b6040516060810181811067ffffffffffffffff82111715611069577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b803567ffffffffffffffff81168114610b0c57600080fd5b600080604083850312156110bb57600080fd5b823591506110cb60208401611090565b90509250929050565b6000806000606084860312156110e957600080fd5b833592506110f960208501611090565b915061110760408501611090565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156111485783518352928401929184019160010161112c565b50909695505050505050565b60006020828403121561116657600080fd5b5035919050565b8151815260208083015190820152604080830151908201526060810161052c565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b0c57600080fd5b60008083601f8401126111c457600080fd5b50813567ffffffffffffffff8111156111dc57600080fd5b6020830191508360208260051b85010111156111f757600080fd5b9250929050565b60008060008084860360e081121561121557600080fd5b61121e8661118e565b945060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561125057600080fd5b50611259610fbd565b602086013581526040860135602082015261127660608701611090565b6040820152608086810135606083015260a087013590820152925060c085013567ffffffffffffffff8111156112ab57600080fd5b6112b7878288016111b2565b95989497509550505050565b600080600080606085870312156112d957600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156112ab57600080fd5b60008060006040848603121561131357600080fd5b83359250602084013567ffffffffffffffff81111561133157600080fd5b61133d868287016111b2565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff841681526020810183905260a08101610ac560408301848051825260208082015190830152604090810151910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156113d057600080fd5b6105298261118e565b8281526080810161140160208301848051825260208082015190830152604090810151910152565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361146857611468611408565b5060010190565b60006080820187835260208781850152866040850152608060608501528185835260a08501905086925060005b868110156114d55773ffffffffffffffffffffffffffffffffffffffff6114c28561118e565b168252928201929082019060010161149c565b509998505050505050505050565b6000602082840312156114f557600080fd5b5051919050565b8082018082111561052c5761052c61140856fea2646970667358221220af36925c8575fc79c819b1665e0cd696ce1a74870d30476a9377992297ebd4e664736f6c63430008140033","runtime-code":"0x6080604052600436106100dd5760003560e01c806367c769af1161007f578063b955e9b911610059578063b955e9b91461029a578063d63020bb146102d3578063f338140e146102f3578063fc7686ec1461030857600080fd5b806367c769af1461025f57806384b1c8b814610272578063aa2f06ae1461028557600080fd5b80632ad8c706116100bb5780632ad8c706146101a65780634f84d040146101e45780635ac442821461020457806367b1f42e1461023157600080fd5b806305d0728c146100e25780631725fd301461010457806325a1641d14610179575b600080fd5b3480156100ee57600080fd5b506101026100fd36600461100d565b610328565b005b34801561011057600080fd5b5061012461011f3660046110a8565b610489565b6040516101709190600060a082019050825182526020830151602083015267ffffffffffffffff6040840151166040830152606083015160608301526080830151608083015292915050565b60405180910390f35b34801561018557600080fd5b506101996101943660046110d4565b610532565b6040516101709190611110565b3480156101b257600080fd5b506101c66101c1366004611154565b61061e565b6040805192835267ffffffffffffffff909116602083015201610170565b3480156101f057600080fd5b506101996101ff3660046110a8565b610633565b34801561021057600080fd5b5061022461021f366004611154565b61065f565b604051610170919061116d565b34801561023d57600080fd5b5061025161024c3660046111fe565b6106e2565b604051908152602001610170565b6101c661026d3660046112c3565b6107bf565b6101026102803660046112c3565b61085f565b34801561029157600080fd5b506101c66108bc565b3480156102a657600080fd5b506102ba6102b5366004611154565b6108d1565b60405167ffffffffffffffff9091168152602001610170565b3480156102df57600080fd5b506101996102ee366004611154565b6108fa565b3480156102ff57600080fd5b50600054610251565b34801561031457600080fd5b506102516103233660046112fe565b61096f565b805146810361036a576040517ffc2dee9a0000000000000000000000000000000000000000000000000000000081524660048201526024015b60405180910390fd5b60006103758361098e565b336000908152600160208181526040808420858552825280842081518083019092528054808352930154918101919091529293509003610439576040805180820182524281528582018051602080840191825233600081815260018084528782208a8352845290879020955186559251949092019390935587518389015192518551928352938201529283015260608201527fbdb1c58ad0991a7df73dd7d1e0c63ba29dd69af7d09838990eef8127de1a548c9060800160405180910390a1610483565b83604001518160200151146104835760208101516040517f4f70133a000000000000000000000000000000000000000000000000000000008152610361913391879060040161134a565b50505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526104be83836109d1565b6105298383600086815481106104d6576104d661138f565b60009182526020822060029091020154815473ffffffffffffffffffffffffffffffffffffffff9091169190889081106105125761051261138f565b906000526020600020906002020160010154610a4b565b90505b92915050565b606061053d84610acd565b5067ffffffffffffffff831615158061056157508167ffffffffffffffff16600114155b156105b3576040517fedcdbfea0000000000000000000000000000000000000000000000000000000081526004810185905267ffffffffffffffff808516602483015283166044820152606401610361565b6040805160018082528183019092529060208083019080368337019050509050600084815481106105e6576105e661138f565b9060005260206000209060020201600101548160008151811061060b5761060b61138f565b6020026020010181815250509392505050565b60008061062a83610b11565b91509150915091565b606061063e83610acd565b5061064983836109d1565b5050604080516000815260208101909152919050565b604080516060810182526000808252602082018190529181019190915261068582610acd565b5061052c826000848154811061069d5761069d61138f565b90600052602060002090600202016001015460408051606080820183526000808352602080840182905292840152825190810183524681529081019390935282015290565b8251600090468103610722576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b821561073157600091506107b6565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260408120816107608861098e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061079a87610c15565b9050808260200151146107ae5760006107b1565b81515b935050505b50949350505050565b600080854681036107fe576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b61080786610b11565b90935091506000610846848860408051606080820183526000808352602080840182905292840152825190810183524681529081019390935282015290565b905061085488828888610c38565b505094509492505050565b8346810361089b576040517ffc2dee9a000000000000000000000000000000000000000000000000000000008152466004820152602401610361565b60006108a68561065f565b90506108b486828686610c38565b505050505050565b6000806108c860005490565b92600092509050565b6000806108dd83610dac565b90508083106108ed5760006108f0565b60015b60ff169392505050565b606061090582610acd565b506040805160018082528183019092529060208083019080368337019050509050600082815481106109395761093961138f565b9060005260206000209060020201600101548160008151811061095e5761095e61138f565b602002602001018181525050919050565b60006109858461097e60005490565b8585610dec565b95945050505050565b6000816000015182602001516040516020016109b4929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b60006109dc836108d1565b90508067ffffffffffffffff168267ffffffffffffffff1610610a46576040517f759b436e0000000000000000000000000000000000000000000000000000000081526004810184905267ffffffffffffffff808416602483015282166044820152606401610361565b505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040518060a001604052804681526020018681526020018567ffffffffffffffff168152602001610aba8573ffffffffffffffffffffffffffffffffffffffff1690565b815260200183905290505b949350505050565b600054808210610b0c576040517ffa1681ec00000000000000000000000000000000000000000000000000000000815260048101839052602401610361565b919050565b600080546040805180820182523380825260208083018781526001860187558680529251600286027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915592517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564909301929092558251468152918201849052818301526060810185905290519192917f8adbf0953083a65c138963c649cd1eabd31fa900ecd1cd5d6b5b530fbfa417719181900360800190a1915091565b6060808201516080830151604080516020810193909352820152600091016109b4565b600080610c4b8686602001518686610dec565b91509150803414610c91576040517ffb7d661000000000000000000000000000000000000000000000000000000000815234600482015260248101829052604401610361565b8260005b81811015610d5b57858582818110610caf57610caf61138f565b9050602002016020810190610cc491906113be565b73ffffffffffffffffffffffffffffffffffffffff16633fdcec74858381518110610cf157610cf161138f565b60200260200101518a8a6040518463ffffffff1660e01b8152600401610d189291906113d9565b6000604051808303818588803b158015610d3157600080fd5b505af1158015610d45573d6000803e3d6000fd5b505050505080610d5490611437565b9050610c95565b507f9f201dd0d5465cd198596655528d58e40b6ee2715d5e8bdab49f7e1b1dde771787876020015188604001518888604051610d9b95949392919061146f565b60405180910390a150505050505050565b60005480821115610b0c576040517f77a0269c00000000000000000000000000000000000000000000000000000000815260048101839052602401610361565b6060600082808203610e2a576040517f98ca492a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff811115610e4357610e43610f8e565b604051908082528060200260200182016040528015610e6c578160200160208202803683370190505b50925060005b8181101561085457858582818110610e8c57610e8c61138f565b9050602002016020810190610ea191906113be565b6040517f4a114f72000000000000000000000000000000000000000000000000000000008152600481018a90526024810189905273ffffffffffffffffffffffffffffffffffffffff9190911690634a114f7290604401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3991906114e3565b848281518110610f4b57610f4b61138f565b602002602001018181525050838181518110610f6957610f6961138f565b602002602001015183610f7c91906114fc565b9250610f8781611437565b9050610e72565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715611007577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60006060828403121561101f57600080fd5b6040516060810181811067ffffffffffffffff82111715611069577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b803567ffffffffffffffff81168114610b0c57600080fd5b600080604083850312156110bb57600080fd5b823591506110cb60208401611090565b90509250929050565b6000806000606084860312156110e957600080fd5b833592506110f960208501611090565b915061110760408501611090565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156111485783518352928401929184019160010161112c565b50909695505050505050565b60006020828403121561116657600080fd5b5035919050565b8151815260208083015190820152604080830151908201526060810161052c565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b0c57600080fd5b60008083601f8401126111c457600080fd5b50813567ffffffffffffffff8111156111dc57600080fd5b6020830191508360208260051b85010111156111f757600080fd5b9250929050565b60008060008084860360e081121561121557600080fd5b61121e8661118e565b945060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561125057600080fd5b50611259610fbd565b602086013581526040860135602082015261127660608701611090565b6040820152608086810135606083015260a087013590820152925060c085013567ffffffffffffffff8111156112ab57600080fd5b6112b7878288016111b2565b95989497509550505050565b600080600080606085870312156112d957600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156112ab57600080fd5b60008060006040848603121561131357600080fd5b83359250602084013567ffffffffffffffff81111561133157600080fd5b61133d868287016111b2565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff841681526020810183905260a08101610ac560408301848051825260208082015190830152604090810151910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156113d057600080fd5b6105298261118e565b8281526080810161140160208301848051825260208082015190830152604090810151910152565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361146857611468611408565b5060010190565b60006080820187835260208781850152866040850152608060608501528185835260a08501905086925060005b868110156114d55773ffffffffffffffffffffffffffffffffffffffff6114c28561118e565b168252928201929082019060010161149c565b509998505050505050505050565b6000602082840312156114f557600080fd5b5051919050565b8082018082111561052c5761052c61140856fea2646970667358221220af36925c8575fc79c819b1665e0cd696ce1a74870d30476a9377992297ebd4e664736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"16308:10971:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"16308:10971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18515:963;;;;;;;;;;-1:-1:-1;18515:963:0;;;;;:::i;:::-;;:::i;:::-;;23094:307;;;;;;;;;;-1:-1:-1;23094:307:0;;;;;:::i;:::-;;:::i;:::-;;;;;;1934:4:1;1976:3;1965:9;1961:19;1953:27;;2013:6;2007:13;1996:9;1989:32;2077:4;2069:6;2065:17;2059:24;2052:4;2041:9;2037:20;2030:54;2152:18;2144:4;2136:6;2132:17;2126:24;2122:49;2115:4;2104:9;2100:20;2093:79;2228:4;2220:6;2216:17;2210:24;2203:4;2192:9;2188:20;2181:54;2291:4;2283:6;2279:17;2273:24;2266:4;2255:9;2251:20;2244:54;1778:526;;;;;23094:307:0;;;;;;;;20171:493;;;;;;;;;;-1:-1:-1;20171:493:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;17044:137::-;;;;;;;;;;-1:-1:-1;17044:137:0;;;;;:::i;:::-;;:::i;:::-;;;;3632:25:1;;;3705:18;3693:31;;;3688:2;3673:18;;3666:59;3605:18;17044:137:0;3460:271:1;20704:340:0;;;;;;;;;;-1:-1:-1;20704:340:0;;;;;:::i;:::-;;:::i;22756:298::-;;;;;;;;;;-1:-1:-1;22756:298:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;21575:826::-;;;;;;;;;;-1:-1:-1;21575:826:0;;;;;:::i;:::-;;:::i;:::-;;;6219:25:1;;;6207:2;6192:18;21575:826:0;6073:177:1;17594:563:0;;;;;;:::i;:::-;;:::i;17221:333::-;;;;;;:::i;:::-;;:::i;21316:219::-;;;;;;;;;;;;;:::i;22441:275::-;;;;;;;;;;-1:-1:-1;22441:275:0;;;;;:::i;:::-;;:::i;:::-;;;7585:18:1;7573:31;;;7555:50;;7543:2;7528:18;22441:275:0;7411:200:1;19852:279:0;;;;;;;;;;-1:-1:-1;19852:279:0;;;;;:::i;:::-;;:::i;23441:91::-;;;;;;;;;;-1:-1:-1;23484:7:0;23510:15;23441:91;;21084:192;;;;;;;;;;-1:-1:-1;21084:192:0;;;;;:::i;:::-;;:::i;18515:963::-;18599:16;;16582:13;16571:24;;16567:102;;16618:40;;;;;16644:13;16618:40;;;6219:25:1;6192:18;;16618:40:0;;;;;;;;16567:102;18627:16:::1;18646:34;18674:5;18646:27;:34::i;:::-;18740:10;18690:32;18725:26:::0;;;:14:::1;:26;::::0;;;;;;;:36;;;;;;;;18690:71;;;;::::1;::::0;;;;;;;;;::::1;::::0;;;::::1;::::0;;;;18627:53;;-1:-1:-1;18843:29:0;;18839:633:::1;;18943:70;::::0;;;;::::1;::::0;;18968:15:::1;18943:70:::0;;18996:15;;::::1;::::0;;18943:70:::1;::::0;;::::1;::::0;;;18903:10:::1;-1:-1:-1::0;18888:26:0;;;:14:::1;:26:::0;;;;;;:36;;;;;;;;;:125;;;;;;;;;::::1;::::0;;;;19068:16;;19086:13;;::::1;::::0;19101:15;;19032:85;;8357:74:1;;;8447:18;;;8440:34;8490:18;;;8483:34;8548:2;8533:18;;8526:34;19032:85:0::1;::::0;8344:3:1;8329:19;19032:85:0::1;;;;;;;18839:633;;;19278:5;:15;;;19251:13;:23;;;:42;19247:164;;19365:23;::::0;::::1;::::0;19320:76:::1;::::0;::::1;::::0;;::::1;::::0;19353:10:::1;::::0;19390:5;;19320:76:::1;;;:::i;19247:164::-;18617:861;;18515:963:::0;;:::o;23094:307::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23203:39:0;23222:7;23231:10;23203:18;:39::i;:::-;23259:135;23311:7;23320:10;23332:8;23341:7;23332:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;:24;23358:17;;23332:24;;;;;:17;23367:7;;23358:17;;;;;;:::i;:::-;;;;;;;;;;;:26;;;23259:38;:135::i;:::-;23252:142;;23094:307;;;;;:::o;20171:493::-;20323:22;20425:30;20447:7;20425:21;:30::i;:::-;-1:-1:-1;20469:10:0;;;;;;:22;;;20483:3;:8;;20490:1;20483:8;;20469:22;20465:112;;;20514:52;;;;;;;;9421:25:1;;;9465:18;9519:15;;;9499:18;;;9492:43;9571:15;;9551:18;;;9544:43;9394:18;;20514:52:0;9223:370:1;20465:112:0;20594:16;;;20608:1;20594:16;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20594:16:0;20586:24;;20631:8;20640:7;20631:17;;;;;;;;:::i;:::-;;;;;;;;;;;:26;;;20620:5;20626:1;20620:8;;;;;;;;:::i;:::-;;;;;;:37;;;;;20171:493;;;;;:::o;17044:137::-;17100:15;17117:17;17153:21;17165:8;17153:11;:21::i;:::-;17146:28;;;;17044:137;;;:::o;20704:340::-;20786:22;20925:30;20947:7;20925:21;:30::i;:::-;;20965:39;20984:7;20993:10;20965:18;:39::i;:::-;-1:-1:-1;;21021:16:0;;;21035:1;21021:16;;;;;;;;;21014:23;-1:-1:-1;20704:340:0:o;22756:298::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;22846:30:0;22868:7;22846:21;:30::i;:::-;;22972:75;23011:7;23020:8;23029:7;23020:17;;;;;;;;:::i;:::-;;;;;;;;;;;:26;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;1706:84:0;;;;;;;1735:13;1706:84;;;;;;;;;;;;;1521:276;21575:826;21763:16;;21798:24;;16582:13;16571:24;;16567:102;;16618:40;;;;;16644:13;16618:40;;;6219:25:1;6192:18;;16618:40:0;6073:177:1;16567:102:0;21947:17;;21943:125:::1;;22056:1;22049:8;;;;21943:125;22110:25;::::0;::::1;22077:30;22110:25:::0;;;:14:::1;:25;::::0;;;;22077:30;22136:34:::1;22164:5:::0;22136:27:::1;:34::i;:::-;22110:61;;;;;;;;;;;22077:94;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;22181:18;22202:36;22232:5;22202:29;:36::i;:::-;22181:57;;22355:10;22330:11;:21;;;:35;:64;;22393:1;22330:64;;;22368:22:::0;;22330:64:::1;22323:71;;;;16678:1;21575:826:::0;;;;;;;:::o;17594:563::-;17817:15;17834:17;17788:10;16582:13;16571:7;:24;16567:102;;16618:40;;;;;16644:13;16618:40;;;6219:25:1;6192:18;;16618:40:0;6073:177:1;16567:102:0;17891:21:::1;17903:8;17891:11;:21::i;:::-;17867:45:::0;;-1:-1:-1;17867:45:0;-1:-1:-1;18001:28:0::1;18032:57;17867:45:::0;18080:8;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;1706:84:0;;;;;;;1735:13;1706:84;;;;;;;;;;;;;1521:276;18032:57:::1;18001:88;;18099:51;18120:10;18132:5;18139:10;;18099:20;:51::i;:::-;17857:300;17594:563:::0;;;;;;;;:::o;17221:333::-;17412:10;16582:13;16571:7;:24;16567:102;;16618:40;;;;;16644:13;16618:40;;;6219:25:1;6192:18;;16618:40:0;6073:177:1;16567:102:0;17438:28:::1;17469:17;17478:7;17469:8;:17::i;:::-;17438:48;;17496:51;17517:10;17529:5;17536:10;;17496:20;:51::i;:::-;17428:126;17221:333:::0;;;;;:::o;21316:219::-;21368:15;21385:17;21492:12;23484:7;23510:15;;23441:91;21492:12;21482:22;21527:1;;-1:-1:-1;21316:219:0;-1:-1:-1;21316:219:0:o;22441:275::-;22501:6;22612:20;22635:27;22654:7;22635:18;:27::i;:::-;22612:50;;22689:12;22679:7;:22;:30;;22708:1;22679:30;;;22704:1;22679:30;22672:37;;;22441:275;-1:-1:-1;;;22441:275:0:o;19852:279::-;19915:22;20013:30;20035:7;20013:21;:30::i;:::-;-1:-1:-1;20061:16:0;;;20075:1;20061:16;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20061:16:0;20053:24;;20098:8;20107:7;20098:17;;;;;;;;:::i;:::-;;;;;;;;;;;:26;;;20087:5;20093:1;20087:8;;;;;;;;:::i;:::-;;;;;;:37;;;;;19852:279;;;:::o;21084:192::-;21184:11;21217:52;21232:10;21244:12;23484:7;23510:15;;23441:91;21244:12;21258:10;;21217:14;:52::i;:::-;21207:62;21084:192;-1:-1:-1;;;;;21084:192:0:o;1871:158::-;1942:7;1989:5;:16;;;2007:5;:13;;;1978:43;;;;;;;;9772:25:1;;;9828:2;9813:18;;9806:34;9760:2;9745:18;;9598:248;1978:43:0;;;;;;;;;;;;;1968:54;;;;;;1961:61;;1871:158;;;:::o;26326:327::-;26470:16;26489:21;26502:7;26489:12;:21::i;:::-;26470:40;;26538:9;26524:23;;:10;:23;;;26520:127;;26570:66;;;;;;;;9421:25:1;;;9465:18;9519:15;;;9499:18;;;9492:43;9571:15;;9551:18;;;9544:43;9394:18;;26570:66:0;9223:370:1;26520:127:0;26404:249;26326:327;;:::o;3535:465::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3770:223:0;;;;;;;;3812:13;3770:223;;;;3848:7;3770:223;;;;3881:10;3770:223;;;;;;3916:34;3943:6;2187:22;;;2090:127;3916:34;3770:223;;;;;;;3763:230;-1:-1:-1;3535:465:0;;;;;;;:::o;25972:247::-;26043:20;23510:15;26116:23;;;26112:101;;26162:40;;;;;;;;6219:25:1;;;6192:18;;26162:40:0;6073:177:1;26112:101:0;25972:247;;;:::o;23919:327::-;23976:15;24032;;24095:32;;;;;;;;24106:10;24095:32;;;;;;;;;;24081:47;;;;;;;;;;;;;;;;;;24095:32;24081:47;;;;;;;;;;;;;;;;;;;;;;;;24143:96;;24166:13;10082:25:1;;10123:18;;;10116:34;;;10166:18;;;10159:34;10224:2;10209:18;;10202:34;;;24143:96:0;;24032:15;;23976;24143:96;;;;;10069:3:1;24143:96:0;;;23919:327;;;:::o;4338:160::-;4458:15;;;;;4475:14;;;;4447:43;;;;;;9772:25:1;;;;9813:18;;9806:34;4411:7:0;;9745:18:1;4447:43:0;9598:248:1;24449:762:0;24622:21;24645:16;24665:53;24680:10;24692:5;:13;;;24707:10;;24665:14;:53::i;:::-;24621:97;;;;24802:8;24789:9;:21;24785:112;;24833:53;;;;;24866:9;24833:53;;;9772:25:1;9813:18;;;9806:34;;;9745:18;;24833:53:0;9598:248:1;24785:112:0;24920:10;24906:11;24947:151;24971:3;24967:1;:7;24947:151;;;25013:10;;25024:1;25013:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;24995:57;;;25060:4;25065:1;25060:7;;;;;;;;:::i;:::-;;;;;;;25069:10;25081:5;24995:92;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24976:3;;;;:::i;:::-;;;24947:151;;;;25112:92;25149:10;25161:5;:13;;;25176:5;:15;;;25193:10;;25112:92;;;;;;;;;;:::i;:::-;;;;;;;;24611:600;;;24449:762;;;;:::o;25625:243::-;25693:20;23510:15;25766:22;;;25762:100;;;25811:40;;;;;;;;6219:25:1;;;6192:18;;25811:40:0;6073:177:1;26714:563:0;26883:21;26906:16;26952:10;26983:8;;;26979:80;;27014:34;;;;;;;;;;;;;;26979:80;27089:3;27075:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27075:18:0;;27068:25;;27108:9;27103:168;27127:3;27123:1;:7;27103:168;;;27179:10;;27190:1;27179:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;27161:66;;;;;;;;9772:25:1;;;9813:18;;;9806:34;;;27161:45:0;;;;;;;;9745:18:1;;27161:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27151:4;27156:1;27151:7;;;;;;;;:::i;:::-;;;;;;:76;;;;;27253:4;27258:1;27253:7;;;;;;;;:::i;:::-;;;;;;;27241:19;;;;;:::i;:::-;;-1:-1:-1;27132:3:0;;;:::i;:::-;;;27103:168;;14:184:1;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:402;270:2;264:9;312:4;300:17;;347:18;332:34;;368:22;;;329:62;326:242;;;424:77;421:1;414:88;525:4;522:1;515:15;553:4;550:1;543:15;326:242;584:2;577:22;203:402;:::o;610:730::-;700:6;753:2;741:9;732:7;728:23;724:32;721:52;;;769:1;766;759:12;721:52;802:2;796:9;844:2;836:6;832:15;913:6;901:10;898:22;877:18;865:10;862:34;859:62;856:242;;;954:77;951:1;944:88;1055:4;1052:1;1045:15;1083:4;1080:1;1073:15;856:242;1118:10;1114:2;1107:22;;1166:9;1153:23;1145:6;1138:39;1238:2;1227:9;1223:18;1210:32;1205:2;1197:6;1193:15;1186:57;1304:2;1293:9;1289:18;1276:32;1271:2;1263:6;1259:15;1252:57;1328:6;1318:16;;;610:730;;;;:::o;1345:171::-;1412:20;;1472:18;1461:30;;1451:41;;1441:69;;1506:1;1503;1496:12;1521:252;1588:6;1596;1649:2;1637:9;1628:7;1624:23;1620:32;1617:52;;;1665:1;1662;1655:12;1617:52;1701:9;1688:23;1678:33;;1730:37;1763:2;1752:9;1748:18;1730:37;:::i;:::-;1720:47;;1521:252;;;;;:::o;2309:324::-;2384:6;2392;2400;2453:2;2441:9;2432:7;2428:23;2424:32;2421:52;;;2469:1;2466;2459:12;2421:52;2505:9;2492:23;2482:33;;2534:37;2567:2;2556:9;2552:18;2534:37;:::i;:::-;2524:47;;2590:37;2623:2;2612:9;2608:18;2590:37;:::i;:::-;2580:47;;2309:324;;;;;:::o;2638:632::-;2809:2;2861:21;;;2931:13;;2834:18;;;2953:22;;;2780:4;;2809:2;3032:15;;;;3006:2;2991:18;;;2780:4;3075:169;3089:6;3086:1;3083:13;3075:169;;;3150:13;;3138:26;;3219:15;;;;3184:12;;;;3111:1;3104:9;3075:169;;;-1:-1:-1;3261:3:1;;2638:632;-1:-1:-1;;;;;;2638:632:1:o;3275:180::-;3334:6;3387:2;3375:9;3366:7;3362:23;3358:32;3355:52;;;3403:1;3400;3393:12;3355:52;-1:-1:-1;3426:23:1;;3275:180;-1:-1:-1;3275:180:1:o;4138:266::-;4002:12;;3990:25;;4064:4;4053:16;;;4047:23;4031:14;;;4024:47;4120:4;4109:16;;;4103:23;4087:14;;;4080:47;4334:2;4319:18;;4346:52;3921:212;4409:196;4477:20;;4537:42;4526:54;;4516:65;;4506:93;;4595:1;4592;4585:12;4610:367;4673:8;4683:6;4737:3;4730:4;4722:6;4718:17;4714:27;4704:55;;4755:1;4752;4745:12;4704:55;-1:-1:-1;4778:20:1;;4821:18;4810:30;;4807:50;;;4853:1;4850;4843:12;4807:50;4890:4;4882:6;4878:17;4866:29;;4950:3;4943:4;4933:6;4930:1;4926:14;4918:6;4914:27;4910:38;4907:47;4904:67;;;4967:1;4964;4957:12;4904:67;4610:367;;;;;:::o;4982:1086::-;5118:6;5126;5134;5142;5186:9;5177:7;5173:23;5216:3;5212:2;5208:12;5205:32;;;5233:1;5230;5223:12;5205:32;5256:29;5275:9;5256:29;:::i;:::-;5246:39;;5378:4;5309:66;5305:2;5301:75;5297:86;5294:106;;;5396:1;5393;5386:12;5294:106;;5422:17;;:::i;:::-;5490:2;5479:9;5475:18;5462:32;5455:5;5448:47;5555:2;5544:9;5540:18;5527:32;5522:2;5515:5;5511:14;5504:56;5592:37;5625:2;5614:9;5610:18;5592:37;:::i;:::-;5587:2;5576:14;;5569:61;5690:3;5675:19;;;5662:33;5657:2;5646:14;;5639:57;5757:4;5742:20;;5729:34;5712:15;;;5705:59;5580:5;-1:-1:-1;5839:3:1;5824:19;;5811:33;5867:18;5856:30;;5853:50;;;5899:1;5896;5889:12;5853:50;5938:70;6000:7;5991:6;5980:9;5976:22;5938:70;:::i;:::-;4982:1086;;;;-1:-1:-1;6027:8:1;-1:-1:-1;;;;4982:1086:1:o;6255:573::-;6359:6;6367;6375;6383;6436:2;6424:9;6415:7;6411:23;6407:32;6404:52;;;6452:1;6449;6442:12;6404:52;6488:9;6475:23;6465:33;;6545:2;6534:9;6530:18;6517:32;6507:42;;6600:2;6589:9;6585:18;6572:32;6627:18;6619:6;6616:30;6613:50;;;6659:1;6656;6649:12;7616:505;7711:6;7719;7727;7780:2;7768:9;7759:7;7755:23;7751:32;7748:52;;;7796:1;7793;7786:12;7748:52;7832:9;7819:23;7809:33;;7893:2;7882:9;7878:18;7865:32;7920:18;7912:6;7909:30;7906:50;;;7952:1;7949;7942:12;7906:50;7991:70;8053:7;8044:6;8033:9;8029:22;7991:70;:::i;:::-;7616:505;;8080:8;;-1:-1:-1;7965:96:1;;-1:-1:-1;;;;7616:505:1:o;8571:458::-;8866:42;8854:55;;8836:74;;8941:2;8926:18;;8919:34;;;8823:3;8808:19;;8962:61;9019:2;9004:18;;8996:6;4002:12;;3990:25;;4064:4;4053:16;;;4047:23;4031:14;;;4024:47;4120:4;4109:16;;;4103:23;4087:14;;4080:47;3921:212;9034:184;9086:77;9083:1;9076:88;9183:4;9180:1;9173:15;9207:4;9204:1;9197:15;10500:186;10559:6;10612:2;10600:9;10591:7;10587:23;10583:32;10580:52;;;10628:1;10625;10618:12;10580:52;10651:29;10670:9;10651:29;:::i;10691:338::-;10928:25;;;10915:3;10900:19;;10962:61;11019:2;11004:18;;10996:6;4002:12;;3990:25;;4064:4;4053:16;;;4047:23;4031:14;;;4024:47;4120:4;4109:16;;;4103:23;4087:14;;4080:47;3921:212;10962:61;10691:338;;;;;:::o;11034:184::-;11086:77;11083:1;11076:88;11183:4;11180:1;11173:15;11207:4;11204:1;11197:15;11223:195;11262:3;11293:66;11286:5;11283:77;11280:103;;11363:18;;:::i;:::-;-1:-1:-1;11410:1:1;11399:13;;11223:195::o;11423:875::-;11659:4;11707:3;11696:9;11692:19;11738:6;11727:9;11720:25;11764:2;11802:6;11797:2;11786:9;11782:18;11775:34;11845:6;11840:2;11829:9;11825:18;11818:34;11888:3;11883:2;11872:9;11868:18;11861:31;11912:6;11942;11934;11927:22;11980:3;11969:9;11965:19;11958:26;;12007:6;11993:20;;12031:1;12041:231;12055:6;12052:1;12049:13;12041:231;;;12148:42;12120:26;12139:6;12120:26;:::i;:::-;12116:75;12104:88;;12247:15;;;;12212:12;;;;12077:1;12070:9;12041:231;;;-1:-1:-1;12289:3:1;11423:875;-1:-1:-1;;;;;;;;;11423:875:1:o;12303:184::-;12373:6;12426:2;12414:9;12405:7;12401:23;12397:32;12394:52;;;12442:1;12439;12432:12;12394:52;-1:-1:-1;12465:16:1;;12303:184;-1:-1:-1;12303:184:1:o;12492:125::-;12557:9;;;12578:10;;;12575:36;;;12591:18;;:::i","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"InterchainDB__BatchNotFinalized","type":"error"},{"inputs":[{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes32","name":"existingBatchRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"newBatch","type":"tuple"}],"name":"InterchainDB__ConflictingBatches","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"uint64","name":"batchSize","type":"uint64"}],"name":"InterchainDB__EntryIndexOutOfRange","type":"error"},{"inputs":[{"internalType":"uint256","name":"actualFee","type":"uint256"},{"internalType":"uint256","name":"expectedFee","type":"uint256"}],"name":"InterchainDB__IncorrectFeeAmount","type":"error"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"InterchainDB__InvalidEntryRange","type":"error"},{"inputs":[],"name":"InterchainDB__NoModulesSpecified","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"InterchainDB__SameChainId","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"indexed":false,"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"InterchainBatchVerificationRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"module","type":"address"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"name":"InterchainBatchVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"InterchainEntryWritten","type":"event"},{"inputs":[{"internalType":"address","name":"dstModule","type":"address"},{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"entry","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"checkVerification","outputs":[{"internalType":"uint256","name":"moduleVerifiedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatch","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"start","type":"uint64"},{"internalType":"uint64","name":"end","type":"uint64"}],"name":"getBatchLeafsPaginated","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"}],"name":"getBatchSize","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDBNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntry","outputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"},{"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"internalType":"struct InterchainEntry","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"name":"getEntryProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"getInterchainFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNextEntryIndex","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"requestBatchVerification","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"srcChainId","type":"uint256"},{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"internalType":"struct InterchainBatch","name":"batch","type":"tuple"}],"name":"verifyRemoteBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"writeEntry","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dstChainId","type":"uint256"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"},{"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"writeEntryWithVerification","outputs":[{"internalType":"uint256","name":"dbNonce","type":"uint256"},{"internalType":"uint64","name":"entryIndex","type":"uint64"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"notice":"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry."},"getBatch(uint256)":{"notice":"Get the finalized Interchain Batch with the given nonce."},"getBatchLeafs(uint256)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together)."},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"notice":"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error."},"getBatchSize(uint256)":{"notice":"Returns the size of the finalized batch with the given nonce."},"getDBNonce()":{"notice":"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch."},"getEntry(uint256,uint64)":{"notice":"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry."},"getEntryProof(uint256,uint64)":{"notice":"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce."},"getInterchainFee(uint256,address[])":{"notice":"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules."},"getNextEntryIndex()":{"notice":"Get the index of the next entry to be written to the database."},"requestBatchVerification(uint256,uint256,address[])":{"notice":"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch."},"verifyRemoteBatch((uint256,uint256,bytes32))":{"notice":"Allows the Interchain Module to verify the batch coming from the remote chain."},"writeEntry(bytes32)":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain."},"writeEntryWithVerification(uint256,bytes32,address[])":{"notice":"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details."}},"version":1},"developerDoc":{"kind":"dev","methods":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":{"params":{"dstModule":"The destination chain addresses of the Interchain Modules to use for verification","entry":"The Interchain Entry to read"},"returns":{"moduleVerifiedAt":"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry."}},"getBatch(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafs(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getBatchLeafsPaginated(uint256,uint64,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.","params":{"dbNonce":"The database nonce of the finalized batch","end":"The end index of the paginated leafs, exclusive","start":"The start index of the paginated leafs, inclusive"}},"getBatchSize(uint256)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized.","params":{"dbNonce":"The database nonce of the finalized batch"}},"getEntry(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the existing batch","entryIndex":"The index of the written entry within the batch"}},"getEntryProof(uint256,uint64)":{"details":"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.","params":{"dbNonce":"The database nonce of the finalized batch","entryIndex":"The index of the written entry within the batch"},"returns":{"proof":"      The Merkle proof of inclusion for the entry"}},"getInterchainFee(uint256,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"getNextEntryIndex()":{"returns":{"dbNonce":"     The database nonce of the batch including the next entry","entryIndex":"  The index of the next entry within that batch"}},"requestBatchVerification(uint256,uint256,address[])":{"details":"Will revert if the batch with the given nonce does not exist.","params":{"dbNonce":"The database nonce of the existing batch","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"}},"verifyRemoteBatch((uint256,uint256,bytes32))":{"params":{"batch":"The Interchain Batch to confirm"}},"writeEntry(bytes32)":{"params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}},"writeEntryWithVerification(uint256,bytes32,address[])":{"details":"Will revert if the empty array of modules is provided.","params":{"dataHash":"The hash of the data to be written to the Interchain DataBase as a new entry","dstChainId":"The chain id of the destination chain","srcModules":"The source chain addresses of the Interchain Modules to use for verification"},"returns":{"dbNonce":"    The database nonce of the batch containing the written entry","entryIndex":" The index of the written entry within the batch"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__BatchNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"existingBatchRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"newBatch\",\"type\":\"tuple\"}],\"name\":\"InterchainDB__ConflictingBatches\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"batchSize\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__EntryIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedFee\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__IncorrectFeeAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"InterchainDB__InvalidEntryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterchainDB__NoModulesSpecified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"InterchainDB__SameChainId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"InterchainBatchVerificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"name\":\"InterchainBatchVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"InterchainEntryWritten\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dstModule\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"entry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"checkVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleVerifiedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"getBatchLeafsPaginated\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"}],\"name\":\"getBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDBNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"name\":\"getEntryProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"getInterchainFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEntryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"requestBatchVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct InterchainBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"verifyRemoteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"writeEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"writeEntryWithVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"entryIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"params\":{\"dstModule\":\"The destination chain addresses of the Interchain Modules to use for verification\",\"entry\":\"The Interchain Entry to read\"},\"returns\":{\"moduleVerifiedAt\":\"  The block timestamp at which the entry was verified by the module,                             or ZERO if the module has not verified the entry.\"}},\"getBatch(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafs(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the provided range is invalid.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"end\":\"The end index of the paginated leafs, exclusive\",\"start\":\"The start index of the paginated leafs, inclusive\"}},\"getBatchSize(uint256)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\"}},\"getEntry(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"entryIndex\":\"The index of the written entry within the batch\"}},\"getEntryProof(uint256,uint64)\":{\"details\":\"Will revert if the batch with the given nonce does not exist, or is not finalized. Will revert if the entry with the given index does not exist within the batch.\",\"params\":{\"dbNonce\":\"The database nonce of the finalized batch\",\"entryIndex\":\"The index of the written entry within the batch\"},\"returns\":{\"proof\":\"      The Merkle proof of inclusion for the entry\"}},\"getInterchainFee(uint256,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"getNextEntryIndex()\":{\"returns\":{\"dbNonce\":\"     The database nonce of the batch including the next entry\",\"entryIndex\":\"  The index of the next entry within that batch\"}},\"requestBatchVerification(uint256,uint256,address[])\":{\"details\":\"Will revert if the batch with the given nonce does not exist.\",\"params\":{\"dbNonce\":\"The database nonce of the existing batch\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"}},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"params\":{\"batch\":\"The Interchain Batch to confirm\"}},\"writeEntry(bytes32)\":{\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"details\":\"Will revert if the empty array of modules is provided.\",\"params\":{\"dataHash\":\"The hash of the data to be written to the Interchain DataBase as a new entry\",\"dstChainId\":\"The chain id of the destination chain\",\"srcModules\":\"The source chain addresses of the Interchain Modules to use for verification\"},\"returns\":{\"dbNonce\":\"    The database nonce of the batch containing the written entry\",\"entryIndex\":\" The index of the written entry within the batch\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])\":{\"notice\":\"Read the data written on specific source chain by a specific writer, and verify it on the destination chain using the provided Interchain Module. Note: returned zero value indicates that the module has not verified the entry.\"},\"getBatch(uint256)\":{\"notice\":\"Get the finalized Interchain Batch with the given nonce.\"},\"getBatchLeafs(uint256)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce. Note: the leafs are ordered by the index of the written entry in the current batch, and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\"},\"getBatchLeafsPaginated(uint256,uint64,uint64)\":{\"notice\":\"Returns the list of leafs of the finalized batch with the given nonce, paginated by the given start and end indexes. The end index is exclusive. Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs` would result in a gas limit exceeded error.\"},\"getBatchSize(uint256)\":{\"notice\":\"Returns the size of the finalized batch with the given nonce.\"},\"getDBNonce()\":{\"notice\":\"Get the nonce of the database, which is incremented every time a new batch is finalized. This is the nonce of the current non-finalized batch.\"},\"getEntry(uint256,uint64)\":{\"notice\":\"Get the Interchain Entry written on the local chain with the given batch nonce and entry index. Note: the batch does not have to be finalized to fetch the local entry.\"},\"getEntryProof(uint256,uint64)\":{\"notice\":\"Get the Merkle proof of inclusion for the entry with the given index in the finalized batch with the given nonce.\"},\"getInterchainFee(uint256,address[])\":{\"notice\":\"Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain using the provided Interchain Modules.\"},\"getNextEntryIndex()\":{\"notice\":\"Get the index of the next entry to be written to the database.\"},\"requestBatchVerification(uint256,uint256,address[])\":{\"notice\":\"Request the given Interchain Modules to verify an existing batch. If the batch is not finalized, the module will verify it after finalization. For the finalized batch the batch root is already available, and the module can verify it immediately. Note: every module has a separate fee paid in the native gas token of the source chain, and `msg.value` must be equal to the sum of all fees. Note: this method is permissionless, and anyone can request verification for any batch.\"},\"verifyRemoteBatch((uint256,uint256,bytes32))\":{\"notice\":\"Allows the Interchain Module to verify the batch coming from the remote chain.\"},\"writeEntry(bytes32)\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Note: there are no guarantees that this entry will be available for reading on any of the remote chains. Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\"},\"writeEntryWithVerification(uint256,bytes32,address[])\":{\"notice\":\"Write data to the Interchain DataBase as a new entry in the current batch. Then request the Interchain Modules to verify the batch containing the written entry on the destination chain. See `writeEntry` and `requestBatchVerification` for more details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"InterchainDB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{"checkVerification(address,(uint256,uint256,uint64,bytes32,bytes32),bytes32[])":"67b1f42e","getBatch(uint256)":"5ac44282","getBatchLeafs(uint256)":"d63020bb","getBatchLeafsPaginated(uint256,uint64,uint64)":"25a1641d","getBatchSize(uint256)":"b955e9b9","getDBNonce()":"f338140e","getEntry(uint256,uint64)":"1725fd30","getEntryProof(uint256,uint64)":"4f84d040","getInterchainFee(uint256,address[])":"fc7686ec","getNextEntryIndex()":"aa2f06ae","requestBatchVerification(uint256,uint256,address[])":"84b1c8b8","verifyRemoteBatch((uint256,uint256,bytes32))":"05d0728c","writeEntry(bytes32)":"2ad8c706","writeEntryWithVerification(uint256,bytes32,address[])":"67c769af"}},"solidity/InterchainDB.sol:InterchainDBEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"dstChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"indexed":false,"internalType":"address[]","name":"srcModules","type":"address[]"}],"name":"InterchainBatchVerificationRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"module","type":"address"},{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"batchRoot","type":"bytes32"}],"name":"InterchainBatchVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"srcChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dbNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"srcWriter","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"InterchainEntryWritten","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"srcModules\",\"type\":\"address[]\"}],\"name\":\"InterchainBatchVerificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"}],\"name\":\"InterchainBatchVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcWriter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"InterchainEntryWritten\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"InterchainDBEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainDB.sol:InterchainEntryLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f692538a3f5791b02d4dc0a8e0097117f69d879bd1c9949f343512099774f93164736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f692538a3f5791b02d4dc0a8e0097117f69d879bd1c9949f343512099774f93164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"3120:1633:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;3120:1633:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"3120:1633:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"InterchainEntryLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{}},"solidity/InterchainDB.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200a4b4da1519993c7eed413a97111e0fa0b988176f76d9ff1747169906897b0e364736f6c63430008140033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200a4b4da1519993c7eed413a97111e0fa0b988176f76d9ff1747169906897b0e364736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity =0.8.20 ^0.8.0;\n\n// contracts/events/InterchainDBEvents.sol\n\nabstract contract InterchainDBEvents {\n    // TODO: figure out indexing\n    event InterchainEntryWritten(uint256 srcChainId, uint256 dbNonce, bytes32 srcWriter, bytes32 dataHash);\n\n    event InterchainBatchVerified(address module, uint256 srcChainId, uint256 dbNonce, bytes32 batchRoot);\n\n    event InterchainBatchVerificationRequested(\n        uint256 dstChainId, uint256 dbNonce, bytes32 batchRoot, address[] srcModules\n    );\n}\n\n// contracts/libs/InterchainBatch.sol\n\n/// @notice Struct representing a batch of entries in the Interchain DataBase.\n/// Batched entries are put together in a Merkle tree, which root is saved.\n/// Batch has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce\n/// - value: batchRoot\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch\n/// @param batchRoot    The root of the Merkle tree containing the batched entries\nstruct InterchainBatch {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    bytes32 batchRoot;\n}\n\nlibrary InterchainBatchLib {\n    /// @notice Constructs an InterchainBatch struct to be saved on the local chain.\n    /// @param dbNonce      The database nonce of the batch\n    /// @param batchRoot    The root of the Merkle tree containing the batched entries\n    /// @return batch       The constructed InterchainBatch struct\n    function constructLocalBatch(\n        uint256 dbNonce,\n        bytes32 batchRoot\n    )\n        internal\n        view\n        returns (InterchainBatch memory batch)\n    {\n        return InterchainBatch({srcChainId: block.chainid, dbNonce: dbNonce, batchRoot: batchRoot});\n    }\n\n    /// @notice Returns the globally unique identifier of the batch\n    function batchKey(InterchainBatch memory batch) internal pure returns (bytes32) {\n        return keccak256(abi.encode(batch.srcChainId, batch.dbNonce));\n    }\n}\n\n// contracts/libs/TypeCasts.sol\n\nlibrary TypeCasts {\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    function bytes32ToAddress(bytes32 b) internal pure returns (address) {\n        return address(uint160(uint256(b)));\n    }\n}\n\n// contracts/libs/InterchainEntry.sol\n\n/// @notice Struct representing an entry in the Interchain DataBase.\n/// Entry has a globally unique identifier (key) and a value.\n/// - key: srcChainId + dbNonce + entryIndex\n/// - value: srcWriter + dataHash\n/// @param srcChainId   The chain id of the source chain\n/// @param dbNonce      The database nonce of the batch containing the entry\n/// @param entryIndex   The index of the entry in the batch\n/// @param srcWriter    The address of the writer on the source chain\n/// @param dataHash     The hash of the data written on the source chain\nstruct InterchainEntry {\n    // TODO: can we use uint64 for chain id?\n    uint256 srcChainId;\n    uint256 dbNonce;\n    uint64 entryIndex;\n    bytes32 srcWriter;\n    bytes32 dataHash;\n}\n\nlibrary InterchainEntryLib {\n    /// @notice Constructs an InterchainEntry struct to be written on the local chain\n    /// @param dbNonce      The database nonce of the entry on the source chain\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    /// @return entry       The constructed InterchainEntry struct\n    function constructLocalEntry(\n        uint256 dbNonce,\n        uint64 entryIndex,\n        address writer,\n        bytes32 dataHash\n    )\n        internal\n        view\n        returns (InterchainEntry memory entry)\n    {\n        return InterchainEntry({\n            srcChainId: block.chainid,\n            dbNonce: dbNonce,\n            entryIndex: entryIndex,\n            srcWriter: TypeCasts.addressToBytes32(writer),\n            dataHash: dataHash\n        });\n    }\n\n    /// @notice Returns the globally unique identifier of the entry\n    function entryKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce, entry.entryIndex));\n    }\n\n    /// @notice Returns the value of the entry: writer + dataHash hashed together\n    function entryValue(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcWriter, entry.dataHash));\n    }\n\n    /// @notice Returns the globally unique identifier of the batch containing the entry\n    function batchKey(InterchainEntry memory entry) internal pure returns (bytes32) {\n        return keccak256(abi.encode(entry.srcChainId, entry.dbNonce));\n    }\n}\n\n// contracts/interfaces/IInterchainDB.sol\n\ninterface IInterchainDB {\n    /// @notice Struct representing an entry from the local Interchain DataBase.\n    /// @param writer       The address of the writer on the local chain\n    /// @param dataHash     The hash of the data written on the local chain\n    struct LocalEntry {\n        address writer;\n        bytes32 dataHash;\n    }\n\n    /// @notice Struct representing a batch of entries from the remote Interchain DataBase,\n    /// verified by the Interchain Module.\n    /// @param verifiedAt   The block timestamp at which the entry was verified by the module\n    /// @param batchRoot    The Merkle root of the batch\n    struct RemoteBatch {\n        uint256 verifiedAt;\n        bytes32 batchRoot;\n    }\n\n    error InterchainDB__BatchDoesNotExist(uint256 dbNonce);\n    error InterchainDB__BatchNotFinalized(uint256 dbNonce);\n    error InterchainDB__ConflictingBatches(address module, bytes32 existingBatchRoot, InterchainBatch newBatch);\n    error InterchainDB__EntryIndexOutOfRange(uint256 dbNonce, uint64 entryIndex, uint64 batchSize);\n    error InterchainDB__IncorrectFeeAmount(uint256 actualFee, uint256 expectedFee);\n    error InterchainDB__InvalidEntryRange(uint256 dbNonce, uint64 start, uint64 end);\n    error InterchainDB__NoModulesSpecified();\n    error InterchainDB__SameChainId(uint256 chainId);\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Note: there are no guarantees that this entry will be available for reading on any of the remote chains.\n    /// Use `requestBatchVerification` to ensure that the entry is available for reading on the destination chain.\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Request the given Interchain Modules to verify an existing batch.\n    /// If the batch is not finalized, the module will verify it after finalization.\n    /// For the finalized batch the batch root is already available, and the module can verify it immediately.\n    /// Note: every module has a separate fee paid in the native gas token of the source chain,\n    /// and `msg.value` must be equal to the sum of all fees.\n    /// Note: this method is permissionless, and anyone can request verification for any batch.\n    /// @dev Will revert if the batch with the given nonce does not exist.\n    /// @param dstChainId    The chain id of the destination chain\n    /// @param dbNonce       The database nonce of the existing batch\n    /// @param srcModules    The source chain addresses of the Interchain Modules to use for verification\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] memory srcModules\n    )\n        external\n        payable;\n\n    /// @notice Write data to the Interchain DataBase as a new entry in the current batch.\n    /// Then request the Interchain Modules to verify the batch containing the written entry on the destination chain.\n    /// See `writeEntry` and `requestBatchVerification` for more details.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dataHash     The hash of the data to be written to the Interchain DataBase as a new entry\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    /// @return dbNonce     The database nonce of the batch containing the written entry\n    /// @return entryIndex  The index of the written entry within the batch\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] memory srcModules\n    )\n        external\n        payable\n        returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Allows the Interchain Module to verify the batch coming from the remote chain.\n    /// @param batch        The Interchain Batch to confirm\n    function verifyRemoteBatch(InterchainBatch memory batch) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the fee for writing data to the Interchain DataBase, and verifying it on the destination chain\n    /// using the provided Interchain Modules.\n    /// @dev Will revert if the empty array of modules is provided.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param srcModules   The source chain addresses of the Interchain Modules to use for verification\n    function getInterchainFee(uint256 dstChainId, address[] memory srcModules) external view returns (uint256);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce.\n    /// Note: the leafs are ordered by the index of the written entry in the current batch,\n    /// and the leafs value match the value of the written entry (srcWriter + dataHash hashed together).\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory);\n\n    /// @notice Returns the list of leafs of the finalized batch with the given nonce,\n    /// paginated by the given start and end indexes. The end index is exclusive.\n    /// Note: this is useful when the batch contains a large number of leafs, and calling `getBatchLeafs`\n    /// would result in a gas limit exceeded error.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the provided range is invalid.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param start        The start index of the paginated leafs, inclusive\n    /// @param end          The end index of the paginated leafs, exclusive\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory);\n\n    /// @notice Returns the size of the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatchSize(uint256 dbNonce) external view returns (uint64);\n\n    /// @notice Get the finalized Interchain Batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// @param dbNonce      The database nonce of the finalized batch\n    function getBatch(uint256 dbNonce) external view returns (InterchainBatch memory);\n\n    /// @notice Get the Interchain Entry written on the local chain with the given batch nonce and entry index.\n    /// Note: the batch does not have to be finalized to fetch the local entry.\n    /// @dev Will revert if the batch with the given nonce does not exist,\n    /// or the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the existing batch\n    /// @param entryIndex   The index of the written entry within the batch\n    function getEntry(uint256 dbNonce, uint64 entryIndex) external view returns (InterchainEntry memory);\n\n    /// @notice Get the Merkle proof of inclusion for the entry with the given index\n    /// in the finalized batch with the given nonce.\n    /// @dev Will revert if the batch with the given nonce does not exist, or is not finalized.\n    /// Will revert if the entry with the given index does not exist within the batch.\n    /// @param dbNonce      The database nonce of the finalized batch\n    /// @param entryIndex   The index of the written entry within the batch\n    /// @return proof       The Merkle proof of inclusion for the entry\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof);\n\n    /// @notice Get the nonce of the database, which is incremented every time a new batch is finalized.\n    /// This is the nonce of the current non-finalized batch.\n    function getDBNonce() external view returns (uint256);\n\n    /// @notice Get the index of the next entry to be written to the database.\n    /// @return dbNonce      The database nonce of the batch including the next entry\n    /// @return entryIndex   The index of the next entry within that batch\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex);\n\n    /// @notice Read the data written on specific source chain by a specific writer,\n    /// and verify it on the destination chain using the provided Interchain Module.\n    /// Note: returned zero value indicates that the module has not verified the entry.\n    /// @param entry        The Interchain Entry to read\n    /// @param dstModule    The destination chain addresses of the Interchain Modules to use for verification\n    /// @return moduleVerifiedAt   The block timestamp at which the entry was verified by the module,\n    ///                             or ZERO if the module has not verified the entry.\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] memory proof\n    )\n        external\n        view\n        returns (uint256 moduleVerifiedAt);\n}\n\n// contracts/interfaces/IInterchainModule.sol\n\n/// @notice Every Module may opt a different method to confirm the verified entries on destination chain,\n/// therefore this is not a part of a common interface.\ninterface IInterchainModule {\n    error InterchainModule__NotInterchainDB(address caller);\n    error InterchainModule__IncorrectSourceChainId(uint256 chainId);\n    error InterchainModule__InsufficientFee(uint256 actual, uint256 required);\n    error InterchainModule__SameChainId(uint256 chainId);\n\n    /// @notice Request the verification of a batch from the Interchain DataBase by the module.\n    /// If the batch is not yet finalized, the verification on destination chain will be delayed until\n    /// the finalization is done and batch root is saved on the source chain.\n    /// Note: a fee is paid to the module for verification, and could be retrieved by using `getModuleFee`.\n    /// Note: this will eventually trigger `InterchainDB.verifyRemoteBatch(batch)` function on destination chain,\n    /// with no guarantee of ordering.\n    /// @dev Could be only called by the Interchain DataBase contract.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param batch        The batch to verify\n    function requestBatchVerification(uint256 dstChainId, InterchainBatch memory batch) external payable;\n\n    /// @notice Get the Module fee for verifying a batch on the specified destination chain.\n    /// @param dstChainId   The chain id of the destination chain\n    /// @param dbNonce      The database nonce of the batch on the source chain\n    function getModuleFee(uint256 dstChainId, uint256 dbNonce) external view returns (uint256);\n}\n\n// contracts/InterchainDB.sol\n\ncontract InterchainDB is InterchainDBEvents, IInterchainDB {\n    LocalEntry[] internal _entries;\n    mapping(address module =\u003e mapping(bytes32 batchKey =\u003e RemoteBatch batch)) internal _remoteBatches;\n\n    modifier onlyRemoteChainId(uint256 chainId) {\n        if (chainId == block.chainid) {\n            revert InterchainDB__SameChainId(block.chainid);\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════ WRITER-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function writeEntry(bytes32 dataHash) external returns (uint256 dbNonce, uint64 entryIndex) {\n        return _writeEntry(dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function requestBatchVerification(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n    {\n        InterchainBatch memory batch = getBatch(dbNonce);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function writeEntryWithVerification(\n        uint256 dstChainId,\n        bytes32 dataHash,\n        address[] calldata srcModules\n    )\n        external\n        payable\n        onlyRemoteChainId(dstChainId)\n        returns (uint256 dbNonce, uint64 entryIndex)\n    {\n        (dbNonce, entryIndex) = _writeEntry(dataHash);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        InterchainBatch memory batch = InterchainBatchLib.constructLocalBatch(dbNonce, dataHash);\n        _requestVerification(dstChainId, batch, srcModules);\n    }\n\n    // ═══════════════════════════════════════════════ MODULE-FACING ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function verifyRemoteBatch(InterchainBatch memory batch) external onlyRemoteChainId(batch.srcChainId) {\n        bytes32 batchKey = InterchainBatchLib.batchKey(batch);\n        RemoteBatch memory existingBatch = _remoteBatches[msg.sender][batchKey];\n        // Check if that's the first time module verifies the batch\n        if (existingBatch.verifiedAt == 0) {\n            _remoteBatches[msg.sender][batchKey] =\n                RemoteBatch({verifiedAt: block.timestamp, batchRoot: batch.batchRoot});\n            emit InterchainBatchVerified(msg.sender, batch.srcChainId, batch.dbNonce, batch.batchRoot);\n        } else {\n            // If the module has already verified the batch, check that the batch root is the same\n            if (existingBatch.batchRoot != batch.batchRoot) {\n                revert InterchainDB__ConflictingBatches(msg.sender, existingBatch.batchRoot, batch);\n            }\n            // No-op if the batch root is the same\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafs(uint256 dbNonce) external view returns (bytes32[] memory leafs) {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchLeafsPaginated(\n        uint256 dbNonce,\n        uint64 start,\n        uint64 end\n    )\n        external\n        view\n        returns (bytes32[] memory leafs)\n    {\n        // In \"no batching\" mode: the finalized batch size is 1\n        _assertBatchFinalized(dbNonce);\n        if (start != 0 || end != 1) {\n            revert InterchainDB__InvalidEntryRange(dbNonce, start, end);\n        }\n        leafs = new bytes32[](1);\n        leafs[0] = _entries[dbNonce].dataHash;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntryProof(uint256 dbNonce, uint64 entryIndex) external view returns (bytes32[] memory proof) {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        _assertBatchFinalized(dbNonce);\n        _assertEntryExists(dbNonce, entryIndex);\n        return new bytes32[](0);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getInterchainFee(uint256 dstChainId, address[] calldata srcModules) external view returns (uint256 fee) {\n        (, fee) = _getModuleFees(dstChainId, getDBNonce(), srcModules);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getNextEntryIndex() external view returns (uint256 dbNonce, uint64 entryIndex) {\n        // In \"no batching\" mode: entry index is 0, batch size is 1\n        dbNonce = getDBNonce();\n        entryIndex = 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function checkVerification(\n        address dstModule,\n        InterchainEntry memory entry,\n        bytes32[] calldata proof\n    )\n        external\n        view\n        onlyRemoteChainId(entry.srcChainId)\n        returns (uint256 moduleVerifiedAt)\n    {\n        // In \"no batching\" mode: the batch root is the same as the entry hash, hence the proof is empty\n        if (proof.length != 0) {\n            // If proof is not empty, the batch root is not verified\n            return 0;\n        }\n        RemoteBatch memory remoteBatch = _remoteBatches[dstModule][InterchainEntryLib.batchKey(entry)];\n        bytes32 entryValue = InterchainEntryLib.entryValue(entry);\n        // Check entry value against the batch root verified by the module\n        return remoteBatch.batchRoot == entryValue ? remoteBatch.verifiedAt : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatchSize(uint256 dbNonce) public view returns (uint64) {\n        // In \"no batching\" mode: the finalized batch size is 1, the pending batch size is 0\n        uint256 pendingNonce = _assertBatchExists(dbNonce);\n        return dbNonce \u003c pendingNonce ? 1 : 0;\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getBatch(uint256 dbNonce) public view returns (InterchainBatch memory) {\n        _assertBatchFinalized(dbNonce);\n        // In \"no batching\" mode: the batch root is the same as the entry hash\n        return InterchainBatchLib.constructLocalBatch(dbNonce, _entries[dbNonce].dataHash);\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getEntry(uint256 dbNonce, uint64 entryIndex) public view returns (InterchainEntry memory) {\n        _assertEntryExists(dbNonce, entryIndex);\n        return InterchainEntryLib.constructLocalEntry(\n            dbNonce, entryIndex, _entries[dbNonce].writer, _entries[dbNonce].dataHash\n        );\n    }\n\n    /// @inheritdoc IInterchainDB\n    function getDBNonce() public view returns (uint256) {\n        return _entries.length;\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Write the entry to the database and emit the event.\n    function _writeEntry(bytes32 dataHash) internal returns (uint256 dbNonce, uint64 entryIndex) {\n        dbNonce = _entries.length;\n        entryIndex = 0;\n        _entries.push(LocalEntry(msg.sender, dataHash));\n        emit InterchainEntryWritten(block.chainid, dbNonce, TypeCasts.addressToBytes32(msg.sender), dataHash);\n    }\n\n    /// @dev Request the verification of the entry by the modules, and emit the event.\n    /// Note: the validity of the passed entry and chain id being remote is enforced in the calling function.\n    function _requestVerification(\n        uint256 dstChainId,\n        InterchainBatch memory batch,\n        address[] calldata srcModules\n    )\n        internal\n    {\n        (uint256[] memory fees, uint256 totalFee) = _getModuleFees(dstChainId, batch.dbNonce, srcModules);\n        // TODO: handle the case where fees are overpaid\n        if (msg.value != totalFee) {\n            revert InterchainDB__IncorrectFeeAmount(msg.value, totalFee);\n        }\n        uint256 len = srcModules.length;\n        for (uint256 i = 0; i \u003c len; ++i) {\n            IInterchainModule(srcModules[i]).requestBatchVerification{value: fees[i]}(dstChainId, batch);\n        }\n        emit InterchainBatchVerificationRequested(dstChainId, batch.dbNonce, batch.batchRoot, srcModules);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Check that the batch with the given nonce exists and return the pending nonce.\n    function _assertBatchExists(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e pendingNonce) {\n            revert InterchainDB__BatchDoesNotExist(dbNonce);\n        }\n    }\n\n    /// @dev Check that the batch with the given nonce is finalized and return the pending nonce.\n    function _assertBatchFinalized(uint256 dbNonce) internal view returns (uint256 pendingNonce) {\n        pendingNonce = getDBNonce();\n        if (dbNonce \u003e= pendingNonce) {\n            revert InterchainDB__BatchNotFinalized(dbNonce);\n        }\n    }\n\n    /// @dev Check that the entry index is within the batch size. Also checks that the batch exists.\n    function _assertEntryExists(uint256 dbNonce, uint64 entryIndex) internal view {\n        // This will revert if the batch does not exist\n        uint64 batchSize = getBatchSize(dbNonce);\n        if (entryIndex \u003e= batchSize) {\n            revert InterchainDB__EntryIndexOutOfRange(dbNonce, entryIndex, batchSize);\n        }\n    }\n\n    /// @dev Get the verification fees for the modules\n    function _getModuleFees(\n        uint256 dstChainId,\n        uint256 dbNonce,\n        address[] calldata srcModules\n    )\n        internal\n        view\n        returns (uint256[] memory fees, uint256 totalFee)\n    {\n        uint256 len = srcModules.length;\n        if (len == 0) {\n            revert InterchainDB__NoModulesSpecified();\n        }\n        fees = new uint256[](len);\n        for (uint256 i = 0; i \u003c len; ++i) {\n            fees[i] = IInterchainModule(srcModules[i]).getModuleFee(dstChainId, dbNonce);\n            totalFee += fees[i];\n        }\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"2066:280:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;2066:280:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"2066:280:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/InterchainDB.sol\":\"TypeCasts\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/InterchainDB.sol\":{\"keccak256\":\"0xd4cd85fc99671bd7864c8bf6429450672211511f0fc92cb18f394ae9188e6a17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbead7d273b88c2a07da43d5749e4315ecf010ab178da3c26e77bdeac5806289\",\"dweb:/ipfs/QmUsttjzupZFHoB8hardhx249Au7T8WVcNUuXdWy9HLTYE\"]}},\"version\":1}"},"hashes":{}}}
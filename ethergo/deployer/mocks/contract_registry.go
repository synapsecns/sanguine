// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	contracts "github.com/synapsecns/sanguine/ethergo/contracts"
	deployer "github.com/synapsecns/sanguine/ethergo/deployer"

	mock "github.com/stretchr/testify/mock"
)

// ContractRegistry is an autogenerated mock type for the ContractRegistry type
type ContractRegistry struct {
	mock.Mock
}

// Deploy provides a mock function with given fields: ctx, contractType
func (_m *ContractRegistry) Deploy(ctx context.Context, contractType contracts.ContractType) contracts.DeployedContract {
	ret := _m.Called(ctx, contractType)

	var r0 contracts.DeployedContract
	if rf, ok := ret.Get(0).(func(context.Context, contracts.ContractType) contracts.DeployedContract); ok {
		r0 = rf(ctx, contractType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.DeployedContract)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, contractType
func (_m *ContractRegistry) Get(ctx context.Context, contractType contracts.ContractType) contracts.DeployedContract {
	ret := _m.Called(ctx, contractType)

	var r0 contracts.DeployedContract
	if rf, ok := ret.Get(0).(func(context.Context, contracts.ContractType) contracts.DeployedContract); ok {
		r0 = rf(ctx, contractType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.DeployedContract)
		}
	}

	return r0
}

// GetDeployedContracts provides a mock function with given fields:
func (_m *ContractRegistry) GetDeployedContracts() map[int]contracts.DeployedContract {
	ret := _m.Called()

	var r0 map[int]contracts.DeployedContract
	if rf, ok := ret.Get(0).(func() map[int]contracts.DeployedContract); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]contracts.DeployedContract)
		}
	}

	return r0
}

// GetRegisteredDeployer provides a mock function with given fields: contractType
func (_m *ContractRegistry) GetRegisteredDeployer(contractType contracts.ContractType) deployer.ContractDeployer {
	ret := _m.Called(contractType)

	var r0 deployer.ContractDeployer
	if rf, ok := ret.Get(0).(func(contracts.ContractType) deployer.ContractDeployer); ok {
		r0 = rf(contractType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deployer.ContractDeployer)
		}
	}

	return r0
}

// IsContractDeployed provides a mock function with given fields: contractType
func (_m *ContractRegistry) IsContractDeployed(contractType contracts.ContractType) bool {
	ret := _m.Called(contractType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(contracts.ContractType) bool); ok {
		r0 = rf(contractType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Register provides a mock function with given fields: contractType, contract
func (_m *ContractRegistry) Register(contractType contracts.ContractType, contract contracts.DeployedContract) {
	_m.Called(contractType, contract)
}

// RegisterContractDeployer provides a mock function with given fields: deployers
func (_m *ContractRegistry) RegisterContractDeployer(deployers ...deployer.ContractDeployer) {
	_va := make([]interface{}, len(deployers))
	for _i := range deployers {
		_va[_i] = deployers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// RegisteredDeployers provides a mock function with given fields:
func (_m *ContractRegistry) RegisteredDeployers() []deployer.ContractDeployer {
	ret := _m.Called()

	var r0 []deployer.ContractDeployer
	if rf, ok := ret.Get(0).(func() []deployer.ContractDeployer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployer.ContractDeployer)
		}
	}

	return r0
}

type mockConstructorTestingTNewContractRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewContractRegistry creates a new instance of ContractRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContractRegistry(t mockConstructorTestingTNewContractRegistry) *ContractRegistry {
	mock := &ContractRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	signer "github.com/synapsecns/sanguine/ethergo/signer/signer"
)

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *Signer) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// GetTransactor provides a mock function with given fields: chainID
func (_m *Signer) GetTransactor(chainID *big.Int) (*bind.TransactOpts, error) {
	ret := _m.Called(chainID)

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(*big.Int) *bind.TransactOpts); ok {
		r0 = rf(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignMessage provides a mock function with given fields: ctx, message, hash
func (_m *Signer) SignMessage(ctx context.Context, message []byte, hash bool) (signer.Signature, error) {
	ret := _m.Called(ctx, message, hash)

	var r0 signer.Signature
	if rf, ok := ret.Get(0).(func(context.Context, []byte, bool) signer.Signature); ok {
		r0 = rf(ctx, message, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signer.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, bool) error); ok {
		r1 = rf(ctx, message, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

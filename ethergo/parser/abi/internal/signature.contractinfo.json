{"/solidity/signature.sol:TestSignature":{"code":"0x608060405234801561001057600080fd5b506101ce806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063410bbd141461005157806347e8da23146100bc5780635b7c30ae146100e2578063e65ca4c614610117575b600080fd5b61008761005f36600461016d565b7f410bbd143686b95f03d142e907aa4b466d4425b0ce24588b25a67e9d337b932b9392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f47e8da2300000000000000000000000000000000000000000000000000000000610087565b6100876100f036600461014c565b7f5b7c30ae23c9735566e0743e19b37f3f9c77ddcf1c951d97b5639c99c1275bd092915050565b61008761012536600461014c565b7fe65ca4c60000000000000000000000000000000000000000000000000000000092915050565b6000806040838503121561015e578182fd5b50508035926020909101359150565b600080600060608486031215610181578081fd5b50508135936020830135935060409092013591905056fea26469706673582212207190a4806d7d832d6f198fe652c324187d2899f352993008eaabd1a73ec3571e64736f6c63430008040033","runtime-code":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063410bbd141461005157806347e8da23146100bc5780635b7c30ae146100e2578063e65ca4c614610117575b600080fd5b61008761005f36600461016d565b7f410bbd143686b95f03d142e907aa4b466d4425b0ce24588b25a67e9d337b932b9392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f47e8da2300000000000000000000000000000000000000000000000000000000610087565b6100876100f036600461014c565b7f5b7c30ae23c9735566e0743e19b37f3f9c77ddcf1c951d97b5639c99c1275bd092915050565b61008761012536600461014c565b7fe65ca4c60000000000000000000000000000000000000000000000000000000092915050565b6000806040838503121561015e578182fd5b50508035926020909101359150565b600080600060608486031215610181578081fd5b50508135936020830135935060409092013591905056fea26469706673582212207190a4806d7d832d6f198fe652c324187d2899f352993008eaabd1a73ec3571e64736f6c63430008040033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract TestSignature {\n    /**\n     * @dev Returns the signature of the function `testSignature()`.\n     *\n     * This is a public function that is not present in the contract ABI. It is\n     * used to test that the signature of a function is correctly computed.\n     */\n    function testSignature() public pure returns (bytes4) {\n        return this.testSignature.selector;\n    }\n\n\n    /**\n    * @dev Returns the signature of the function `testSignatureArgs(int, int)`.\n    *\n    * This is a public function that is not present in the contract ABI. It is\n    * used to test that the signature of a function is correctly computed.\n    */\n    function testSignatureArgs(int a, int b) public pure returns (bytes4) {\n        return this.testSignatureArgs.selector;\n    }\n\n    /**\n    * @dev Returns the signature of the function `testSignatureOverload(int, int)`.\n    *\n    */\n    function testSignatureOverload(int a, int b) public pure returns (bytes4) {\n        return bytes4(keccak256(\"testSignatureOverload(int256,int256)\"));\n    }\n\n    /**\n    * @dev Returns the signature of the function `testSignatureOverload(int, int, int)`.\n    *\n    */\n    function testSignatureOverload(int a, int b, int c) public pure returns (bytes4) {\n        return bytes4(keccak256(\"testSignatureOverload(int256,int256,int256)\"));\n    }\n}\n","language":"Solidity","languageVersion":"0.8.4","compilerVersion":"0.8.4","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"57:1322:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"57:1322:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1208:169;;;;;;:::i;:::-;1313:56;1208:169;;;;;;;;;777:66:1;765:79;;;747:98;;735:2;720:18;1208:169:0;;;;;;;334:105;405:27;334:105;;937:155;;;;;;:::i;:::-;1035:49;937:155;;;;;701:125;;;;;;:::i;:::-;788:31;701:125;;;;;14:256:1;80:6;88;141:2;129:9;120:7;116:23;112:32;109:2;;;162:6;154;147:22;109:2;-1:-1:-1;;190:23:1;;;260:2;245:18;;;232:32;;-1:-1:-1;99:171:1:o;275:323::-;349:6;357;365;418:2;406:9;397:7;393:23;389:32;386:2;;;439:6;431;424:22;386:2;-1:-1:-1;;467:23:1;;;537:2;522:18;;509:32;;-1:-1:-1;588:2:1;573:18;;;560:32;;376:222;-1:-1:-1;376:222:1:o","abiDefinition":[{"inputs":[],"name":"testSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"}],"name":"testSignatureArgs","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"},{"internalType":"int256","name":"c","type":"int256"}],"name":"testSignatureOverload","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"}],"name":"testSignatureOverload","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{"testSignature()":{"details":"Returns the signature of the function `testSignature()`. This is a public function that is not present in the contract ABI. It is used to test that the signature of a function is correctly computed."},"testSignatureArgs(int256,int256)":{"details":"Returns the signature of the function `testSignatureArgs(int, int)`. This is a public function that is not present in the contract ABI. It is used to test that the signature of a function is correctly computed."},"testSignatureOverload(int256,int256)":{"details":"Returns the signature of the function `testSignatureOverload(int, int)`."},"testSignatureOverload(int256,int256,int256)":{"details":"Returns the signature of the function `testSignatureOverload(int, int, int)`."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"testSignatureArgs\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"}],\"name\":\"testSignatureOverload\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"testSignatureOverload\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"testSignature()\":{\"details\":\"Returns the signature of the function `testSignature()`. This is a public function that is not present in the contract ABI. It is used to test that the signature of a function is correctly computed.\"},\"testSignatureArgs(int256,int256)\":{\"details\":\"Returns the signature of the function `testSignatureArgs(int, int)`. This is a public function that is not present in the contract ABI. It is used to test that the signature of a function is correctly computed.\"},\"testSignatureOverload(int256,int256)\":{\"details\":\"Returns the signature of the function `testSignatureOverload(int, int)`.\"},\"testSignatureOverload(int256,int256,int256)\":{\"details\":\"Returns the signature of the function `testSignatureOverload(int, int, int)`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/solidity/signature.sol\":\"TestSignature\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"/solidity/signature.sol\":{\"keccak256\":\"0x6ad101fc3059733716d70ec3b043319d3dacd95fa7a7e42181ddc886a2c721b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ca734f4a99e1a9af2a4588620cf5a5b83557a14375f26b420a22ccaad6a18de\",\"dweb:/ipfs/QmSfuUx7NoANeiTWNj7mu3XvJZLrcqMpw5cTjDGJcHQGu5\"]}},\"version\":1}"},"hashes":{"testSignature()":"47e8da23","testSignatureArgs(int256,int256)":"e65ca4c6","testSignatureOverload(int256,int256)":"5b7c30ae","testSignatureOverload(int256,int256,int256)":"410bbd14"}}}
// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// DeployedContract is an autogenerated mock type for the DeployedContract type
type DeployedContract struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *DeployedContract) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// ChainID provides a mock function with given fields:
func (_m *DeployedContract) ChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// ContractHandle provides a mock function with given fields:
func (_m *DeployedContract) ContractHandle() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// DeployTx provides a mock function with given fields:
func (_m *DeployedContract) DeployTx() *types.Transaction {
	ret := _m.Called()

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func() *types.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	return r0
}

// Owner provides a mock function with given fields:
func (_m *DeployedContract) Owner() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// OwnerPtr provides a mock function with given fields:
func (_m *DeployedContract) OwnerPtr() *common.Address {
	ret := _m.Called()

	var r0 *common.Address
	if rf, ok := ret.Get(0).(func() *common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Address)
		}
	}

	return r0
}

type mockConstructorTestingTNewDeployedContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeployedContract creates a new instance of DeployedContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeployedContract(t mockConstructorTestingTNewDeployedContract) *DeployedContract {
	mock := &DeployedContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

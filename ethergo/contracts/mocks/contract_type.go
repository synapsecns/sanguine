// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	compiler "github.com/ethereum/go-ethereum/common/compiler"

	mock "github.com/stretchr/testify/mock"
)

// ContractType is an autogenerated mock type for the ContractType type
type ContractType struct {
	mock.Mock
}

// ContractInfo provides a mock function with given fields:
func (_m *ContractType) ContractInfo() *compiler.Contract {
	ret := _m.Called()

	var r0 *compiler.Contract
	if rf, ok := ret.Get(0).(func() *compiler.Contract); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compiler.Contract)
		}
	}

	return r0
}

// ContractName provides a mock function with given fields:
func (_m *ContractType) ContractName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *ContractType) ID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ContractType) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewContractType interface {
	mock.TestingT
	Cleanup(func())
}

// NewContractType creates a new instance of ContractType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContractType(t mockConstructorTestingTNewContractType) *ContractType {
	mock := &ContractType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

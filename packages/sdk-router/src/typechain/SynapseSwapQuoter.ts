/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export type PoolTokenStruct = {
  isWeth: PromiseOrValue<boolean>
  token: PromiseOrValue<string>
}

export type PoolTokenStructOutput = [boolean, string] & {
  isWeth: boolean
  token: string
}

export type PoolStruct = {
  pool: PromiseOrValue<string>
  lpToken: PromiseOrValue<string>
  tokens: PoolTokenStruct[]
}

export type PoolStructOutput = [string, string, PoolTokenStructOutput[]] & {
  pool: string
  lpToken: string
  tokens: PoolTokenStructOutput[]
}

export type LimitedTokenStruct = {
  actionMask: PromiseOrValue<BigNumberish>
  token: PromiseOrValue<string>
}

export type LimitedTokenStructOutput = [BigNumber, string] & {
  actionMask: BigNumber
  token: string
}

export type SwapQueryStruct = {
  swapAdapter: PromiseOrValue<string>
  tokenOut: PromiseOrValue<string>
  minAmountOut: PromiseOrValue<BigNumberish>
  deadline: PromiseOrValue<BigNumberish>
  rawParams: PromiseOrValue<BytesLike>
}

export type SwapQueryStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  swapAdapter: string
  tokenOut: string
  minAmountOut: BigNumber
  deadline: BigNumber
  rawParams: string
}

export interface SynapseSwapQuoterInterface extends utils.Interface {
  functions: {
    'addPool(address)': FunctionFragment
    'addPools(address[])': FunctionFragment
    'allPools()': FunctionFragment
    'calculateAddLiquidity(address,uint256[])': FunctionFragment
    'calculateRemoveLiquidity(address,uint256)': FunctionFragment
    'calculateSwap(address,uint8,uint8,uint256)': FunctionFragment
    'calculateWithdrawOneToken(address,uint256,uint8)': FunctionFragment
    'findConnectedTokens((uint256,address)[],address)': FunctionFragment
    'getAmountOut((uint256,address),address,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'poolInfo(address)': FunctionFragment
    'poolTokens(address)': FunctionFragment
    'poolsAmount()': FunctionFragment
    'removePool(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'synapseRouter()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'weth()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addPool'
      | 'addPools'
      | 'allPools'
      | 'calculateAddLiquidity'
      | 'calculateRemoveLiquidity'
      | 'calculateSwap'
      | 'calculateWithdrawOneToken'
      | 'findConnectedTokens'
      | 'getAmountOut'
      | 'owner'
      | 'poolInfo'
      | 'poolTokens'
      | 'poolsAmount'
      | 'removePool'
      | 'renounceOwnership'
      | 'synapseRouter'
      | 'transferOwnership'
      | 'weth'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addPool',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'addPools',
    values: [PromiseOrValue<string>[]]
  ): string
  encodeFunctionData(functionFragment: 'allPools', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'calculateAddLiquidity',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateRemoveLiquidity',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSwap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateWithdrawOneToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'findConnectedTokens',
    values: [LimitedTokenStruct[], PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountOut',
    values: [
      LimitedTokenStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolInfo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'poolTokens',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'poolsAmount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'removePool',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'synapseRouter',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string

  decodeFunctionResult(functionFragment: 'addPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addPools', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allPools', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateAddLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateRemoveLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSwap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateWithdrawOneToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'findConnectedTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountOut',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolsAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removePool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'synapseRouter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface SynapseSwapQuoter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SynapseSwapQuoterInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    addPools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    allPools(
      overrides?: CallOverrides
    ): Promise<[PoolStructOutput[]] & { pools: PoolStructOutput[] }>

    calculateAddLiquidity(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    calculateRemoveLiquidity(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amountsOut: BigNumber[] }>

    calculateSwap(
      pool: PromiseOrValue<string>,
      tokenIndexFrom: PromiseOrValue<BigNumberish>,
      tokenIndexTo: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    calculateWithdrawOneToken(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>

    findConnectedTokens(
      tokensIn: LimitedTokenStruct[],
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean[]] & {
        amountFound: BigNumber
        isConnected: boolean[]
      }
    >

    getAmountOut(
      tokenIn: LimitedTokenStruct,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SwapQueryStructOutput] & { query: SwapQueryStructOutput }>

    owner(overrides?: CallOverrides): Promise<[string]>

    poolInfo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { tokens: BigNumber; lpToken: string }>

    poolTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PoolTokenStructOutput[]] & { tokens: PoolTokenStructOutput[] }>

    poolsAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    removePool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    synapseRouter(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    weth(overrides?: CallOverrides): Promise<[string]>
  }

  addPool(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  addPools(
    pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  allPools(overrides?: CallOverrides): Promise<PoolStructOutput[]>

  calculateAddLiquidity(
    pool: PromiseOrValue<string>,
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateRemoveLiquidity(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  calculateSwap(
    pool: PromiseOrValue<string>,
    tokenIndexFrom: PromiseOrValue<BigNumberish>,
    tokenIndexTo: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateWithdrawOneToken(
    pool: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  findConnectedTokens(
    tokensIn: LimitedTokenStruct[],
    tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean[]] & { amountFound: BigNumber; isConnected: boolean[] }
  >

  getAmountOut(
    tokenIn: LimitedTokenStruct,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SwapQueryStructOutput>

  owner(overrides?: CallOverrides): Promise<string>

  poolInfo(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { tokens: BigNumber; lpToken: string }>

  poolTokens(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PoolTokenStructOutput[]>

  poolsAmount(overrides?: CallOverrides): Promise<BigNumber>

  removePool(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  synapseRouter(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  weth(overrides?: CallOverrides): Promise<string>

  callStatic: {
    addPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    addPools(
      pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>

    allPools(overrides?: CallOverrides): Promise<PoolStructOutput[]>

    calculateAddLiquidity(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRemoveLiquidity(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    calculateSwap(
      pool: PromiseOrValue<string>,
      tokenIndexFrom: PromiseOrValue<BigNumberish>,
      tokenIndexTo: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateWithdrawOneToken(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    findConnectedTokens(
      tokensIn: LimitedTokenStruct[],
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean[]] & {
        amountFound: BigNumber
        isConnected: boolean[]
      }
    >

    getAmountOut(
      tokenIn: LimitedTokenStruct,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SwapQueryStructOutput>

    owner(overrides?: CallOverrides): Promise<string>

    poolInfo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { tokens: BigNumber; lpToken: string }>

    poolTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PoolTokenStructOutput[]>

    poolsAmount(overrides?: CallOverrides): Promise<BigNumber>

    removePool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    synapseRouter(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    weth(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    addPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    addPools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    allPools(overrides?: CallOverrides): Promise<BigNumber>

    calculateAddLiquidity(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRemoveLiquidity(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSwap(
      pool: PromiseOrValue<string>,
      tokenIndexFrom: PromiseOrValue<BigNumberish>,
      tokenIndexTo: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateWithdrawOneToken(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    findConnectedTokens(
      tokensIn: LimitedTokenStruct[],
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountOut(
      tokenIn: LimitedTokenStruct,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    poolInfo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    poolTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    poolsAmount(overrides?: CallOverrides): Promise<BigNumber>

    removePool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    synapseRouter(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    weth(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    addPools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    allPools(overrides?: CallOverrides): Promise<PopulatedTransaction>

    calculateAddLiquidity(
      pool: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateRemoveLiquidity(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSwap(
      pool: PromiseOrValue<string>,
      tokenIndexFrom: PromiseOrValue<BigNumberish>,
      tokenIndexTo: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateWithdrawOneToken(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    findConnectedTokens(
      tokensIn: LimitedTokenStruct[],
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountOut(
      tokenIn: LimitedTokenStruct,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolInfo(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    poolTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    poolsAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removePool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    synapseRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}

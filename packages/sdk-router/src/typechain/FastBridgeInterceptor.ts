/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export declare namespace IFastBridge {
  export type BridgeParamsStruct = {
    dstChainId: BigNumberish
    sender: string
    to: string
    originToken: string
    destToken: string
    originAmount: BigNumberish
    destAmount: BigNumberish
    sendChainGas: boolean
    deadline: BigNumberish
  }

  export type BridgeParamsStructOutput = [
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    dstChainId: number
    sender: string
    to: string
    originToken: string
    destToken: string
    originAmount: BigNumber
    destAmount: BigNumber
    sendChainGas: boolean
    deadline: BigNumber
  }
}

export declare namespace IFastBridgeInterceptor {
  export type InterceptorParamsStruct = {
    fastBridge: string
    quoteOriginAmount: BigNumberish
  }

  export type InterceptorParamsStructOutput = [string, BigNumber] & {
    fastBridge: string
    quoteOriginAmount: BigNumber
  }
}

export interface FastBridgeInterceptorInterface extends utils.Interface {
  functions: {
    'MAX_ORIGIN_AMOUNT_DIFF()': FunctionFragment
    'NATIVE_GAS_TOKEN()': FunctionFragment
    'bridgeWithInterception((uint32,address,address,address,address,uint256,uint256,bool,uint256),(address,uint256))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_ORIGIN_AMOUNT_DIFF'
      | 'NATIVE_GAS_TOKEN'
      | 'bridgeWithInterception'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'MAX_ORIGIN_AMOUNT_DIFF',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'NATIVE_GAS_TOKEN',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'bridgeWithInterception',
    values: [
      IFastBridge.BridgeParamsStruct,
      IFastBridgeInterceptor.InterceptorParamsStruct
    ]
  ): string

  decodeFunctionResult(
    functionFragment: 'MAX_ORIGIN_AMOUNT_DIFF',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'NATIVE_GAS_TOKEN',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'bridgeWithInterception',
    data: BytesLike
  ): Result

  events: {}
}

export interface FastBridgeInterceptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: FastBridgeInterceptorInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    MAX_ORIGIN_AMOUNT_DIFF(overrides?: CallOverrides): Promise<[BigNumber]>

    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<[string]>

    bridgeWithInterception(
      params: IFastBridge.BridgeParamsStruct,
      interceptorParams: IFastBridgeInterceptor.InterceptorParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>
  }

  MAX_ORIGIN_AMOUNT_DIFF(overrides?: CallOverrides): Promise<BigNumber>

  NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<string>

  bridgeWithInterception(
    params: IFastBridge.BridgeParamsStruct,
    interceptorParams: IFastBridgeInterceptor.InterceptorParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>

  callStatic: {
    MAX_ORIGIN_AMOUNT_DIFF(overrides?: CallOverrides): Promise<BigNumber>

    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<string>

    bridgeWithInterception(
      params: IFastBridge.BridgeParamsStruct,
      interceptorParams: IFastBridgeInterceptor.InterceptorParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    MAX_ORIGIN_AMOUNT_DIFF(overrides?: CallOverrides): Promise<BigNumber>

    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    bridgeWithInterception(
      params: IFastBridge.BridgeParamsStruct,
      interceptorParams: IFastBridgeInterceptor.InterceptorParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MAX_ORIGIN_AMOUNT_DIFF(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bridgeWithInterception(
      params: IFastBridge.BridgeParamsStruct,
      interceptorParams: IFastBridgeInterceptor.InterceptorParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>
  }
}

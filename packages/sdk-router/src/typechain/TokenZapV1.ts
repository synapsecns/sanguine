/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export interface TokenZapV1Interface extends utils.Interface {
  functions: {
    'NATIVE_GAS_TOKEN()': FunctionFragment
    'decodeZapData(bytes,uint256)': FunctionFragment
    'encodeZapData(address,bytes,uint256)': FunctionFragment
    'zap(address,uint256,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'NATIVE_GAS_TOKEN'
      | 'decodeZapData'
      | 'encodeZapData'
      | 'zap'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'NATIVE_GAS_TOKEN',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'decodeZapData',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'encodeZapData',
    values: [string, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'zap',
    values: [string, BigNumberish, BytesLike]
  ): string

  decodeFunctionResult(
    functionFragment: 'NATIVE_GAS_TOKEN',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'decodeZapData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'encodeZapData',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'zap', data: BytesLike): Result

  events: {}
}

export interface TokenZapV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TokenZapV1Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<[string]>

    decodeZapData(
      zapData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { target: string; payload: string }>

    encodeZapData(
      target: string,
      payload: BytesLike,
      amountPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    zap(
      token: string,
      amount: BigNumberish,
      zapData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>
  }

  NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<string>

  decodeZapData(
    zapData: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { target: string; payload: string }>

  encodeZapData(
    target: string,
    payload: BytesLike,
    amountPosition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  zap(
    token: string,
    amount: BigNumberish,
    zapData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>

  callStatic: {
    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<string>

    decodeZapData(
      zapData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { target: string; payload: string }>

    encodeZapData(
      target: string,
      payload: BytesLike,
      amountPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    zap(
      token: string,
      amount: BigNumberish,
      zapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {}

  estimateGas: {
    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    decodeZapData(
      zapData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    encodeZapData(
      target: string,
      payload: BytesLike,
      amountPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    zap(
      token: string,
      amount: BigNumberish,
      zapData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    NATIVE_GAS_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decodeZapData(
      zapData: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    encodeZapData(
      target: string,
      payload: BytesLike,
      amountPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    zap(
      token: string,
      amount: BigNumberish,
      zapData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>
  }
}

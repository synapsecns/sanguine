# Default values for sinner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/synapsecns/sanguine/sinner
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
labels: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ingressPort: 80
  ports:
  - containerPort: 5080
    port: 80
    protocol: TCP
    name: http

serviceMonitor:
  enabled: false

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

indexer:
  enabled: true
  args: ["indexer", "--config=/config/config.yaml"]
  podAnnotations: {}
  nodeSelector: {}
  podSecurityContext: {}
  affinity: {}
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  env:
    - name: GOLOG_LOG_FMT
      value: "json"
  tolerations: {}
  # TODO: this should be in extraValues for testing
  extraInitContainers:
    - name: wait-for-omnirpc
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: sinner-omnirpc
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    # Wait for mysql to show up
    # this is mostly for testing
    - name: wait-for-mysql
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: sinner-mysql
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    - name: create-database-sinner
      image: mysql/mysql-server:latest
      imagePullPolicy: IfNotPresent
      command: ['bash', '-c', "until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute=\"CREATE DATABASE IF NOT EXISTS sinner\"; do 'echo waiting for db'; sleep 10; done"]
      env:
        - name: POD_NAME
          value: sinner-mysql
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

server:
  enabled: true
  # this should use a secret in production, for testing only
  args: ["server", "--config=/config/config.yaml"]
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  podAnnotations: {}
  nodeSelector: {}
  podSecurityContext: {}
  affinity: {}
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  env:
    - name: GOLOG_LOG_FMT
      value: "json"
  tolerations: []
  # TODO: this should be in extraValues for testing
  extraInitContainers:
    # Wait for mysql to show up
    # this is mostly for testing
    - name: wait-for-omnirpc
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for omnirpc..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: sinner-omnirpc
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    - name: wait-for-mysql
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: sinner-mysql
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    - name: create-database-sinner
      image: mysql/mysql-server:latest
      imagePullPolicy: IfNotPresent
      command: ['bash', '-c', "until mysql -h${POD_NAME}.${POD_NAMESPACE} -uroot -pMysqlPassword --execute=\"CREATE DATABASE IF NOT EXISTS sinner\"; do 'echo waiting for db'; sleep 10; done"]
      env:
        - name: POD_NAME
          value: sinner-mysql
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

mysql:
  # use a constant here to build a connection to the service
  # uncomment these to speedup builds on arm64 based architectures
  #  image:
  #    registry: ghcr.io
  #    repository: zcube/bitnami-compat/mysql
  #    tag: 8.0-debian-11-r54
  enabled: true
  fullnameOverride: sinner-mysql
#  nameOverride: sinner-mysql
  architecture: standalone
  networkPolicy:
    enabled: true
  metrics:
    enabled: true
  auth:
    database: sinner
    # Note: this should be used in production instead of auth.password
    # existingSecret: mysql-password
    rootPassword: MysqlPassword

omnirpc:
  # this can be remote in production, we just want to use the public rpc servers here
  enabled: true
  fullnameOverride: sinner-omnirpc
  replicaCount: 2

files:
  config.yaml: |-
    default_refresh_rate: 1
    scribe_url: "http://scribe.interop-staging.com/graphql"
    db_path: "root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true"
    db_type: mysql
    skip_migrations: false
    chains:
      - chain_id: 444
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
      - chain_id: 421614
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
      - chain_id: 11155111
        contracts:
          - address: "0x537ab51470984D6D9aDF8953C0D2ed8eDA4050ED"
            start_block: 1
            contract_type: origin
          - address: "0xA944636Ac279e0346AF96Ef7e236025C6cBFE609"
            start_block: 1
            contract_type: execution_hub
  serverConfig.yaml: |-
    http_port: 5080
    db_path: "root:MysqlPassword@tcp(scribe-mysql:3306)/scribe?parseTime=true"
    db_type: mysql
    skip_migrations: true

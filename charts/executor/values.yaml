# Default values for executor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/synapsecns/sanguine/executor
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

runRemote:
  enabled: true
  args: ["run", "--config=/config/config.yaml", "--scribe-type=remote", "--db=mysql", "--path=root:MysqlPassword@tcp(executor-mysql:3306)/executor", "--scribe-port=0", "--scribe-grpc-port=0", "--scribe-url=a.b.c"]
  podAnnotations: {}
  nodeSelector: {}
  podSecurityContext: {}
  affinity: {}
  env:
    - name: GOLOG_LOG_FMT
      value: "json"
  tolerations: {}
  extraInitContainers:
    - name: wait-for-omnirpc
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 80; do echo "Waiting for mysql..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: executor-omnirpc
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    # Wait for mysql to show up
    # this is mostly for testing
    - name: wait-for-mysql
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 3306; do echo "Waiting for mysql..."; sleep 1; done;']
      env:
        - name: POD_NAME
          value: executor-mysql
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

mysql:
  # use a constant here to build a connection to the service
  enabled: true
  fullnameOverride: executor-mysql
  architecture: standalone
  networkPolicy:
    enabled: true
  metrics:
    enabled: true
  auth:
    database: scribe
    # Note: this should be used in production instead of auth.password
    # existingSecret: mysql-password
    rootPassword: MysqlPassword

omnirpc:
  # this can be remote in production, we just want to use the public rpc servers here
  enabled: true
  fullnameOverride: executor-omnirpc
  replicaCount: 2

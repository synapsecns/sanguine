// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/synapsecns/sanguine/services/explorer/graphql/server/graph/model"

	sql "github.com/synapsecns/sanguine/services/explorer/db/sql"
)

// ConsumerDB is an autogenerated mock type for the ConsumerDB type
type ConsumerDB struct {
	mock.Mock
}

// GetAddressRanking provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetAddressRanking(ctx context.Context, query string) ([]*model.AddressRanking, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.AddressRanking
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.AddressRanking); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AddressRanking)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBridgeEvent provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetBridgeEvent(ctx context.Context, query string) (*sql.BridgeEvent, error) {
	ret := _m.Called(ctx, query)

	var r0 *sql.BridgeEvent
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.BridgeEvent); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.BridgeEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBridgeEvents provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetBridgeEvents(ctx context.Context, query string) ([]sql.BridgeEvent, error) {
	ret := _m.Called(ctx, query)

	var r0 []sql.BridgeEvent
	if rf, ok := ret.Get(0).(func(context.Context, string) []sql.BridgeEvent); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sql.BridgeEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDateResults provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetDateResults(ctx context.Context, query string) ([]*model.DateResult, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.DateResult
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.DateResult); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFloat64 provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetFloat64(ctx context.Context, query string) (float64, error) {
	ret := _m.Called(ctx, query)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStringArray provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetStringArray(ctx context.Context, query string) ([]string, error) {
	ret := _m.Called(ctx, query)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenCounts provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetTokenCounts(ctx context.Context, query string) ([]*model.TokenCountResult, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.TokenCountResult
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.TokenCountResult); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TokenCountResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxCounts provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetTxCounts(ctx context.Context, query string) ([]*model.TransactionCountResult, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.TransactionCountResult
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.TransactionCountResult); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TransactionCountResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUint64 provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) GetUint64(ctx context.Context, query string) (uint64, error) {
	ret := _m.Called(ctx, query)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialInfosFromIdentifiers provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) PartialInfosFromIdentifiers(ctx context.Context, query string) ([]*model.PartialInfo, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.PartialInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.PartialInfo); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PartialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialInfosFromIdentifiersByChain provides a mock function with given fields: ctx, query
func (_m *ConsumerDB) PartialInfosFromIdentifiersByChain(ctx context.Context, query string) (map[int]*model.PartialInfo, error) {
	ret := _m.Called(ctx, query)

	var r0 map[int]*model.PartialInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) map[int]*model.PartialInfo); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]*model.PartialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreEvent provides a mock function with given fields: ctx, event
func (_m *ConsumerDB) StoreEvent(ctx context.Context, event interface{}) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLastBlock provides a mock function with given fields: ctx, chainID, blockNumber
func (_m *ConsumerDB) StoreLastBlock(ctx context.Context, chainID uint32, blockNumber uint64) error {
	ret := _m.Called(ctx, chainID, blockNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint64) error); ok {
		r0 = rf(ctx, chainID, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UNSAFE_DB provides a mock function with given fields:
func (_m *ConsumerDB) UNSAFE_DB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

type mockConstructorTestingTNewConsumerDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerDB creates a new instance of ConsumerDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerDB(t mockConstructorTestingTNewConsumerDB) *ConsumerDB {
	mock := &ConsumerDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

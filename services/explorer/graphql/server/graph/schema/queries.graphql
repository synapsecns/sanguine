type Query {
  """
  Returns bridged transactions filterable by chain, to/from address, to/from txn hash, token address, and keccak hash.
  At least 1 search parameter is required, which is one of chain id, address, txn hash or kappa.
  """
  bridgeTransactions(
    chainId:        Int
    address:        String
    txnHash:        String
    kappa:          String
    includePending: Boolean = true
    page:           Int = 1
    tokenAddress:   String
  ): [BridgeTransaction]
  """
  Returns the latest bridged transactions across all chains.
  """
  latestBridgeTransactions(
    includePending: Boolean = true
    page:           Int = 1
  ): [BridgeTransaction]
  """
  Returns mean/median/total/count of transactions bridged for a given duration, chain and address.
  Specifying no duration defaults to ALL_TIME, and no chain or address searches across all.
  """
  bridgeAmountStatistic(
    type:         StatisticType!
    duration:     Duration = ALL_TIME
    chainId:      Int
    address:      String
    tokenAddress: String
  ): ValueResult
  """
  Returns the COUNT of bridged transactions for a given chain. If direction of bridge transactions
  is not specified, it defaults to IN.
  Specifying no duration defaults to the last 24 hours.
  """
  countByChainId(
    chainId:    Int
    address:    String
    direction:  Direction = IN
    hours:      Int = 720
  ): [TransactionCountResult]
  """
  Returns counts of token addresses source and time.
  Specifying no parameters defaults to origin and 24 hours.
  """
  countByTokenAddress(
    chainId:    Int
    address:    String
    direction:  Direction = IN
    hours:      Int = 24
  ): [TokenCountResult]
  """
  Returns addresses and transaction count (origin) over time.
  Specifying no parameters defaults to 24 hours.
  """
  addressRanking(hours: Int = 24): [AddressRanking]

  """
  Historical transactional data
  """
  historicalStatistics(
    chainId:  Int
    type:     HistoricalResultType = BRIDGEVOLUME
    days:     Int = 30
  ): HistoricalResult
}

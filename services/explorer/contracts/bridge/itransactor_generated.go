// autogenerated file

package bridge

import (
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// ISynapseBridgeTransactor ...
type ISynapseBridgeTransactor interface {
	// AddKappas is a paid mutator transaction binding the contract method 0xe7a59998.
	//
	// Solidity: function addKappas(bytes32[] kappas) returns()
	AddKappas(opts *bind.TransactOpts, kappas [][32]byte) (*types.Transaction, error)
	// Deposit is a paid mutator transaction binding the contract method 0x90d25074.
	//
	// Solidity: function deposit(address to, uint256 chainId, address token, uint256 amount) returns()
	Deposit(opts *bind.TransactOpts, to common.Address, chainId *big.Int, token common.Address, amount *big.Int) (*types.Transaction, error)
	// DepositAndSwap is a paid mutator transaction binding the contract method 0xa2a2af0b.
	//
	// Solidity: function depositAndSwap(address to, uint256 chainId, address token, uint256 amount, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 minDy, uint256 deadline) returns()
	DepositAndSwap(opts *bind.TransactOpts, to common.Address, chainId *big.Int, token common.Address, amount *big.Int, tokenIndexFrom uint8, tokenIndexTo uint8, minDy *big.Int, deadline *big.Int) (*types.Transaction, error)
	// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
	//
	// Solidity: function grantRole(bytes32 role, address account) returns()
	GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)
	// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
	//
	// Solidity: function initialize() returns()
	Initialize(opts *bind.TransactOpts) (*types.Transaction, error)
	// Mint is a paid mutator transaction binding the contract method 0x20d7b327.
	//
	// Solidity: function mint(address to, address token, uint256 amount, uint256 fee, bytes32 kappa) returns()
	Mint(opts *bind.TransactOpts, to common.Address, token common.Address, amount *big.Int, fee *big.Int, kappa [32]byte) (*types.Transaction, error)
	// MintAndSwap is a paid mutator transaction binding the contract method 0x17357892.
	//
	// Solidity: function mintAndSwap(address to, address token, uint256 amount, uint256 fee, address pool, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 minDy, uint256 deadline, bytes32 kappa) returns()
	MintAndSwap(opts *bind.TransactOpts, to common.Address, token common.Address, amount *big.Int, fee *big.Int, pool common.Address, tokenIndexFrom uint8, tokenIndexTo uint8, minDy *big.Int, deadline *big.Int, kappa [32]byte) (*types.Transaction, error)
	// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
	//
	// Solidity: function pause() returns()
	Pause(opts *bind.TransactOpts) (*types.Transaction, error)
	// Redeem is a paid mutator transaction binding the contract method 0xf3f094a1.
	//
	// Solidity: function redeem(address to, uint256 chainId, address token, uint256 amount) returns()
	Redeem(opts *bind.TransactOpts, to common.Address, chainId *big.Int, token common.Address, amount *big.Int) (*types.Transaction, error)
	// RedeemAndRemove is a paid mutator transaction binding the contract method 0x36e712ed.
	//
	// Solidity: function redeemAndRemove(address to, uint256 chainId, address token, uint256 amount, uint8 swapTokenIndex, uint256 swapMinAmount, uint256 swapDeadline) returns()
	RedeemAndRemove(opts *bind.TransactOpts, to common.Address, chainId *big.Int, token common.Address, amount *big.Int, swapTokenIndex uint8, swapMinAmount *big.Int, swapDeadline *big.Int) (*types.Transaction, error)
	// RedeemAndSwap is a paid mutator transaction binding the contract method 0x839ed90a.
	//
	// Solidity: function redeemAndSwap(address to, uint256 chainId, address token, uint256 amount, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 minDy, uint256 deadline) returns()
	RedeemAndSwap(opts *bind.TransactOpts, to common.Address, chainId *big.Int, token common.Address, amount *big.Int, tokenIndexFrom uint8, tokenIndexTo uint8, minDy *big.Int, deadline *big.Int) (*types.Transaction, error)
	// RedeemV2 is a paid mutator transaction binding the contract method 0xa07ed975.
	//
	// Solidity: function redeemV2(bytes32 to, uint256 chainId, address token, uint256 amount) returns()
	RedeemV2(opts *bind.TransactOpts, to [32]byte, chainId *big.Int, token common.Address, amount *big.Int) (*types.Transaction, error)
	// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
	//
	// Solidity: function renounceRole(bytes32 role, address account) returns()
	RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)
	// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
	//
	// Solidity: function revokeRole(bytes32 role, address account) returns()
	RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error)
	// SetChainGasAmount is a paid mutator transaction binding the contract method 0xb250fe6b.
	//
	// Solidity: function setChainGasAmount(uint256 amount) returns()
	SetChainGasAmount(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)
	// SetWethAddress is a paid mutator transaction binding the contract method 0xa96e2423.
	//
	// Solidity: function setWethAddress(address _wethAddress) returns()
	SetWethAddress(opts *bind.TransactOpts, _wethAddress common.Address) (*types.Transaction, error)
	// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
	//
	// Solidity: function unpause() returns()
	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)
	// Withdraw is a paid mutator transaction binding the contract method 0x1cf5f07f.
	//
	// Solidity: function withdraw(address to, address token, uint256 amount, uint256 fee, bytes32 kappa) returns()
	Withdraw(opts *bind.TransactOpts, to common.Address, token common.Address, amount *big.Int, fee *big.Int, kappa [32]byte) (*types.Transaction, error)
	// WithdrawAndRemove is a paid mutator transaction binding the contract method 0xd57eafac.
	//
	// Solidity: function withdrawAndRemove(address to, address token, uint256 amount, uint256 fee, address pool, uint8 swapTokenIndex, uint256 swapMinAmount, uint256 swapDeadline, bytes32 kappa) returns()
	WithdrawAndRemove(opts *bind.TransactOpts, to common.Address, token common.Address, amount *big.Int, fee *big.Int, pool common.Address, swapTokenIndex uint8, swapMinAmount *big.Int, swapDeadline *big.Int, kappa [32]byte) (*types.Transaction, error)
	// WithdrawFees is a paid mutator transaction binding the contract method 0xf2555278.
	//
	// Solidity: function withdrawFees(address token, address to) returns()
	WithdrawFees(opts *bind.TransactOpts, token common.Address, to common.Address) (*types.Transaction, error)
	// Receive is a paid mutator transaction binding the contract receive function.
	//
	// Solidity: receive() payable returns()
	Receive(opts *bind.TransactOpts) (*types.Transaction, error)
}

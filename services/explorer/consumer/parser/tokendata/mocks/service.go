// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	fetcher "github.com/synapsecns/sanguine/services/explorer/consumer/fetcher"

	mock "github.com/stretchr/testify/mock"

	tokendata "github.com/synapsecns/sanguine/services/explorer/consumer/parser/tokendata"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetBridgeTokenData provides a mock function with given fields: ctx, chainID, token
func (_m *Service) GetBridgeTokenData(ctx context.Context, chainID uint32, token common.Address) (tokendata.ImmutableTokenData, error) {
	ret := _m.Called(ctx, chainID, token)

	var r0 tokendata.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address) tokendata.ImmutableTokenData); ok {
		r0 = rf(ctx, chainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokendata.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address) error); ok {
		r1 = rf(ctx, chainID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCTPTokenData provides a mock function with given fields: ctx, chainID, token, backend
func (_m *Service) GetCCTPTokenData(ctx context.Context, chainID uint32, token common.Address, backend bind.ContractBackend) (tokendata.ImmutableTokenData, error) {
	ret := _m.Called(ctx, chainID, token, backend)

	var r0 tokendata.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address, bind.ContractBackend) tokendata.ImmutableTokenData); ok {
		r0 = rf(ctx, chainID, token, backend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokendata.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address, bind.ContractBackend) error); ok {
		r1 = rf(ctx, chainID, token, backend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolTokenData provides a mock function with given fields: ctx, chainID, token, swapService
func (_m *Service) GetPoolTokenData(ctx context.Context, chainID uint32, token common.Address, swapService fetcher.SwapService) (tokendata.ImmutableTokenData, error) {
	ret := _m.Called(ctx, chainID, token, swapService)

	var r0 tokendata.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address, fetcher.SwapService) tokendata.ImmutableTokenData); ok {
		r0 = rf(ctx, chainID, token, swapService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokendata.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address, fetcher.SwapService) error); ok {
		r1 = rf(ctx, chainID, token, swapService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

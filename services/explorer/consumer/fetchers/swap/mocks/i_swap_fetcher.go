// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// ISwapFetcher is an autogenerated mock type for the ISwapFetcher type
type ISwapFetcher struct {
	mock.Mock
}

// ChainID provides a mock function with given fields:
func (_m *ISwapFetcher) ChainID() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetToken provides a mock function with given fields: ctx, tokenAddress
func (_m *ISwapFetcher) GetToken(ctx context.Context, tokenAddress common.Address) (*uint8, *string, error) {
	ret := _m.Called(ctx, tokenAddress)

	var r0 *uint8
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) *uint8); ok {
		r0 = rf(ctx, tokenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint8)
		}
	}

	var r1 *string
	if rf, ok := ret.Get(1).(func(context.Context, common.Address) *string); ok {
		r1 = rf(ctx, tokenAddress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, common.Address) error); ok {
		r2 = rf(ctx, tokenAddress)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTokenAddress provides a mock function with given fields: ctx, tokenIndex
func (_m *ISwapFetcher) GetTokenAddress(ctx context.Context, tokenIndex uint8) (*common.Address, error) {
	ret := _m.Called(ctx, tokenIndex)

	var r0 *common.Address
	if rf, ok := ret.Get(0).(func(context.Context, uint8) *common.Address); ok {
		r0 = rf(ctx, tokenIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint8) error); ok {
		r1 = rf(ctx, tokenIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISwapFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewISwapFetcher creates a new instance of ISwapFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISwapFetcher(t mockConstructorTestingTNewISwapFetcher) *ISwapFetcher {
	mock := &ISwapFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

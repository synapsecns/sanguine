// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	swap "github.com/synapsecns/sanguine/services/explorer/consumer/fetchers/swap"

	token "github.com/synapsecns/sanguine/services/explorer/consumer/fetchers/token"
)

// ITokenFetcher is an autogenerated mock type for the ITokenFetcher type
type ITokenFetcher struct {
	mock.Mock
}

// GetBridgeTokenData provides a mock function with given fields: ctx, chainID, _a2
func (_m *ITokenFetcher) GetBridgeTokenData(ctx context.Context, chainID uint32, _a2 common.Address) (token.ImmutableTokenData, error) {
	ret := _m.Called(ctx, chainID, _a2)

	var r0 token.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address) token.ImmutableTokenData); ok {
		r0 = rf(ctx, chainID, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(token.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address) error); ok {
		r1 = rf(ctx, chainID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCCTPTokenData provides a mock function with given fields: ctx, chainID, _a2, backend
func (_m *ITokenFetcher) GetCCTPTokenData(ctx context.Context, chainID uint32, _a2 common.Address, backend bind.ContractBackend) (token.ImmutableTokenData, error) {
	ret := _m.Called(ctx, chainID, _a2, backend)

	var r0 token.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address, bind.ContractBackend) token.ImmutableTokenData); ok {
		r0 = rf(ctx, chainID, _a2, backend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(token.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address, bind.ContractBackend) error); ok {
		r1 = rf(ctx, chainID, _a2, backend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoolTokenData provides a mock function with given fields: ctx, poolID, swapService
func (_m *ITokenFetcher) GetPoolTokenData(ctx context.Context, poolID uint8, swapService swap.ISwapFetcher) (token.ImmutableTokenData, error) {
	ret := _m.Called(ctx, poolID, swapService)

	var r0 token.ImmutableTokenData
	if rf, ok := ret.Get(0).(func(context.Context, uint8, swap.ISwapFetcher) token.ImmutableTokenData); ok {
		r0 = rf(ctx, poolID, swapService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(token.ImmutableTokenData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint8, swap.ISwapFetcher) error); ok {
		r1 = rf(ctx, poolID, swapService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewITokenFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewITokenFetcher creates a new instance of ITokenFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITokenFetcher(t mockConstructorTestingTNewITokenFetcher) *ITokenFetcher {
	mock := &ITokenFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

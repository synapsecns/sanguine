// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	bridgeconfig "github.com/synapsecns/sanguine/services/explorer/contracts/bridgeconfig"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: ctx, chainID, tokenAddress
func (_m *Service) GetToken(ctx context.Context, chainID uint32, tokenAddress common.Address) (*bridgeconfig.BridgeConfigV3Token, error) {
	ret := _m.Called(ctx, chainID, tokenAddress)

	var r0 *bridgeconfig.BridgeConfigV3Token
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address) *bridgeconfig.BridgeConfigV3Token); ok {
		r0 = rf(ctx, chainID, tokenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bridgeconfig.BridgeConfigV3Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address) error); ok {
		r1 = rf(ctx, chainID, tokenAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenID provides a mock function with given fields: ctx, chainID, tokenAddress
func (_m *Service) GetTokenID(ctx context.Context, chainID *big.Int, tokenAddress common.Address) (*string, error) {
	ret := _m.Called(ctx, chainID, tokenAddress)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int, common.Address) *string); ok {
		r0 = rf(ctx, chainID, tokenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *big.Int, common.Address) error); ok {
		r1 = rf(ctx, chainID, tokenAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

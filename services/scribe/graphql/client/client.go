// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"github.com/synapsecns/sanguine/services/scribe/graphql/server/graph/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Logs              []*model.Log         "json:\"logs\" graphql:\"logs\""
	LogsRange         []*model.Log         "json:\"logsRange\" graphql:\"logsRange\""
	Receipts          []*model.Receipt     "json:\"receipts\" graphql:\"receipts\""
	ReceiptsRange     []*model.Receipt     "json:\"receiptsRange\" graphql:\"receiptsRange\""
	Transactions      []*model.Transaction "json:\"transactions\" graphql:\"transactions\""
	TransactionsRange []*model.Transaction "json:\"transactionsRange\" graphql:\"transactionsRange\""
	BlockTime         *int                 "json:\"blockTime\" graphql:\"blockTime\""
}
type GetLogs struct {
	Response []*struct {
		ContractAddress string   "json:\"contract_address\" graphql:\"contract_address\""
		ChainID         int      "json:\"chain_id\" graphql:\"chain_id\""
		Topics          []string "json:\"topics\" graphql:\"topics\""
		Data            string   "json:\"data\" graphql:\"data\""
		BlockNumber     int      "json:\"block_number\" graphql:\"block_number\""
		TxHash          string   "json:\"tx_hash\" graphql:\"tx_hash\""
		TxIndex         int      "json:\"tx_index\" graphql:\"tx_index\""
		BlockHash       string   "json:\"block_hash\" graphql:\"block_hash\""
		Index           int      "json:\"index\" graphql:\"index\""
		Removed         bool     "json:\"removed\" graphql:\"removed\""
	} "json:\"response\" graphql:\"response\""
}
type GetLogsRange struct {
	Response []*struct {
		ContractAddress string   "json:\"contract_address\" graphql:\"contract_address\""
		ChainID         int      "json:\"chain_id\" graphql:\"chain_id\""
		Topics          []string "json:\"topics\" graphql:\"topics\""
		Data            string   "json:\"data\" graphql:\"data\""
		BlockNumber     int      "json:\"block_number\" graphql:\"block_number\""
		TxHash          string   "json:\"tx_hash\" graphql:\"tx_hash\""
		TxIndex         int      "json:\"tx_index\" graphql:\"tx_index\""
		BlockHash       string   "json:\"block_hash\" graphql:\"block_hash\""
		Index           int      "json:\"index\" graphql:\"index\""
		Removed         bool     "json:\"removed\" graphql:\"removed\""
	} "json:\"response\" graphql:\"response\""
}
type GetLogsResolvers struct {
	Response []*struct {
		Receipt struct {
			ChainID           int    "json:\"chain_id\" graphql:\"chain_id\""
			Type              int    "json:\"type\" graphql:\"type\""
			PostState         string "json:\"post_state\" graphql:\"post_state\""
			Status            int    "json:\"status\" graphql:\"status\""
			CumulativeGasUsed int    "json:\"cumulative_gas_used\" graphql:\"cumulative_gas_used\""
			Bloom             string "json:\"bloom\" graphql:\"bloom\""
			TxHash            string "json:\"tx_hash\" graphql:\"tx_hash\""
			ContractAddress   string "json:\"contract_address\" graphql:\"contract_address\""
			GasUsed           int    "json:\"gas_used\" graphql:\"gas_used\""
			BlockNumber       int    "json:\"block_number\" graphql:\"block_number\""
			TransactionIndex  int    "json:\"transaction_index\" graphql:\"transaction_index\""
		} "json:\"receipt\" graphql:\"receipt\""
		Transaction struct {
			ChainID   int    "json:\"chain_id\" graphql:\"chain_id\""
			TxHash    string "json:\"tx_hash\" graphql:\"tx_hash\""
			Protected bool   "json:\"protected\" graphql:\"protected\""
			Type      int    "json:\"type\" graphql:\"type\""
			Data      string "json:\"data\" graphql:\"data\""
			Gas       int    "json:\"gas\" graphql:\"gas\""
			GasPrice  int    "json:\"gas_price\" graphql:\"gas_price\""
			GasTipCap string "json:\"gas_tip_cap\" graphql:\"gas_tip_cap\""
			GasFeeCap string "json:\"gas_fee_cap\" graphql:\"gas_fee_cap\""
			Value     string "json:\"value\" graphql:\"value\""
			Nonce     int    "json:\"nonce\" graphql:\"nonce\""
			To        string "json:\"to\" graphql:\"to\""
		} "json:\"transaction\" graphql:\"transaction\""
	} "json:\"response\" graphql:\"response\""
}
type GetReceipts struct {
	Response []*struct {
		ChainID           int    "json:\"chain_id\" graphql:\"chain_id\""
		Type              int    "json:\"type\" graphql:\"type\""
		PostState         string "json:\"post_state\" graphql:\"post_state\""
		Status            int    "json:\"status\" graphql:\"status\""
		CumulativeGasUsed int    "json:\"cumulative_gas_used\" graphql:\"cumulative_gas_used\""
		Bloom             string "json:\"bloom\" graphql:\"bloom\""
		TxHash            string "json:\"tx_hash\" graphql:\"tx_hash\""
		ContractAddress   string "json:\"contract_address\" graphql:\"contract_address\""
		GasUsed           int    "json:\"gas_used\" graphql:\"gas_used\""
		BlockNumber       int    "json:\"block_number\" graphql:\"block_number\""
		TransactionIndex  int    "json:\"transaction_index\" graphql:\"transaction_index\""
	} "json:\"response\" graphql:\"response\""
}
type GetReceiptsRange struct {
	Response []*struct {
		ChainID           int    "json:\"chain_id\" graphql:\"chain_id\""
		Type              int    "json:\"type\" graphql:\"type\""
		PostState         string "json:\"post_state\" graphql:\"post_state\""
		Status            int    "json:\"status\" graphql:\"status\""
		CumulativeGasUsed int    "json:\"cumulative_gas_used\" graphql:\"cumulative_gas_used\""
		Bloom             string "json:\"bloom\" graphql:\"bloom\""
		TxHash            string "json:\"tx_hash\" graphql:\"tx_hash\""
		ContractAddress   string "json:\"contract_address\" graphql:\"contract_address\""
		GasUsed           int    "json:\"gas_used\" graphql:\"gas_used\""
		BlockNumber       int    "json:\"block_number\" graphql:\"block_number\""
		TransactionIndex  int    "json:\"transaction_index\" graphql:\"transaction_index\""
	} "json:\"response\" graphql:\"response\""
}
type GetReceiptsResolvers struct {
	Response []*struct {
		Logs []*struct {
			ContractAddress string   "json:\"contract_address\" graphql:\"contract_address\""
			ChainID         int      "json:\"chain_id\" graphql:\"chain_id\""
			Topics          []string "json:\"topics\" graphql:\"topics\""
			Data            string   "json:\"data\" graphql:\"data\""
			BlockNumber     int      "json:\"block_number\" graphql:\"block_number\""
			TxHash          string   "json:\"tx_hash\" graphql:\"tx_hash\""
			TxIndex         int      "json:\"tx_index\" graphql:\"tx_index\""
			BlockHash       string   "json:\"block_hash\" graphql:\"block_hash\""
			Index           int      "json:\"index\" graphql:\"index\""
			Removed         bool     "json:\"removed\" graphql:\"removed\""
		} "json:\"logs\" graphql:\"logs\""
		Transaction struct {
			ChainID   int    "json:\"chain_id\" graphql:\"chain_id\""
			TxHash    string "json:\"tx_hash\" graphql:\"tx_hash\""
			Protected bool   "json:\"protected\" graphql:\"protected\""
			Type      int    "json:\"type\" graphql:\"type\""
			Data      string "json:\"data\" graphql:\"data\""
			Gas       int    "json:\"gas\" graphql:\"gas\""
			GasPrice  int    "json:\"gas_price\" graphql:\"gas_price\""
			GasTipCap string "json:\"gas_tip_cap\" graphql:\"gas_tip_cap\""
			GasFeeCap string "json:\"gas_fee_cap\" graphql:\"gas_fee_cap\""
			Value     string "json:\"value\" graphql:\"value\""
			Nonce     int    "json:\"nonce\" graphql:\"nonce\""
			To        string "json:\"to\" graphql:\"to\""
		} "json:\"transaction\" graphql:\"transaction\""
	} "json:\"response\" graphql:\"response\""
}
type GetTransactions struct {
	Response []*struct {
		ChainID   int    "json:\"chain_id\" graphql:\"chain_id\""
		TxHash    string "json:\"tx_hash\" graphql:\"tx_hash\""
		Protected bool   "json:\"protected\" graphql:\"protected\""
		Type      int    "json:\"type\" graphql:\"type\""
		Data      string "json:\"data\" graphql:\"data\""
		Gas       int    "json:\"gas\" graphql:\"gas\""
		GasPrice  int    "json:\"gas_price\" graphql:\"gas_price\""
		GasTipCap string "json:\"gas_tip_cap\" graphql:\"gas_tip_cap\""
		GasFeeCap string "json:\"gas_fee_cap\" graphql:\"gas_fee_cap\""
		Value     string "json:\"value\" graphql:\"value\""
		Nonce     int    "json:\"nonce\" graphql:\"nonce\""
		To        string "json:\"to\" graphql:\"to\""
	} "json:\"response\" graphql:\"response\""
}
type GetTransactionsRange struct {
	Response []*struct {
		ChainID   int    "json:\"chain_id\" graphql:\"chain_id\""
		TxHash    string "json:\"tx_hash\" graphql:\"tx_hash\""
		Protected bool   "json:\"protected\" graphql:\"protected\""
		Type      int    "json:\"type\" graphql:\"type\""
		Data      string "json:\"data\" graphql:\"data\""
		Gas       int    "json:\"gas\" graphql:\"gas\""
		GasPrice  int    "json:\"gas_price\" graphql:\"gas_price\""
		GasTipCap string "json:\"gas_tip_cap\" graphql:\"gas_tip_cap\""
		GasFeeCap string "json:\"gas_fee_cap\" graphql:\"gas_fee_cap\""
		Value     string "json:\"value\" graphql:\"value\""
		Nonce     int    "json:\"nonce\" graphql:\"nonce\""
		To        string "json:\"to\" graphql:\"to\""
	} "json:\"response\" graphql:\"response\""
}
type GetTransactionsResolvers struct {
	Response []*struct {
		Receipt struct {
			ChainID           int    "json:\"chain_id\" graphql:\"chain_id\""
			Type              int    "json:\"type\" graphql:\"type\""
			PostState         string "json:\"post_state\" graphql:\"post_state\""
			Status            int    "json:\"status\" graphql:\"status\""
			CumulativeGasUsed int    "json:\"cumulative_gas_used\" graphql:\"cumulative_gas_used\""
			Bloom             string "json:\"bloom\" graphql:\"bloom\""
			TxHash            string "json:\"tx_hash\" graphql:\"tx_hash\""
			ContractAddress   string "json:\"contract_address\" graphql:\"contract_address\""
			GasUsed           int    "json:\"gas_used\" graphql:\"gas_used\""
			BlockNumber       int    "json:\"block_number\" graphql:\"block_number\""
			TransactionIndex  int    "json:\"transaction_index\" graphql:\"transaction_index\""
		} "json:\"receipt\" graphql:\"receipt\""
		Logs []*struct {
			ContractAddress string   "json:\"contract_address\" graphql:\"contract_address\""
			ChainID         int      "json:\"chain_id\" graphql:\"chain_id\""
			Topics          []string "json:\"topics\" graphql:\"topics\""
			Data            string   "json:\"data\" graphql:\"data\""
			BlockNumber     int      "json:\"block_number\" graphql:\"block_number\""
			TxHash          string   "json:\"tx_hash\" graphql:\"tx_hash\""
			TxIndex         int      "json:\"tx_index\" graphql:\"tx_index\""
			BlockHash       string   "json:\"block_hash\" graphql:\"block_hash\""
			Index           int      "json:\"index\" graphql:\"index\""
			Removed         bool     "json:\"removed\" graphql:\"removed\""
		} "json:\"logs\" graphql:\"logs\""
	} "json:\"response\" graphql:\"response\""
}
type GetBlockTime struct {
	Response *int "json:\"response\" graphql:\"response\""
}

const GetLogsDocument = `query GetLogs ($chain_id: Int!, $page: Int!) {
	response: logs(chain_id: $chain_id, page: $page) {
		contract_address
		chain_id
		topics
		data
		block_number
		tx_hash
		tx_index
		block_hash
		index
		removed
	}
}
`

func (c *Client) GetLogs(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetLogs, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetLogs
	if err := c.Client.Post(ctx, "GetLogs", GetLogsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetLogsRangeDocument = `query GetLogsRange ($chain_id: Int!, $start_block: Int!, $end_block: Int!, $page: Int!) {
	response: logsRange(chain_id: $chain_id, start_block: $start_block, end_block: $end_block, page: $page) {
		contract_address
		chain_id
		topics
		data
		block_number
		tx_hash
		tx_index
		block_hash
		index
		removed
	}
}
`

func (c *Client) GetLogsRange(ctx context.Context, chainID int, startBlock int, endBlock int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetLogsRange, error) {
	vars := map[string]interface{}{
		"chain_id":    chainID,
		"start_block": startBlock,
		"end_block":   endBlock,
		"page":        page,
	}

	var res GetLogsRange
	if err := c.Client.Post(ctx, "GetLogsRange", GetLogsRangeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetLogsResolversDocument = `query GetLogsResolvers ($chain_id: Int!, $page: Int!) {
	response: logs(chain_id: $chain_id, page: $page) {
		receipt {
			chain_id
			type
			post_state
			status
			cumulative_gas_used
			bloom
			tx_hash
			contract_address
			gas_used
			block_number
			transaction_index
		}
		transaction {
			chain_id
			tx_hash
			protected
			type
			data
			gas
			gas_price
			gas_tip_cap
			gas_fee_cap
			value
			nonce
			to
		}
	}
}
`

func (c *Client) GetLogsResolvers(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetLogsResolvers, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetLogsResolvers
	if err := c.Client.Post(ctx, "GetLogsResolvers", GetLogsResolversDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetReceiptsDocument = `query GetReceipts ($chain_id: Int!, $page: Int!) {
	response: receipts(chain_id: $chain_id, page: $page) {
		chain_id
		type
		post_state
		status
		cumulative_gas_used
		bloom
		tx_hash
		contract_address
		gas_used
		block_number
		transaction_index
	}
}
`

func (c *Client) GetReceipts(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetReceipts, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetReceipts
	if err := c.Client.Post(ctx, "GetReceipts", GetReceiptsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetReceiptsRangeDocument = `query GetReceiptsRange ($chain_id: Int!, $start_block: Int!, $end_block: Int!, $page: Int!) {
	response: receiptsRange(chain_id: $chain_id, start_block: $start_block, end_block: $end_block, page: $page) {
		chain_id
		type
		post_state
		status
		cumulative_gas_used
		bloom
		tx_hash
		contract_address
		gas_used
		block_number
		transaction_index
	}
}
`

func (c *Client) GetReceiptsRange(ctx context.Context, chainID int, startBlock int, endBlock int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetReceiptsRange, error) {
	vars := map[string]interface{}{
		"chain_id":    chainID,
		"start_block": startBlock,
		"end_block":   endBlock,
		"page":        page,
	}

	var res GetReceiptsRange
	if err := c.Client.Post(ctx, "GetReceiptsRange", GetReceiptsRangeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetReceiptsResolversDocument = `query GetReceiptsResolvers ($chain_id: Int!, $page: Int!) {
	response: receipts(chain_id: $chain_id, page: $page) {
		logs {
			contract_address
			chain_id
			topics
			data
			block_number
			tx_hash
			tx_index
			block_hash
			index
			removed
		}
		transaction {
			chain_id
			tx_hash
			protected
			type
			data
			gas
			gas_price
			gas_tip_cap
			gas_fee_cap
			value
			nonce
			to
		}
	}
}
`

func (c *Client) GetReceiptsResolvers(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetReceiptsResolvers, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetReceiptsResolvers
	if err := c.Client.Post(ctx, "GetReceiptsResolvers", GetReceiptsResolversDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTransactionsDocument = `query GetTransactions ($chain_id: Int!, $page: Int!) {
	response: transactions(chain_id: $chain_id, page: $page) {
		chain_id
		tx_hash
		protected
		type
		data
		gas
		gas_price
		gas_tip_cap
		gas_fee_cap
		value
		nonce
		to
	}
}
`

func (c *Client) GetTransactions(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetTransactions, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetTransactions
	if err := c.Client.Post(ctx, "GetTransactions", GetTransactionsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTransactionsRangeDocument = `query GetTransactionsRange ($chain_id: Int!, $start_block: Int!, $end_block: Int!, $page: Int!) {
	response: transactionsRange(chain_id: $chain_id, start_block: $start_block, end_block: $end_block, page: $page) {
		chain_id
		tx_hash
		protected
		type
		data
		gas
		gas_price
		gas_tip_cap
		gas_fee_cap
		value
		nonce
		to
	}
}
`

func (c *Client) GetTransactionsRange(ctx context.Context, chainID int, startBlock int, endBlock int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetTransactionsRange, error) {
	vars := map[string]interface{}{
		"chain_id":    chainID,
		"start_block": startBlock,
		"end_block":   endBlock,
		"page":        page,
	}

	var res GetTransactionsRange
	if err := c.Client.Post(ctx, "GetTransactionsRange", GetTransactionsRangeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetTransactionsResolversDocument = `query GetTransactionsResolvers ($chain_id: Int!, $page: Int!) {
	response: transactions(chain_id: $chain_id, page: $page) {
		receipt {
			chain_id
			type
			post_state
			status
			cumulative_gas_used
			bloom
			tx_hash
			contract_address
			gas_used
			block_number
			transaction_index
		}
		logs {
			contract_address
			chain_id
			topics
			data
			block_number
			tx_hash
			tx_index
			block_hash
			index
			removed
		}
	}
}
`

func (c *Client) GetTransactionsResolvers(ctx context.Context, chainID int, page int, httpRequestOptions ...client.HTTPRequestOption) (*GetTransactionsResolvers, error) {
	vars := map[string]interface{}{
		"chain_id": chainID,
		"page":     page,
	}

	var res GetTransactionsResolvers
	if err := c.Client.Post(ctx, "GetTransactionsResolvers", GetTransactionsResolversDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetBlockTimeDocument = `query GetBlockTime ($chain_id: Int!, $block_number: Int!) {
	response: blockTime(chain_id: $chain_id, block_number: $block_number)
}
`

func (c *Client) GetBlockTime(ctx context.Context, chainID int, blockNumber int, httpRequestOptions ...client.HTTPRequestOption) (*GetBlockTime, error) {
	vars := map[string]interface{}{
		"chain_id":     chainID,
		"block_number": blockNumber,
	}

	var res GetBlockTime
	if err := c.Client.Post(ctx, "GetBlockTime", GetBlockTimeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Log struct {
	ID          string       `json:"id"`
	Topics      []string     `json:"topics"`
	Data        string       `json:"data"`
	BlockNumber int          `json:"BlockNumber"`
	TxHash      string       `json:"TxHash"`
	TxIndex     int          `json:"TxIndex"`
	BlockHash   string       `json:"BlockHash"`
	Index       int          `json:"Index"`
	Removed     *bool        `json:"Removed"`
	Transaction *Transaction `json:"Transaction"`
}

type Transaction struct {
	Protected *bool   `json:"Protected"`
	Type      *TxType `json:"Type"`
	Data      string  `json:"Data"`
	Gas       int     `json:"Gas"`
	GasPrice  int     `json:"GasPrice"`
	GasTipCap string  `json:"GasTipCap"`
	GasFeeCap string  `json:"GasFeeCap"`
	Value     string  `json:"Value"`
	Nonce     int     `json:"Nonce"`
	To        string  `json:"To"`
	Logs      []*Log  `json:"Logs"`
}

type TxType string

const (
	TxTypeLegacyTx     TxType = "LegacyTx"
	TxTypeAccessListTx TxType = "AccessListTx"
	TxTypeDynamicFeeTx TxType = "DynamicFeeTx"
)

var AllTxType = []TxType{
	TxTypeLegacyTx,
	TxTypeAccessListTx,
	TxTypeDynamicFeeTx,
}

func (e TxType) IsValid() bool {
	switch e {
	case TxTypeLegacyTx, TxTypeAccessListTx, TxTypeDynamicFeeTx:
		return true
	}
	return false
}

func (e TxType) String() string {
	return string(e)
}

func (e *TxType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TxType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TxType", str)
	}
	return nil
}

func (e TxType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"github.com/synapsecns/sanguine/services/scribe/server/graph/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Logs []*model.Log "json:\"logs\" graphql:\"logs\""
}
type GetLogs struct {
	Response []*struct {
		BlockNumber int    "json:\"BlockNumber\" graphql:\"BlockNumber\""
		BlockHash   string "json:\"BlockHash\" graphql:\"BlockHash\""
	} "json:\"response\" graphql:\"response\""
}

const GetLogsDocument = `query GetLogs {
	response: logs {
		BlockNumber
		BlockHash
	}
}
`

func (c *Client) GetLogs(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetLogs, error) {
	vars := map[string]interface{}{}

	var res GetLogs
	if err := c.Client.Post(ctx, "GetLogs", GetLogsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

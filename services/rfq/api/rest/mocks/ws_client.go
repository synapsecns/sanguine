// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/synapsecns/sanguine/services/rfq/api/model"
)

// WsClient is an autogenerated mock type for the WsClient type
type WsClient struct {
	mock.Mock
}

// ReceiveQuoteResponse provides a mock function with given fields: ctx
func (_m *WsClient) ReceiveQuoteResponse(ctx context.Context) (*model.RelayerWsQuoteResponse, error) {
	ret := _m.Called(ctx)

	var r0 *model.RelayerWsQuoteResponse
	if rf, ok := ret.Get(0).(func(context.Context) *model.RelayerWsQuoteResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RelayerWsQuoteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: ctx
func (_m *WsClient) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendQuoteRequest provides a mock function with given fields: ctx, quoteRequest
func (_m *WsClient) SendQuoteRequest(ctx context.Context, quoteRequest *model.RelayerWsQuoteRequest) error {
	ret := _m.Called(ctx, quoteRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RelayerWsQuoteRequest) error); ok {
		r0 = rf(ctx, quoteRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewWsClient creates a new instance of WsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWsClient(t mockConstructorTestingTNewWsClient) *WsClient {
	mock := &WsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

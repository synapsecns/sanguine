// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridgetransactionv2

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IFastBridgeBridgeParams is an auto generated low-level Go binding around an user-defined struct.
type IFastBridgeBridgeParams struct {
	DstChainId   uint32
	Sender       common.Address
	To           common.Address
	OriginToken  common.Address
	DestToken    common.Address
	OriginAmount *big.Int
	DestAmount   *big.Int
	SendChainGas bool
	Deadline     *big.Int
}

// IFastBridgeBridgeTransaction is an auto generated low-level Go binding around an user-defined struct.
type IFastBridgeBridgeTransaction struct {
	OriginChainId   uint32
	DestChainId     uint32
	OriginSender    common.Address
	DestRecipient   common.Address
	OriginToken     common.Address
	DestToken       common.Address
	OriginAmount    *big.Int
	DestAmount      *big.Int
	OriginFeeAmount *big.Int
	SendChainGas    bool
	Deadline        *big.Int
	Nonce           *big.Int
}

// IFastBridgeV2BridgeParamsV2 is an auto generated low-level Go binding around an user-defined struct.
type IFastBridgeV2BridgeParamsV2 struct {
	QuoteRelayer            common.Address
	QuoteExclusivitySeconds *big.Int
	QuoteId                 []byte
	ZapNative               *big.Int
	ZapData                 []byte
}

// IFastBridgeV2BridgeTransactionV2 is an auto generated low-level Go binding around an user-defined struct.
type IFastBridgeV2BridgeTransactionV2 struct {
	OriginChainId      uint32
	DestChainId        uint32
	OriginSender       common.Address
	DestRecipient      common.Address
	OriginToken        common.Address
	DestToken          common.Address
	OriginAmount       *big.Int
	DestAmount         *big.Int
	OriginFeeAmount    *big.Int
	Deadline           *big.Int
	Nonce              *big.Int
	ExclusivityRelayer common.Address
	ExclusivityEndTime *big.Int
	ZapNative          *big.Int
	ZapData            []byte
}

// IMulticall3Call is an auto generated low-level Go binding around an user-defined struct.
type IMulticall3Call struct {
	Target   common.Address
	CallData []byte
}

// IMulticall3Call3 is an auto generated low-level Go binding around an user-defined struct.
type IMulticall3Call3 struct {
	Target       common.Address
	AllowFailure bool
	CallData     []byte
}

// IMulticall3Call3Value is an auto generated low-level Go binding around an user-defined struct.
type IMulticall3Call3Value struct {
	Target       common.Address
	AllowFailure bool
	Value        *big.Int
	CallData     []byte
}

// IMulticall3Result is an auto generated low-level Go binding around an user-defined struct.
type IMulticall3Result struct {
	Success    bool
	ReturnData []byte
}

// StdInvariantFuzzArtifactSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzArtifactSelector struct {
	Artifact  string
	Selectors [][4]byte
}

// StdInvariantFuzzInterface is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzInterface struct {
	Addr      common.Address
	Artifacts []string
}

// StdInvariantFuzzSelector is an auto generated low-level Go binding around an user-defined struct.
type StdInvariantFuzzSelector struct {
	Addr      common.Address
	Selectors [][4]byte
}

// VmSafeAccountAccess is an auto generated low-level Go binding around an user-defined struct.
type VmSafeAccountAccess struct {
	ChainInfo       VmSafeChainInfo
	Kind            uint8
	Account         common.Address
	Accessor        common.Address
	Initialized     bool
	OldBalance      *big.Int
	NewBalance      *big.Int
	DeployedCode    []byte
	Value           *big.Int
	Data            []byte
	Reverted        bool
	StorageAccesses []VmSafeStorageAccess
	Depth           uint64
}

// VmSafeChainInfo is an auto generated low-level Go binding around an user-defined struct.
type VmSafeChainInfo struct {
	ForkId  *big.Int
	ChainId *big.Int
}

// VmSafeDirEntry is an auto generated low-level Go binding around an user-defined struct.
type VmSafeDirEntry struct {
	ErrorMessage string
	Path         string
	Depth        uint64
	IsDir        bool
	IsSymlink    bool
}

// VmSafeEthGetLogs is an auto generated low-level Go binding around an user-defined struct.
type VmSafeEthGetLogs struct {
	Emitter          common.Address
	Topics           [][32]byte
	Data             []byte
	BlockHash        [32]byte
	BlockNumber      uint64
	TransactionHash  [32]byte
	TransactionIndex uint64
	LogIndex         *big.Int
	Removed          bool
}

// VmSafeFfiResult is an auto generated low-level Go binding around an user-defined struct.
type VmSafeFfiResult struct {
	ExitCode int32
	Stdout   []byte
	Stderr   []byte
}

// VmSafeFsMetadata is an auto generated low-level Go binding around an user-defined struct.
type VmSafeFsMetadata struct {
	IsDir     bool
	IsSymlink bool
	Length    *big.Int
	ReadOnly  bool
	Modified  *big.Int
	Accessed  *big.Int
	Created   *big.Int
}

// VmSafeGas is an auto generated low-level Go binding around an user-defined struct.
type VmSafeGas struct {
	GasLimit      uint64
	GasTotalUsed  uint64
	GasMemoryUsed uint64
	GasRefunded   int64
	GasRemaining  uint64
}

// VmSafeLog is an auto generated low-level Go binding around an user-defined struct.
type VmSafeLog struct {
	Topics  [][32]byte
	Data    []byte
	Emitter common.Address
}

// VmSafeRpc is an auto generated low-level Go binding around an user-defined struct.
type VmSafeRpc struct {
	Key string
	Url string
}

// VmSafeStorageAccess is an auto generated low-level Go binding around an user-defined struct.
type VmSafeStorageAccess struct {
	Account       common.Address
	Slot          [32]byte
	IsWrite       bool
	PreviousValue [32]byte
	NewValue      [32]byte
	Reverted      bool
}

// VmSafeWallet is an auto generated low-level Go binding around an user-defined struct.
type VmSafeWallet struct {
	Addr       common.Address
	PublicKeyX *big.Int
	PublicKeyY *big.Int
	PrivateKey *big.Int
}

// BridgeTransactionV2HarnessMetaData contains all meta data concerning the BridgeTransactionV2Harness contract.
var BridgeTransactionV2HarnessMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decodeV2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"destAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"destChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"destRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"destToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"bridgeTx\",\"type\":\"tuple\"}],\"name\":\"encodeV2\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"exclusivityEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"exclusivityRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"originAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"originChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"originFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"originSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"originToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"zapData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"zapNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e79f1782": "deadline(bytes)",
		"24657024": "decodeV2(bytes)",
		"12d0c512": "destAmount(bytes)",
		"5c3fa4c0": "destChainId(bytes)",
		"9c538802": "destRecipient(bytes)",
		"37518e50": "destToken(bytes)",
		"faef535a": "encodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))",
		"6907efd7": "exclusivityEndTime(bytes)",
		"dcafa970": "exclusivityRelayer(bytes)",
		"4e765004": "nonce(bytes)",
		"7241b9cb": "originAmount(bytes)",
		"93bb0d80": "originChainId(bytes)",
		"e938730e": "originFeeAmount(bytes)",
		"9bdb46fe": "originSender(bytes)",
		"93832899": "originToken(bytes)",
		"7d67c5a7": "version(bytes)",
		"0af3f403": "zapData(bytes)",
		"230602c1": "zapNative(bytes)",
	},
	Bin: "0x608060405234801561001057600080fd5b50610e65806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637d67c5a7116100b25780639c53880211610081578063e79f178211610066578063e79f1782146102d7578063e938730e146102ea578063faef535a146102fd57600080fd5b80639c538802146102b1578063dcafa970146102c457600080fd5b80637d67c5a714610252578063938328991461027857806393bb0d801461028b5780639bdb46fe1461029e57600080fd5b806337518e50116101095780635c3fa4c0116100ee5780635c3fa4c0146102045780636907efd71461022c5780637241b9cb1461023f57600080fd5b806337518e50146101b95780634e765004146101f157600080fd5b80630af3f4031461013b57806312d0c51214610165578063230602c1146101865780632465702414610199575b600080fd5b61014e610149366004610868565b61031d565b60405161015c9291906108da565b60405180910390f35b610178610173366004610868565b610335565b60405190815260200161015c565b610178610194366004610868565b610344565b6101ac6101a7366004610868565b610351565b60405161015c9190610995565b6101cc6101c7366004610868565b61044e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161015c565b6101786101ff366004610868565b61045d565b610217610212366004610868565b610469565b60405163ffffffff909116815260200161015c565b61017861023a366004610868565b610478565b61017861024d366004610868565b610485565b610265610260366004610868565b610491565b60405161ffff909116815260200161015c565b6101cc610286366004610868565b61049d565b610217610299366004610868565b6104ac565b6101cc6102ac366004610868565b6104bb565b6101cc6102bf366004610868565b6104ca565b6101cc6102d2366004610868565b6104d9565b6101786102e5366004610868565b6104e8565b6101786102f8366004610868565b6104f4565b61031061030b366004610c34565b610500565b60405161015c9190610d69565b36600061032a8484610511565b915091509250929050565b6000607a8301355b9392505050565b600061012e83013561033d565b610444604051806101e00160405280600063ffffffff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b61033d8383610522565b6000604683013560601c61033d565b600060da83013561033d565b6000600683013560e01c61033d565b600061010e83013561033d565b6000605a83013561033d565b6000823560f01c61033d565b6000603283013560601c61033d565b6000600283013560e01c61033d565b6000600a83013560601c61033d565b6000601e83013560601c61033d565b600060fa83013560601c61033d565b600060ba83013561033d565b6000609a83013561033d565b606061050b82610705565b92915050565b36600061032a8361014e8187610d7c565b610615604051806101e00160405280600063ffffffff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b600283013560e090811c82526006840135811c6020830152600a840135606090811c6040840152601e850135811c818401526032850135811c60808401526046850135811c60a0840152605a85013560c0840152607a85013591830191909152609a84013561010083015260ba84013561012083015260da84013561014083015260fa840135901c61016082015261010e83013561018082015261012e8301356101a08201526106c58383610511565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101c082015292915050565b8051602080830151604080850151606086810151608088015160a089015160c08a015195517e02000000000000000000000000000000000000000000000000000000000000988101989098527fffffffff0000000000000000000000000000000000000000000000000000000060e0998a1b811660228a01529690981b90951660268701527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000092821b8316602a870152811b8216603e86015292831b8116605285015293821b9093166066830152607a820192909252600090609a01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260e08501516101008601516101208701516101408801516101608901516101808a01516101a08b01516101c08c0151979950610851988a9890602001610da6565b604051602081830303815290604052915050919050565b6000806020838503121561087b57600080fd5b823567ffffffffffffffff8082111561089357600080fd5b818501915085601f8301126108a757600080fd5b8135818111156108b657600080fd5b8660208285010111156108c857600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60005b8381101561094257818101518382015260200161092a565b50506000910152565b60008151808452610963816020860160208601610927565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526109ac60208201835163ffffffff169052565b600060208301516109c5604084018263ffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e08381019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180610ab78185018373ffffffffffffffffffffffffffffffffffffffff169052565b8401516101a0848101919091528401516101c0808501919091528401516101e0808501529050610aeb61020084018261094b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715610b4657610b46610af3565b60405290565b803563ffffffff81168114610b6057600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b6057600080fd5b600082601f830112610b9a57600080fd5b813567ffffffffffffffff80821115610bb557610bb5610af3565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610bfb57610bfb610af3565b81604052838152866020858801011115610c1457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610c4657600080fd5b813567ffffffffffffffff80821115610c5e57600080fd5b908301906101e08286031215610c7357600080fd5b610c7b610b22565b610c8483610b4c565b8152610c9260208401610b4c565b6020820152610ca360408401610b65565b6040820152610cb460608401610b65565b6060820152610cc560808401610b65565b6080820152610cd660a08401610b65565b60a082015260c0838101359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160610d1e818501610b65565b9082015261018083810135908201526101a080840135908201526101c08084013583811115610d4c57600080fd5b610d5888828701610b89565b918301919091525095945050505050565b60208152600061033d602083018461094b565b60008085851115610d8c57600080fd5b83861115610d9957600080fd5b5050820193919092039150565b60008a51610db8818460208f01610927565b80830190508a81528960208201528860408201528760608201527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b1660808201528560948201528460b48201528351610e1c8160d4840160208801610927565b0160d4019b9a505050505050505050505056fea2646970667358221220dd848818a37447ce56353fbd264abb2bf854e7ccf2b34de968bd555a971eb57e64736f6c63430008180033",
}

// BridgeTransactionV2HarnessABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeTransactionV2HarnessMetaData.ABI instead.
var BridgeTransactionV2HarnessABI = BridgeTransactionV2HarnessMetaData.ABI

// Deprecated: Use BridgeTransactionV2HarnessMetaData.Sigs instead.
// BridgeTransactionV2HarnessFuncSigs maps the 4-byte function signature to its string representation.
var BridgeTransactionV2HarnessFuncSigs = BridgeTransactionV2HarnessMetaData.Sigs

// BridgeTransactionV2HarnessBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeTransactionV2HarnessMetaData.Bin instead.
var BridgeTransactionV2HarnessBin = BridgeTransactionV2HarnessMetaData.Bin

// DeployBridgeTransactionV2Harness deploys a new Ethereum contract, binding an instance of BridgeTransactionV2Harness to it.
func DeployBridgeTransactionV2Harness(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeTransactionV2Harness, error) {
	parsed, err := BridgeTransactionV2HarnessMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeTransactionV2HarnessBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeTransactionV2Harness{BridgeTransactionV2HarnessCaller: BridgeTransactionV2HarnessCaller{contract: contract}, BridgeTransactionV2HarnessTransactor: BridgeTransactionV2HarnessTransactor{contract: contract}, BridgeTransactionV2HarnessFilterer: BridgeTransactionV2HarnessFilterer{contract: contract}}, nil
}

// BridgeTransactionV2Harness is an auto generated Go binding around an Ethereum contract.
type BridgeTransactionV2Harness struct {
	BridgeTransactionV2HarnessCaller     // Read-only binding to the contract
	BridgeTransactionV2HarnessTransactor // Write-only binding to the contract
	BridgeTransactionV2HarnessFilterer   // Log filterer for contract events
}

// BridgeTransactionV2HarnessCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeTransactionV2HarnessCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2HarnessTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactionV2HarnessTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2HarnessFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeTransactionV2HarnessFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2HarnessSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeTransactionV2HarnessSession struct {
	Contract     *BridgeTransactionV2Harness // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// BridgeTransactionV2HarnessCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeTransactionV2HarnessCallerSession struct {
	Contract *BridgeTransactionV2HarnessCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// BridgeTransactionV2HarnessTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactionV2HarnessTransactorSession struct {
	Contract     *BridgeTransactionV2HarnessTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// BridgeTransactionV2HarnessRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeTransactionV2HarnessRaw struct {
	Contract *BridgeTransactionV2Harness // Generic contract binding to access the raw methods on
}

// BridgeTransactionV2HarnessCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeTransactionV2HarnessCallerRaw struct {
	Contract *BridgeTransactionV2HarnessCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactionV2HarnessTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactionV2HarnessTransactorRaw struct {
	Contract *BridgeTransactionV2HarnessTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeTransactionV2Harness creates a new instance of BridgeTransactionV2Harness, bound to a specific deployed contract.
func NewBridgeTransactionV2Harness(address common.Address, backend bind.ContractBackend) (*BridgeTransactionV2Harness, error) {
	contract, err := bindBridgeTransactionV2Harness(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2Harness{BridgeTransactionV2HarnessCaller: BridgeTransactionV2HarnessCaller{contract: contract}, BridgeTransactionV2HarnessTransactor: BridgeTransactionV2HarnessTransactor{contract: contract}, BridgeTransactionV2HarnessFilterer: BridgeTransactionV2HarnessFilterer{contract: contract}}, nil
}

// NewBridgeTransactionV2HarnessCaller creates a new read-only instance of BridgeTransactionV2Harness, bound to a specific deployed contract.
func NewBridgeTransactionV2HarnessCaller(address common.Address, caller bind.ContractCaller) (*BridgeTransactionV2HarnessCaller, error) {
	contract, err := bindBridgeTransactionV2Harness(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2HarnessCaller{contract: contract}, nil
}

// NewBridgeTransactionV2HarnessTransactor creates a new write-only instance of BridgeTransactionV2Harness, bound to a specific deployed contract.
func NewBridgeTransactionV2HarnessTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactionV2HarnessTransactor, error) {
	contract, err := bindBridgeTransactionV2Harness(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2HarnessTransactor{contract: contract}, nil
}

// NewBridgeTransactionV2HarnessFilterer creates a new log filterer instance of BridgeTransactionV2Harness, bound to a specific deployed contract.
func NewBridgeTransactionV2HarnessFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeTransactionV2HarnessFilterer, error) {
	contract, err := bindBridgeTransactionV2Harness(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2HarnessFilterer{contract: contract}, nil
}

// bindBridgeTransactionV2Harness binds a generic wrapper to an already deployed contract.
func bindBridgeTransactionV2Harness(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeTransactionV2HarnessMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Harness.Contract.BridgeTransactionV2HarnessCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Harness.Contract.BridgeTransactionV2HarnessTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Harness.Contract.BridgeTransactionV2HarnessTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Harness.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Harness.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Harness.Contract.contract.Transact(opts, method, params...)
}

// Deadline is a free data retrieval call binding the contract method 0xe79f1782.
//
// Solidity: function deadline(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) Deadline(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "deadline", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deadline is a free data retrieval call binding the contract method 0xe79f1782.
//
// Solidity: function deadline(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) Deadline(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.Deadline(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// Deadline is a free data retrieval call binding the contract method 0xe79f1782.
//
// Solidity: function deadline(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) Deadline(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.Deadline(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DecodeV2 is a free data retrieval call binding the contract method 0x24657024.
//
// Solidity: function decodeV2(bytes encodedTx) pure returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) DecodeV2(opts *bind.CallOpts, encodedTx []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "decodeV2", encodedTx)

	if err != nil {
		return *new(IFastBridgeV2BridgeTransactionV2), err
	}

	out0 := *abi.ConvertType(out[0], new(IFastBridgeV2BridgeTransactionV2)).(*IFastBridgeV2BridgeTransactionV2)

	return out0, err

}

// DecodeV2 is a free data retrieval call binding the contract method 0x24657024.
//
// Solidity: function decodeV2(bytes encodedTx) pure returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) DecodeV2(encodedTx []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	return _BridgeTransactionV2Harness.Contract.DecodeV2(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DecodeV2 is a free data retrieval call binding the contract method 0x24657024.
//
// Solidity: function decodeV2(bytes encodedTx) pure returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) DecodeV2(encodedTx []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	return _BridgeTransactionV2Harness.Contract.DecodeV2(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestAmount is a free data retrieval call binding the contract method 0x12d0c512.
//
// Solidity: function destAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) DestAmount(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "destAmount", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DestAmount is a free data retrieval call binding the contract method 0x12d0c512.
//
// Solidity: function destAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) DestAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.DestAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestAmount is a free data retrieval call binding the contract method 0x12d0c512.
//
// Solidity: function destAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) DestAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.DestAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestChainId is a free data retrieval call binding the contract method 0x5c3fa4c0.
//
// Solidity: function destChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) DestChainId(opts *bind.CallOpts, encodedTx []byte) (uint32, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "destChainId", encodedTx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// DestChainId is a free data retrieval call binding the contract method 0x5c3fa4c0.
//
// Solidity: function destChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) DestChainId(encodedTx []byte) (uint32, error) {
	return _BridgeTransactionV2Harness.Contract.DestChainId(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestChainId is a free data retrieval call binding the contract method 0x5c3fa4c0.
//
// Solidity: function destChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) DestChainId(encodedTx []byte) (uint32, error) {
	return _BridgeTransactionV2Harness.Contract.DestChainId(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestRecipient is a free data retrieval call binding the contract method 0x9c538802.
//
// Solidity: function destRecipient(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) DestRecipient(opts *bind.CallOpts, encodedTx []byte) (common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "destRecipient", encodedTx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DestRecipient is a free data retrieval call binding the contract method 0x9c538802.
//
// Solidity: function destRecipient(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) DestRecipient(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.DestRecipient(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestRecipient is a free data retrieval call binding the contract method 0x9c538802.
//
// Solidity: function destRecipient(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) DestRecipient(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.DestRecipient(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestToken is a free data retrieval call binding the contract method 0x37518e50.
//
// Solidity: function destToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) DestToken(opts *bind.CallOpts, encodedTx []byte) (common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "destToken", encodedTx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DestToken is a free data retrieval call binding the contract method 0x37518e50.
//
// Solidity: function destToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) DestToken(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.DestToken(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// DestToken is a free data retrieval call binding the contract method 0x37518e50.
//
// Solidity: function destToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) DestToken(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.DestToken(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// EncodeV2 is a free data retrieval call binding the contract method 0xfaef535a.
//
// Solidity: function encodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) EncodeV2(opts *bind.CallOpts, bridgeTx IFastBridgeV2BridgeTransactionV2) ([]byte, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "encodeV2", bridgeTx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeV2 is a free data retrieval call binding the contract method 0xfaef535a.
//
// Solidity: function encodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) EncodeV2(bridgeTx IFastBridgeV2BridgeTransactionV2) ([]byte, error) {
	return _BridgeTransactionV2Harness.Contract.EncodeV2(&_BridgeTransactionV2Harness.CallOpts, bridgeTx)
}

// EncodeV2 is a free data retrieval call binding the contract method 0xfaef535a.
//
// Solidity: function encodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) EncodeV2(bridgeTx IFastBridgeV2BridgeTransactionV2) ([]byte, error) {
	return _BridgeTransactionV2Harness.Contract.EncodeV2(&_BridgeTransactionV2Harness.CallOpts, bridgeTx)
}

// ExclusivityEndTime is a free data retrieval call binding the contract method 0x6907efd7.
//
// Solidity: function exclusivityEndTime(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) ExclusivityEndTime(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "exclusivityEndTime", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExclusivityEndTime is a free data retrieval call binding the contract method 0x6907efd7.
//
// Solidity: function exclusivityEndTime(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) ExclusivityEndTime(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.ExclusivityEndTime(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ExclusivityEndTime is a free data retrieval call binding the contract method 0x6907efd7.
//
// Solidity: function exclusivityEndTime(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) ExclusivityEndTime(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.ExclusivityEndTime(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ExclusivityRelayer is a free data retrieval call binding the contract method 0xdcafa970.
//
// Solidity: function exclusivityRelayer(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) ExclusivityRelayer(opts *bind.CallOpts, encodedTx []byte) (common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "exclusivityRelayer", encodedTx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ExclusivityRelayer is a free data retrieval call binding the contract method 0xdcafa970.
//
// Solidity: function exclusivityRelayer(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) ExclusivityRelayer(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.ExclusivityRelayer(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ExclusivityRelayer is a free data retrieval call binding the contract method 0xdcafa970.
//
// Solidity: function exclusivityRelayer(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) ExclusivityRelayer(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.ExclusivityRelayer(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// Nonce is a free data retrieval call binding the contract method 0x4e765004.
//
// Solidity: function nonce(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) Nonce(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "nonce", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x4e765004.
//
// Solidity: function nonce(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) Nonce(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.Nonce(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// Nonce is a free data retrieval call binding the contract method 0x4e765004.
//
// Solidity: function nonce(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) Nonce(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.Nonce(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginAmount is a free data retrieval call binding the contract method 0x7241b9cb.
//
// Solidity: function originAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) OriginAmount(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "originAmount", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OriginAmount is a free data retrieval call binding the contract method 0x7241b9cb.
//
// Solidity: function originAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) OriginAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.OriginAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginAmount is a free data retrieval call binding the contract method 0x7241b9cb.
//
// Solidity: function originAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) OriginAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.OriginAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginChainId is a free data retrieval call binding the contract method 0x93bb0d80.
//
// Solidity: function originChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) OriginChainId(opts *bind.CallOpts, encodedTx []byte) (uint32, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "originChainId", encodedTx)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// OriginChainId is a free data retrieval call binding the contract method 0x93bb0d80.
//
// Solidity: function originChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) OriginChainId(encodedTx []byte) (uint32, error) {
	return _BridgeTransactionV2Harness.Contract.OriginChainId(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginChainId is a free data retrieval call binding the contract method 0x93bb0d80.
//
// Solidity: function originChainId(bytes encodedTx) pure returns(uint32)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) OriginChainId(encodedTx []byte) (uint32, error) {
	return _BridgeTransactionV2Harness.Contract.OriginChainId(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginFeeAmount is a free data retrieval call binding the contract method 0xe938730e.
//
// Solidity: function originFeeAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) OriginFeeAmount(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "originFeeAmount", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OriginFeeAmount is a free data retrieval call binding the contract method 0xe938730e.
//
// Solidity: function originFeeAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) OriginFeeAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.OriginFeeAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginFeeAmount is a free data retrieval call binding the contract method 0xe938730e.
//
// Solidity: function originFeeAmount(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) OriginFeeAmount(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.OriginFeeAmount(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginSender is a free data retrieval call binding the contract method 0x9bdb46fe.
//
// Solidity: function originSender(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) OriginSender(opts *bind.CallOpts, encodedTx []byte) (common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "originSender", encodedTx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OriginSender is a free data retrieval call binding the contract method 0x9bdb46fe.
//
// Solidity: function originSender(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) OriginSender(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.OriginSender(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginSender is a free data retrieval call binding the contract method 0x9bdb46fe.
//
// Solidity: function originSender(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) OriginSender(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.OriginSender(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginToken is a free data retrieval call binding the contract method 0x93832899.
//
// Solidity: function originToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) OriginToken(opts *bind.CallOpts, encodedTx []byte) (common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "originToken", encodedTx)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OriginToken is a free data retrieval call binding the contract method 0x93832899.
//
// Solidity: function originToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) OriginToken(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.OriginToken(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// OriginToken is a free data retrieval call binding the contract method 0x93832899.
//
// Solidity: function originToken(bytes encodedTx) pure returns(address)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) OriginToken(encodedTx []byte) (common.Address, error) {
	return _BridgeTransactionV2Harness.Contract.OriginToken(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// Version is a free data retrieval call binding the contract method 0x7d67c5a7.
//
// Solidity: function version(bytes encodedTx) pure returns(uint16)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) Version(opts *bind.CallOpts, encodedTx []byte) (uint16, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "version", encodedTx)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x7d67c5a7.
//
// Solidity: function version(bytes encodedTx) pure returns(uint16)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) Version(encodedTx []byte) (uint16, error) {
	return _BridgeTransactionV2Harness.Contract.Version(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// Version is a free data retrieval call binding the contract method 0x7d67c5a7.
//
// Solidity: function version(bytes encodedTx) pure returns(uint16)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) Version(encodedTx []byte) (uint16, error) {
	return _BridgeTransactionV2Harness.Contract.Version(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ZapData is a free data retrieval call binding the contract method 0x0af3f403.
//
// Solidity: function zapData(bytes encodedTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) ZapData(opts *bind.CallOpts, encodedTx []byte) ([]byte, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "zapData", encodedTx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ZapData is a free data retrieval call binding the contract method 0x0af3f403.
//
// Solidity: function zapData(bytes encodedTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) ZapData(encodedTx []byte) ([]byte, error) {
	return _BridgeTransactionV2Harness.Contract.ZapData(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ZapData is a free data retrieval call binding the contract method 0x0af3f403.
//
// Solidity: function zapData(bytes encodedTx) pure returns(bytes)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) ZapData(encodedTx []byte) ([]byte, error) {
	return _BridgeTransactionV2Harness.Contract.ZapData(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ZapNative is a free data retrieval call binding the contract method 0x230602c1.
//
// Solidity: function zapNative(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCaller) ZapNative(opts *bind.CallOpts, encodedTx []byte) (*big.Int, error) {
	var out []interface{}
	err := _BridgeTransactionV2Harness.contract.Call(opts, &out, "zapNative", encodedTx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ZapNative is a free data retrieval call binding the contract method 0x230602c1.
//
// Solidity: function zapNative(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessSession) ZapNative(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.ZapNative(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// ZapNative is a free data retrieval call binding the contract method 0x230602c1.
//
// Solidity: function zapNative(bytes encodedTx) pure returns(uint256)
func (_BridgeTransactionV2Harness *BridgeTransactionV2HarnessCallerSession) ZapNative(encodedTx []byte) (*big.Int, error) {
	return _BridgeTransactionV2Harness.Contract.ZapNative(&_BridgeTransactionV2Harness.CallOpts, encodedTx)
}

// BridgeTransactionV2LibMetaData contains all meta data concerning the BridgeTransactionV2Lib contract.
var BridgeTransactionV2LibMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"BridgeTransactionV2__InvalidEncodedTx\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"BridgeTransactionV2__UnsupportedVersion\",\"type\":\"error\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002cc83b74e097e619f95c860e0c4e040a51d28f0af6d2b02d1038c0e64bc2c8464736f6c63430008180033",
}

// BridgeTransactionV2LibABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeTransactionV2LibMetaData.ABI instead.
var BridgeTransactionV2LibABI = BridgeTransactionV2LibMetaData.ABI

// BridgeTransactionV2LibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeTransactionV2LibMetaData.Bin instead.
var BridgeTransactionV2LibBin = BridgeTransactionV2LibMetaData.Bin

// DeployBridgeTransactionV2Lib deploys a new Ethereum contract, binding an instance of BridgeTransactionV2Lib to it.
func DeployBridgeTransactionV2Lib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeTransactionV2Lib, error) {
	parsed, err := BridgeTransactionV2LibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeTransactionV2LibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeTransactionV2Lib{BridgeTransactionV2LibCaller: BridgeTransactionV2LibCaller{contract: contract}, BridgeTransactionV2LibTransactor: BridgeTransactionV2LibTransactor{contract: contract}, BridgeTransactionV2LibFilterer: BridgeTransactionV2LibFilterer{contract: contract}}, nil
}

// BridgeTransactionV2Lib is an auto generated Go binding around an Ethereum contract.
type BridgeTransactionV2Lib struct {
	BridgeTransactionV2LibCaller     // Read-only binding to the contract
	BridgeTransactionV2LibTransactor // Write-only binding to the contract
	BridgeTransactionV2LibFilterer   // Log filterer for contract events
}

// BridgeTransactionV2LibCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeTransactionV2LibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2LibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactionV2LibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2LibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeTransactionV2LibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2LibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeTransactionV2LibSession struct {
	Contract     *BridgeTransactionV2Lib // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BridgeTransactionV2LibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeTransactionV2LibCallerSession struct {
	Contract *BridgeTransactionV2LibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// BridgeTransactionV2LibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactionV2LibTransactorSession struct {
	Contract     *BridgeTransactionV2LibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// BridgeTransactionV2LibRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeTransactionV2LibRaw struct {
	Contract *BridgeTransactionV2Lib // Generic contract binding to access the raw methods on
}

// BridgeTransactionV2LibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeTransactionV2LibCallerRaw struct {
	Contract *BridgeTransactionV2LibCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactionV2LibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactionV2LibTransactorRaw struct {
	Contract *BridgeTransactionV2LibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeTransactionV2Lib creates a new instance of BridgeTransactionV2Lib, bound to a specific deployed contract.
func NewBridgeTransactionV2Lib(address common.Address, backend bind.ContractBackend) (*BridgeTransactionV2Lib, error) {
	contract, err := bindBridgeTransactionV2Lib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2Lib{BridgeTransactionV2LibCaller: BridgeTransactionV2LibCaller{contract: contract}, BridgeTransactionV2LibTransactor: BridgeTransactionV2LibTransactor{contract: contract}, BridgeTransactionV2LibFilterer: BridgeTransactionV2LibFilterer{contract: contract}}, nil
}

// NewBridgeTransactionV2LibCaller creates a new read-only instance of BridgeTransactionV2Lib, bound to a specific deployed contract.
func NewBridgeTransactionV2LibCaller(address common.Address, caller bind.ContractCaller) (*BridgeTransactionV2LibCaller, error) {
	contract, err := bindBridgeTransactionV2Lib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2LibCaller{contract: contract}, nil
}

// NewBridgeTransactionV2LibTransactor creates a new write-only instance of BridgeTransactionV2Lib, bound to a specific deployed contract.
func NewBridgeTransactionV2LibTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactionV2LibTransactor, error) {
	contract, err := bindBridgeTransactionV2Lib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2LibTransactor{contract: contract}, nil
}

// NewBridgeTransactionV2LibFilterer creates a new log filterer instance of BridgeTransactionV2Lib, bound to a specific deployed contract.
func NewBridgeTransactionV2LibFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeTransactionV2LibFilterer, error) {
	contract, err := bindBridgeTransactionV2Lib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2LibFilterer{contract: contract}, nil
}

// bindBridgeTransactionV2Lib binds a generic wrapper to an already deployed contract.
func bindBridgeTransactionV2Lib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeTransactionV2LibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Lib.Contract.BridgeTransactionV2LibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Lib.Contract.BridgeTransactionV2LibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Lib.Contract.BridgeTransactionV2LibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Lib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Lib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Lib *BridgeTransactionV2LibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Lib.Contract.contract.Transact(opts, method, params...)
}

// BridgeTransactionV2TestMetaData contains all meta data concerning the BridgeTransactionV2Test contract.
var BridgeTransactionV2TestMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"bridgeTx\",\"type\":\"tuple\"}],\"name\":\"test_roundtrip\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"bridgeTx\",\"type\":\"tuple\"}],\"name\":\"test_roundtrip_decodeV2\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"fa7626d4": "IS_TEST()",
		"cd95c3aa": "assertEq((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes),(uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))",
		"b5508aa9": "excludeArtifacts()",
		"e20c9f71": "excludeContracts()",
		"1ed7831c": "excludeSenders()",
		"ba414fa6": "failed()",
		"0a9254e4": "setUp()",
		"66d9a9a0": "targetArtifactSelectors()",
		"85226c81": "targetArtifacts()",
		"3f7286f4": "targetContracts()",
		"2ade3880": "targetInterfaces()",
		"916a17c6": "targetSelectors()",
		"3e5e3c23": "targetSenders()",
		"0b2599cc": "test_roundtrip((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))",
		"0154afb0": "test_roundtrip_decodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))",
	},
	Bin: "0x6080604052600c8054600160ff199182168117909255601e8054909116909117905534801561002d57600080fd5b5061334d8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806366d9a9a011610097578063ba414fa611610066578063ba414fa6146101b4578063cd95c3aa146101cc578063e20c9f71146101df578063fa7626d4146101e757600080fd5b806366d9a9a01461016d57806385226c8114610182578063916a17c614610197578063b5508aa9146101ac57600080fd5b80631ed7831c116100d35780631ed7831c1461012a5780632ade3880146101485780633e5e3c231461015d5780633f7286f41461016557600080fd5b80630154afb0146100fa5780630a9254e41461010f5780630b2599cc14610117575b600080fd5b61010d610108366004611bf0565b6101f4565b005b61010d61034b565b61010d610125366004611bf0565b6103b6565b610132610f03565b60405161013f9190611c2d565b60405180910390f35b610150610f72565b60405161013f9190611cd7565b6101326110c1565b61013261112e565b61017561119b565b60405161013f9190611e3e565b61018a61131d565b60405161013f9190611ee3565b61019f6113ed565b60405161013f9190611f65565b61018a6114f5565b6101bc6115c5565b604051901515815260200161013f565b61010d6101da366004612001565b611699565b6101326117c6565b601e546101bc9060ff1681565b601e546040517ffaef535a000000000000000000000000000000000000000000000000000000008152600091610100900473ffffffffffffffffffffffffffffffffffffffff169063faef535a90610250908590600401612065565b600060405180830381865afa15801561026d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102959190810190612200565b601e546040517f2465702400000000000000000000000000000000000000000000000000000000815291925060009161010090910473ffffffffffffffffffffffffffffffffffffffff16906324657024906102f5908590600401612235565b600060405180830381865afa158015610312573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261033a9190810190612265565b90506103468184611699565b505050565b6040516103579061197b565b604051809103906000f080158015610373573d6000803e3d6000fd5b50601e60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b601e546040517ffaef535a000000000000000000000000000000000000000000000000000000008152600091610100900473ffffffffffffffffffffffffffffffffffffffff169063faef535a90610412908590600401612065565b600060405180830381865afa15801561042f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104579190810190612200565b601e546040517f7d67c5a70000000000000000000000000000000000000000000000000000000081529192506105049161010090910473ffffffffffffffffffffffffffffffffffffffff1690637d67c5a7906104b8908590600401612235565b602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f9919061239a565b61ffff166002611833565b601e546040517f93bb0d800000000000000000000000000000000000000000000000000000000081526105b891610100900473ffffffffffffffffffffffffffffffffffffffff16906393bb0d8090610561908590600401612235565b602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a291906123be565b63ffffffff16836000015163ffffffff16611833565b601e546040517f5c3fa4c000000000000000000000000000000000000000000000000000000000815261066c91610100900473ffffffffffffffffffffffffffffffffffffffff1690635c3fa4c090610615908590600401612235565b602060405180830381865afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065691906123be565b63ffffffff16836020015163ffffffff16611833565b601e546040517f9bdb46fe00000000000000000000000000000000000000000000000000000000815261071491610100900473ffffffffffffffffffffffffffffffffffffffff1690639bdb46fe906106c9908590600401612235565b602060405180830381865afa1580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a91906123db565b83604001516118bb565b601e546040517f9c5388020000000000000000000000000000000000000000000000000000000081526107bc91610100900473ffffffffffffffffffffffffffffffffffffffff1690639c53880290610771908590600401612235565b602060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b291906123db565b83606001516118bb565b601e546040517f9383289900000000000000000000000000000000000000000000000000000000815261086491610100900473ffffffffffffffffffffffffffffffffffffffff1690639383289990610819908590600401612235565b602060405180830381865afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a91906123db565b83608001516118bb565b601e546040517f37518e5000000000000000000000000000000000000000000000000000000000815261090c91610100900473ffffffffffffffffffffffffffffffffffffffff16906337518e50906108c1908590600401612235565b602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090291906123db565b8360a001516118bb565b601e546040517f7241b9cb0000000000000000000000000000000000000000000000000000000081526109b491610100900473ffffffffffffffffffffffffffffffffffffffff1690637241b9cb90610969908590600401612235565b602060405180830381865afa158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa91906123f8565b8360c00151611833565b601e546040517f12d0c512000000000000000000000000000000000000000000000000000000008152610a5c91610100900473ffffffffffffffffffffffffffffffffffffffff16906312d0c51290610a11908590600401612235565b602060405180830381865afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5291906123f8565b8360e00151611833565b601e546040517fe938730e000000000000000000000000000000000000000000000000000000008152610b0591610100900473ffffffffffffffffffffffffffffffffffffffff169063e938730e90610ab9908590600401612235565b602060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa91906123f8565b836101000151611833565b601e546040517f230602c1000000000000000000000000000000000000000000000000000000008152610bae91610100900473ffffffffffffffffffffffffffffffffffffffff169063230602c190610b62908590600401612235565b602060405180830381865afa158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba391906123f8565b836101a00151611833565b601e546040517fe79f1782000000000000000000000000000000000000000000000000000000008152610c5791610100900473ffffffffffffffffffffffffffffffffffffffff169063e79f178290610c0b908590600401612235565b602060405180830381865afa158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c91906123f8565b836101200151611833565b601e546040517f4e765004000000000000000000000000000000000000000000000000000000008152610d0091610100900473ffffffffffffffffffffffffffffffffffffffff1690634e76500490610cb4908590600401612235565b602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf591906123f8565b836101400151611833565b601e546040517fdcafa970000000000000000000000000000000000000000000000000000000008152610da991610100900473ffffffffffffffffffffffffffffffffffffffff169063dcafa97090610d5d908590600401612235565b602060405180830381865afa158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e91906123db565b8361016001516118bb565b601e546040517f6907efd7000000000000000000000000000000000000000000000000000000008152610e5291610100900473ffffffffffffffffffffffffffffffffffffffff1690636907efd790610e06908590600401612235565b602060405180830381865afa158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4791906123f8565b836101800151611833565b601e546040517f0af3f403000000000000000000000000000000000000000000000000000000008152610eff91610100900473ffffffffffffffffffffffffffffffffffffffff1690630af3f40390610eaf908590600401612235565b600060405180830381865afa158015610ecc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ef49190810190612200565b836101c00151611929565b5050565b60606016805480602002602001604051908101604052809291908181526020018280548015610f6857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f3d575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020016000905b828210156110b8576000848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b828210156110a157838290600052602060002001805461101490612411565b80601f016020809104026020016040519081016040528092919081815260200182805461104090612411565b801561108d5780601f106110625761010080835404028352916020019161108d565b820191906000526020600020905b81548152906001019060200180831161107057829003601f168201915b505050505081526020019060010190610ff5565b505050508152505081526020019060010190610f96565b50505050905090565b60606018805480602002602001604051908101604052809291908181526020018280548015610f685760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f3d575050505050905090565b60606017805480602002602001604051908101604052809291908181526020018280548015610f685760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f3d575050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156110b857838290600052602060002090600202016040518060400160405290816000820180546111f290612411565b80601f016020809104026020016040519081016040528092919081815260200182805461121e90612411565b801561126b5780601f106112405761010080835404028352916020019161126b565b820191906000526020600020905b81548152906001019060200180831161124e57829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561130557602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116112b25790505b505050505081525050815260200190600101906111bf565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156110b857838290600052602060002001805461136090612411565b80601f016020809104026020016040519081016040528092919081815260200182805461138c90612411565b80156113d95780601f106113ae576101008083540402835291602001916113d9565b820191906000526020600020905b8154815290600101906020018083116113bc57829003601f168201915b505050505081526020019060010190611341565b6060601c805480602002602001604051908101604052809291908181526020016000905b828210156110b857600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001810180548351818702810187019094528084529394919385830193928301828280156114dd57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161148a5790505b50505050508152505081526020019060010190611411565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156110b857838290600052602060002001805461153890612411565b80601f016020809104026020016040519081016040528092919081815260200182805461156490612411565b80156115b15780601f10611586576101008083540402835291602001916115b1565b820191906000526020600020905b81548152906001019060200180831161159457829003601f168201915b505050505081526020019060010190611519565b60085460009060ff16156115dd575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c65640000000000000000000000000000000000000000000000000000602483015260009163667f9d7090604401602060405180830381865afa15801561166e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169291906123f8565b1415905090565b815181516116b09163ffffffff9081169116611833565b6116ce826020015163ffffffff16826020015163ffffffff16611833565b6116e0826040015182604001516118bb565b6116f2826060015182606001516118bb565b611704826080015182608001516118bb565b6117168260a001518260a001516118bb565b6117288260c001518260c00151611833565b61173a8260e001518260e00151611833565b61174e826101000151826101000151611833565b611762826101a00151826101a00151611833565b611776826101200151826101200151611833565b61178a826101400151826101400151611833565b61179e8261016001518261016001516118bb565b6117b2826101800151826101800151611833565b610eff826101c00151826101c00151611929565b60606015805480602002602001604051908101604052809291908181526020018280548015610f685760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f3d575050505050905090565b6040517f98296c540000000000000000000000000000000000000000000000000000000081526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c54906044015b60006040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050505050565b6040517f515361f600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015282166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063515361f690604401611887565b6040517f97624631000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d906397624631906118879085908590600401612464565b610e858061249383390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156119db576119db611988565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a0a57611a0a611988565b604052919050565b63ffffffff81168114611a2457600080fd5b50565b8035611a3281611a12565b919050565b73ffffffffffffffffffffffffffffffffffffffff81168114611a2457600080fd5b8035611a3281611a37565b600067ffffffffffffffff821115611a7e57611a7e611988565b50601f01601f191660200190565b600082601f830112611a9d57600080fd5b8135611ab0611aab82611a64565b6119e1565b818152846020838601011115611ac557600080fd5b816020850160208301376000918101602001919091529392505050565b60006101e08284031215611af557600080fd5b611afd6119b7565b9050611b0882611a27565b8152611b1660208301611a27565b6020820152611b2760408301611a59565b6040820152611b3860608301611a59565b6060820152611b4960808301611a59565b6080820152611b5a60a08301611a59565b60a082015260c0828101359082015260e08083013590820152610100808301359082015261012080830135908201526101408083013590820152610160611ba2818401611a59565b9082015261018082810135908201526101a080830135908201526101c08083013567ffffffffffffffff811115611bd857600080fd5b611be485828601611a8c565b82840152505092915050565b600060208284031215611c0257600080fd5b813567ffffffffffffffff811115611c1957600080fd5b611c2584828501611ae2565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015611c7b57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611c49565b50909695505050505050565b60005b83811015611ca2578181015183820152602001611c8a565b50506000910152565b60008151808452611cc3816020860160208601611c87565b601f01601f19169290920160200192915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015611dd0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b85030187528251805173ffffffffffffffffffffffffffffffffffffffff1685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015611dba577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0898503018352611da8848651611cab565b948e01949350918d0191600101611d6e565b505050978a019794505091880191600101611cfe565b50919a9950505050505050505050565b60008151808452602080850194506020840160005b83811015611e335781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101611df5565b509495945050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015611ed5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552611ea988860182611cab565b91890151858303868b0152919050611ec18183611de0565b968901969450505090860190600101611e67565b509098975050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611f58577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f46858351611cab565b94509285019290850190600101611f0c565b5092979650505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015611ed5578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452870151878401879052611fee87850182611de0565b9588019593505090860190600101611f8e565b6000806040838503121561201457600080fd5b823567ffffffffffffffff8082111561202c57600080fd5b61203886838701611ae2565b9350602085013591508082111561204e57600080fd5b5061205b85828601611ae2565b9150509250929050565b6020815261207c60208201835163ffffffff169052565b60006020830151612095604084018263ffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083810191909152830151610100808401919091528301516101208084019190915283015161014080840191909152830151610160808401919091528301516101806121878185018373ffffffffffffffffffffffffffffffffffffffff169052565b8401516101a0848101919091528401516101c0808501919091528401516101e0808501529050611c25610200840182611cab565b600082601f8301126121cc57600080fd5b81516121da611aab82611a64565b8181528460208386010111156121ef57600080fd5b611c25826020830160208701611c87565b60006020828403121561221257600080fd5b815167ffffffffffffffff81111561222957600080fd5b611c25848285016121bb565b6020815260006122486020830184611cab565b9392505050565b8051611a3281611a12565b8051611a3281611a37565b60006020828403121561227757600080fd5b815167ffffffffffffffff8082111561228f57600080fd5b908301906101e082860312156122a457600080fd5b6122ac6119b7565b6122b58361224f565b81526122c36020840161224f565b60208201526122d46040840161225a565b60408201526122e56060840161225a565b60608201526122f66080840161225a565b608082015261230760a0840161225a565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140808401519082015261016061234f81850161225a565b9082015261018083810151908201526101a080840151908201526101c0808401518381111561237d57600080fd5b612389888287016121bb565b918301919091525095945050505050565b6000602082840312156123ac57600080fd5b815161ffff8116811461224857600080fd5b6000602082840312156123d057600080fd5b815161224881611a12565b6000602082840312156123ed57600080fd5b815161224881611a37565b60006020828403121561240a57600080fd5b5051919050565b600181811c9082168061242557607f821691505b60208210810361245e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6040815260006124776040830185611cab565b82810360208401526124898185611cab565b9594505050505056fe608060405234801561001057600080fd5b50610e65806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637d67c5a7116100b25780639c53880211610081578063e79f178211610066578063e79f1782146102d7578063e938730e146102ea578063faef535a146102fd57600080fd5b80639c538802146102b1578063dcafa970146102c457600080fd5b80637d67c5a714610252578063938328991461027857806393bb0d801461028b5780639bdb46fe1461029e57600080fd5b806337518e50116101095780635c3fa4c0116100ee5780635c3fa4c0146102045780636907efd71461022c5780637241b9cb1461023f57600080fd5b806337518e50146101b95780634e765004146101f157600080fd5b80630af3f4031461013b57806312d0c51214610165578063230602c1146101865780632465702414610199575b600080fd5b61014e610149366004610868565b61031d565b60405161015c9291906108da565b60405180910390f35b610178610173366004610868565b610335565b60405190815260200161015c565b610178610194366004610868565b610344565b6101ac6101a7366004610868565b610351565b60405161015c9190610995565b6101cc6101c7366004610868565b61044e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161015c565b6101786101ff366004610868565b61045d565b610217610212366004610868565b610469565b60405163ffffffff909116815260200161015c565b61017861023a366004610868565b610478565b61017861024d366004610868565b610485565b610265610260366004610868565b610491565b60405161ffff909116815260200161015c565b6101cc610286366004610868565b61049d565b610217610299366004610868565b6104ac565b6101cc6102ac366004610868565b6104bb565b6101cc6102bf366004610868565b6104ca565b6101cc6102d2366004610868565b6104d9565b6101786102e5366004610868565b6104e8565b6101786102f8366004610868565b6104f4565b61031061030b366004610c34565b610500565b60405161015c9190610d69565b36600061032a8484610511565b915091509250929050565b6000607a8301355b9392505050565b600061012e83013561033d565b610444604051806101e00160405280600063ffffffff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b61033d8383610522565b6000604683013560601c61033d565b600060da83013561033d565b6000600683013560e01c61033d565b600061010e83013561033d565b6000605a83013561033d565b6000823560f01c61033d565b6000603283013560601c61033d565b6000600283013560e01c61033d565b6000600a83013560601c61033d565b6000601e83013560601c61033d565b600060fa83013560601c61033d565b600060ba83013561033d565b6000609a83013561033d565b606061050b82610705565b92915050565b36600061032a8361014e8187610d7c565b610615604051806101e00160405280600063ffffffff168152602001600063ffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b600283013560e090811c82526006840135811c6020830152600a840135606090811c6040840152601e850135811c818401526032850135811c60808401526046850135811c60a0840152605a85013560c0840152607a85013591830191909152609a84013561010083015260ba84013561012083015260da84013561014083015260fa840135901c61016082015261010e83013561018082015261012e8301356101a08201526106c58383610511565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506101c082015292915050565b8051602080830151604080850151606086810151608088015160a089015160c08a015195517e02000000000000000000000000000000000000000000000000000000000000988101989098527fffffffff0000000000000000000000000000000000000000000000000000000060e0998a1b811660228a01529690981b90951660268701527fffffffffffffffffffffffffffffffffffffffff00000000000000000000000092821b8316602a870152811b8216603e86015292831b8116605285015293821b9093166066830152607a820192909252600090609a01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260e08501516101008601516101208701516101408801516101608901516101808a01516101a08b01516101c08c0151979950610851988a9890602001610da6565b604051602081830303815290604052915050919050565b6000806020838503121561087b57600080fd5b823567ffffffffffffffff8082111561089357600080fd5b818501915085601f8301126108a757600080fd5b8135818111156108b657600080fd5b8660208285010111156108c857600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60005b8381101561094257818101518382015260200161092a565b50506000910152565b60008151808452610963816020860160208601610927565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526109ac60208201835163ffffffff169052565b600060208301516109c5604084018263ffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e08381019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180610ab78185018373ffffffffffffffffffffffffffffffffffffffff169052565b8401516101a0848101919091528401516101c0808501919091528401516101e0808501529050610aeb61020084018261094b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715610b4657610b46610af3565b60405290565b803563ffffffff81168114610b6057600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b6057600080fd5b600082601f830112610b9a57600080fd5b813567ffffffffffffffff80821115610bb557610bb5610af3565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610bfb57610bfb610af3565b81604052838152866020858801011115610c1457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610c4657600080fd5b813567ffffffffffffffff80821115610c5e57600080fd5b908301906101e08286031215610c7357600080fd5b610c7b610b22565b610c8483610b4c565b8152610c9260208401610b4c565b6020820152610ca360408401610b65565b6040820152610cb460608401610b65565b6060820152610cc560808401610b65565b6080820152610cd660a08401610b65565b60a082015260c0838101359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160610d1e818501610b65565b9082015261018083810135908201526101a080840135908201526101c08084013583811115610d4c57600080fd5b610d5888828701610b89565b918301919091525095945050505050565b60208152600061033d602083018461094b565b60008085851115610d8c57600080fd5b83861115610d9957600080fd5b5050820193919092039150565b60008a51610db8818460208f01610927565b80830190508a81528960208201528860408201528760608201527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b1660808201528560948201528460b48201528351610e1c8160d4840160208801610927565b0160d4019b9a505050505050505050505056fea2646970667358221220dd848818a37447ce56353fbd264abb2bf854e7ccf2b34de968bd555a971eb57e64736f6c63430008180033a26469706673582212209d76dcd9220b2ea18b209b4cee69f142a3d898ab9554cd6b37b574e8df8e8c8a64736f6c63430008180033",
}

// BridgeTransactionV2TestABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeTransactionV2TestMetaData.ABI instead.
var BridgeTransactionV2TestABI = BridgeTransactionV2TestMetaData.ABI

// Deprecated: Use BridgeTransactionV2TestMetaData.Sigs instead.
// BridgeTransactionV2TestFuncSigs maps the 4-byte function signature to its string representation.
var BridgeTransactionV2TestFuncSigs = BridgeTransactionV2TestMetaData.Sigs

// BridgeTransactionV2TestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeTransactionV2TestMetaData.Bin instead.
var BridgeTransactionV2TestBin = BridgeTransactionV2TestMetaData.Bin

// DeployBridgeTransactionV2Test deploys a new Ethereum contract, binding an instance of BridgeTransactionV2Test to it.
func DeployBridgeTransactionV2Test(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeTransactionV2Test, error) {
	parsed, err := BridgeTransactionV2TestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeTransactionV2TestBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeTransactionV2Test{BridgeTransactionV2TestCaller: BridgeTransactionV2TestCaller{contract: contract}, BridgeTransactionV2TestTransactor: BridgeTransactionV2TestTransactor{contract: contract}, BridgeTransactionV2TestFilterer: BridgeTransactionV2TestFilterer{contract: contract}}, nil
}

// BridgeTransactionV2Test is an auto generated Go binding around an Ethereum contract.
type BridgeTransactionV2Test struct {
	BridgeTransactionV2TestCaller     // Read-only binding to the contract
	BridgeTransactionV2TestTransactor // Write-only binding to the contract
	BridgeTransactionV2TestFilterer   // Log filterer for contract events
}

// BridgeTransactionV2TestCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeTransactionV2TestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2TestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactionV2TestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2TestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeTransactionV2TestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactionV2TestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeTransactionV2TestSession struct {
	Contract     *BridgeTransactionV2Test // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BridgeTransactionV2TestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeTransactionV2TestCallerSession struct {
	Contract *BridgeTransactionV2TestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// BridgeTransactionV2TestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactionV2TestTransactorSession struct {
	Contract     *BridgeTransactionV2TestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// BridgeTransactionV2TestRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeTransactionV2TestRaw struct {
	Contract *BridgeTransactionV2Test // Generic contract binding to access the raw methods on
}

// BridgeTransactionV2TestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeTransactionV2TestCallerRaw struct {
	Contract *BridgeTransactionV2TestCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactionV2TestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactionV2TestTransactorRaw struct {
	Contract *BridgeTransactionV2TestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeTransactionV2Test creates a new instance of BridgeTransactionV2Test, bound to a specific deployed contract.
func NewBridgeTransactionV2Test(address common.Address, backend bind.ContractBackend) (*BridgeTransactionV2Test, error) {
	contract, err := bindBridgeTransactionV2Test(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2Test{BridgeTransactionV2TestCaller: BridgeTransactionV2TestCaller{contract: contract}, BridgeTransactionV2TestTransactor: BridgeTransactionV2TestTransactor{contract: contract}, BridgeTransactionV2TestFilterer: BridgeTransactionV2TestFilterer{contract: contract}}, nil
}

// NewBridgeTransactionV2TestCaller creates a new read-only instance of BridgeTransactionV2Test, bound to a specific deployed contract.
func NewBridgeTransactionV2TestCaller(address common.Address, caller bind.ContractCaller) (*BridgeTransactionV2TestCaller, error) {
	contract, err := bindBridgeTransactionV2Test(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestCaller{contract: contract}, nil
}

// NewBridgeTransactionV2TestTransactor creates a new write-only instance of BridgeTransactionV2Test, bound to a specific deployed contract.
func NewBridgeTransactionV2TestTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactionV2TestTransactor, error) {
	contract, err := bindBridgeTransactionV2Test(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestTransactor{contract: contract}, nil
}

// NewBridgeTransactionV2TestFilterer creates a new log filterer instance of BridgeTransactionV2Test, bound to a specific deployed contract.
func NewBridgeTransactionV2TestFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeTransactionV2TestFilterer, error) {
	contract, err := bindBridgeTransactionV2Test(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestFilterer{contract: contract}, nil
}

// bindBridgeTransactionV2Test binds a generic wrapper to an already deployed contract.
func bindBridgeTransactionV2Test(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeTransactionV2TestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Test.Contract.BridgeTransactionV2TestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.BridgeTransactionV2TestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.BridgeTransactionV2TestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeTransactionV2Test.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeTransactionV2Test *BridgeTransactionV2TestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) ISTEST() (bool, error) {
	return _BridgeTransactionV2Test.Contract.ISTEST(&_BridgeTransactionV2Test.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) ISTEST() (bool, error) {
	return _BridgeTransactionV2Test.Contract.ISTEST(&_BridgeTransactionV2Test.CallOpts)
}

// AssertEq is a free data retrieval call binding the contract method 0xcd95c3aa.
//
// Solidity: function assertEq((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) a, (uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) b) pure returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) AssertEq(opts *bind.CallOpts, a IFastBridgeV2BridgeTransactionV2, b IFastBridgeV2BridgeTransactionV2) error {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "assertEq", a, b)

	if err != nil {
		return err
	}

	return err

}

// AssertEq is a free data retrieval call binding the contract method 0xcd95c3aa.
//
// Solidity: function assertEq((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) a, (uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) b) pure returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) AssertEq(a IFastBridgeV2BridgeTransactionV2, b IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.AssertEq(&_BridgeTransactionV2Test.CallOpts, a, b)
}

// AssertEq is a free data retrieval call binding the contract method 0xcd95c3aa.
//
// Solidity: function assertEq((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) a, (uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) b) pure returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) AssertEq(a IFastBridgeV2BridgeTransactionV2, b IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.AssertEq(&_BridgeTransactionV2Test.CallOpts, a, b)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) ExcludeArtifacts() ([]string, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeArtifacts(&_BridgeTransactionV2Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeArtifacts(&_BridgeTransactionV2Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) ExcludeContracts() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeContracts(&_BridgeTransactionV2Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeContracts(&_BridgeTransactionV2Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) ExcludeSenders() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeSenders(&_BridgeTransactionV2Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.ExcludeSenders(&_BridgeTransactionV2Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) Failed() (bool, error) {
	return _BridgeTransactionV2Test.Contract.Failed(&_BridgeTransactionV2Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) Failed() (bool, error) {
	return _BridgeTransactionV2Test.Contract.Failed(&_BridgeTransactionV2Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _BridgeTransactionV2Test.Contract.TargetArtifactSelectors(&_BridgeTransactionV2Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _BridgeTransactionV2Test.Contract.TargetArtifactSelectors(&_BridgeTransactionV2Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetArtifacts() ([]string, error) {
	return _BridgeTransactionV2Test.Contract.TargetArtifacts(&_BridgeTransactionV2Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetArtifacts() ([]string, error) {
	return _BridgeTransactionV2Test.Contract.TargetArtifacts(&_BridgeTransactionV2Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetContracts() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.TargetContracts(&_BridgeTransactionV2Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetContracts() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.TargetContracts(&_BridgeTransactionV2Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _BridgeTransactionV2Test.Contract.TargetInterfaces(&_BridgeTransactionV2Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _BridgeTransactionV2Test.Contract.TargetInterfaces(&_BridgeTransactionV2Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _BridgeTransactionV2Test.Contract.TargetSelectors(&_BridgeTransactionV2Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _BridgeTransactionV2Test.Contract.TargetSelectors(&_BridgeTransactionV2Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TargetSenders() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.TargetSenders(&_BridgeTransactionV2Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TargetSenders() ([]common.Address, error) {
	return _BridgeTransactionV2Test.Contract.TargetSenders(&_BridgeTransactionV2Test.CallOpts)
}

// TestRoundtrip is a free data retrieval call binding the contract method 0x0b2599cc.
//
// Solidity: function test_roundtrip((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TestRoundtrip(opts *bind.CallOpts, bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "test_roundtrip", bridgeTx)

	if err != nil {
		return err
	}

	return err

}

// TestRoundtrip is a free data retrieval call binding the contract method 0x0b2599cc.
//
// Solidity: function test_roundtrip((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TestRoundtrip(bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.TestRoundtrip(&_BridgeTransactionV2Test.CallOpts, bridgeTx)
}

// TestRoundtrip is a free data retrieval call binding the contract method 0x0b2599cc.
//
// Solidity: function test_roundtrip((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TestRoundtrip(bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.TestRoundtrip(&_BridgeTransactionV2Test.CallOpts, bridgeTx)
}

// TestRoundtripDecodeV2 is a free data retrieval call binding the contract method 0x0154afb0.
//
// Solidity: function test_roundtrip_decodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCaller) TestRoundtripDecodeV2(opts *bind.CallOpts, bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	var out []interface{}
	err := _BridgeTransactionV2Test.contract.Call(opts, &out, "test_roundtrip_decodeV2", bridgeTx)

	if err != nil {
		return err
	}

	return err

}

// TestRoundtripDecodeV2 is a free data retrieval call binding the contract method 0x0154afb0.
//
// Solidity: function test_roundtrip_decodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) TestRoundtripDecodeV2(bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.TestRoundtripDecodeV2(&_BridgeTransactionV2Test.CallOpts, bridgeTx)
}

// TestRoundtripDecodeV2 is a free data retrieval call binding the contract method 0x0154afb0.
//
// Solidity: function test_roundtrip_decodeV2((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes) bridgeTx) view returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestCallerSession) TestRoundtripDecodeV2(bridgeTx IFastBridgeV2BridgeTransactionV2) error {
	return _BridgeTransactionV2Test.Contract.TestRoundtripDecodeV2(&_BridgeTransactionV2Test.CallOpts, bridgeTx)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestTransactor) SetUp(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeTransactionV2Test.contract.Transact(opts, "setUp")
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestSession) SetUp() (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.SetUp(&_BridgeTransactionV2Test.TransactOpts)
}

// SetUp is a paid mutator transaction binding the contract method 0x0a9254e4.
//
// Solidity: function setUp() returns()
func (_BridgeTransactionV2Test *BridgeTransactionV2TestTransactorSession) SetUp() (*types.Transaction, error) {
	return _BridgeTransactionV2Test.Contract.SetUp(&_BridgeTransactionV2Test.TransactOpts)
}

// BridgeTransactionV2TestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogIterator struct {
	Event *BridgeTransactionV2TestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLog represents a Log event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLog(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogIterator{contract: _BridgeTransactionV2Test.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLog) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLog)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLog(log types.Log) (*BridgeTransactionV2TestLog, error) {
	event := new(BridgeTransactionV2TestLog)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogAddressIterator struct {
	Event *BridgeTransactionV2TestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogAddress represents a LogAddress event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogAddressIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogAddressIterator{contract: _BridgeTransactionV2Test.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogAddress) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogAddress)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogAddress(log types.Log) (*BridgeTransactionV2TestLogAddress, error) {
	event := new(BridgeTransactionV2TestLogAddress)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArrayIterator struct {
	Event *BridgeTransactionV2TestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogArray represents a LogArray event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogArray(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogArrayIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogArrayIterator{contract: _BridgeTransactionV2Test.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogArray) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogArray)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogArray(log types.Log) (*BridgeTransactionV2TestLogArray, error) {
	event := new(BridgeTransactionV2TestLogArray)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArray0Iterator struct {
	Event *BridgeTransactionV2TestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogArray0 represents a LogArray0 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogArray0Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogArray0Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogArray0) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogArray0)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogArray0(log types.Log) (*BridgeTransactionV2TestLogArray0, error) {
	event := new(BridgeTransactionV2TestLogArray0)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArray1Iterator struct {
	Event *BridgeTransactionV2TestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogArray1 represents a LogArray1 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogArray1Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogArray1Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogArray1) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogArray1)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogArray1(log types.Log) (*BridgeTransactionV2TestLogArray1, error) {
	event := new(BridgeTransactionV2TestLogArray1)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogBytesIterator struct {
	Event *BridgeTransactionV2TestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogBytes represents a LogBytes event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogBytesIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogBytesIterator{contract: _BridgeTransactionV2Test.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogBytes) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogBytes)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogBytes(log types.Log) (*BridgeTransactionV2TestLogBytes, error) {
	event := new(BridgeTransactionV2TestLogBytes)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogBytes32Iterator struct {
	Event *BridgeTransactionV2TestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogBytes32 represents a LogBytes32 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogBytes32Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogBytes32Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogBytes32)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogBytes32(log types.Log) (*BridgeTransactionV2TestLogBytes32, error) {
	event := new(BridgeTransactionV2TestLogBytes32)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogIntIterator struct {
	Event *BridgeTransactionV2TestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogInt represents a LogInt event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogInt(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogIntIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogIntIterator{contract: _BridgeTransactionV2Test.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogInt) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogInt)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogInt(log types.Log) (*BridgeTransactionV2TestLogInt, error) {
	event := new(BridgeTransactionV2TestLogInt)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedAddressIterator struct {
	Event *BridgeTransactionV2TestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedAddress represents a LogNamedAddress event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedAddressIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedAddressIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedAddress)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedAddress(log types.Log) (*BridgeTransactionV2TestLogNamedAddress, error) {
	event := new(BridgeTransactionV2TestLogNamedAddress)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArrayIterator struct {
	Event *BridgeTransactionV2TestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedArray represents a LogNamedArray event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedArrayIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedArrayIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedArray)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedArray(log types.Log) (*BridgeTransactionV2TestLogNamedArray, error) {
	event := new(BridgeTransactionV2TestLogNamedArray)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArray0Iterator struct {
	Event *BridgeTransactionV2TestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedArray0 represents a LogNamedArray0 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedArray0Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedArray0Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedArray0)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedArray0(log types.Log) (*BridgeTransactionV2TestLogNamedArray0, error) {
	event := new(BridgeTransactionV2TestLogNamedArray0)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArray1Iterator struct {
	Event *BridgeTransactionV2TestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedArray1 represents a LogNamedArray1 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedArray1Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedArray1Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedArray1)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedArray1(log types.Log) (*BridgeTransactionV2TestLogNamedArray1, error) {
	event := new(BridgeTransactionV2TestLogNamedArray1)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedBytesIterator struct {
	Event *BridgeTransactionV2TestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedBytes represents a LogNamedBytes event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedBytesIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedBytesIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedBytes)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedBytes(log types.Log) (*BridgeTransactionV2TestLogNamedBytes, error) {
	event := new(BridgeTransactionV2TestLogNamedBytes)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedBytes32Iterator struct {
	Event *BridgeTransactionV2TestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedBytes32 represents a LogNamedBytes32 event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedBytes32Iterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedBytes32Iterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedBytes32)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedBytes32(log types.Log) (*BridgeTransactionV2TestLogNamedBytes32, error) {
	event := new(BridgeTransactionV2TestLogNamedBytes32)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedDecimalIntIterator struct {
	Event *BridgeTransactionV2TestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedDecimalIntIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedDecimalInt)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedDecimalInt(log types.Log) (*BridgeTransactionV2TestLogNamedDecimalInt, error) {
	event := new(BridgeTransactionV2TestLogNamedDecimalInt)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedDecimalUintIterator struct {
	Event *BridgeTransactionV2TestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedDecimalUintIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedDecimalUint)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedDecimalUint(log types.Log) (*BridgeTransactionV2TestLogNamedDecimalUint, error) {
	event := new(BridgeTransactionV2TestLogNamedDecimalUint)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedIntIterator struct {
	Event *BridgeTransactionV2TestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedInt represents a LogNamedInt event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedIntIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedIntIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedInt)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedInt(log types.Log) (*BridgeTransactionV2TestLogNamedInt, error) {
	event := new(BridgeTransactionV2TestLogNamedInt)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedStringIterator struct {
	Event *BridgeTransactionV2TestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedString represents a LogNamedString event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedStringIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedStringIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedString)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedString(log types.Log) (*BridgeTransactionV2TestLogNamedString, error) {
	event := new(BridgeTransactionV2TestLogNamedString)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedUintIterator struct {
	Event *BridgeTransactionV2TestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogNamedUint represents a LogNamedUint event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogNamedUintIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogNamedUintIterator{contract: _BridgeTransactionV2Test.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogNamedUint)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogNamedUint(log types.Log) (*BridgeTransactionV2TestLogNamedUint, error) {
	event := new(BridgeTransactionV2TestLogNamedUint)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogStringIterator struct {
	Event *BridgeTransactionV2TestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogString represents a LogString event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogString(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogStringIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogStringIterator{contract: _BridgeTransactionV2Test.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogString) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogString)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogString(log types.Log) (*BridgeTransactionV2TestLogString, error) {
	event := new(BridgeTransactionV2TestLogString)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogUintIterator struct {
	Event *BridgeTransactionV2TestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogUint represents a LogUint event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogUint(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogUintIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogUintIterator{contract: _BridgeTransactionV2Test.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogUint) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogUint)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogUint(log types.Log) (*BridgeTransactionV2TestLogUint, error) {
	event := new(BridgeTransactionV2TestLogUint)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTransactionV2TestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogsIterator struct {
	Event *BridgeTransactionV2TestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTransactionV2TestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTransactionV2TestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTransactionV2TestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTransactionV2TestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTransactionV2TestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTransactionV2TestLogs represents a Logs event raised by the BridgeTransactionV2Test contract.
type BridgeTransactionV2TestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) FilterLogs(opts *bind.FilterOpts) (*BridgeTransactionV2TestLogsIterator, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &BridgeTransactionV2TestLogsIterator{contract: _BridgeTransactionV2Test.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *BridgeTransactionV2TestLogs) (event.Subscription, error) {

	logs, sub, err := _BridgeTransactionV2Test.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTransactionV2TestLogs)
				if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_BridgeTransactionV2Test *BridgeTransactionV2TestFilterer) ParseLogs(log types.Log) (*BridgeTransactionV2TestLogs, error) {
	event := new(BridgeTransactionV2TestLogs)
	if err := _BridgeTransactionV2Test.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommonBaseMetaData contains all meta data concerning the CommonBase contract.
var CommonBaseMetaData = &bind.MetaData{
	ABI: "[]",
}

// CommonBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use CommonBaseMetaData.ABI instead.
var CommonBaseABI = CommonBaseMetaData.ABI

// CommonBase is an auto generated Go binding around an Ethereum contract.
type CommonBase struct {
	CommonBaseCaller     // Read-only binding to the contract
	CommonBaseTransactor // Write-only binding to the contract
	CommonBaseFilterer   // Log filterer for contract events
}

// CommonBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommonBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommonBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommonBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommonBaseSession struct {
	Contract     *CommonBase       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommonBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommonBaseCallerSession struct {
	Contract *CommonBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// CommonBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommonBaseTransactorSession struct {
	Contract     *CommonBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CommonBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommonBaseRaw struct {
	Contract *CommonBase // Generic contract binding to access the raw methods on
}

// CommonBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommonBaseCallerRaw struct {
	Contract *CommonBaseCaller // Generic read-only contract binding to access the raw methods on
}

// CommonBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommonBaseTransactorRaw struct {
	Contract *CommonBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommonBase creates a new instance of CommonBase, bound to a specific deployed contract.
func NewCommonBase(address common.Address, backend bind.ContractBackend) (*CommonBase, error) {
	contract, err := bindCommonBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommonBase{CommonBaseCaller: CommonBaseCaller{contract: contract}, CommonBaseTransactor: CommonBaseTransactor{contract: contract}, CommonBaseFilterer: CommonBaseFilterer{contract: contract}}, nil
}

// NewCommonBaseCaller creates a new read-only instance of CommonBase, bound to a specific deployed contract.
func NewCommonBaseCaller(address common.Address, caller bind.ContractCaller) (*CommonBaseCaller, error) {
	contract, err := bindCommonBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommonBaseCaller{contract: contract}, nil
}

// NewCommonBaseTransactor creates a new write-only instance of CommonBase, bound to a specific deployed contract.
func NewCommonBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*CommonBaseTransactor, error) {
	contract, err := bindCommonBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommonBaseTransactor{contract: contract}, nil
}

// NewCommonBaseFilterer creates a new log filterer instance of CommonBase, bound to a specific deployed contract.
func NewCommonBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*CommonBaseFilterer, error) {
	contract, err := bindCommonBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommonBaseFilterer{contract: contract}, nil
}

// bindCommonBase binds a generic wrapper to an already deployed contract.
func bindCommonBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommonBaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CommonBase *CommonBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommonBase.Contract.CommonBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CommonBase *CommonBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommonBase.Contract.CommonBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CommonBase *CommonBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommonBase.Contract.CommonBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CommonBase *CommonBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommonBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CommonBase *CommonBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommonBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CommonBase *CommonBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommonBase.Contract.contract.Transact(opts, method, params...)
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01ffc9a7": "supportsInterface(bytes4)",
	},
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// Deprecated: Use IERC165MetaData.Sigs instead.
// IERC165FuncSigs maps the 4-byte function signature to its string representation.
var IERC165FuncSigs = IERC165MetaData.Sigs

// IERC165 is an auto generated Go binding around an Ethereum contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC165MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceID)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"06fdde03": "name()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20 *IERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20 *IERC20Session) Decimals() (uint8, error) {
	return _IERC20.Contract.Decimals(&_IERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20 *IERC20CallerSession) Decimals() (uint8, error) {
	return _IERC20.Contract.Decimals(&_IERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20 *IERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20 *IERC20Session) Name() (string, error) {
	return _IERC20.Contract.Name(&_IERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20 *IERC20CallerSession) Name() (string, error) {
	return _IERC20.Contract.Name(&_IERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20 *IERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20 *IERC20Session) Symbol() (string, error) {
	return _IERC20.Contract.Symbol(&_IERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20 *IERC20CallerSession) Symbol() (string, error) {
	return _IERC20.Contract.Symbol(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetaData contains all meta data concerning the IERC721 contract.
var IERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"6352211e": "ownerOf(uint256)",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetaData.ABI instead.
var IERC721ABI = IERC721MetaData.ABI

// Deprecated: Use IERC721MetaData.Sigs instead.
// IERC721FuncSigs maps the 4-byte function signature to its string representation.
var IERC721FuncSigs = IERC721MetaData.Sigs

// IERC721 is an auto generated Go binding around an Ethereum contract.
type IERC721 struct {
	IERC721Caller     // Read-only binding to the contract
	IERC721Transactor // Write-only binding to the contract
	IERC721Filterer   // Log filterer for contract events
}

// IERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721Session struct {
	Contract     *IERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721CallerSession struct {
	Contract *IERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransactorSession struct {
	Contract     *IERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721Raw struct {
	Contract *IERC721 // Generic contract binding to access the raw methods on
}

// IERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721CallerRaw struct {
	Contract *IERC721Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransactorRaw struct {
	Contract *IERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721 creates a new instance of IERC721, bound to a specific deployed contract.
func NewIERC721(address common.Address, backend bind.ContractBackend) (*IERC721, error) {
	contract, err := bindIERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721{IERC721Caller: IERC721Caller{contract: contract}, IERC721Transactor: IERC721Transactor{contract: contract}, IERC721Filterer: IERC721Filterer{contract: contract}}, nil
}

// NewIERC721Caller creates a new read-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Caller(address common.Address, caller bind.ContractCaller) (*IERC721Caller, error) {
	contract, err := bindIERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Caller{contract: contract}, nil
}

// NewIERC721Transactor creates a new write-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721Transactor, error) {
	contract, err := bindIERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Transactor{contract: contract}, nil
}

// NewIERC721Filterer creates a new log filterer instance of IERC721, bound to a specific deployed contract.
func NewIERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721Filterer, error) {
	contract, err := bindIERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721Filterer{contract: contract}, nil
}

// bindIERC721 binds a generic wrapper to an already deployed contract.
func bindIERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.IERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721 *IERC721Caller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "balanceOf", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721 *IERC721Session) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721 *IERC721CallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, _owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721Caller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "getApproved", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721Session) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721CallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721 *IERC721Caller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "isApprovedForAll", _owner, _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721 *IERC721Session) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721 *IERC721CallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, _owner, _operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721Caller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "ownerOf", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721Session) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721 *IERC721CallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721 *IERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721 *IERC721Session) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721 *IERC721CallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceID)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Transactor) Approve(opts *bind.TransactOpts, _approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "approve", _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Session) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721TransactorSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, _approved, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Session) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom0", _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721 *IERC721Session) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, _from, _to, _tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721 *IERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721 *IERC721Session) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721 *IERC721TransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, _operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Transactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721Session) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721 *IERC721TransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, _from, _to, _tokenId)
}

// IERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721 contract.
type IERC721ApprovalIterator struct {
	Event *IERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Approval represents a Approval event raised by the IERC721 contract.
type IERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (*IERC721ApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalIterator{contract: _IERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721Approval, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Approval)
				if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) ParseApproval(log types.Log) (*IERC721Approval, error) {
	event := new(IERC721Approval)
	if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721 contract.
type IERC721ApprovalForAllIterator struct {
	Event *IERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721ApprovalForAll represents a ApprovalForAll event raised by the IERC721 contract.
type IERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721 *IERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*IERC721ApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalForAllIterator{contract: _IERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721 *IERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721ApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721ApprovalForAll)
				if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721 *IERC721Filterer) ParseApprovalForAll(log types.Log) (*IERC721ApprovalForAll, error) {
	event := new(IERC721ApprovalForAll)
	if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721 contract.
type IERC721TransferIterator struct {
	Event *IERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Transfer represents a Transfer event raised by the IERC721 contract.
type IERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*IERC721TransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferIterator{contract: _IERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721Transfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Transfer)
				if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721 *IERC721Filterer) ParseTransfer(log types.Log) (*IERC721Transfer, error) {
	event := new(IERC721Transfer)
	if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721EnumerableMetaData contains all meta data concerning the IERC721Enumerable contract.
var IERC721EnumerableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"6352211e": "ownerOf(uint256)",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"4f6ccce7": "tokenByIndex(uint256)",
		"2f745c59": "tokenOfOwnerByIndex(address,uint256)",
		"18160ddd": "totalSupply()",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC721EnumerableABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721EnumerableMetaData.ABI instead.
var IERC721EnumerableABI = IERC721EnumerableMetaData.ABI

// Deprecated: Use IERC721EnumerableMetaData.Sigs instead.
// IERC721EnumerableFuncSigs maps the 4-byte function signature to its string representation.
var IERC721EnumerableFuncSigs = IERC721EnumerableMetaData.Sigs

// IERC721Enumerable is an auto generated Go binding around an Ethereum contract.
type IERC721Enumerable struct {
	IERC721EnumerableCaller     // Read-only binding to the contract
	IERC721EnumerableTransactor // Write-only binding to the contract
	IERC721EnumerableFilterer   // Log filterer for contract events
}

// IERC721EnumerableCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721EnumerableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721EnumerableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721EnumerableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721EnumerableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721EnumerableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721EnumerableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721EnumerableSession struct {
	Contract     *IERC721Enumerable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721EnumerableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721EnumerableCallerSession struct {
	Contract *IERC721EnumerableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IERC721EnumerableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721EnumerableTransactorSession struct {
	Contract     *IERC721EnumerableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IERC721EnumerableRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721EnumerableRaw struct {
	Contract *IERC721Enumerable // Generic contract binding to access the raw methods on
}

// IERC721EnumerableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721EnumerableCallerRaw struct {
	Contract *IERC721EnumerableCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721EnumerableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721EnumerableTransactorRaw struct {
	Contract *IERC721EnumerableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Enumerable creates a new instance of IERC721Enumerable, bound to a specific deployed contract.
func NewIERC721Enumerable(address common.Address, backend bind.ContractBackend) (*IERC721Enumerable, error) {
	contract, err := bindIERC721Enumerable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Enumerable{IERC721EnumerableCaller: IERC721EnumerableCaller{contract: contract}, IERC721EnumerableTransactor: IERC721EnumerableTransactor{contract: contract}, IERC721EnumerableFilterer: IERC721EnumerableFilterer{contract: contract}}, nil
}

// NewIERC721EnumerableCaller creates a new read-only instance of IERC721Enumerable, bound to a specific deployed contract.
func NewIERC721EnumerableCaller(address common.Address, caller bind.ContractCaller) (*IERC721EnumerableCaller, error) {
	contract, err := bindIERC721Enumerable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableCaller{contract: contract}, nil
}

// NewIERC721EnumerableTransactor creates a new write-only instance of IERC721Enumerable, bound to a specific deployed contract.
func NewIERC721EnumerableTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721EnumerableTransactor, error) {
	contract, err := bindIERC721Enumerable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableTransactor{contract: contract}, nil
}

// NewIERC721EnumerableFilterer creates a new log filterer instance of IERC721Enumerable, bound to a specific deployed contract.
func NewIERC721EnumerableFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721EnumerableFilterer, error) {
	contract, err := bindIERC721Enumerable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableFilterer{contract: contract}, nil
}

// bindIERC721Enumerable binds a generic wrapper to an already deployed contract.
func bindIERC721Enumerable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721EnumerableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Enumerable *IERC721EnumerableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Enumerable.Contract.IERC721EnumerableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Enumerable *IERC721EnumerableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.IERC721EnumerableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Enumerable *IERC721EnumerableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.IERC721EnumerableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Enumerable *IERC721EnumerableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Enumerable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Enumerable *IERC721EnumerableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Enumerable *IERC721EnumerableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "balanceOf", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721Enumerable.Contract.BalanceOf(&_IERC721Enumerable.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721Enumerable.Contract.BalanceOf(&_IERC721Enumerable.CallOpts, _owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "getApproved", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Enumerable.Contract.GetApproved(&_IERC721Enumerable.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Enumerable.Contract.GetApproved(&_IERC721Enumerable.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "isApprovedForAll", _owner, _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721Enumerable.Contract.IsApprovedForAll(&_IERC721Enumerable.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721Enumerable.Contract.IsApprovedForAll(&_IERC721Enumerable.CallOpts, _owner, _operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "ownerOf", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Enumerable.Contract.OwnerOf(&_IERC721Enumerable.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Enumerable.Contract.OwnerOf(&_IERC721Enumerable.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721Enumerable.Contract.SupportsInterface(&_IERC721Enumerable.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721Enumerable.Contract.SupportsInterface(&_IERC721Enumerable.CallOpts, interfaceID)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCaller) TokenByIndex(opts *bind.CallOpts, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "tokenByIndex", _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _IERC721Enumerable.Contract.TokenByIndex(&_IERC721Enumerable.CallOpts, _index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) TokenByIndex(_index *big.Int) (*big.Int, error) {
	return _IERC721Enumerable.Contract.TokenByIndex(&_IERC721Enumerable.CallOpts, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "tokenOfOwnerByIndex", _owner, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _IERC721Enumerable.Contract.TokenOfOwnerByIndex(&_IERC721Enumerable.CallOpts, _owner, _index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address _owner, uint256 _index) view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) TokenOfOwnerByIndex(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _IERC721Enumerable.Contract.TokenOfOwnerByIndex(&_IERC721Enumerable.CallOpts, _owner, _index)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Enumerable.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableSession) TotalSupply() (*big.Int, error) {
	return _IERC721Enumerable.Contract.TotalSupply(&_IERC721Enumerable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC721Enumerable *IERC721EnumerableCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC721Enumerable.Contract.TotalSupply(&_IERC721Enumerable.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactor) Approve(opts *bind.TransactOpts, _approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.contract.Transact(opts, "approve", _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.Approve(&_IERC721Enumerable.TransactOpts, _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactorSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.Approve(&_IERC721Enumerable.TransactOpts, _approved, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SafeTransferFrom(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SafeTransferFrom(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactor) SafeTransferFrom0(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Enumerable.contract.Transact(opts, "safeTransferFrom0", _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Enumerable *IERC721EnumerableSession) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SafeTransferFrom0(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactorSession) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SafeTransferFrom0(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Enumerable *IERC721EnumerableTransactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Enumerable.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Enumerable *IERC721EnumerableSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SetApprovalForAll(&_IERC721Enumerable.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Enumerable *IERC721EnumerableTransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.SetApprovalForAll(&_IERC721Enumerable.TransactOpts, _operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.TransferFrom(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Enumerable *IERC721EnumerableTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Enumerable.Contract.TransferFrom(&_IERC721Enumerable.TransactOpts, _from, _to, _tokenId)
}

// IERC721EnumerableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Enumerable contract.
type IERC721EnumerableApprovalIterator struct {
	Event *IERC721EnumerableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721EnumerableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721EnumerableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721EnumerableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721EnumerableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721EnumerableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721EnumerableApproval represents a Approval event raised by the IERC721Enumerable contract.
type IERC721EnumerableApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (*IERC721EnumerableApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableApprovalIterator{contract: _IERC721Enumerable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721EnumerableApproval, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721EnumerableApproval)
				if err := _IERC721Enumerable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) ParseApproval(log types.Log) (*IERC721EnumerableApproval, error) {
	event := new(IERC721EnumerableApproval)
	if err := _IERC721Enumerable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721EnumerableApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Enumerable contract.
type IERC721EnumerableApprovalForAllIterator struct {
	Event *IERC721EnumerableApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721EnumerableApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721EnumerableApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721EnumerableApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721EnumerableApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721EnumerableApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721EnumerableApprovalForAll represents a ApprovalForAll event raised by the IERC721Enumerable contract.
type IERC721EnumerableApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Enumerable *IERC721EnumerableFilterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*IERC721EnumerableApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableApprovalForAllIterator{contract: _IERC721Enumerable.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Enumerable *IERC721EnumerableFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721EnumerableApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721EnumerableApprovalForAll)
				if err := _IERC721Enumerable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Enumerable *IERC721EnumerableFilterer) ParseApprovalForAll(log types.Log) (*IERC721EnumerableApprovalForAll, error) {
	event := new(IERC721EnumerableApprovalForAll)
	if err := _IERC721Enumerable.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721EnumerableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Enumerable contract.
type IERC721EnumerableTransferIterator struct {
	Event *IERC721EnumerableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721EnumerableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721EnumerableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721EnumerableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721EnumerableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721EnumerableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721EnumerableTransfer represents a Transfer event raised by the IERC721Enumerable contract.
type IERC721EnumerableTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*IERC721EnumerableTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721EnumerableTransferIterator{contract: _IERC721Enumerable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721EnumerableTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Enumerable.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721EnumerableTransfer)
				if err := _IERC721Enumerable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Enumerable *IERC721EnumerableFilterer) ParseTransfer(log types.Log) (*IERC721EnumerableTransfer, error) {
	event := new(IERC721EnumerableTransfer)
	if err := _IERC721Enumerable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataMetaData contains all meta data concerning the IERC721Metadata contract.
var IERC721MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"06fdde03": "name()",
		"6352211e": "ownerOf(uint256)",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"95d89b41": "symbol()",
		"c87b56dd": "tokenURI(uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC721MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetadataMetaData.ABI instead.
var IERC721MetadataABI = IERC721MetadataMetaData.ABI

// Deprecated: Use IERC721MetadataMetaData.Sigs instead.
// IERC721MetadataFuncSigs maps the 4-byte function signature to its string representation.
var IERC721MetadataFuncSigs = IERC721MetadataMetaData.Sigs

// IERC721Metadata is an auto generated Go binding around an Ethereum contract.
type IERC721Metadata struct {
	IERC721MetadataCaller     // Read-only binding to the contract
	IERC721MetadataTransactor // Write-only binding to the contract
	IERC721MetadataFilterer   // Log filterer for contract events
}

// IERC721MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721MetadataSession struct {
	Contract     *IERC721Metadata  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721MetadataCallerSession struct {
	Contract *IERC721MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721MetadataTransactorSession struct {
	Contract     *IERC721MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721MetadataRaw struct {
	Contract *IERC721Metadata // Generic contract binding to access the raw methods on
}

// IERC721MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721MetadataCallerRaw struct {
	Contract *IERC721MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactorRaw struct {
	Contract *IERC721MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Metadata creates a new instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721Metadata(address common.Address, backend bind.ContractBackend) (*IERC721Metadata, error) {
	contract, err := bindIERC721Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Metadata{IERC721MetadataCaller: IERC721MetadataCaller{contract: contract}, IERC721MetadataTransactor: IERC721MetadataTransactor{contract: contract}, IERC721MetadataFilterer: IERC721MetadataFilterer{contract: contract}}, nil
}

// NewIERC721MetadataCaller creates a new read-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC721MetadataCaller, error) {
	contract, err := bindIERC721Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataCaller{contract: contract}, nil
}

// NewIERC721MetadataTransactor creates a new write-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721MetadataTransactor, error) {
	contract, err := bindIERC721Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransactor{contract: contract}, nil
}

// NewIERC721MetadataFilterer creates a new log filterer instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721MetadataFilterer, error) {
	contract, err := bindIERC721Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataFilterer{contract: contract}, nil
}

// bindIERC721Metadata binds a generic wrapper to an already deployed contract.
func bindIERC721Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721MetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.IERC721MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Metadata *IERC721MetadataCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "balanceOf", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Metadata *IERC721MetadataSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _owner) view returns(uint256)
func (_IERC721Metadata *IERC721MetadataCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, _owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataCaller) GetApproved(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "getApproved", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, _tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataCallerSession) GetApproved(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, _tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) IsApprovedForAll(opts *bind.CallOpts, _owner common.Address, _operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "isApprovedForAll", _owner, _operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, _owner, _operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address _owner, address _operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) IsApprovedForAll(_owner common.Address, _operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, _owner, _operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string _name)
func (_IERC721Metadata *IERC721MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string _name)
func (_IERC721Metadata *IERC721MetadataSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string _name)
func (_IERC721Metadata *IERC721MetadataCallerSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataCaller) OwnerOf(opts *bind.CallOpts, _tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "ownerOf", _tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, _tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 _tokenId) view returns(address)
func (_IERC721Metadata *IERC721MetadataCallerSession) OwnerOf(_tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, _tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceID)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string _symbol)
func (_IERC721Metadata *IERC721MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string _symbol)
func (_IERC721Metadata *IERC721MetadataSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string _symbol)
func (_IERC721Metadata *IERC721MetadataCallerSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) TokenURI(opts *bind.CallOpts, _tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "tokenURI", _tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, _tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 _tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) TokenURI(_tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactor) Approve(opts *bind.TransactOpts, _approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "approve", _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, _approved, _tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _approved, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) Approve(_approved common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, _approved, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom", _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom0(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom0", _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom0(_from common.Address, _to common.Address, _tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SetApprovalForAll(opts *bind.TransactOpts, _operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "setApprovalForAll", _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, _operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address _operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SetApprovalForAll(_operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, _operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "transferFrom", _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _tokenId) payable returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) TransferFrom(_from common.Address, _to common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, _from, _to, _tokenId)
}

// IERC721MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalIterator struct {
	Event *IERC721MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApproval represents a Approval event raised by the IERC721Metadata contract.
type IERC721MetadataApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (*IERC721MetadataApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalIterator{contract: _IERC721Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApproval, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApproval)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApproval(log types.Log) (*IERC721MetadataApproval, error) {
	event := new(IERC721MetadataApproval)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAllIterator struct {
	Event *IERC721MetadataApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApprovalForAll represents a ApprovalForAll event raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*IERC721MetadataApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalForAllIterator{contract: _IERC721Metadata.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApprovalForAll)
				if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApprovalForAll(log types.Log) (*IERC721MetadataApprovalForAll, error) {
	event := new(IERC721MetadataApprovalForAll)
	if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Metadata contract.
type IERC721MetadataTransferIterator struct {
	Event *IERC721MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataTransfer represents a Transfer event raised by the IERC721Metadata contract.
type IERC721MetadataTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*IERC721MetadataTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransferIterator{contract: _IERC721Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721MetadataTransfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataTransfer)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseTransfer(log types.Log) (*IERC721MetadataTransfer, error) {
	event := new(IERC721MetadataTransfer)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TokenReceiver0MetaData contains all meta data concerning the IERC721TokenReceiver0 contract.
var IERC721TokenReceiver0MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"150b7a02": "onERC721Received(address,address,uint256,bytes)",
	},
}

// IERC721TokenReceiver0ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721TokenReceiver0MetaData.ABI instead.
var IERC721TokenReceiver0ABI = IERC721TokenReceiver0MetaData.ABI

// Deprecated: Use IERC721TokenReceiver0MetaData.Sigs instead.
// IERC721TokenReceiver0FuncSigs maps the 4-byte function signature to its string representation.
var IERC721TokenReceiver0FuncSigs = IERC721TokenReceiver0MetaData.Sigs

// IERC721TokenReceiver0 is an auto generated Go binding around an Ethereum contract.
type IERC721TokenReceiver0 struct {
	IERC721TokenReceiver0Caller     // Read-only binding to the contract
	IERC721TokenReceiver0Transactor // Write-only binding to the contract
	IERC721TokenReceiver0Filterer   // Log filterer for contract events
}

// IERC721TokenReceiver0Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721TokenReceiver0Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver0Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721TokenReceiver0Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver0Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721TokenReceiver0Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver0Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721TokenReceiver0Session struct {
	Contract     *IERC721TokenReceiver0 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IERC721TokenReceiver0CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721TokenReceiver0CallerSession struct {
	Contract *IERC721TokenReceiver0Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// IERC721TokenReceiver0TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TokenReceiver0TransactorSession struct {
	Contract     *IERC721TokenReceiver0Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// IERC721TokenReceiver0Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721TokenReceiver0Raw struct {
	Contract *IERC721TokenReceiver0 // Generic contract binding to access the raw methods on
}

// IERC721TokenReceiver0CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721TokenReceiver0CallerRaw struct {
	Contract *IERC721TokenReceiver0Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TokenReceiver0TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TokenReceiver0TransactorRaw struct {
	Contract *IERC721TokenReceiver0Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721TokenReceiver0 creates a new instance of IERC721TokenReceiver0, bound to a specific deployed contract.
func NewIERC721TokenReceiver0(address common.Address, backend bind.ContractBackend) (*IERC721TokenReceiver0, error) {
	contract, err := bindIERC721TokenReceiver0(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver0{IERC721TokenReceiver0Caller: IERC721TokenReceiver0Caller{contract: contract}, IERC721TokenReceiver0Transactor: IERC721TokenReceiver0Transactor{contract: contract}, IERC721TokenReceiver0Filterer: IERC721TokenReceiver0Filterer{contract: contract}}, nil
}

// NewIERC721TokenReceiver0Caller creates a new read-only instance of IERC721TokenReceiver0, bound to a specific deployed contract.
func NewIERC721TokenReceiver0Caller(address common.Address, caller bind.ContractCaller) (*IERC721TokenReceiver0Caller, error) {
	contract, err := bindIERC721TokenReceiver0(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver0Caller{contract: contract}, nil
}

// NewIERC721TokenReceiver0Transactor creates a new write-only instance of IERC721TokenReceiver0, bound to a specific deployed contract.
func NewIERC721TokenReceiver0Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721TokenReceiver0Transactor, error) {
	contract, err := bindIERC721TokenReceiver0(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver0Transactor{contract: contract}, nil
}

// NewIERC721TokenReceiver0Filterer creates a new log filterer instance of IERC721TokenReceiver0, bound to a specific deployed contract.
func NewIERC721TokenReceiver0Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721TokenReceiver0Filterer, error) {
	contract, err := bindIERC721TokenReceiver0(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver0Filterer{contract: contract}, nil
}

// bindIERC721TokenReceiver0 binds a generic wrapper to an already deployed contract.
func bindIERC721TokenReceiver0(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721TokenReceiver0MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721TokenReceiver0.Contract.IERC721TokenReceiver0Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.IERC721TokenReceiver0Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.IERC721TokenReceiver0Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721TokenReceiver0.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) returns(bytes4)
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0Transactor) OnERC721Received(opts *bind.TransactOpts, _operator common.Address, _from common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.contract.Transact(opts, "onERC721Received", _operator, _from, _tokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) returns(bytes4)
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0Session) OnERC721Received(_operator common.Address, _from common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.OnERC721Received(&_IERC721TokenReceiver0.TransactOpts, _operator, _from, _tokenId, _data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) returns(bytes4)
func (_IERC721TokenReceiver0 *IERC721TokenReceiver0TransactorSession) OnERC721Received(_operator common.Address, _from common.Address, _tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver0.Contract.OnERC721Received(&_IERC721TokenReceiver0.TransactOpts, _operator, _from, _tokenId, _data)
}

// IERC721TokenReceiver1MetaData contains all meta data concerning the IERC721TokenReceiver1 contract.
var IERC721TokenReceiver1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"150b7a02": "onERC721Received(address,address,uint256,bytes)",
	},
}

// IERC721TokenReceiver1ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721TokenReceiver1MetaData.ABI instead.
var IERC721TokenReceiver1ABI = IERC721TokenReceiver1MetaData.ABI

// Deprecated: Use IERC721TokenReceiver1MetaData.Sigs instead.
// IERC721TokenReceiver1FuncSigs maps the 4-byte function signature to its string representation.
var IERC721TokenReceiver1FuncSigs = IERC721TokenReceiver1MetaData.Sigs

// IERC721TokenReceiver1 is an auto generated Go binding around an Ethereum contract.
type IERC721TokenReceiver1 struct {
	IERC721TokenReceiver1Caller     // Read-only binding to the contract
	IERC721TokenReceiver1Transactor // Write-only binding to the contract
	IERC721TokenReceiver1Filterer   // Log filterer for contract events
}

// IERC721TokenReceiver1Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721TokenReceiver1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721TokenReceiver1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721TokenReceiver1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721TokenReceiver1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721TokenReceiver1Session struct {
	Contract     *IERC721TokenReceiver1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IERC721TokenReceiver1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721TokenReceiver1CallerSession struct {
	Contract *IERC721TokenReceiver1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// IERC721TokenReceiver1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TokenReceiver1TransactorSession struct {
	Contract     *IERC721TokenReceiver1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// IERC721TokenReceiver1Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721TokenReceiver1Raw struct {
	Contract *IERC721TokenReceiver1 // Generic contract binding to access the raw methods on
}

// IERC721TokenReceiver1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721TokenReceiver1CallerRaw struct {
	Contract *IERC721TokenReceiver1Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TokenReceiver1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TokenReceiver1TransactorRaw struct {
	Contract *IERC721TokenReceiver1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721TokenReceiver1 creates a new instance of IERC721TokenReceiver1, bound to a specific deployed contract.
func NewIERC721TokenReceiver1(address common.Address, backend bind.ContractBackend) (*IERC721TokenReceiver1, error) {
	contract, err := bindIERC721TokenReceiver1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver1{IERC721TokenReceiver1Caller: IERC721TokenReceiver1Caller{contract: contract}, IERC721TokenReceiver1Transactor: IERC721TokenReceiver1Transactor{contract: contract}, IERC721TokenReceiver1Filterer: IERC721TokenReceiver1Filterer{contract: contract}}, nil
}

// NewIERC721TokenReceiver1Caller creates a new read-only instance of IERC721TokenReceiver1, bound to a specific deployed contract.
func NewIERC721TokenReceiver1Caller(address common.Address, caller bind.ContractCaller) (*IERC721TokenReceiver1Caller, error) {
	contract, err := bindIERC721TokenReceiver1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver1Caller{contract: contract}, nil
}

// NewIERC721TokenReceiver1Transactor creates a new write-only instance of IERC721TokenReceiver1, bound to a specific deployed contract.
func NewIERC721TokenReceiver1Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721TokenReceiver1Transactor, error) {
	contract, err := bindIERC721TokenReceiver1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver1Transactor{contract: contract}, nil
}

// NewIERC721TokenReceiver1Filterer creates a new log filterer instance of IERC721TokenReceiver1, bound to a specific deployed contract.
func NewIERC721TokenReceiver1Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721TokenReceiver1Filterer, error) {
	contract, err := bindIERC721TokenReceiver1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721TokenReceiver1Filterer{contract: contract}, nil
}

// bindIERC721TokenReceiver1 binds a generic wrapper to an already deployed contract.
func bindIERC721TokenReceiver1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721TokenReceiver1MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721TokenReceiver1.Contract.IERC721TokenReceiver1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.IERC721TokenReceiver1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.IERC721TokenReceiver1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721TokenReceiver1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1Transactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.contract.Transact(opts, "onERC721Received", arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1Session) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.OnERC721Received(&_IERC721TokenReceiver1.TransactOpts, arg0, arg1, arg2, arg3)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address , uint256 , bytes ) returns(bytes4)
func (_IERC721TokenReceiver1 *IERC721TokenReceiver1TransactorSession) OnERC721Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _IERC721TokenReceiver1.Contract.OnERC721Received(&_IERC721TokenReceiver1.TransactOpts, arg0, arg1, arg2, arg3)
}

// IFastBridgeMetaData contains all meta data concerning the IFastBridge contract.
var IFastBridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BridgeProofDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeProofProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainGasAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"structIFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structIFastBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"45851694": "bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))",
		"aa9641ab": "canClaim(bytes32,address)",
		"41fcb612": "claim(bytes,address)",
		"add98c70": "dispute(bytes32)",
		"ac11fb1a": "getBridgeTransaction(bytes)",
		"886d36ff": "prove(bytes,bytes32)",
		"5eb7d946": "refund(bytes)",
		"8f0d6f17": "relay(bytes)",
	},
}

// IFastBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use IFastBridgeMetaData.ABI instead.
var IFastBridgeABI = IFastBridgeMetaData.ABI

// Deprecated: Use IFastBridgeMetaData.Sigs instead.
// IFastBridgeFuncSigs maps the 4-byte function signature to its string representation.
var IFastBridgeFuncSigs = IFastBridgeMetaData.Sigs

// IFastBridge is an auto generated Go binding around an Ethereum contract.
type IFastBridge struct {
	IFastBridgeCaller     // Read-only binding to the contract
	IFastBridgeTransactor // Write-only binding to the contract
	IFastBridgeFilterer   // Log filterer for contract events
}

// IFastBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFastBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFastBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFastBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFastBridgeSession struct {
	Contract     *IFastBridge      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFastBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFastBridgeCallerSession struct {
	Contract *IFastBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IFastBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFastBridgeTransactorSession struct {
	Contract     *IFastBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IFastBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFastBridgeRaw struct {
	Contract *IFastBridge // Generic contract binding to access the raw methods on
}

// IFastBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFastBridgeCallerRaw struct {
	Contract *IFastBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// IFastBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFastBridgeTransactorRaw struct {
	Contract *IFastBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFastBridge creates a new instance of IFastBridge, bound to a specific deployed contract.
func NewIFastBridge(address common.Address, backend bind.ContractBackend) (*IFastBridge, error) {
	contract, err := bindIFastBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFastBridge{IFastBridgeCaller: IFastBridgeCaller{contract: contract}, IFastBridgeTransactor: IFastBridgeTransactor{contract: contract}, IFastBridgeFilterer: IFastBridgeFilterer{contract: contract}}, nil
}

// NewIFastBridgeCaller creates a new read-only instance of IFastBridge, bound to a specific deployed contract.
func NewIFastBridgeCaller(address common.Address, caller bind.ContractCaller) (*IFastBridgeCaller, error) {
	contract, err := bindIFastBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeCaller{contract: contract}, nil
}

// NewIFastBridgeTransactor creates a new write-only instance of IFastBridge, bound to a specific deployed contract.
func NewIFastBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*IFastBridgeTransactor, error) {
	contract, err := bindIFastBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeTransactor{contract: contract}, nil
}

// NewIFastBridgeFilterer creates a new log filterer instance of IFastBridge, bound to a specific deployed contract.
func NewIFastBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*IFastBridgeFilterer, error) {
	contract, err := bindIFastBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeFilterer{contract: contract}, nil
}

// bindIFastBridge binds a generic wrapper to an already deployed contract.
func bindIFastBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IFastBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFastBridge *IFastBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFastBridge.Contract.IFastBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFastBridge *IFastBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFastBridge.Contract.IFastBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFastBridge *IFastBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFastBridge.Contract.IFastBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFastBridge *IFastBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFastBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFastBridge *IFastBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFastBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFastBridge *IFastBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFastBridge.Contract.contract.Transact(opts, method, params...)
}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridge *IFastBridgeCaller) CanClaim(opts *bind.CallOpts, transactionId [32]byte, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _IFastBridge.contract.Call(opts, &out, "canClaim", transactionId, relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridge *IFastBridgeSession) CanClaim(transactionId [32]byte, relayer common.Address) (bool, error) {
	return _IFastBridge.Contract.CanClaim(&_IFastBridge.CallOpts, transactionId, relayer)
}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridge *IFastBridgeCallerSession) CanClaim(transactionId [32]byte, relayer common.Address) (bool, error) {
	return _IFastBridge.Contract.CanClaim(&_IFastBridge.CallOpts, transactionId, relayer)
}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridge *IFastBridgeCaller) GetBridgeTransaction(opts *bind.CallOpts, request []byte) (IFastBridgeBridgeTransaction, error) {
	var out []interface{}
	err := _IFastBridge.contract.Call(opts, &out, "getBridgeTransaction", request)

	if err != nil {
		return *new(IFastBridgeBridgeTransaction), err
	}

	out0 := *abi.ConvertType(out[0], new(IFastBridgeBridgeTransaction)).(*IFastBridgeBridgeTransaction)

	return out0, err

}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridge *IFastBridgeSession) GetBridgeTransaction(request []byte) (IFastBridgeBridgeTransaction, error) {
	return _IFastBridge.Contract.GetBridgeTransaction(&_IFastBridge.CallOpts, request)
}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridge *IFastBridgeCallerSession) GetBridgeTransaction(request []byte) (IFastBridgeBridgeTransaction, error) {
	return _IFastBridge.Contract.GetBridgeTransaction(&_IFastBridge.CallOpts, request)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridge *IFastBridgeTransactor) Bridge(opts *bind.TransactOpts, params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "bridge", params)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridge *IFastBridgeSession) Bridge(params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridge.Contract.Bridge(&_IFastBridge.TransactOpts, params)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridge *IFastBridgeTransactorSession) Bridge(params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridge.Contract.Bridge(&_IFastBridge.TransactOpts, params)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridge *IFastBridgeTransactor) Claim(opts *bind.TransactOpts, request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "claim", request, to)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridge *IFastBridgeSession) Claim(request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridge.Contract.Claim(&_IFastBridge.TransactOpts, request, to)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridge *IFastBridgeTransactorSession) Claim(request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridge.Contract.Claim(&_IFastBridge.TransactOpts, request, to)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridge *IFastBridgeTransactor) Dispute(opts *bind.TransactOpts, transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "dispute", transactionId)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridge *IFastBridgeSession) Dispute(transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Dispute(&_IFastBridge.TransactOpts, transactionId)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridge *IFastBridgeTransactorSession) Dispute(transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Dispute(&_IFastBridge.TransactOpts, transactionId)
}

// Prove is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridge *IFastBridgeTransactor) Prove(opts *bind.TransactOpts, request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "prove", request, destTxHash)
}

// Prove is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridge *IFastBridgeSession) Prove(request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Prove(&_IFastBridge.TransactOpts, request, destTxHash)
}

// Prove is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridge *IFastBridgeTransactorSession) Prove(request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Prove(&_IFastBridge.TransactOpts, request, destTxHash)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridge *IFastBridgeTransactor) Refund(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "refund", request)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridge *IFastBridgeSession) Refund(request []byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Refund(&_IFastBridge.TransactOpts, request)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridge *IFastBridgeTransactorSession) Refund(request []byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Refund(&_IFastBridge.TransactOpts, request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridge *IFastBridgeTransactor) Relay(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _IFastBridge.contract.Transact(opts, "relay", request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridge *IFastBridgeSession) Relay(request []byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Relay(&_IFastBridge.TransactOpts, request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridge *IFastBridgeTransactorSession) Relay(request []byte) (*types.Transaction, error) {
	return _IFastBridge.Contract.Relay(&_IFastBridge.TransactOpts, request)
}

// IFastBridgeBridgeDepositClaimedIterator is returned from FilterBridgeDepositClaimed and is used to iterate over the raw logs and unpacked data for BridgeDepositClaimed events raised by the IFastBridge contract.
type IFastBridgeBridgeDepositClaimedIterator struct {
	Event *IFastBridgeBridgeDepositClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeDepositClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeDepositClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeDepositClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeDepositClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeDepositClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeDepositClaimed represents a BridgeDepositClaimed event raised by the IFastBridge contract.
type IFastBridgeBridgeDepositClaimed struct {
	TransactionId [32]byte
	Relayer       common.Address
	To            common.Address
	Token         common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeDepositClaimed is a free log retrieval operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeDepositClaimed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address, to []common.Address) (*IFastBridgeBridgeDepositClaimedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeDepositClaimed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeDepositClaimedIterator{contract: _IFastBridge.contract, event: "BridgeDepositClaimed", logs: logs, sub: sub}, nil
}

// WatchBridgeDepositClaimed is a free log subscription operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeDepositClaimed(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeDepositClaimed, transactionId [][32]byte, relayer []common.Address, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeDepositClaimed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeDepositClaimed)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeDepositClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeDepositClaimed is a log parse operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeDepositClaimed(log types.Log) (*IFastBridgeBridgeDepositClaimed, error) {
	event := new(IFastBridgeBridgeDepositClaimed)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeDepositClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeBridgeDepositRefundedIterator is returned from FilterBridgeDepositRefunded and is used to iterate over the raw logs and unpacked data for BridgeDepositRefunded events raised by the IFastBridge contract.
type IFastBridgeBridgeDepositRefundedIterator struct {
	Event *IFastBridgeBridgeDepositRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeDepositRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeDepositRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeDepositRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeDepositRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeDepositRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeDepositRefunded represents a BridgeDepositRefunded event raised by the IFastBridge contract.
type IFastBridgeBridgeDepositRefunded struct {
	TransactionId [32]byte
	To            common.Address
	Token         common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeDepositRefunded is a free log retrieval operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeDepositRefunded(opts *bind.FilterOpts, transactionId [][32]byte, to []common.Address) (*IFastBridgeBridgeDepositRefundedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeDepositRefunded", transactionIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeDepositRefundedIterator{contract: _IFastBridge.contract, event: "BridgeDepositRefunded", logs: logs, sub: sub}, nil
}

// WatchBridgeDepositRefunded is a free log subscription operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeDepositRefunded(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeDepositRefunded, transactionId [][32]byte, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeDepositRefunded", transactionIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeDepositRefunded)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeDepositRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeDepositRefunded is a log parse operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeDepositRefunded(log types.Log) (*IFastBridgeBridgeDepositRefunded, error) {
	event := new(IFastBridgeBridgeDepositRefunded)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeDepositRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeBridgeProofDisputedIterator is returned from FilterBridgeProofDisputed and is used to iterate over the raw logs and unpacked data for BridgeProofDisputed events raised by the IFastBridge contract.
type IFastBridgeBridgeProofDisputedIterator struct {
	Event *IFastBridgeBridgeProofDisputed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeProofDisputedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeProofDisputed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeProofDisputed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeProofDisputedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeProofDisputedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeProofDisputed represents a BridgeProofDisputed event raised by the IFastBridge contract.
type IFastBridgeBridgeProofDisputed struct {
	TransactionId [32]byte
	Relayer       common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeProofDisputed is a free log retrieval operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeProofDisputed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address) (*IFastBridgeBridgeProofDisputedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeProofDisputed", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeProofDisputedIterator{contract: _IFastBridge.contract, event: "BridgeProofDisputed", logs: logs, sub: sub}, nil
}

// WatchBridgeProofDisputed is a free log subscription operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeProofDisputed(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeProofDisputed, transactionId [][32]byte, relayer []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeProofDisputed", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeProofDisputed)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeProofDisputed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeProofDisputed is a log parse operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeProofDisputed(log types.Log) (*IFastBridgeBridgeProofDisputed, error) {
	event := new(IFastBridgeBridgeProofDisputed)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeProofDisputed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeBridgeProofProvidedIterator is returned from FilterBridgeProofProvided and is used to iterate over the raw logs and unpacked data for BridgeProofProvided events raised by the IFastBridge contract.
type IFastBridgeBridgeProofProvidedIterator struct {
	Event *IFastBridgeBridgeProofProvided // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeProofProvidedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeProofProvided)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeProofProvided)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeProofProvidedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeProofProvidedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeProofProvided represents a BridgeProofProvided event raised by the IFastBridge contract.
type IFastBridgeBridgeProofProvided struct {
	TransactionId   [32]byte
	Relayer         common.Address
	TransactionHash [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBridgeProofProvided is a free log retrieval operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeProofProvided(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address) (*IFastBridgeBridgeProofProvidedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeProofProvided", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeProofProvidedIterator{contract: _IFastBridge.contract, event: "BridgeProofProvided", logs: logs, sub: sub}, nil
}

// WatchBridgeProofProvided is a free log subscription operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeProofProvided(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeProofProvided, transactionId [][32]byte, relayer []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeProofProvided", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeProofProvided)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeProofProvided", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeProofProvided is a log parse operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeProofProvided(log types.Log) (*IFastBridgeBridgeProofProvided, error) {
	event := new(IFastBridgeBridgeProofProvided)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeProofProvided", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeBridgeRelayedIterator is returned from FilterBridgeRelayed and is used to iterate over the raw logs and unpacked data for BridgeRelayed events raised by the IFastBridge contract.
type IFastBridgeBridgeRelayedIterator struct {
	Event *IFastBridgeBridgeRelayed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeRelayedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeRelayed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeRelayed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeRelayedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeRelayedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeRelayed represents a BridgeRelayed event raised by the IFastBridge contract.
type IFastBridgeBridgeRelayed struct {
	TransactionId  [32]byte
	Relayer        common.Address
	To             common.Address
	OriginChainId  uint32
	OriginToken    common.Address
	DestToken      common.Address
	OriginAmount   *big.Int
	DestAmount     *big.Int
	ChainGasAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBridgeRelayed is a free log retrieval operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeRelayed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address, to []common.Address) (*IFastBridgeBridgeRelayedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeRelayed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeRelayedIterator{contract: _IFastBridge.contract, event: "BridgeRelayed", logs: logs, sub: sub}, nil
}

// WatchBridgeRelayed is a free log subscription operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeRelayed(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeRelayed, transactionId [][32]byte, relayer []common.Address, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeRelayed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeRelayed)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeRelayed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeRelayed is a log parse operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeRelayed(log types.Log) (*IFastBridgeBridgeRelayed, error) {
	event := new(IFastBridgeBridgeRelayed)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeRelayed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeBridgeRequestedIterator is returned from FilterBridgeRequested and is used to iterate over the raw logs and unpacked data for BridgeRequested events raised by the IFastBridge contract.
type IFastBridgeBridgeRequestedIterator struct {
	Event *IFastBridgeBridgeRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeBridgeRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeBridgeRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeBridgeRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeBridgeRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeBridgeRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeBridgeRequested represents a BridgeRequested event raised by the IFastBridge contract.
type IFastBridgeBridgeRequested struct {
	TransactionId [32]byte
	Sender        common.Address
	Request       []byte
	DestChainId   uint32
	OriginToken   common.Address
	DestToken     common.Address
	OriginAmount  *big.Int
	DestAmount    *big.Int
	SendChainGas  bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeRequested is a free log retrieval operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridge *IFastBridgeFilterer) FilterBridgeRequested(opts *bind.FilterOpts, transactionId [][32]byte, sender []common.Address) (*IFastBridgeBridgeRequestedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFastBridge.contract.FilterLogs(opts, "BridgeRequested", transactionIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeBridgeRequestedIterator{contract: _IFastBridge.contract, event: "BridgeRequested", logs: logs, sub: sub}, nil
}

// WatchBridgeRequested is a free log subscription operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridge *IFastBridgeFilterer) WatchBridgeRequested(opts *bind.WatchOpts, sink chan<- *IFastBridgeBridgeRequested, transactionId [][32]byte, sender []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFastBridge.contract.WatchLogs(opts, "BridgeRequested", transactionIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeBridgeRequested)
				if err := _IFastBridge.contract.UnpackLog(event, "BridgeRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeRequested is a log parse operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridge *IFastBridgeFilterer) ParseBridgeRequested(log types.Log) (*IFastBridgeBridgeRequested, error) {
	event := new(IFastBridgeBridgeRequested)
	if err := _IFastBridge.contract.UnpackLog(event, "BridgeRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2MetaData contains all meta data concerning the IFastBridgeV2 contract.
var IFastBridgeV2MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BridgeProofDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeProofProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"quoteId\",\"type\":\"bytes\"}],\"name\":\"BridgeQuoteDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainGasAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"structIFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"structIFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"quoteRelayer\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"quoteExclusivitySeconds\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"quoteId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeParamsV2\",\"name\":\"paramsV2\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"bridgeProofs\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"timestamp\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"bridgeRelays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"bridgeStatuses\",\"outputs\":[{\"internalType\":\"enumIFastBridgeV2.BridgeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structIFastBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransactionV2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exclusivityRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exclusivityEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zapNative\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"internalType\":\"structIFastBridgeV2.BridgeTransactionV2\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"45851694": "bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))",
		"bfc7c607": "bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256),(address,int256,bytes,uint256,bytes))",
		"91ad5039": "bridgeProofs(bytes32)",
		"8379a24f": "bridgeRelays(bytes32)",
		"051287bc": "bridgeStatuses(bytes32)",
		"aa9641ab": "canClaim(bytes32,address)",
		"c63ff8dd": "claim(bytes)",
		"41fcb612": "claim(bytes,address)",
		"add98c70": "dispute(bytes32)",
		"ac11fb1a": "getBridgeTransaction(bytes)",
		"5aa6ccba": "getBridgeTransactionV2(bytes)",
		"886d36ff": "prove(bytes,bytes32)",
		"18e4357d": "prove(bytes32,bytes32,address)",
		"5eb7d946": "refund(bytes)",
		"8f0d6f17": "relay(bytes)",
		"9c9545f0": "relay(bytes,address)",
	},
}

// IFastBridgeV2ABI is the input ABI used to generate the binding from.
// Deprecated: Use IFastBridgeV2MetaData.ABI instead.
var IFastBridgeV2ABI = IFastBridgeV2MetaData.ABI

// Deprecated: Use IFastBridgeV2MetaData.Sigs instead.
// IFastBridgeV2FuncSigs maps the 4-byte function signature to its string representation.
var IFastBridgeV2FuncSigs = IFastBridgeV2MetaData.Sigs

// IFastBridgeV2 is an auto generated Go binding around an Ethereum contract.
type IFastBridgeV2 struct {
	IFastBridgeV2Caller     // Read-only binding to the contract
	IFastBridgeV2Transactor // Write-only binding to the contract
	IFastBridgeV2Filterer   // Log filterer for contract events
}

// IFastBridgeV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type IFastBridgeV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IFastBridgeV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFastBridgeV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFastBridgeV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFastBridgeV2Session struct {
	Contract     *IFastBridgeV2    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFastBridgeV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFastBridgeV2CallerSession struct {
	Contract *IFastBridgeV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IFastBridgeV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFastBridgeV2TransactorSession struct {
	Contract     *IFastBridgeV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IFastBridgeV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type IFastBridgeV2Raw struct {
	Contract *IFastBridgeV2 // Generic contract binding to access the raw methods on
}

// IFastBridgeV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFastBridgeV2CallerRaw struct {
	Contract *IFastBridgeV2Caller // Generic read-only contract binding to access the raw methods on
}

// IFastBridgeV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFastBridgeV2TransactorRaw struct {
	Contract *IFastBridgeV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIFastBridgeV2 creates a new instance of IFastBridgeV2, bound to a specific deployed contract.
func NewIFastBridgeV2(address common.Address, backend bind.ContractBackend) (*IFastBridgeV2, error) {
	contract, err := bindIFastBridgeV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2{IFastBridgeV2Caller: IFastBridgeV2Caller{contract: contract}, IFastBridgeV2Transactor: IFastBridgeV2Transactor{contract: contract}, IFastBridgeV2Filterer: IFastBridgeV2Filterer{contract: contract}}, nil
}

// NewIFastBridgeV2Caller creates a new read-only instance of IFastBridgeV2, bound to a specific deployed contract.
func NewIFastBridgeV2Caller(address common.Address, caller bind.ContractCaller) (*IFastBridgeV2Caller, error) {
	contract, err := bindIFastBridgeV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2Caller{contract: contract}, nil
}

// NewIFastBridgeV2Transactor creates a new write-only instance of IFastBridgeV2, bound to a specific deployed contract.
func NewIFastBridgeV2Transactor(address common.Address, transactor bind.ContractTransactor) (*IFastBridgeV2Transactor, error) {
	contract, err := bindIFastBridgeV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2Transactor{contract: contract}, nil
}

// NewIFastBridgeV2Filterer creates a new log filterer instance of IFastBridgeV2, bound to a specific deployed contract.
func NewIFastBridgeV2Filterer(address common.Address, filterer bind.ContractFilterer) (*IFastBridgeV2Filterer, error) {
	contract, err := bindIFastBridgeV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2Filterer{contract: contract}, nil
}

// bindIFastBridgeV2 binds a generic wrapper to an already deployed contract.
func bindIFastBridgeV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IFastBridgeV2MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFastBridgeV2 *IFastBridgeV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFastBridgeV2.Contract.IFastBridgeV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFastBridgeV2 *IFastBridgeV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.IFastBridgeV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFastBridgeV2 *IFastBridgeV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.IFastBridgeV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFastBridgeV2 *IFastBridgeV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFastBridgeV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFastBridgeV2 *IFastBridgeV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFastBridgeV2 *IFastBridgeV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.contract.Transact(opts, method, params...)
}

// BridgeProofs is a free data retrieval call binding the contract method 0x91ad5039.
//
// Solidity: function bridgeProofs(bytes32 transactionId) view returns(uint96 timestamp, address relayer)
func (_IFastBridgeV2 *IFastBridgeV2Caller) BridgeProofs(opts *bind.CallOpts, transactionId [32]byte) (struct {
	Timestamp *big.Int
	Relayer   common.Address
}, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "bridgeProofs", transactionId)

	outstruct := new(struct {
		Timestamp *big.Int
		Relayer   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Relayer = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// BridgeProofs is a free data retrieval call binding the contract method 0x91ad5039.
//
// Solidity: function bridgeProofs(bytes32 transactionId) view returns(uint96 timestamp, address relayer)
func (_IFastBridgeV2 *IFastBridgeV2Session) BridgeProofs(transactionId [32]byte) (struct {
	Timestamp *big.Int
	Relayer   common.Address
}, error) {
	return _IFastBridgeV2.Contract.BridgeProofs(&_IFastBridgeV2.CallOpts, transactionId)
}

// BridgeProofs is a free data retrieval call binding the contract method 0x91ad5039.
//
// Solidity: function bridgeProofs(bytes32 transactionId) view returns(uint96 timestamp, address relayer)
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) BridgeProofs(transactionId [32]byte) (struct {
	Timestamp *big.Int
	Relayer   common.Address
}, error) {
	return _IFastBridgeV2.Contract.BridgeProofs(&_IFastBridgeV2.CallOpts, transactionId)
}

// BridgeRelays is a free data retrieval call binding the contract method 0x8379a24f.
//
// Solidity: function bridgeRelays(bytes32 transactionId) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2Caller) BridgeRelays(opts *bind.CallOpts, transactionId [32]byte) (bool, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "bridgeRelays", transactionId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BridgeRelays is a free data retrieval call binding the contract method 0x8379a24f.
//
// Solidity: function bridgeRelays(bytes32 transactionId) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2Session) BridgeRelays(transactionId [32]byte) (bool, error) {
	return _IFastBridgeV2.Contract.BridgeRelays(&_IFastBridgeV2.CallOpts, transactionId)
}

// BridgeRelays is a free data retrieval call binding the contract method 0x8379a24f.
//
// Solidity: function bridgeRelays(bytes32 transactionId) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) BridgeRelays(transactionId [32]byte) (bool, error) {
	return _IFastBridgeV2.Contract.BridgeRelays(&_IFastBridgeV2.CallOpts, transactionId)
}

// BridgeStatuses is a free data retrieval call binding the contract method 0x051287bc.
//
// Solidity: function bridgeStatuses(bytes32 transactionId) view returns(uint8)
func (_IFastBridgeV2 *IFastBridgeV2Caller) BridgeStatuses(opts *bind.CallOpts, transactionId [32]byte) (uint8, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "bridgeStatuses", transactionId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BridgeStatuses is a free data retrieval call binding the contract method 0x051287bc.
//
// Solidity: function bridgeStatuses(bytes32 transactionId) view returns(uint8)
func (_IFastBridgeV2 *IFastBridgeV2Session) BridgeStatuses(transactionId [32]byte) (uint8, error) {
	return _IFastBridgeV2.Contract.BridgeStatuses(&_IFastBridgeV2.CallOpts, transactionId)
}

// BridgeStatuses is a free data retrieval call binding the contract method 0x051287bc.
//
// Solidity: function bridgeStatuses(bytes32 transactionId) view returns(uint8)
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) BridgeStatuses(transactionId [32]byte) (uint8, error) {
	return _IFastBridgeV2.Contract.BridgeStatuses(&_IFastBridgeV2.CallOpts, transactionId)
}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2Caller) CanClaim(opts *bind.CallOpts, transactionId [32]byte, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "canClaim", transactionId, relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2Session) CanClaim(transactionId [32]byte, relayer common.Address) (bool, error) {
	return _IFastBridgeV2.Contract.CanClaim(&_IFastBridgeV2.CallOpts, transactionId, relayer)
}

// CanClaim is a free data retrieval call binding the contract method 0xaa9641ab.
//
// Solidity: function canClaim(bytes32 transactionId, address relayer) view returns(bool)
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) CanClaim(transactionId [32]byte, relayer common.Address) (bool, error) {
	return _IFastBridgeV2.Contract.CanClaim(&_IFastBridgeV2.CallOpts, transactionId, relayer)
}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridgeV2 *IFastBridgeV2Caller) GetBridgeTransaction(opts *bind.CallOpts, request []byte) (IFastBridgeBridgeTransaction, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "getBridgeTransaction", request)

	if err != nil {
		return *new(IFastBridgeBridgeTransaction), err
	}

	out0 := *abi.ConvertType(out[0], new(IFastBridgeBridgeTransaction)).(*IFastBridgeBridgeTransaction)

	return out0, err

}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridgeV2 *IFastBridgeV2Session) GetBridgeTransaction(request []byte) (IFastBridgeBridgeTransaction, error) {
	return _IFastBridgeV2.Contract.GetBridgeTransaction(&_IFastBridgeV2.CallOpts, request)
}

// GetBridgeTransaction is a free data retrieval call binding the contract method 0xac11fb1a.
//
// Solidity: function getBridgeTransaction(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,bool,uint256,uint256))
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) GetBridgeTransaction(request []byte) (IFastBridgeBridgeTransaction, error) {
	return _IFastBridgeV2.Contract.GetBridgeTransaction(&_IFastBridgeV2.CallOpts, request)
}

// GetBridgeTransactionV2 is a free data retrieval call binding the contract method 0x5aa6ccba.
//
// Solidity: function getBridgeTransactionV2(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_IFastBridgeV2 *IFastBridgeV2Caller) GetBridgeTransactionV2(opts *bind.CallOpts, request []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	var out []interface{}
	err := _IFastBridgeV2.contract.Call(opts, &out, "getBridgeTransactionV2", request)

	if err != nil {
		return *new(IFastBridgeV2BridgeTransactionV2), err
	}

	out0 := *abi.ConvertType(out[0], new(IFastBridgeV2BridgeTransactionV2)).(*IFastBridgeV2BridgeTransactionV2)

	return out0, err

}

// GetBridgeTransactionV2 is a free data retrieval call binding the contract method 0x5aa6ccba.
//
// Solidity: function getBridgeTransactionV2(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_IFastBridgeV2 *IFastBridgeV2Session) GetBridgeTransactionV2(request []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	return _IFastBridgeV2.Contract.GetBridgeTransactionV2(&_IFastBridgeV2.CallOpts, request)
}

// GetBridgeTransactionV2 is a free data retrieval call binding the contract method 0x5aa6ccba.
//
// Solidity: function getBridgeTransactionV2(bytes request) view returns((uint32,uint32,address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,bytes))
func (_IFastBridgeV2 *IFastBridgeV2CallerSession) GetBridgeTransactionV2(request []byte) (IFastBridgeV2BridgeTransactionV2, error) {
	return _IFastBridgeV2.Contract.GetBridgeTransactionV2(&_IFastBridgeV2.CallOpts, request)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Bridge(opts *bind.TransactOpts, params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "bridge", params)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Bridge(params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Bridge(&_IFastBridgeV2.TransactOpts, params)
}

// Bridge is a paid mutator transaction binding the contract method 0x45851694.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Bridge(params IFastBridgeBridgeParams) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Bridge(&_IFastBridgeV2.TransactOpts, params)
}

// Bridge0 is a paid mutator transaction binding the contract method 0xbfc7c607.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params, (address,int256,bytes,uint256,bytes) paramsV2) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Bridge0(opts *bind.TransactOpts, params IFastBridgeBridgeParams, paramsV2 IFastBridgeV2BridgeParamsV2) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "bridge0", params, paramsV2)
}

// Bridge0 is a paid mutator transaction binding the contract method 0xbfc7c607.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params, (address,int256,bytes,uint256,bytes) paramsV2) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Bridge0(params IFastBridgeBridgeParams, paramsV2 IFastBridgeV2BridgeParamsV2) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Bridge0(&_IFastBridgeV2.TransactOpts, params, paramsV2)
}

// Bridge0 is a paid mutator transaction binding the contract method 0xbfc7c607.
//
// Solidity: function bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256) params, (address,int256,bytes,uint256,bytes) paramsV2) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Bridge0(params IFastBridgeBridgeParams, paramsV2 IFastBridgeV2BridgeParamsV2) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Bridge0(&_IFastBridgeV2.TransactOpts, params, paramsV2)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Claim(opts *bind.TransactOpts, request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "claim", request, to)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Claim(request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Claim(&_IFastBridgeV2.TransactOpts, request, to)
}

// Claim is a paid mutator transaction binding the contract method 0x41fcb612.
//
// Solidity: function claim(bytes request, address to) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Claim(request []byte, to common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Claim(&_IFastBridgeV2.TransactOpts, request, to)
}

// Claim0 is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Claim0(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "claim0", request)
}

// Claim0 is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Claim0(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Claim0(&_IFastBridgeV2.TransactOpts, request)
}

// Claim0 is a paid mutator transaction binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Claim0(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Claim0(&_IFastBridgeV2.TransactOpts, request)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Dispute(opts *bind.TransactOpts, transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "dispute", transactionId)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Dispute(transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Dispute(&_IFastBridgeV2.TransactOpts, transactionId)
}

// Dispute is a paid mutator transaction binding the contract method 0xadd98c70.
//
// Solidity: function dispute(bytes32 transactionId) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Dispute(transactionId [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Dispute(&_IFastBridgeV2.TransactOpts, transactionId)
}

// Prove is a paid mutator transaction binding the contract method 0x18e4357d.
//
// Solidity: function prove(bytes32 transactionId, bytes32 destTxHash, address relayer) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Prove(opts *bind.TransactOpts, transactionId [32]byte, destTxHash [32]byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "prove", transactionId, destTxHash, relayer)
}

// Prove is a paid mutator transaction binding the contract method 0x18e4357d.
//
// Solidity: function prove(bytes32 transactionId, bytes32 destTxHash, address relayer) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Prove(transactionId [32]byte, destTxHash [32]byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Prove(&_IFastBridgeV2.TransactOpts, transactionId, destTxHash, relayer)
}

// Prove is a paid mutator transaction binding the contract method 0x18e4357d.
//
// Solidity: function prove(bytes32 transactionId, bytes32 destTxHash, address relayer) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Prove(transactionId [32]byte, destTxHash [32]byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Prove(&_IFastBridgeV2.TransactOpts, transactionId, destTxHash, relayer)
}

// Prove0 is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Prove0(opts *bind.TransactOpts, request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "prove0", request, destTxHash)
}

// Prove0 is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Prove0(request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Prove0(&_IFastBridgeV2.TransactOpts, request, destTxHash)
}

// Prove0 is a paid mutator transaction binding the contract method 0x886d36ff.
//
// Solidity: function prove(bytes request, bytes32 destTxHash) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Prove0(request []byte, destTxHash [32]byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Prove0(&_IFastBridgeV2.TransactOpts, request, destTxHash)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Refund(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "refund", request)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Refund(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Refund(&_IFastBridgeV2.TransactOpts, request)
}

// Refund is a paid mutator transaction binding the contract method 0x5eb7d946.
//
// Solidity: function refund(bytes request) returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Refund(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Refund(&_IFastBridgeV2.TransactOpts, request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Relay(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "relay", request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Relay(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Relay(&_IFastBridgeV2.TransactOpts, request)
}

// Relay is a paid mutator transaction binding the contract method 0x8f0d6f17.
//
// Solidity: function relay(bytes request) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Relay(request []byte) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Relay(&_IFastBridgeV2.TransactOpts, request)
}

// Relay0 is a paid mutator transaction binding the contract method 0x9c9545f0.
//
// Solidity: function relay(bytes request, address relayer) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Transactor) Relay0(opts *bind.TransactOpts, request []byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.contract.Transact(opts, "relay0", request, relayer)
}

// Relay0 is a paid mutator transaction binding the contract method 0x9c9545f0.
//
// Solidity: function relay(bytes request, address relayer) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2Session) Relay0(request []byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Relay0(&_IFastBridgeV2.TransactOpts, request, relayer)
}

// Relay0 is a paid mutator transaction binding the contract method 0x9c9545f0.
//
// Solidity: function relay(bytes request, address relayer) payable returns()
func (_IFastBridgeV2 *IFastBridgeV2TransactorSession) Relay0(request []byte, relayer common.Address) (*types.Transaction, error) {
	return _IFastBridgeV2.Contract.Relay0(&_IFastBridgeV2.TransactOpts, request, relayer)
}

// IFastBridgeV2BridgeDepositClaimedIterator is returned from FilterBridgeDepositClaimed and is used to iterate over the raw logs and unpacked data for BridgeDepositClaimed events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeDepositClaimedIterator struct {
	Event *IFastBridgeV2BridgeDepositClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeDepositClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeDepositClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeDepositClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeDepositClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeDepositClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeDepositClaimed represents a BridgeDepositClaimed event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeDepositClaimed struct {
	TransactionId [32]byte
	Relayer       common.Address
	To            common.Address
	Token         common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeDepositClaimed is a free log retrieval operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeDepositClaimed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address, to []common.Address) (*IFastBridgeV2BridgeDepositClaimedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeDepositClaimed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeDepositClaimedIterator{contract: _IFastBridgeV2.contract, event: "BridgeDepositClaimed", logs: logs, sub: sub}, nil
}

// WatchBridgeDepositClaimed is a free log subscription operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeDepositClaimed(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeDepositClaimed, transactionId [][32]byte, relayer []common.Address, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeDepositClaimed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeDepositClaimed)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeDepositClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeDepositClaimed is a log parse operation binding the contract event 0x582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac678.
//
// Solidity: event BridgeDepositClaimed(bytes32 indexed transactionId, address indexed relayer, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeDepositClaimed(log types.Log) (*IFastBridgeV2BridgeDepositClaimed, error) {
	event := new(IFastBridgeV2BridgeDepositClaimed)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeDepositClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeDepositRefundedIterator is returned from FilterBridgeDepositRefunded and is used to iterate over the raw logs and unpacked data for BridgeDepositRefunded events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeDepositRefundedIterator struct {
	Event *IFastBridgeV2BridgeDepositRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeDepositRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeDepositRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeDepositRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeDepositRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeDepositRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeDepositRefunded represents a BridgeDepositRefunded event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeDepositRefunded struct {
	TransactionId [32]byte
	To            common.Address
	Token         common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeDepositRefunded is a free log retrieval operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeDepositRefunded(opts *bind.FilterOpts, transactionId [][32]byte, to []common.Address) (*IFastBridgeV2BridgeDepositRefundedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeDepositRefunded", transactionIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeDepositRefundedIterator{contract: _IFastBridgeV2.contract, event: "BridgeDepositRefunded", logs: logs, sub: sub}, nil
}

// WatchBridgeDepositRefunded is a free log subscription operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeDepositRefunded(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeDepositRefunded, transactionId [][32]byte, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeDepositRefunded", transactionIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeDepositRefunded)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeDepositRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeDepositRefunded is a log parse operation binding the contract event 0xb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958.
//
// Solidity: event BridgeDepositRefunded(bytes32 indexed transactionId, address indexed to, address token, uint256 amount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeDepositRefunded(log types.Log) (*IFastBridgeV2BridgeDepositRefunded, error) {
	event := new(IFastBridgeV2BridgeDepositRefunded)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeDepositRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeProofDisputedIterator is returned from FilterBridgeProofDisputed and is used to iterate over the raw logs and unpacked data for BridgeProofDisputed events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeProofDisputedIterator struct {
	Event *IFastBridgeV2BridgeProofDisputed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeProofDisputedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeProofDisputed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeProofDisputed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeProofDisputedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeProofDisputedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeProofDisputed represents a BridgeProofDisputed event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeProofDisputed struct {
	TransactionId [32]byte
	Relayer       common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeProofDisputed is a free log retrieval operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeProofDisputed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address) (*IFastBridgeV2BridgeProofDisputedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeProofDisputed", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeProofDisputedIterator{contract: _IFastBridgeV2.contract, event: "BridgeProofDisputed", logs: logs, sub: sub}, nil
}

// WatchBridgeProofDisputed is a free log subscription operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeProofDisputed(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeProofDisputed, transactionId [][32]byte, relayer []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeProofDisputed", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeProofDisputed)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeProofDisputed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeProofDisputed is a log parse operation binding the contract event 0x0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad4.
//
// Solidity: event BridgeProofDisputed(bytes32 indexed transactionId, address indexed relayer)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeProofDisputed(log types.Log) (*IFastBridgeV2BridgeProofDisputed, error) {
	event := new(IFastBridgeV2BridgeProofDisputed)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeProofDisputed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeProofProvidedIterator is returned from FilterBridgeProofProvided and is used to iterate over the raw logs and unpacked data for BridgeProofProvided events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeProofProvidedIterator struct {
	Event *IFastBridgeV2BridgeProofProvided // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeProofProvidedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeProofProvided)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeProofProvided)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeProofProvidedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeProofProvidedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeProofProvided represents a BridgeProofProvided event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeProofProvided struct {
	TransactionId   [32]byte
	Relayer         common.Address
	TransactionHash [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBridgeProofProvided is a free log retrieval operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeProofProvided(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address) (*IFastBridgeV2BridgeProofProvidedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeProofProvided", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeProofProvidedIterator{contract: _IFastBridgeV2.contract, event: "BridgeProofProvided", logs: logs, sub: sub}, nil
}

// WatchBridgeProofProvided is a free log subscription operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeProofProvided(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeProofProvided, transactionId [][32]byte, relayer []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeProofProvided", transactionIdRule, relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeProofProvided)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeProofProvided", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeProofProvided is a log parse operation binding the contract event 0x4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4.
//
// Solidity: event BridgeProofProvided(bytes32 indexed transactionId, address indexed relayer, bytes32 transactionHash)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeProofProvided(log types.Log) (*IFastBridgeV2BridgeProofProvided, error) {
	event := new(IFastBridgeV2BridgeProofProvided)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeProofProvided", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeQuoteDetailsIterator is returned from FilterBridgeQuoteDetails and is used to iterate over the raw logs and unpacked data for BridgeQuoteDetails events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeQuoteDetailsIterator struct {
	Event *IFastBridgeV2BridgeQuoteDetails // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeQuoteDetailsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeQuoteDetails)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeQuoteDetails)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeQuoteDetailsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeQuoteDetailsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeQuoteDetails represents a BridgeQuoteDetails event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeQuoteDetails struct {
	TransactionId [32]byte
	QuoteId       []byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeQuoteDetails is a free log retrieval operation binding the contract event 0x3120e2bb59c86aca6890191a589a96af3662838efa374fbdcdf4c95bfe4a6c0e.
//
// Solidity: event BridgeQuoteDetails(bytes32 indexed transactionId, bytes quoteId)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeQuoteDetails(opts *bind.FilterOpts, transactionId [][32]byte) (*IFastBridgeV2BridgeQuoteDetailsIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeQuoteDetails", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeQuoteDetailsIterator{contract: _IFastBridgeV2.contract, event: "BridgeQuoteDetails", logs: logs, sub: sub}, nil
}

// WatchBridgeQuoteDetails is a free log subscription operation binding the contract event 0x3120e2bb59c86aca6890191a589a96af3662838efa374fbdcdf4c95bfe4a6c0e.
//
// Solidity: event BridgeQuoteDetails(bytes32 indexed transactionId, bytes quoteId)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeQuoteDetails(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeQuoteDetails, transactionId [][32]byte) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeQuoteDetails", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeQuoteDetails)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeQuoteDetails", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeQuoteDetails is a log parse operation binding the contract event 0x3120e2bb59c86aca6890191a589a96af3662838efa374fbdcdf4c95bfe4a6c0e.
//
// Solidity: event BridgeQuoteDetails(bytes32 indexed transactionId, bytes quoteId)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeQuoteDetails(log types.Log) (*IFastBridgeV2BridgeQuoteDetails, error) {
	event := new(IFastBridgeV2BridgeQuoteDetails)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeQuoteDetails", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeRelayedIterator is returned from FilterBridgeRelayed and is used to iterate over the raw logs and unpacked data for BridgeRelayed events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeRelayedIterator struct {
	Event *IFastBridgeV2BridgeRelayed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeRelayedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeRelayed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeRelayed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeRelayedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeRelayedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeRelayed represents a BridgeRelayed event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeRelayed struct {
	TransactionId  [32]byte
	Relayer        common.Address
	To             common.Address
	OriginChainId  uint32
	OriginToken    common.Address
	DestToken      common.Address
	OriginAmount   *big.Int
	DestAmount     *big.Int
	ChainGasAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBridgeRelayed is a free log retrieval operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeRelayed(opts *bind.FilterOpts, transactionId [][32]byte, relayer []common.Address, to []common.Address) (*IFastBridgeV2BridgeRelayedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeRelayed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeRelayedIterator{contract: _IFastBridgeV2.contract, event: "BridgeRelayed", logs: logs, sub: sub}, nil
}

// WatchBridgeRelayed is a free log subscription operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeRelayed(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeRelayed, transactionId [][32]byte, relayer []common.Address, to []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeRelayed", transactionIdRule, relayerRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeRelayed)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeRelayed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeRelayed is a log parse operation binding the contract event 0xf8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c.
//
// Solidity: event BridgeRelayed(bytes32 indexed transactionId, address indexed relayer, address indexed to, uint32 originChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, uint256 chainGasAmount)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeRelayed(log types.Log) (*IFastBridgeV2BridgeRelayed, error) {
	event := new(IFastBridgeV2BridgeRelayed)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeRelayed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFastBridgeV2BridgeRequestedIterator is returned from FilterBridgeRequested and is used to iterate over the raw logs and unpacked data for BridgeRequested events raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeRequestedIterator struct {
	Event *IFastBridgeV2BridgeRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFastBridgeV2BridgeRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFastBridgeV2BridgeRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFastBridgeV2BridgeRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFastBridgeV2BridgeRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFastBridgeV2BridgeRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFastBridgeV2BridgeRequested represents a BridgeRequested event raised by the IFastBridgeV2 contract.
type IFastBridgeV2BridgeRequested struct {
	TransactionId [32]byte
	Sender        common.Address
	Request       []byte
	DestChainId   uint32
	OriginToken   common.Address
	DestToken     common.Address
	OriginAmount  *big.Int
	DestAmount    *big.Int
	SendChainGas  bool
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBridgeRequested is a free log retrieval operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) FilterBridgeRequested(opts *bind.FilterOpts, transactionId [][32]byte, sender []common.Address) (*IFastBridgeV2BridgeRequestedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.FilterLogs(opts, "BridgeRequested", transactionIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IFastBridgeV2BridgeRequestedIterator{contract: _IFastBridgeV2.contract, event: "BridgeRequested", logs: logs, sub: sub}, nil
}

// WatchBridgeRequested is a free log subscription operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) WatchBridgeRequested(opts *bind.WatchOpts, sink chan<- *IFastBridgeV2BridgeRequested, transactionId [][32]byte, sender []common.Address) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFastBridgeV2.contract.WatchLogs(opts, "BridgeRequested", transactionIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFastBridgeV2BridgeRequested)
				if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeRequested is a log parse operation binding the contract event 0x120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a.
//
// Solidity: event BridgeRequested(bytes32 indexed transactionId, address indexed sender, bytes request, uint32 destChainId, address originToken, address destToken, uint256 originAmount, uint256 destAmount, bool sendChainGas)
func (_IFastBridgeV2 *IFastBridgeV2Filterer) ParseBridgeRequested(log types.Log) (*IFastBridgeV2BridgeRequested, error) {
	event := new(IFastBridgeV2BridgeRequested)
	if err := _IFastBridgeV2.contract.UnpackLog(event, "BridgeRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMulticall3MetaData contains all meta data concerning the IMulticall3 contract.
var IMulticall3MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call3Value[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3Value\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basefee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"structIMulticall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"252dba42": "aggregate((address,bytes)[])",
		"82ad56cb": "aggregate3((address,bool,bytes)[])",
		"174dea71": "aggregate3Value((address,bool,uint256,bytes)[])",
		"c3077fa9": "blockAndAggregate((address,bytes)[])",
		"3e64a696": "getBasefee()",
		"ee82ac5e": "getBlockHash(uint256)",
		"42cbb15c": "getBlockNumber()",
		"3408e470": "getChainId()",
		"a8b0574e": "getCurrentBlockCoinbase()",
		"72425d9d": "getCurrentBlockDifficulty()",
		"86d516e8": "getCurrentBlockGasLimit()",
		"0f28c97d": "getCurrentBlockTimestamp()",
		"4d2301cc": "getEthBalance(address)",
		"27e86d6e": "getLastBlockHash()",
		"bce38bd7": "tryAggregate(bool,(address,bytes)[])",
		"399542e9": "tryBlockAndAggregate(bool,(address,bytes)[])",
	},
}

// IMulticall3ABI is the input ABI used to generate the binding from.
// Deprecated: Use IMulticall3MetaData.ABI instead.
var IMulticall3ABI = IMulticall3MetaData.ABI

// Deprecated: Use IMulticall3MetaData.Sigs instead.
// IMulticall3FuncSigs maps the 4-byte function signature to its string representation.
var IMulticall3FuncSigs = IMulticall3MetaData.Sigs

// IMulticall3 is an auto generated Go binding around an Ethereum contract.
type IMulticall3 struct {
	IMulticall3Caller     // Read-only binding to the contract
	IMulticall3Transactor // Write-only binding to the contract
	IMulticall3Filterer   // Log filterer for contract events
}

// IMulticall3Caller is an auto generated read-only Go binding around an Ethereum contract.
type IMulticall3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMulticall3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IMulticall3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMulticall3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMulticall3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMulticall3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMulticall3Session struct {
	Contract     *IMulticall3      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IMulticall3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMulticall3CallerSession struct {
	Contract *IMulticall3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IMulticall3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMulticall3TransactorSession struct {
	Contract     *IMulticall3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IMulticall3Raw is an auto generated low-level Go binding around an Ethereum contract.
type IMulticall3Raw struct {
	Contract *IMulticall3 // Generic contract binding to access the raw methods on
}

// IMulticall3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMulticall3CallerRaw struct {
	Contract *IMulticall3Caller // Generic read-only contract binding to access the raw methods on
}

// IMulticall3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMulticall3TransactorRaw struct {
	Contract *IMulticall3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIMulticall3 creates a new instance of IMulticall3, bound to a specific deployed contract.
func NewIMulticall3(address common.Address, backend bind.ContractBackend) (*IMulticall3, error) {
	contract, err := bindIMulticall3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMulticall3{IMulticall3Caller: IMulticall3Caller{contract: contract}, IMulticall3Transactor: IMulticall3Transactor{contract: contract}, IMulticall3Filterer: IMulticall3Filterer{contract: contract}}, nil
}

// NewIMulticall3Caller creates a new read-only instance of IMulticall3, bound to a specific deployed contract.
func NewIMulticall3Caller(address common.Address, caller bind.ContractCaller) (*IMulticall3Caller, error) {
	contract, err := bindIMulticall3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMulticall3Caller{contract: contract}, nil
}

// NewIMulticall3Transactor creates a new write-only instance of IMulticall3, bound to a specific deployed contract.
func NewIMulticall3Transactor(address common.Address, transactor bind.ContractTransactor) (*IMulticall3Transactor, error) {
	contract, err := bindIMulticall3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMulticall3Transactor{contract: contract}, nil
}

// NewIMulticall3Filterer creates a new log filterer instance of IMulticall3, bound to a specific deployed contract.
func NewIMulticall3Filterer(address common.Address, filterer bind.ContractFilterer) (*IMulticall3Filterer, error) {
	contract, err := bindIMulticall3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMulticall3Filterer{contract: contract}, nil
}

// bindIMulticall3 binds a generic wrapper to an already deployed contract.
func bindIMulticall3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IMulticall3MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMulticall3 *IMulticall3Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMulticall3.Contract.IMulticall3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMulticall3 *IMulticall3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMulticall3.Contract.IMulticall3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMulticall3 *IMulticall3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMulticall3.Contract.IMulticall3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMulticall3 *IMulticall3CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMulticall3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMulticall3 *IMulticall3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMulticall3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMulticall3 *IMulticall3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMulticall3.Contract.contract.Transact(opts, method, params...)
}

// GetBasefee is a free data retrieval call binding the contract method 0x3e64a696.
//
// Solidity: function getBasefee() view returns(uint256 basefee)
func (_IMulticall3 *IMulticall3Caller) GetBasefee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getBasefee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBasefee is a free data retrieval call binding the contract method 0x3e64a696.
//
// Solidity: function getBasefee() view returns(uint256 basefee)
func (_IMulticall3 *IMulticall3Session) GetBasefee() (*big.Int, error) {
	return _IMulticall3.Contract.GetBasefee(&_IMulticall3.CallOpts)
}

// GetBasefee is a free data retrieval call binding the contract method 0x3e64a696.
//
// Solidity: function getBasefee() view returns(uint256 basefee)
func (_IMulticall3 *IMulticall3CallerSession) GetBasefee() (*big.Int, error) {
	return _IMulticall3.Contract.GetBasefee(&_IMulticall3.CallOpts)
}

// GetBlockHash is a free data retrieval call binding the contract method 0xee82ac5e.
//
// Solidity: function getBlockHash(uint256 blockNumber) view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3Caller) GetBlockHash(opts *bind.CallOpts, blockNumber *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getBlockHash", blockNumber)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetBlockHash is a free data retrieval call binding the contract method 0xee82ac5e.
//
// Solidity: function getBlockHash(uint256 blockNumber) view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3Session) GetBlockHash(blockNumber *big.Int) ([32]byte, error) {
	return _IMulticall3.Contract.GetBlockHash(&_IMulticall3.CallOpts, blockNumber)
}

// GetBlockHash is a free data retrieval call binding the contract method 0xee82ac5e.
//
// Solidity: function getBlockHash(uint256 blockNumber) view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3CallerSession) GetBlockHash(blockNumber *big.Int) ([32]byte, error) {
	return _IMulticall3.Contract.GetBlockHash(&_IMulticall3.CallOpts, blockNumber)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 blockNumber)
func (_IMulticall3 *IMulticall3Caller) GetBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 blockNumber)
func (_IMulticall3 *IMulticall3Session) GetBlockNumber() (*big.Int, error) {
	return _IMulticall3.Contract.GetBlockNumber(&_IMulticall3.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 blockNumber)
func (_IMulticall3 *IMulticall3CallerSession) GetBlockNumber() (*big.Int, error) {
	return _IMulticall3.Contract.GetBlockNumber(&_IMulticall3.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainid)
func (_IMulticall3 *IMulticall3Caller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainid)
func (_IMulticall3 *IMulticall3Session) GetChainId() (*big.Int, error) {
	return _IMulticall3.Contract.GetChainId(&_IMulticall3.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainid)
func (_IMulticall3 *IMulticall3CallerSession) GetChainId() (*big.Int, error) {
	return _IMulticall3.Contract.GetChainId(&_IMulticall3.CallOpts)
}

// GetCurrentBlockCoinbase is a free data retrieval call binding the contract method 0xa8b0574e.
//
// Solidity: function getCurrentBlockCoinbase() view returns(address coinbase)
func (_IMulticall3 *IMulticall3Caller) GetCurrentBlockCoinbase(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getCurrentBlockCoinbase")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCurrentBlockCoinbase is a free data retrieval call binding the contract method 0xa8b0574e.
//
// Solidity: function getCurrentBlockCoinbase() view returns(address coinbase)
func (_IMulticall3 *IMulticall3Session) GetCurrentBlockCoinbase() (common.Address, error) {
	return _IMulticall3.Contract.GetCurrentBlockCoinbase(&_IMulticall3.CallOpts)
}

// GetCurrentBlockCoinbase is a free data retrieval call binding the contract method 0xa8b0574e.
//
// Solidity: function getCurrentBlockCoinbase() view returns(address coinbase)
func (_IMulticall3 *IMulticall3CallerSession) GetCurrentBlockCoinbase() (common.Address, error) {
	return _IMulticall3.Contract.GetCurrentBlockCoinbase(&_IMulticall3.CallOpts)
}

// GetCurrentBlockDifficulty is a free data retrieval call binding the contract method 0x72425d9d.
//
// Solidity: function getCurrentBlockDifficulty() view returns(uint256 difficulty)
func (_IMulticall3 *IMulticall3Caller) GetCurrentBlockDifficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getCurrentBlockDifficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentBlockDifficulty is a free data retrieval call binding the contract method 0x72425d9d.
//
// Solidity: function getCurrentBlockDifficulty() view returns(uint256 difficulty)
func (_IMulticall3 *IMulticall3Session) GetCurrentBlockDifficulty() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockDifficulty(&_IMulticall3.CallOpts)
}

// GetCurrentBlockDifficulty is a free data retrieval call binding the contract method 0x72425d9d.
//
// Solidity: function getCurrentBlockDifficulty() view returns(uint256 difficulty)
func (_IMulticall3 *IMulticall3CallerSession) GetCurrentBlockDifficulty() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockDifficulty(&_IMulticall3.CallOpts)
}

// GetCurrentBlockGasLimit is a free data retrieval call binding the contract method 0x86d516e8.
//
// Solidity: function getCurrentBlockGasLimit() view returns(uint256 gaslimit)
func (_IMulticall3 *IMulticall3Caller) GetCurrentBlockGasLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getCurrentBlockGasLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentBlockGasLimit is a free data retrieval call binding the contract method 0x86d516e8.
//
// Solidity: function getCurrentBlockGasLimit() view returns(uint256 gaslimit)
func (_IMulticall3 *IMulticall3Session) GetCurrentBlockGasLimit() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockGasLimit(&_IMulticall3.CallOpts)
}

// GetCurrentBlockGasLimit is a free data retrieval call binding the contract method 0x86d516e8.
//
// Solidity: function getCurrentBlockGasLimit() view returns(uint256 gaslimit)
func (_IMulticall3 *IMulticall3CallerSession) GetCurrentBlockGasLimit() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockGasLimit(&_IMulticall3.CallOpts)
}

// GetCurrentBlockTimestamp is a free data retrieval call binding the contract method 0x0f28c97d.
//
// Solidity: function getCurrentBlockTimestamp() view returns(uint256 timestamp)
func (_IMulticall3 *IMulticall3Caller) GetCurrentBlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getCurrentBlockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentBlockTimestamp is a free data retrieval call binding the contract method 0x0f28c97d.
//
// Solidity: function getCurrentBlockTimestamp() view returns(uint256 timestamp)
func (_IMulticall3 *IMulticall3Session) GetCurrentBlockTimestamp() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockTimestamp(&_IMulticall3.CallOpts)
}

// GetCurrentBlockTimestamp is a free data retrieval call binding the contract method 0x0f28c97d.
//
// Solidity: function getCurrentBlockTimestamp() view returns(uint256 timestamp)
func (_IMulticall3 *IMulticall3CallerSession) GetCurrentBlockTimestamp() (*big.Int, error) {
	return _IMulticall3.Contract.GetCurrentBlockTimestamp(&_IMulticall3.CallOpts)
}

// GetEthBalance is a free data retrieval call binding the contract method 0x4d2301cc.
//
// Solidity: function getEthBalance(address addr) view returns(uint256 balance)
func (_IMulticall3 *IMulticall3Caller) GetEthBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getEthBalance", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEthBalance is a free data retrieval call binding the contract method 0x4d2301cc.
//
// Solidity: function getEthBalance(address addr) view returns(uint256 balance)
func (_IMulticall3 *IMulticall3Session) GetEthBalance(addr common.Address) (*big.Int, error) {
	return _IMulticall3.Contract.GetEthBalance(&_IMulticall3.CallOpts, addr)
}

// GetEthBalance is a free data retrieval call binding the contract method 0x4d2301cc.
//
// Solidity: function getEthBalance(address addr) view returns(uint256 balance)
func (_IMulticall3 *IMulticall3CallerSession) GetEthBalance(addr common.Address) (*big.Int, error) {
	return _IMulticall3.Contract.GetEthBalance(&_IMulticall3.CallOpts, addr)
}

// GetLastBlockHash is a free data retrieval call binding the contract method 0x27e86d6e.
//
// Solidity: function getLastBlockHash() view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3Caller) GetLastBlockHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IMulticall3.contract.Call(opts, &out, "getLastBlockHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLastBlockHash is a free data retrieval call binding the contract method 0x27e86d6e.
//
// Solidity: function getLastBlockHash() view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3Session) GetLastBlockHash() ([32]byte, error) {
	return _IMulticall3.Contract.GetLastBlockHash(&_IMulticall3.CallOpts)
}

// GetLastBlockHash is a free data retrieval call binding the contract method 0x27e86d6e.
//
// Solidity: function getLastBlockHash() view returns(bytes32 blockHash)
func (_IMulticall3 *IMulticall3CallerSession) GetLastBlockHash() ([32]byte, error) {
	return _IMulticall3.Contract.GetLastBlockHash(&_IMulticall3.CallOpts)
}

// Aggregate is a paid mutator transaction binding the contract method 0x252dba42.
//
// Solidity: function aggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes[] returnData)
func (_IMulticall3 *IMulticall3Transactor) Aggregate(opts *bind.TransactOpts, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "aggregate", calls)
}

// Aggregate is a paid mutator transaction binding the contract method 0x252dba42.
//
// Solidity: function aggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes[] returnData)
func (_IMulticall3 *IMulticall3Session) Aggregate(calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate(&_IMulticall3.TransactOpts, calls)
}

// Aggregate is a paid mutator transaction binding the contract method 0x252dba42.
//
// Solidity: function aggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) Aggregate(calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate(&_IMulticall3.TransactOpts, calls)
}

// Aggregate3 is a paid mutator transaction binding the contract method 0x82ad56cb.
//
// Solidity: function aggregate3((address,bool,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Transactor) Aggregate3(opts *bind.TransactOpts, calls []IMulticall3Call3) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "aggregate3", calls)
}

// Aggregate3 is a paid mutator transaction binding the contract method 0x82ad56cb.
//
// Solidity: function aggregate3((address,bool,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Session) Aggregate3(calls []IMulticall3Call3) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate3(&_IMulticall3.TransactOpts, calls)
}

// Aggregate3 is a paid mutator transaction binding the contract method 0x82ad56cb.
//
// Solidity: function aggregate3((address,bool,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) Aggregate3(calls []IMulticall3Call3) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate3(&_IMulticall3.TransactOpts, calls)
}

// Aggregate3Value is a paid mutator transaction binding the contract method 0x174dea71.
//
// Solidity: function aggregate3Value((address,bool,uint256,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Transactor) Aggregate3Value(opts *bind.TransactOpts, calls []IMulticall3Call3Value) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "aggregate3Value", calls)
}

// Aggregate3Value is a paid mutator transaction binding the contract method 0x174dea71.
//
// Solidity: function aggregate3Value((address,bool,uint256,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Session) Aggregate3Value(calls []IMulticall3Call3Value) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate3Value(&_IMulticall3.TransactOpts, calls)
}

// Aggregate3Value is a paid mutator transaction binding the contract method 0x174dea71.
//
// Solidity: function aggregate3Value((address,bool,uint256,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) Aggregate3Value(calls []IMulticall3Call3Value) (*types.Transaction, error) {
	return _IMulticall3.Contract.Aggregate3Value(&_IMulticall3.TransactOpts, calls)
}

// BlockAndAggregate is a paid mutator transaction binding the contract method 0xc3077fa9.
//
// Solidity: function blockAndAggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Transactor) BlockAndAggregate(opts *bind.TransactOpts, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "blockAndAggregate", calls)
}

// BlockAndAggregate is a paid mutator transaction binding the contract method 0xc3077fa9.
//
// Solidity: function blockAndAggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Session) BlockAndAggregate(calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.BlockAndAggregate(&_IMulticall3.TransactOpts, calls)
}

// BlockAndAggregate is a paid mutator transaction binding the contract method 0xc3077fa9.
//
// Solidity: function blockAndAggregate((address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) BlockAndAggregate(calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.BlockAndAggregate(&_IMulticall3.TransactOpts, calls)
}

// TryAggregate is a paid mutator transaction binding the contract method 0xbce38bd7.
//
// Solidity: function tryAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Transactor) TryAggregate(opts *bind.TransactOpts, requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "tryAggregate", requireSuccess, calls)
}

// TryAggregate is a paid mutator transaction binding the contract method 0xbce38bd7.
//
// Solidity: function tryAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Session) TryAggregate(requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.TryAggregate(&_IMulticall3.TransactOpts, requireSuccess, calls)
}

// TryAggregate is a paid mutator transaction binding the contract method 0xbce38bd7.
//
// Solidity: function tryAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns((bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) TryAggregate(requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.TryAggregate(&_IMulticall3.TransactOpts, requireSuccess, calls)
}

// TryBlockAndAggregate is a paid mutator transaction binding the contract method 0x399542e9.
//
// Solidity: function tryBlockAndAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Transactor) TryBlockAndAggregate(opts *bind.TransactOpts, requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.contract.Transact(opts, "tryBlockAndAggregate", requireSuccess, calls)
}

// TryBlockAndAggregate is a paid mutator transaction binding the contract method 0x399542e9.
//
// Solidity: function tryBlockAndAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3Session) TryBlockAndAggregate(requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.TryBlockAndAggregate(&_IMulticall3.TransactOpts, requireSuccess, calls)
}

// TryBlockAndAggregate is a paid mutator transaction binding the contract method 0x399542e9.
//
// Solidity: function tryBlockAndAggregate(bool requireSuccess, (address,bytes)[] calls) payable returns(uint256 blockNumber, bytes32 blockHash, (bool,bytes)[] returnData)
func (_IMulticall3 *IMulticall3TransactorSession) TryBlockAndAggregate(requireSuccess bool, calls []IMulticall3Call) (*types.Transaction, error) {
	return _IMulticall3.Contract.TryBlockAndAggregate(&_IMulticall3.TransactOpts, requireSuccess, calls)
}

// MockERC20MetaData contains all meta data concerning the MockERC20 contract.
var MockERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"3644e515": "DOMAIN_SEPARATOR()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"1624f6c6": "initialize(string,string,uint8)",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
	Bin: "",
}

// MockERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MockERC20MetaData.ABI instead.
var MockERC20ABI = MockERC20MetaData.ABI

// Deprecated: Use MockERC20MetaData.Sigs instead.
// MockERC20FuncSigs maps the 4-byte function signature to its string representation.
var MockERC20FuncSigs = MockERC20MetaData.Sigs

// MockERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockERC20MetaData.Bin instead.
var MockERC20Bin = MockERC20MetaData.Bin

// DeployMockERC20 deploys a new Ethereum contract, binding an instance of MockERC20 to it.
func DeployMockERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MockERC20, error) {
	parsed, err := MockERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockERC20{MockERC20Caller: MockERC20Caller{contract: contract}, MockERC20Transactor: MockERC20Transactor{contract: contract}, MockERC20Filterer: MockERC20Filterer{contract: contract}}, nil
}

// MockERC20 is an auto generated Go binding around an Ethereum contract.
type MockERC20 struct {
	MockERC20Caller     // Read-only binding to the contract
	MockERC20Transactor // Write-only binding to the contract
	MockERC20Filterer   // Log filterer for contract events
}

// MockERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MockERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MockERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockERC20Session struct {
	Contract     *MockERC20        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockERC20CallerSession struct {
	Contract *MockERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// MockERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockERC20TransactorSession struct {
	Contract     *MockERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MockERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MockERC20Raw struct {
	Contract *MockERC20 // Generic contract binding to access the raw methods on
}

// MockERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockERC20CallerRaw struct {
	Contract *MockERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MockERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockERC20TransactorRaw struct {
	Contract *MockERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMockERC20 creates a new instance of MockERC20, bound to a specific deployed contract.
func NewMockERC20(address common.Address, backend bind.ContractBackend) (*MockERC20, error) {
	contract, err := bindMockERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockERC20{MockERC20Caller: MockERC20Caller{contract: contract}, MockERC20Transactor: MockERC20Transactor{contract: contract}, MockERC20Filterer: MockERC20Filterer{contract: contract}}, nil
}

// NewMockERC20Caller creates a new read-only instance of MockERC20, bound to a specific deployed contract.
func NewMockERC20Caller(address common.Address, caller bind.ContractCaller) (*MockERC20Caller, error) {
	contract, err := bindMockERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockERC20Caller{contract: contract}, nil
}

// NewMockERC20Transactor creates a new write-only instance of MockERC20, bound to a specific deployed contract.
func NewMockERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MockERC20Transactor, error) {
	contract, err := bindMockERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockERC20Transactor{contract: contract}, nil
}

// NewMockERC20Filterer creates a new log filterer instance of MockERC20, bound to a specific deployed contract.
func NewMockERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MockERC20Filterer, error) {
	contract, err := bindMockERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockERC20Filterer{contract: contract}, nil
}

// bindMockERC20 binds a generic wrapper to an already deployed contract.
func bindMockERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockERC20 *MockERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockERC20.Contract.MockERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockERC20 *MockERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockERC20.Contract.MockERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockERC20 *MockERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockERC20.Contract.MockERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockERC20 *MockERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockERC20 *MockERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockERC20 *MockERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockERC20.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockERC20 *MockERC20Caller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockERC20 *MockERC20Session) DOMAINSEPARATOR() ([32]byte, error) {
	return _MockERC20.Contract.DOMAINSEPARATOR(&_MockERC20.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MockERC20 *MockERC20CallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _MockERC20.Contract.DOMAINSEPARATOR(&_MockERC20.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockERC20 *MockERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockERC20 *MockERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockERC20.Contract.Allowance(&_MockERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MockERC20 *MockERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MockERC20.Contract.Allowance(&_MockERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC20 *MockERC20Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC20 *MockERC20Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _MockERC20.Contract.BalanceOf(&_MockERC20.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC20 *MockERC20CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _MockERC20.Contract.BalanceOf(&_MockERC20.CallOpts, owner)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockERC20 *MockERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockERC20 *MockERC20Session) Decimals() (uint8, error) {
	return _MockERC20.Contract.Decimals(&_MockERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MockERC20 *MockERC20CallerSession) Decimals() (uint8, error) {
	return _MockERC20.Contract.Decimals(&_MockERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC20 *MockERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC20 *MockERC20Session) Name() (string, error) {
	return _MockERC20.Contract.Name(&_MockERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC20 *MockERC20CallerSession) Name() (string, error) {
	return _MockERC20.Contract.Name(&_MockERC20.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_MockERC20 *MockERC20Caller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_MockERC20 *MockERC20Session) Nonces(arg0 common.Address) (*big.Int, error) {
	return _MockERC20.Contract.Nonces(&_MockERC20.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_MockERC20 *MockERC20CallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _MockERC20.Contract.Nonces(&_MockERC20.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC20 *MockERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC20 *MockERC20Session) Symbol() (string, error) {
	return _MockERC20.Contract.Symbol(&_MockERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC20 *MockERC20CallerSession) Symbol() (string, error) {
	return _MockERC20.Contract.Symbol(&_MockERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockERC20 *MockERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MockERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockERC20 *MockERC20Session) TotalSupply() (*big.Int, error) {
	return _MockERC20.Contract.TotalSupply(&_MockERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MockERC20 *MockERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MockERC20.Contract.TotalSupply(&_MockERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.Approve(&_MockERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.Approve(&_MockERC20.TransactOpts, spender, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name_, string symbol_, uint8 decimals_) returns()
func (_MockERC20 *MockERC20Transactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _MockERC20.contract.Transact(opts, "initialize", name_, symbol_, decimals_)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name_, string symbol_, uint8 decimals_) returns()
func (_MockERC20 *MockERC20Session) Initialize(name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _MockERC20.Contract.Initialize(&_MockERC20.TransactOpts, name_, symbol_, decimals_)
}

// Initialize is a paid mutator transaction binding the contract method 0x1624f6c6.
//
// Solidity: function initialize(string name_, string symbol_, uint8 decimals_) returns()
func (_MockERC20 *MockERC20TransactorSession) Initialize(name_ string, symbol_ string, decimals_ uint8) (*types.Transaction, error) {
	return _MockERC20.Contract.Initialize(&_MockERC20.TransactOpts, name_, symbol_, decimals_)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockERC20 *MockERC20Transactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockERC20.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockERC20 *MockERC20Session) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockERC20.Contract.Permit(&_MockERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MockERC20 *MockERC20TransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MockERC20.Contract.Permit(&_MockERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.Transfer(&_MockERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.Transfer(&_MockERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.TransferFrom(&_MockERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MockERC20 *MockERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MockERC20.Contract.TransferFrom(&_MockERC20.TransactOpts, from, to, amount)
}

// MockERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MockERC20 contract.
type MockERC20ApprovalIterator struct {
	Event *MockERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockERC20Approval represents a Approval event raised by the MockERC20 contract.
type MockERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockERC20 *MockERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MockERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MockERC20ApprovalIterator{contract: _MockERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockERC20 *MockERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MockERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MockERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockERC20Approval)
				if err := _MockERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MockERC20 *MockERC20Filterer) ParseApproval(log types.Log) (*MockERC20Approval, error) {
	event := new(MockERC20Approval)
	if err := _MockERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MockERC20 contract.
type MockERC20TransferIterator struct {
	Event *MockERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockERC20Transfer represents a Transfer event raised by the MockERC20 contract.
type MockERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockERC20 *MockERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MockERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MockERC20TransferIterator{contract: _MockERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockERC20 *MockERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MockERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MockERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockERC20Transfer)
				if err := _MockERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MockERC20 *MockERC20Filterer) ParseTransfer(log types.Log) (*MockERC20Transfer, error) {
	event := new(MockERC20Transfer)
	if err := _MockERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockERC721MetaData contains all meta data concerning the MockERC721 contract.
var MockERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"081812fc": "getApproved(uint256)",
		"4cd88b76": "initialize(string,string)",
		"e985e9c5": "isApprovedForAll(address,address)",
		"06fdde03": "name()",
		"6352211e": "ownerOf(uint256)",
		"42842e0e": "safeTransferFrom(address,address,uint256)",
		"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
		"a22cb465": "setApprovalForAll(address,bool)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"95d89b41": "symbol()",
		"c87b56dd": "tokenURI(uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
	Bin: "0x608060405234801561001057600080fd5b5061149f806100206000396000f3fe6080604052600436106100dd5760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb4651461025f578063b88d4fde1461027f578063c87b56dd14610292578063e985e9c5146102b357600080fd5b80636352211e146101fc57806370a082311461021c57806395d89b411461024a57600080fd5b8063095ea7b3116100bb578063095ea7b3146101a157806323b872dd146101b657806342842e0e146101c95780634cd88b76146101dc57600080fd5b806301ffc9a7146100e257806306fdde0314610117578063081812fc14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd366004610e1f565b610309565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c6103ee565b60405161010e9190610ea7565b34801561014557600080fd5b5061017c610154366004610eba565b60009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b6101b46101af366004610ef7565b610480565b005b6101b46101c4366004610f21565b6105cf565b6101b46101d7366004610f21565b6108c4565b3480156101e857600080fd5b506101b46101f7366004611040565b610a18565b34801561020857600080fd5b5061017c610217366004610eba565b610ace565b34801561022857600080fd5b5061023c6102373660046110a4565b610b5f565b60405190815260200161010e565b34801561025657600080fd5b5061012c610c07565b34801561026b57600080fd5b506101b461027a3660046110bf565b610c16565b6101b461028d3660046110fb565b610cad565b34801561029e57600080fd5b5061012c6102ad366004610eba565b50606090565b3480156102bf57600080fd5b506101026102ce366004611177565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061039c57507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806103e857507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103fd906111aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610429906111aa565b80156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b5050505050905090565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16338114806104e3575073ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152604080832033845290915290205460ff165b61054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b60008281526004602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff84811691161461065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152606401610545565b73ffffffffffffffffffffffffffffffffffffffff82166106dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152606401610545565b3373ffffffffffffffffffffffffffffffffffffffff84161480610730575073ffffffffffffffffffffffffffffffffffffffff8316600090815260056020908152604080832033845290915290205460ff165b8061075e575060008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b6107c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152606401610545565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081208054916107f58361122c565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812080549161082b83611261565b90915550506000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556004909452828520805490911690559051849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6108cf8383836105cf565b813b15806109ad57506040517f150b7a020000000000000000000000000000000000000000000000000000000080825233600483015273ffffffffffffffffffffffffffffffffffffffff858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611299565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b610a13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152606401610545565b505050565b60065460ff1615610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f414c52454144595f494e495449414c495a4544000000000000000000000000006044820152606401610545565b6000610a918382611306565b506001610a9e8282611306565b5050600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1680610b5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152606401610545565b919050565b600073ffffffffffffffffffffffffffffffffffffffff8216610bde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610545565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600180546103fd906111aa565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cb88484846105cf565b823b1580610d8257506040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290610d1b903390899088908890600401611420565b6020604051808303816000875af1158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190611299565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b610de8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152606401610545565b50505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610e1c57600080fd5b50565b600060208284031215610e3157600080fd5b8135610e3c81610dee565b9392505050565b6000815180845260005b81811015610e6957602081850181015186830182015201610e4d565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610e3c6020830184610e43565b600060208284031215610ecc57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5a57600080fd5b60008060408385031215610f0a57600080fd5b610f1383610ed3565b946020939093013593505050565b600080600060608486031215610f3657600080fd5b610f3f84610ed3565b9250610f4d60208501610ed3565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115610fa757610fa7610f5d565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610fed57610fed610f5d565b8160405280935085815286868601111561100657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261103157600080fd5b610e3c83833560208501610f8c565b6000806040838503121561105357600080fd5b823567ffffffffffffffff8082111561106b57600080fd5b61107786838701611020565b9350602085013591508082111561108d57600080fd5b5061109a85828601611020565b9150509250929050565b6000602082840312156110b657600080fd5b610e3c82610ed3565b600080604083850312156110d257600080fd5b6110db83610ed3565b9150602083013580151581146110f057600080fd5b809150509250929050565b6000806000806080858703121561111157600080fd5b61111a85610ed3565b935061112860208601610ed3565b925060408501359150606085013567ffffffffffffffff81111561114b57600080fd5b8501601f8101871361115c57600080fd5b61116b87823560208401610f8c565b91505092959194509250565b6000806040838503121561118a57600080fd5b61119383610ed3565b91506111a160208401610ed3565b90509250929050565b600181811c908216806111be57607f821691505b6020821081036111f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008161123b5761123b6111fd565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611292576112926111fd565b5060010190565b6000602082840312156112ab57600080fd5b8151610e3c81610dee565b601f821115610a13576000816000526020600020601f850160051c810160208610156112df5750805b601f850160051c820191505b818110156112fe578281556001016112eb565b505050505050565b815167ffffffffffffffff81111561132057611320610f5d565b6113348161132e84546111aa565b846112b6565b602080601f83116001811461138757600084156113515750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556112fe565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156113d4578886015182559484019460019091019084016113b5565b508582101561141057878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261145f6080830184610e43565b969550505050505056fea26469706673582212207b5d0cc327a0b37b5a108128c04b36338d505f0b09f13e2035e062f9eb77443064736f6c63430008180033",
}

// MockERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use MockERC721MetaData.ABI instead.
var MockERC721ABI = MockERC721MetaData.ABI

// Deprecated: Use MockERC721MetaData.Sigs instead.
// MockERC721FuncSigs maps the 4-byte function signature to its string representation.
var MockERC721FuncSigs = MockERC721MetaData.Sigs

// MockERC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockERC721MetaData.Bin instead.
var MockERC721Bin = MockERC721MetaData.Bin

// DeployMockERC721 deploys a new Ethereum contract, binding an instance of MockERC721 to it.
func DeployMockERC721(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MockERC721, error) {
	parsed, err := MockERC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockERC721Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockERC721{MockERC721Caller: MockERC721Caller{contract: contract}, MockERC721Transactor: MockERC721Transactor{contract: contract}, MockERC721Filterer: MockERC721Filterer{contract: contract}}, nil
}

// MockERC721 is an auto generated Go binding around an Ethereum contract.
type MockERC721 struct {
	MockERC721Caller     // Read-only binding to the contract
	MockERC721Transactor // Write-only binding to the contract
	MockERC721Filterer   // Log filterer for contract events
}

// MockERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type MockERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MockERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockERC721Session struct {
	Contract     *MockERC721       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MockERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockERC721CallerSession struct {
	Contract *MockERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MockERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockERC721TransactorSession struct {
	Contract     *MockERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MockERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type MockERC721Raw struct {
	Contract *MockERC721 // Generic contract binding to access the raw methods on
}

// MockERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockERC721CallerRaw struct {
	Contract *MockERC721Caller // Generic read-only contract binding to access the raw methods on
}

// MockERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockERC721TransactorRaw struct {
	Contract *MockERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMockERC721 creates a new instance of MockERC721, bound to a specific deployed contract.
func NewMockERC721(address common.Address, backend bind.ContractBackend) (*MockERC721, error) {
	contract, err := bindMockERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockERC721{MockERC721Caller: MockERC721Caller{contract: contract}, MockERC721Transactor: MockERC721Transactor{contract: contract}, MockERC721Filterer: MockERC721Filterer{contract: contract}}, nil
}

// NewMockERC721Caller creates a new read-only instance of MockERC721, bound to a specific deployed contract.
func NewMockERC721Caller(address common.Address, caller bind.ContractCaller) (*MockERC721Caller, error) {
	contract, err := bindMockERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockERC721Caller{contract: contract}, nil
}

// NewMockERC721Transactor creates a new write-only instance of MockERC721, bound to a specific deployed contract.
func NewMockERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*MockERC721Transactor, error) {
	contract, err := bindMockERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockERC721Transactor{contract: contract}, nil
}

// NewMockERC721Filterer creates a new log filterer instance of MockERC721, bound to a specific deployed contract.
func NewMockERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*MockERC721Filterer, error) {
	contract, err := bindMockERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockERC721Filterer{contract: contract}, nil
}

// bindMockERC721 binds a generic wrapper to an already deployed contract.
func bindMockERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockERC721MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockERC721 *MockERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockERC721.Contract.MockERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockERC721 *MockERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockERC721.Contract.MockERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockERC721 *MockERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockERC721.Contract.MockERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockERC721 *MockERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockERC721 *MockERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockERC721 *MockERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC721 *MockERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC721 *MockERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _MockERC721.Contract.BalanceOf(&_MockERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_MockERC721 *MockERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _MockERC721.Contract.BalanceOf(&_MockERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 id) view returns(address)
func (_MockERC721 *MockERC721Caller) GetApproved(opts *bind.CallOpts, id *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "getApproved", id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 id) view returns(address)
func (_MockERC721 *MockERC721Session) GetApproved(id *big.Int) (common.Address, error) {
	return _MockERC721.Contract.GetApproved(&_MockERC721.CallOpts, id)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 id) view returns(address)
func (_MockERC721 *MockERC721CallerSession) GetApproved(id *big.Int) (common.Address, error) {
	return _MockERC721.Contract.GetApproved(&_MockERC721.CallOpts, id)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_MockERC721 *MockERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_MockERC721 *MockERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _MockERC721.Contract.IsApprovedForAll(&_MockERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_MockERC721 *MockERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _MockERC721.Contract.IsApprovedForAll(&_MockERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC721 *MockERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC721 *MockERC721Session) Name() (string, error) {
	return _MockERC721.Contract.Name(&_MockERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MockERC721 *MockERC721CallerSession) Name() (string, error) {
	return _MockERC721.Contract.Name(&_MockERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 id) view returns(address owner)
func (_MockERC721 *MockERC721Caller) OwnerOf(opts *bind.CallOpts, id *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "ownerOf", id)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 id) view returns(address owner)
func (_MockERC721 *MockERC721Session) OwnerOf(id *big.Int) (common.Address, error) {
	return _MockERC721.Contract.OwnerOf(&_MockERC721.CallOpts, id)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 id) view returns(address owner)
func (_MockERC721 *MockERC721CallerSession) OwnerOf(id *big.Int) (common.Address, error) {
	return _MockERC721.Contract.OwnerOf(&_MockERC721.CallOpts, id)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MockERC721 *MockERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MockERC721 *MockERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MockERC721.Contract.SupportsInterface(&_MockERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MockERC721 *MockERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MockERC721.Contract.SupportsInterface(&_MockERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC721 *MockERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC721 *MockERC721Session) Symbol() (string, error) {
	return _MockERC721.Contract.Symbol(&_MockERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MockERC721 *MockERC721CallerSession) Symbol() (string, error) {
	return _MockERC721.Contract.Symbol(&_MockERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_MockERC721 *MockERC721Caller) TokenURI(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _MockERC721.contract.Call(opts, &out, "tokenURI", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_MockERC721 *MockERC721Session) TokenURI(id *big.Int) (string, error) {
	return _MockERC721.Contract.TokenURI(&_MockERC721.CallOpts, id)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 id) view returns(string)
func (_MockERC721 *MockERC721CallerSession) TokenURI(id *big.Int) (string, error) {
	return _MockERC721.Contract.TokenURI(&_MockERC721.CallOpts, id)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 id) payable returns()
func (_MockERC721 *MockERC721Transactor) Approve(opts *bind.TransactOpts, spender common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "approve", spender, id)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 id) payable returns()
func (_MockERC721 *MockERC721Session) Approve(spender common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.Approve(&_MockERC721.TransactOpts, spender, id)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 id) payable returns()
func (_MockERC721 *MockERC721TransactorSession) Approve(spender common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.Approve(&_MockERC721.TransactOpts, spender, id)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_MockERC721 *MockERC721Transactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "initialize", name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_MockERC721 *MockERC721Session) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _MockERC721.Contract.Initialize(&_MockERC721.TransactOpts, name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_MockERC721 *MockERC721TransactorSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _MockERC721.Contract.Initialize(&_MockERC721.TransactOpts, name_, symbol_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "safeTransferFrom", from, to, id)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.SafeTransferFrom(&_MockERC721.TransactOpts, from, to, id)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.SafeTransferFrom(&_MockERC721.TransactOpts, from, to, id)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, bytes data) payable returns()
func (_MockERC721 *MockERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, data []byte) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "safeTransferFrom0", from, to, id, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, bytes data) payable returns()
func (_MockERC721 *MockERC721Session) SafeTransferFrom0(from common.Address, to common.Address, id *big.Int, data []byte) (*types.Transaction, error) {
	return _MockERC721.Contract.SafeTransferFrom0(&_MockERC721.TransactOpts, from, to, id, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, bytes data) payable returns()
func (_MockERC721 *MockERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, id *big.Int, data []byte) (*types.Transaction, error) {
	return _MockERC721.Contract.SafeTransferFrom0(&_MockERC721.TransactOpts, from, to, id, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MockERC721 *MockERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MockERC721 *MockERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _MockERC721.Contract.SetApprovalForAll(&_MockERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_MockERC721 *MockERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _MockERC721.Contract.SetApprovalForAll(&_MockERC721.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.contract.Transact(opts, "transferFrom", from, to, id)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721Session) TransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.TransferFrom(&_MockERC721.TransactOpts, from, to, id)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 id) payable returns()
func (_MockERC721 *MockERC721TransactorSession) TransferFrom(from common.Address, to common.Address, id *big.Int) (*types.Transaction, error) {
	return _MockERC721.Contract.TransferFrom(&_MockERC721.TransactOpts, from, to, id)
}

// MockERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MockERC721 contract.
type MockERC721ApprovalIterator struct {
	Event *MockERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockERC721Approval represents a Approval event raised by the MockERC721 contract.
type MockERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (*MockERC721ApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _MockERC721.contract.FilterLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MockERC721ApprovalIterator{contract: _MockERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MockERC721Approval, _owner []common.Address, _approved []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _approvedRule []interface{}
	for _, _approvedItem := range _approved {
		_approvedRule = append(_approvedRule, _approvedItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _MockERC721.contract.WatchLogs(opts, "Approval", _ownerRule, _approvedRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockERC721Approval)
				if err := _MockERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) ParseApproval(log types.Log) (*MockERC721Approval, error) {
	event := new(MockERC721Approval)
	if err := _MockERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the MockERC721 contract.
type MockERC721ApprovalForAllIterator struct {
	Event *MockERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockERC721ApprovalForAll represents a ApprovalForAll event raised by the MockERC721 contract.
type MockERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_MockERC721 *MockERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, _owner []common.Address, _operator []common.Address) (*MockERC721ApprovalForAllIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _MockERC721.contract.FilterLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return &MockERC721ApprovalForAllIterator{contract: _MockERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_MockERC721 *MockERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *MockERC721ApprovalForAll, _owner []common.Address, _operator []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _operatorRule []interface{}
	for _, _operatorItem := range _operator {
		_operatorRule = append(_operatorRule, _operatorItem)
	}

	logs, sub, err := _MockERC721.contract.WatchLogs(opts, "ApprovalForAll", _ownerRule, _operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockERC721ApprovalForAll)
				if err := _MockERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)
func (_MockERC721 *MockERC721Filterer) ParseApprovalForAll(log types.Log) (*MockERC721ApprovalForAll, error) {
	event := new(MockERC721ApprovalForAll)
	if err := _MockERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MockERC721 contract.
type MockERC721TransferIterator struct {
	Event *MockERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MockERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MockERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MockERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MockERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MockERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MockERC721Transfer represents a Transfer event raised by the MockERC721 contract.
type MockERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (*MockERC721TransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _MockERC721.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &MockERC721TransferIterator{contract: _MockERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MockERC721Transfer, _from []common.Address, _to []common.Address, _tokenId []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _tokenIdRule []interface{}
	for _, _tokenIdItem := range _tokenId {
		_tokenIdRule = append(_tokenIdRule, _tokenIdItem)
	}

	logs, sub, err := _MockERC721.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule, _tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MockERC721Transfer)
				if err := _MockERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)
func (_MockERC721 *MockERC721Filterer) ParseTransfer(log types.Log) (*MockERC721Transfer, error) {
	event := new(MockERC721Transfer)
	if err := _MockERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScriptBaseMetaData contains all meta data concerning the ScriptBase contract.
var ScriptBaseMetaData = &bind.MetaData{
	ABI: "[]",
}

// ScriptBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ScriptBaseMetaData.ABI instead.
var ScriptBaseABI = ScriptBaseMetaData.ABI

// ScriptBase is an auto generated Go binding around an Ethereum contract.
type ScriptBase struct {
	ScriptBaseCaller     // Read-only binding to the contract
	ScriptBaseTransactor // Write-only binding to the contract
	ScriptBaseFilterer   // Log filterer for contract events
}

// ScriptBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScriptBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScriptBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScriptBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScriptBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScriptBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScriptBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScriptBaseSession struct {
	Contract     *ScriptBase       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScriptBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScriptBaseCallerSession struct {
	Contract *ScriptBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ScriptBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScriptBaseTransactorSession struct {
	Contract     *ScriptBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ScriptBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScriptBaseRaw struct {
	Contract *ScriptBase // Generic contract binding to access the raw methods on
}

// ScriptBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScriptBaseCallerRaw struct {
	Contract *ScriptBaseCaller // Generic read-only contract binding to access the raw methods on
}

// ScriptBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScriptBaseTransactorRaw struct {
	Contract *ScriptBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScriptBase creates a new instance of ScriptBase, bound to a specific deployed contract.
func NewScriptBase(address common.Address, backend bind.ContractBackend) (*ScriptBase, error) {
	contract, err := bindScriptBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScriptBase{ScriptBaseCaller: ScriptBaseCaller{contract: contract}, ScriptBaseTransactor: ScriptBaseTransactor{contract: contract}, ScriptBaseFilterer: ScriptBaseFilterer{contract: contract}}, nil
}

// NewScriptBaseCaller creates a new read-only instance of ScriptBase, bound to a specific deployed contract.
func NewScriptBaseCaller(address common.Address, caller bind.ContractCaller) (*ScriptBaseCaller, error) {
	contract, err := bindScriptBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScriptBaseCaller{contract: contract}, nil
}

// NewScriptBaseTransactor creates a new write-only instance of ScriptBase, bound to a specific deployed contract.
func NewScriptBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*ScriptBaseTransactor, error) {
	contract, err := bindScriptBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScriptBaseTransactor{contract: contract}, nil
}

// NewScriptBaseFilterer creates a new log filterer instance of ScriptBase, bound to a specific deployed contract.
func NewScriptBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*ScriptBaseFilterer, error) {
	contract, err := bindScriptBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScriptBaseFilterer{contract: contract}, nil
}

// bindScriptBase binds a generic wrapper to an already deployed contract.
func bindScriptBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ScriptBaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScriptBase *ScriptBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScriptBase.Contract.ScriptBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScriptBase *ScriptBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScriptBase.Contract.ScriptBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScriptBase *ScriptBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScriptBase.Contract.ScriptBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScriptBase *ScriptBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScriptBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScriptBase *ScriptBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScriptBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScriptBase *ScriptBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScriptBase.Contract.contract.Transact(opts, method, params...)
}

// StdAssertionsMetaData contains all meta data concerning the StdAssertions contract.
var StdAssertionsMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"ba414fa6": "failed()",
	},
}

// StdAssertionsABI is the input ABI used to generate the binding from.
// Deprecated: Use StdAssertionsMetaData.ABI instead.
var StdAssertionsABI = StdAssertionsMetaData.ABI

// Deprecated: Use StdAssertionsMetaData.Sigs instead.
// StdAssertionsFuncSigs maps the 4-byte function signature to its string representation.
var StdAssertionsFuncSigs = StdAssertionsMetaData.Sigs

// StdAssertions is an auto generated Go binding around an Ethereum contract.
type StdAssertions struct {
	StdAssertionsCaller     // Read-only binding to the contract
	StdAssertionsTransactor // Write-only binding to the contract
	StdAssertionsFilterer   // Log filterer for contract events
}

// StdAssertionsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdAssertionsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdAssertionsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdAssertionsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdAssertionsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdAssertionsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdAssertionsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdAssertionsSession struct {
	Contract     *StdAssertions    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdAssertionsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdAssertionsCallerSession struct {
	Contract *StdAssertionsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StdAssertionsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdAssertionsTransactorSession struct {
	Contract     *StdAssertionsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StdAssertionsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdAssertionsRaw struct {
	Contract *StdAssertions // Generic contract binding to access the raw methods on
}

// StdAssertionsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdAssertionsCallerRaw struct {
	Contract *StdAssertionsCaller // Generic read-only contract binding to access the raw methods on
}

// StdAssertionsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdAssertionsTransactorRaw struct {
	Contract *StdAssertionsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdAssertions creates a new instance of StdAssertions, bound to a specific deployed contract.
func NewStdAssertions(address common.Address, backend bind.ContractBackend) (*StdAssertions, error) {
	contract, err := bindStdAssertions(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdAssertions{StdAssertionsCaller: StdAssertionsCaller{contract: contract}, StdAssertionsTransactor: StdAssertionsTransactor{contract: contract}, StdAssertionsFilterer: StdAssertionsFilterer{contract: contract}}, nil
}

// NewStdAssertionsCaller creates a new read-only instance of StdAssertions, bound to a specific deployed contract.
func NewStdAssertionsCaller(address common.Address, caller bind.ContractCaller) (*StdAssertionsCaller, error) {
	contract, err := bindStdAssertions(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdAssertionsCaller{contract: contract}, nil
}

// NewStdAssertionsTransactor creates a new write-only instance of StdAssertions, bound to a specific deployed contract.
func NewStdAssertionsTransactor(address common.Address, transactor bind.ContractTransactor) (*StdAssertionsTransactor, error) {
	contract, err := bindStdAssertions(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdAssertionsTransactor{contract: contract}, nil
}

// NewStdAssertionsFilterer creates a new log filterer instance of StdAssertions, bound to a specific deployed contract.
func NewStdAssertionsFilterer(address common.Address, filterer bind.ContractFilterer) (*StdAssertionsFilterer, error) {
	contract, err := bindStdAssertions(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdAssertionsFilterer{contract: contract}, nil
}

// bindStdAssertions binds a generic wrapper to an already deployed contract.
func bindStdAssertions(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdAssertionsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdAssertions *StdAssertionsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdAssertions.Contract.StdAssertionsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdAssertions *StdAssertionsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdAssertions.Contract.StdAssertionsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdAssertions *StdAssertionsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdAssertions.Contract.StdAssertionsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdAssertions *StdAssertionsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdAssertions.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdAssertions *StdAssertionsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdAssertions.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdAssertions *StdAssertionsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdAssertions.Contract.contract.Transact(opts, method, params...)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_StdAssertions *StdAssertionsCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StdAssertions.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_StdAssertions *StdAssertionsSession) Failed() (bool, error) {
	return _StdAssertions.Contract.Failed(&_StdAssertions.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_StdAssertions *StdAssertionsCallerSession) Failed() (bool, error) {
	return _StdAssertions.Contract.Failed(&_StdAssertions.CallOpts)
}

// StdAssertionsLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the StdAssertions contract.
type StdAssertionsLogIterator struct {
	Event *StdAssertionsLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLog represents a Log event raised by the StdAssertions contract.
type StdAssertionsLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLog(opts *bind.FilterOpts) (*StdAssertionsLogIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogIterator{contract: _StdAssertions.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *StdAssertionsLog) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLog)
				if err := _StdAssertions.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLog(log types.Log) (*StdAssertionsLog, error) {
	event := new(StdAssertionsLog)
	if err := _StdAssertions.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the StdAssertions contract.
type StdAssertionsLogAddressIterator struct {
	Event *StdAssertionsLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogAddress represents a LogAddress event raised by the StdAssertions contract.
type StdAssertionsLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogAddress(opts *bind.FilterOpts) (*StdAssertionsLogAddressIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogAddressIterator{contract: _StdAssertions.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogAddress) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogAddress)
				if err := _StdAssertions.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogAddress(log types.Log) (*StdAssertionsLogAddress, error) {
	event := new(StdAssertionsLogAddress)
	if err := _StdAssertions.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the StdAssertions contract.
type StdAssertionsLogArrayIterator struct {
	Event *StdAssertionsLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogArray represents a LogArray event raised by the StdAssertions contract.
type StdAssertionsLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogArray(opts *bind.FilterOpts) (*StdAssertionsLogArrayIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogArrayIterator{contract: _StdAssertions.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogArray) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogArray)
				if err := _StdAssertions.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogArray(log types.Log) (*StdAssertionsLogArray, error) {
	event := new(StdAssertionsLogArray)
	if err := _StdAssertions.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the StdAssertions contract.
type StdAssertionsLogArray0Iterator struct {
	Event *StdAssertionsLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogArray0 represents a LogArray0 event raised by the StdAssertions contract.
type StdAssertionsLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogArray0(opts *bind.FilterOpts) (*StdAssertionsLogArray0Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogArray0Iterator{contract: _StdAssertions.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogArray0) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogArray0)
				if err := _StdAssertions.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogArray0(log types.Log) (*StdAssertionsLogArray0, error) {
	event := new(StdAssertionsLogArray0)
	if err := _StdAssertions.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the StdAssertions contract.
type StdAssertionsLogArray1Iterator struct {
	Event *StdAssertionsLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogArray1 represents a LogArray1 event raised by the StdAssertions contract.
type StdAssertionsLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogArray1(opts *bind.FilterOpts) (*StdAssertionsLogArray1Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogArray1Iterator{contract: _StdAssertions.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogArray1) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogArray1)
				if err := _StdAssertions.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogArray1(log types.Log) (*StdAssertionsLogArray1, error) {
	event := new(StdAssertionsLogArray1)
	if err := _StdAssertions.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the StdAssertions contract.
type StdAssertionsLogBytesIterator struct {
	Event *StdAssertionsLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogBytes represents a LogBytes event raised by the StdAssertions contract.
type StdAssertionsLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogBytes(opts *bind.FilterOpts) (*StdAssertionsLogBytesIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogBytesIterator{contract: _StdAssertions.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogBytes) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogBytes)
				if err := _StdAssertions.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogBytes(log types.Log) (*StdAssertionsLogBytes, error) {
	event := new(StdAssertionsLogBytes)
	if err := _StdAssertions.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the StdAssertions contract.
type StdAssertionsLogBytes32Iterator struct {
	Event *StdAssertionsLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogBytes32 represents a LogBytes32 event raised by the StdAssertions contract.
type StdAssertionsLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*StdAssertionsLogBytes32Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogBytes32Iterator{contract: _StdAssertions.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogBytes32) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogBytes32)
				if err := _StdAssertions.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogBytes32(log types.Log) (*StdAssertionsLogBytes32, error) {
	event := new(StdAssertionsLogBytes32)
	if err := _StdAssertions.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the StdAssertions contract.
type StdAssertionsLogIntIterator struct {
	Event *StdAssertionsLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogInt represents a LogInt event raised by the StdAssertions contract.
type StdAssertionsLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogInt(opts *bind.FilterOpts) (*StdAssertionsLogIntIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogIntIterator{contract: _StdAssertions.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogInt) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogInt)
				if err := _StdAssertions.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogInt(log types.Log) (*StdAssertionsLogInt, error) {
	event := new(StdAssertionsLogInt)
	if err := _StdAssertions.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the StdAssertions contract.
type StdAssertionsLogNamedAddressIterator struct {
	Event *StdAssertionsLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedAddress represents a LogNamedAddress event raised by the StdAssertions contract.
type StdAssertionsLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*StdAssertionsLogNamedAddressIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedAddressIterator{contract: _StdAssertions.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedAddress)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedAddress(log types.Log) (*StdAssertionsLogNamedAddress, error) {
	event := new(StdAssertionsLogNamedAddress)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the StdAssertions contract.
type StdAssertionsLogNamedArrayIterator struct {
	Event *StdAssertionsLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedArray represents a LogNamedArray event raised by the StdAssertions contract.
type StdAssertionsLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*StdAssertionsLogNamedArrayIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedArrayIterator{contract: _StdAssertions.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedArray)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedArray(log types.Log) (*StdAssertionsLogNamedArray, error) {
	event := new(StdAssertionsLogNamedArray)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the StdAssertions contract.
type StdAssertionsLogNamedArray0Iterator struct {
	Event *StdAssertionsLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedArray0 represents a LogNamedArray0 event raised by the StdAssertions contract.
type StdAssertionsLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*StdAssertionsLogNamedArray0Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedArray0Iterator{contract: _StdAssertions.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedArray0)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedArray0(log types.Log) (*StdAssertionsLogNamedArray0, error) {
	event := new(StdAssertionsLogNamedArray0)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the StdAssertions contract.
type StdAssertionsLogNamedArray1Iterator struct {
	Event *StdAssertionsLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedArray1 represents a LogNamedArray1 event raised by the StdAssertions contract.
type StdAssertionsLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*StdAssertionsLogNamedArray1Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedArray1Iterator{contract: _StdAssertions.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedArray1)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedArray1(log types.Log) (*StdAssertionsLogNamedArray1, error) {
	event := new(StdAssertionsLogNamedArray1)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the StdAssertions contract.
type StdAssertionsLogNamedBytesIterator struct {
	Event *StdAssertionsLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedBytes represents a LogNamedBytes event raised by the StdAssertions contract.
type StdAssertionsLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*StdAssertionsLogNamedBytesIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedBytesIterator{contract: _StdAssertions.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedBytes)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedBytes(log types.Log) (*StdAssertionsLogNamedBytes, error) {
	event := new(StdAssertionsLogNamedBytes)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the StdAssertions contract.
type StdAssertionsLogNamedBytes32Iterator struct {
	Event *StdAssertionsLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedBytes32 represents a LogNamedBytes32 event raised by the StdAssertions contract.
type StdAssertionsLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*StdAssertionsLogNamedBytes32Iterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedBytes32Iterator{contract: _StdAssertions.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedBytes32)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedBytes32(log types.Log) (*StdAssertionsLogNamedBytes32, error) {
	event := new(StdAssertionsLogNamedBytes32)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the StdAssertions contract.
type StdAssertionsLogNamedDecimalIntIterator struct {
	Event *StdAssertionsLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the StdAssertions contract.
type StdAssertionsLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*StdAssertionsLogNamedDecimalIntIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedDecimalIntIterator{contract: _StdAssertions.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedDecimalInt)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedDecimalInt(log types.Log) (*StdAssertionsLogNamedDecimalInt, error) {
	event := new(StdAssertionsLogNamedDecimalInt)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the StdAssertions contract.
type StdAssertionsLogNamedDecimalUintIterator struct {
	Event *StdAssertionsLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the StdAssertions contract.
type StdAssertionsLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*StdAssertionsLogNamedDecimalUintIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedDecimalUintIterator{contract: _StdAssertions.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedDecimalUint)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedDecimalUint(log types.Log) (*StdAssertionsLogNamedDecimalUint, error) {
	event := new(StdAssertionsLogNamedDecimalUint)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the StdAssertions contract.
type StdAssertionsLogNamedIntIterator struct {
	Event *StdAssertionsLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedInt represents a LogNamedInt event raised by the StdAssertions contract.
type StdAssertionsLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*StdAssertionsLogNamedIntIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedIntIterator{contract: _StdAssertions.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedInt)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedInt(log types.Log) (*StdAssertionsLogNamedInt, error) {
	event := new(StdAssertionsLogNamedInt)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the StdAssertions contract.
type StdAssertionsLogNamedStringIterator struct {
	Event *StdAssertionsLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedString represents a LogNamedString event raised by the StdAssertions contract.
type StdAssertionsLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*StdAssertionsLogNamedStringIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedStringIterator{contract: _StdAssertions.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedString) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedString)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedString(log types.Log) (*StdAssertionsLogNamedString, error) {
	event := new(StdAssertionsLogNamedString)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the StdAssertions contract.
type StdAssertionsLogNamedUintIterator struct {
	Event *StdAssertionsLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogNamedUint represents a LogNamedUint event raised by the StdAssertions contract.
type StdAssertionsLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_StdAssertions *StdAssertionsFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*StdAssertionsLogNamedUintIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogNamedUintIterator{contract: _StdAssertions.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_StdAssertions *StdAssertionsFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogNamedUint)
				if err := _StdAssertions.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_StdAssertions *StdAssertionsFilterer) ParseLogNamedUint(log types.Log) (*StdAssertionsLogNamedUint, error) {
	event := new(StdAssertionsLogNamedUint)
	if err := _StdAssertions.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the StdAssertions contract.
type StdAssertionsLogStringIterator struct {
	Event *StdAssertionsLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogString represents a LogString event raised by the StdAssertions contract.
type StdAssertionsLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogString(opts *bind.FilterOpts) (*StdAssertionsLogStringIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogStringIterator{contract: _StdAssertions.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogString) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogString)
				if err := _StdAssertions.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogString(log types.Log) (*StdAssertionsLogString, error) {
	event := new(StdAssertionsLogString)
	if err := _StdAssertions.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the StdAssertions contract.
type StdAssertionsLogUintIterator struct {
	Event *StdAssertionsLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogUint represents a LogUint event raised by the StdAssertions contract.
type StdAssertionsLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogUint(opts *bind.FilterOpts) (*StdAssertionsLogUintIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogUintIterator{contract: _StdAssertions.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogUint) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogUint)
				if err := _StdAssertions.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogUint(log types.Log) (*StdAssertionsLogUint, error) {
	event := new(StdAssertionsLogUint)
	if err := _StdAssertions.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdAssertionsLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the StdAssertions contract.
type StdAssertionsLogsIterator struct {
	Event *StdAssertionsLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdAssertionsLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdAssertionsLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdAssertionsLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdAssertionsLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdAssertionsLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdAssertionsLogs represents a Logs event raised by the StdAssertions contract.
type StdAssertionsLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) FilterLogs(opts *bind.FilterOpts) (*StdAssertionsLogsIterator, error) {

	logs, sub, err := _StdAssertions.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &StdAssertionsLogsIterator{contract: _StdAssertions.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *StdAssertionsLogs) (event.Subscription, error) {

	logs, sub, err := _StdAssertions.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdAssertionsLogs)
				if err := _StdAssertions.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_StdAssertions *StdAssertionsFilterer) ParseLogs(log types.Log) (*StdAssertionsLogs, error) {
	event := new(StdAssertionsLogs)
	if err := _StdAssertions.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdChainsMetaData contains all meta data concerning the StdChains contract.
var StdChainsMetaData = &bind.MetaData{
	ABI: "[]",
}

// StdChainsABI is the input ABI used to generate the binding from.
// Deprecated: Use StdChainsMetaData.ABI instead.
var StdChainsABI = StdChainsMetaData.ABI

// StdChains is an auto generated Go binding around an Ethereum contract.
type StdChains struct {
	StdChainsCaller     // Read-only binding to the contract
	StdChainsTransactor // Write-only binding to the contract
	StdChainsFilterer   // Log filterer for contract events
}

// StdChainsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdChainsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdChainsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdChainsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdChainsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdChainsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdChainsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdChainsSession struct {
	Contract     *StdChains        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdChainsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdChainsCallerSession struct {
	Contract *StdChainsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StdChainsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdChainsTransactorSession struct {
	Contract     *StdChainsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StdChainsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdChainsRaw struct {
	Contract *StdChains // Generic contract binding to access the raw methods on
}

// StdChainsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdChainsCallerRaw struct {
	Contract *StdChainsCaller // Generic read-only contract binding to access the raw methods on
}

// StdChainsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdChainsTransactorRaw struct {
	Contract *StdChainsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdChains creates a new instance of StdChains, bound to a specific deployed contract.
func NewStdChains(address common.Address, backend bind.ContractBackend) (*StdChains, error) {
	contract, err := bindStdChains(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdChains{StdChainsCaller: StdChainsCaller{contract: contract}, StdChainsTransactor: StdChainsTransactor{contract: contract}, StdChainsFilterer: StdChainsFilterer{contract: contract}}, nil
}

// NewStdChainsCaller creates a new read-only instance of StdChains, bound to a specific deployed contract.
func NewStdChainsCaller(address common.Address, caller bind.ContractCaller) (*StdChainsCaller, error) {
	contract, err := bindStdChains(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdChainsCaller{contract: contract}, nil
}

// NewStdChainsTransactor creates a new write-only instance of StdChains, bound to a specific deployed contract.
func NewStdChainsTransactor(address common.Address, transactor bind.ContractTransactor) (*StdChainsTransactor, error) {
	contract, err := bindStdChains(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdChainsTransactor{contract: contract}, nil
}

// NewStdChainsFilterer creates a new log filterer instance of StdChains, bound to a specific deployed contract.
func NewStdChainsFilterer(address common.Address, filterer bind.ContractFilterer) (*StdChainsFilterer, error) {
	contract, err := bindStdChains(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdChainsFilterer{contract: contract}, nil
}

// bindStdChains binds a generic wrapper to an already deployed contract.
func bindStdChains(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdChainsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdChains *StdChainsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdChains.Contract.StdChainsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdChains *StdChainsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdChains.Contract.StdChainsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdChains *StdChainsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdChains.Contract.StdChainsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdChains *StdChainsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdChains.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdChains *StdChainsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdChains.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdChains *StdChainsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdChains.Contract.contract.Transact(opts, method, params...)
}

// StdCheatsMetaData contains all meta data concerning the StdCheats contract.
var StdCheatsMetaData = &bind.MetaData{
	ABI: "[]",
}

// StdCheatsABI is the input ABI used to generate the binding from.
// Deprecated: Use StdCheatsMetaData.ABI instead.
var StdCheatsABI = StdCheatsMetaData.ABI

// StdCheats is an auto generated Go binding around an Ethereum contract.
type StdCheats struct {
	StdCheatsCaller     // Read-only binding to the contract
	StdCheatsTransactor // Write-only binding to the contract
	StdCheatsFilterer   // Log filterer for contract events
}

// StdCheatsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdCheatsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdCheatsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdCheatsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdCheatsSession struct {
	Contract     *StdCheats        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdCheatsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdCheatsCallerSession struct {
	Contract *StdCheatsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// StdCheatsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdCheatsTransactorSession struct {
	Contract     *StdCheatsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// StdCheatsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdCheatsRaw struct {
	Contract *StdCheats // Generic contract binding to access the raw methods on
}

// StdCheatsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdCheatsCallerRaw struct {
	Contract *StdCheatsCaller // Generic read-only contract binding to access the raw methods on
}

// StdCheatsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdCheatsTransactorRaw struct {
	Contract *StdCheatsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdCheats creates a new instance of StdCheats, bound to a specific deployed contract.
func NewStdCheats(address common.Address, backend bind.ContractBackend) (*StdCheats, error) {
	contract, err := bindStdCheats(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdCheats{StdCheatsCaller: StdCheatsCaller{contract: contract}, StdCheatsTransactor: StdCheatsTransactor{contract: contract}, StdCheatsFilterer: StdCheatsFilterer{contract: contract}}, nil
}

// NewStdCheatsCaller creates a new read-only instance of StdCheats, bound to a specific deployed contract.
func NewStdCheatsCaller(address common.Address, caller bind.ContractCaller) (*StdCheatsCaller, error) {
	contract, err := bindStdCheats(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdCheatsCaller{contract: contract}, nil
}

// NewStdCheatsTransactor creates a new write-only instance of StdCheats, bound to a specific deployed contract.
func NewStdCheatsTransactor(address common.Address, transactor bind.ContractTransactor) (*StdCheatsTransactor, error) {
	contract, err := bindStdCheats(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdCheatsTransactor{contract: contract}, nil
}

// NewStdCheatsFilterer creates a new log filterer instance of StdCheats, bound to a specific deployed contract.
func NewStdCheatsFilterer(address common.Address, filterer bind.ContractFilterer) (*StdCheatsFilterer, error) {
	contract, err := bindStdCheats(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdCheatsFilterer{contract: contract}, nil
}

// bindStdCheats binds a generic wrapper to an already deployed contract.
func bindStdCheats(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdCheatsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdCheats *StdCheatsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdCheats.Contract.StdCheatsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdCheats *StdCheatsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdCheats.Contract.StdCheatsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdCheats *StdCheatsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdCheats.Contract.StdCheatsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdCheats *StdCheatsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdCheats.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdCheats *StdCheatsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdCheats.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdCheats *StdCheatsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdCheats.Contract.contract.Transact(opts, method, params...)
}

// StdCheatsSafeMetaData contains all meta data concerning the StdCheatsSafe contract.
var StdCheatsSafeMetaData = &bind.MetaData{
	ABI: "[]",
}

// StdCheatsSafeABI is the input ABI used to generate the binding from.
// Deprecated: Use StdCheatsSafeMetaData.ABI instead.
var StdCheatsSafeABI = StdCheatsSafeMetaData.ABI

// StdCheatsSafe is an auto generated Go binding around an Ethereum contract.
type StdCheatsSafe struct {
	StdCheatsSafeCaller     // Read-only binding to the contract
	StdCheatsSafeTransactor // Write-only binding to the contract
	StdCheatsSafeFilterer   // Log filterer for contract events
}

// StdCheatsSafeCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdCheatsSafeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsSafeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdCheatsSafeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsSafeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdCheatsSafeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdCheatsSafeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdCheatsSafeSession struct {
	Contract     *StdCheatsSafe    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdCheatsSafeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdCheatsSafeCallerSession struct {
	Contract *StdCheatsSafeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StdCheatsSafeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdCheatsSafeTransactorSession struct {
	Contract     *StdCheatsSafeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StdCheatsSafeRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdCheatsSafeRaw struct {
	Contract *StdCheatsSafe // Generic contract binding to access the raw methods on
}

// StdCheatsSafeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdCheatsSafeCallerRaw struct {
	Contract *StdCheatsSafeCaller // Generic read-only contract binding to access the raw methods on
}

// StdCheatsSafeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdCheatsSafeTransactorRaw struct {
	Contract *StdCheatsSafeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdCheatsSafe creates a new instance of StdCheatsSafe, bound to a specific deployed contract.
func NewStdCheatsSafe(address common.Address, backend bind.ContractBackend) (*StdCheatsSafe, error) {
	contract, err := bindStdCheatsSafe(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdCheatsSafe{StdCheatsSafeCaller: StdCheatsSafeCaller{contract: contract}, StdCheatsSafeTransactor: StdCheatsSafeTransactor{contract: contract}, StdCheatsSafeFilterer: StdCheatsSafeFilterer{contract: contract}}, nil
}

// NewStdCheatsSafeCaller creates a new read-only instance of StdCheatsSafe, bound to a specific deployed contract.
func NewStdCheatsSafeCaller(address common.Address, caller bind.ContractCaller) (*StdCheatsSafeCaller, error) {
	contract, err := bindStdCheatsSafe(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdCheatsSafeCaller{contract: contract}, nil
}

// NewStdCheatsSafeTransactor creates a new write-only instance of StdCheatsSafe, bound to a specific deployed contract.
func NewStdCheatsSafeTransactor(address common.Address, transactor bind.ContractTransactor) (*StdCheatsSafeTransactor, error) {
	contract, err := bindStdCheatsSafe(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdCheatsSafeTransactor{contract: contract}, nil
}

// NewStdCheatsSafeFilterer creates a new log filterer instance of StdCheatsSafe, bound to a specific deployed contract.
func NewStdCheatsSafeFilterer(address common.Address, filterer bind.ContractFilterer) (*StdCheatsSafeFilterer, error) {
	contract, err := bindStdCheatsSafe(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdCheatsSafeFilterer{contract: contract}, nil
}

// bindStdCheatsSafe binds a generic wrapper to an already deployed contract.
func bindStdCheatsSafe(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdCheatsSafeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdCheatsSafe *StdCheatsSafeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdCheatsSafe.Contract.StdCheatsSafeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdCheatsSafe *StdCheatsSafeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdCheatsSafe.Contract.StdCheatsSafeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdCheatsSafe *StdCheatsSafeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdCheatsSafe.Contract.StdCheatsSafeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdCheatsSafe *StdCheatsSafeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdCheatsSafe.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdCheatsSafe *StdCheatsSafeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdCheatsSafe.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdCheatsSafe *StdCheatsSafeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdCheatsSafe.Contract.contract.Transact(opts, method, params...)
}

// StdInvariantMetaData contains all meta data concerning the StdInvariant contract.
var StdInvariantMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"b5508aa9": "excludeArtifacts()",
		"e20c9f71": "excludeContracts()",
		"1ed7831c": "excludeSenders()",
		"66d9a9a0": "targetArtifactSelectors()",
		"85226c81": "targetArtifacts()",
		"3f7286f4": "targetContracts()",
		"2ade3880": "targetInterfaces()",
		"916a17c6": "targetSelectors()",
		"3e5e3c23": "targetSenders()",
	},
}

// StdInvariantABI is the input ABI used to generate the binding from.
// Deprecated: Use StdInvariantMetaData.ABI instead.
var StdInvariantABI = StdInvariantMetaData.ABI

// Deprecated: Use StdInvariantMetaData.Sigs instead.
// StdInvariantFuncSigs maps the 4-byte function signature to its string representation.
var StdInvariantFuncSigs = StdInvariantMetaData.Sigs

// StdInvariant is an auto generated Go binding around an Ethereum contract.
type StdInvariant struct {
	StdInvariantCaller     // Read-only binding to the contract
	StdInvariantTransactor // Write-only binding to the contract
	StdInvariantFilterer   // Log filterer for contract events
}

// StdInvariantCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdInvariantCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdInvariantTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdInvariantTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdInvariantFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdInvariantFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdInvariantSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdInvariantSession struct {
	Contract     *StdInvariant     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdInvariantCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdInvariantCallerSession struct {
	Contract *StdInvariantCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// StdInvariantTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdInvariantTransactorSession struct {
	Contract     *StdInvariantTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// StdInvariantRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdInvariantRaw struct {
	Contract *StdInvariant // Generic contract binding to access the raw methods on
}

// StdInvariantCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdInvariantCallerRaw struct {
	Contract *StdInvariantCaller // Generic read-only contract binding to access the raw methods on
}

// StdInvariantTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdInvariantTransactorRaw struct {
	Contract *StdInvariantTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdInvariant creates a new instance of StdInvariant, bound to a specific deployed contract.
func NewStdInvariant(address common.Address, backend bind.ContractBackend) (*StdInvariant, error) {
	contract, err := bindStdInvariant(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdInvariant{StdInvariantCaller: StdInvariantCaller{contract: contract}, StdInvariantTransactor: StdInvariantTransactor{contract: contract}, StdInvariantFilterer: StdInvariantFilterer{contract: contract}}, nil
}

// NewStdInvariantCaller creates a new read-only instance of StdInvariant, bound to a specific deployed contract.
func NewStdInvariantCaller(address common.Address, caller bind.ContractCaller) (*StdInvariantCaller, error) {
	contract, err := bindStdInvariant(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdInvariantCaller{contract: contract}, nil
}

// NewStdInvariantTransactor creates a new write-only instance of StdInvariant, bound to a specific deployed contract.
func NewStdInvariantTransactor(address common.Address, transactor bind.ContractTransactor) (*StdInvariantTransactor, error) {
	contract, err := bindStdInvariant(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdInvariantTransactor{contract: contract}, nil
}

// NewStdInvariantFilterer creates a new log filterer instance of StdInvariant, bound to a specific deployed contract.
func NewStdInvariantFilterer(address common.Address, filterer bind.ContractFilterer) (*StdInvariantFilterer, error) {
	contract, err := bindStdInvariant(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdInvariantFilterer{contract: contract}, nil
}

// bindStdInvariant binds a generic wrapper to an already deployed contract.
func bindStdInvariant(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdInvariantMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdInvariant *StdInvariantRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdInvariant.Contract.StdInvariantCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdInvariant *StdInvariantRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdInvariant.Contract.StdInvariantTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdInvariant *StdInvariantRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdInvariant.Contract.StdInvariantTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdInvariant *StdInvariantCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdInvariant.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdInvariant *StdInvariantTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdInvariant.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdInvariant *StdInvariantTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdInvariant.Contract.contract.Transact(opts, method, params...)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_StdInvariant *StdInvariantCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_StdInvariant *StdInvariantSession) ExcludeArtifacts() ([]string, error) {
	return _StdInvariant.Contract.ExcludeArtifacts(&_StdInvariant.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_StdInvariant *StdInvariantCallerSession) ExcludeArtifacts() ([]string, error) {
	return _StdInvariant.Contract.ExcludeArtifacts(&_StdInvariant.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_StdInvariant *StdInvariantCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_StdInvariant *StdInvariantSession) ExcludeContracts() ([]common.Address, error) {
	return _StdInvariant.Contract.ExcludeContracts(&_StdInvariant.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_StdInvariant *StdInvariantCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _StdInvariant.Contract.ExcludeContracts(&_StdInvariant.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_StdInvariant *StdInvariantCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_StdInvariant *StdInvariantSession) ExcludeSenders() ([]common.Address, error) {
	return _StdInvariant.Contract.ExcludeSenders(&_StdInvariant.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_StdInvariant *StdInvariantCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _StdInvariant.Contract.ExcludeSenders(&_StdInvariant.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_StdInvariant *StdInvariantCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_StdInvariant *StdInvariantSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _StdInvariant.Contract.TargetArtifactSelectors(&_StdInvariant.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_StdInvariant *StdInvariantCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _StdInvariant.Contract.TargetArtifactSelectors(&_StdInvariant.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_StdInvariant *StdInvariantCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_StdInvariant *StdInvariantSession) TargetArtifacts() ([]string, error) {
	return _StdInvariant.Contract.TargetArtifacts(&_StdInvariant.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_StdInvariant *StdInvariantCallerSession) TargetArtifacts() ([]string, error) {
	return _StdInvariant.Contract.TargetArtifacts(&_StdInvariant.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_StdInvariant *StdInvariantCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_StdInvariant *StdInvariantSession) TargetContracts() ([]common.Address, error) {
	return _StdInvariant.Contract.TargetContracts(&_StdInvariant.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_StdInvariant *StdInvariantCallerSession) TargetContracts() ([]common.Address, error) {
	return _StdInvariant.Contract.TargetContracts(&_StdInvariant.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_StdInvariant *StdInvariantCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_StdInvariant *StdInvariantSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _StdInvariant.Contract.TargetInterfaces(&_StdInvariant.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_StdInvariant *StdInvariantCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _StdInvariant.Contract.TargetInterfaces(&_StdInvariant.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_StdInvariant *StdInvariantCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_StdInvariant *StdInvariantSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _StdInvariant.Contract.TargetSelectors(&_StdInvariant.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_StdInvariant *StdInvariantCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _StdInvariant.Contract.TargetSelectors(&_StdInvariant.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_StdInvariant *StdInvariantCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _StdInvariant.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_StdInvariant *StdInvariantSession) TargetSenders() ([]common.Address, error) {
	return _StdInvariant.Contract.TargetSenders(&_StdInvariant.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_StdInvariant *StdInvariantCallerSession) TargetSenders() ([]common.Address, error) {
	return _StdInvariant.Contract.TargetSenders(&_StdInvariant.CallOpts)
}

// StdStyleMetaData contains all meta data concerning the StdStyle contract.
var StdStyleMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ca60d68110e7e93900b1c827c04b86b14fc9ea3ea65f5546adf903c41ead9e964736f6c63430008180033",
}

// StdStyleABI is the input ABI used to generate the binding from.
// Deprecated: Use StdStyleMetaData.ABI instead.
var StdStyleABI = StdStyleMetaData.ABI

// StdStyleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdStyleMetaData.Bin instead.
var StdStyleBin = StdStyleMetaData.Bin

// DeployStdStyle deploys a new Ethereum contract, binding an instance of StdStyle to it.
func DeployStdStyle(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdStyle, error) {
	parsed, err := StdStyleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdStyleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdStyle{StdStyleCaller: StdStyleCaller{contract: contract}, StdStyleTransactor: StdStyleTransactor{contract: contract}, StdStyleFilterer: StdStyleFilterer{contract: contract}}, nil
}

// StdStyle is an auto generated Go binding around an Ethereum contract.
type StdStyle struct {
	StdStyleCaller     // Read-only binding to the contract
	StdStyleTransactor // Write-only binding to the contract
	StdStyleFilterer   // Log filterer for contract events
}

// StdStyleCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdStyleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStyleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdStyleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStyleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdStyleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStyleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdStyleSession struct {
	Contract     *StdStyle         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdStyleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdStyleCallerSession struct {
	Contract *StdStyleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StdStyleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdStyleTransactorSession struct {
	Contract     *StdStyleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StdStyleRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdStyleRaw struct {
	Contract *StdStyle // Generic contract binding to access the raw methods on
}

// StdStyleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdStyleCallerRaw struct {
	Contract *StdStyleCaller // Generic read-only contract binding to access the raw methods on
}

// StdStyleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdStyleTransactorRaw struct {
	Contract *StdStyleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdStyle creates a new instance of StdStyle, bound to a specific deployed contract.
func NewStdStyle(address common.Address, backend bind.ContractBackend) (*StdStyle, error) {
	contract, err := bindStdStyle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdStyle{StdStyleCaller: StdStyleCaller{contract: contract}, StdStyleTransactor: StdStyleTransactor{contract: contract}, StdStyleFilterer: StdStyleFilterer{contract: contract}}, nil
}

// NewStdStyleCaller creates a new read-only instance of StdStyle, bound to a specific deployed contract.
func NewStdStyleCaller(address common.Address, caller bind.ContractCaller) (*StdStyleCaller, error) {
	contract, err := bindStdStyle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdStyleCaller{contract: contract}, nil
}

// NewStdStyleTransactor creates a new write-only instance of StdStyle, bound to a specific deployed contract.
func NewStdStyleTransactor(address common.Address, transactor bind.ContractTransactor) (*StdStyleTransactor, error) {
	contract, err := bindStdStyle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdStyleTransactor{contract: contract}, nil
}

// NewStdStyleFilterer creates a new log filterer instance of StdStyle, bound to a specific deployed contract.
func NewStdStyleFilterer(address common.Address, filterer bind.ContractFilterer) (*StdStyleFilterer, error) {
	contract, err := bindStdStyle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdStyleFilterer{contract: contract}, nil
}

// bindStdStyle binds a generic wrapper to an already deployed contract.
func bindStdStyle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdStyleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStyle *StdStyleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStyle.Contract.StdStyleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStyle *StdStyleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStyle.Contract.StdStyleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStyle *StdStyleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStyle.Contract.StdStyleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStyle *StdStyleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStyle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStyle *StdStyleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStyle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStyle *StdStyleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStyle.Contract.contract.Transact(opts, method, params...)
}

// StdUtilsMetaData contains all meta data concerning the StdUtils contract.
var StdUtilsMetaData = &bind.MetaData{
	ABI: "[]",
}

// StdUtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use StdUtilsMetaData.ABI instead.
var StdUtilsABI = StdUtilsMetaData.ABI

// StdUtils is an auto generated Go binding around an Ethereum contract.
type StdUtils struct {
	StdUtilsCaller     // Read-only binding to the contract
	StdUtilsTransactor // Write-only binding to the contract
	StdUtilsFilterer   // Log filterer for contract events
}

// StdUtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdUtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdUtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdUtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdUtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdUtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdUtilsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdUtilsSession struct {
	Contract     *StdUtils         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdUtilsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdUtilsCallerSession struct {
	Contract *StdUtilsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StdUtilsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdUtilsTransactorSession struct {
	Contract     *StdUtilsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StdUtilsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdUtilsRaw struct {
	Contract *StdUtils // Generic contract binding to access the raw methods on
}

// StdUtilsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdUtilsCallerRaw struct {
	Contract *StdUtilsCaller // Generic read-only contract binding to access the raw methods on
}

// StdUtilsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdUtilsTransactorRaw struct {
	Contract *StdUtilsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdUtils creates a new instance of StdUtils, bound to a specific deployed contract.
func NewStdUtils(address common.Address, backend bind.ContractBackend) (*StdUtils, error) {
	contract, err := bindStdUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdUtils{StdUtilsCaller: StdUtilsCaller{contract: contract}, StdUtilsTransactor: StdUtilsTransactor{contract: contract}, StdUtilsFilterer: StdUtilsFilterer{contract: contract}}, nil
}

// NewStdUtilsCaller creates a new read-only instance of StdUtils, bound to a specific deployed contract.
func NewStdUtilsCaller(address common.Address, caller bind.ContractCaller) (*StdUtilsCaller, error) {
	contract, err := bindStdUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdUtilsCaller{contract: contract}, nil
}

// NewStdUtilsTransactor creates a new write-only instance of StdUtils, bound to a specific deployed contract.
func NewStdUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*StdUtilsTransactor, error) {
	contract, err := bindStdUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdUtilsTransactor{contract: contract}, nil
}

// NewStdUtilsFilterer creates a new log filterer instance of StdUtils, bound to a specific deployed contract.
func NewStdUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*StdUtilsFilterer, error) {
	contract, err := bindStdUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdUtilsFilterer{contract: contract}, nil
}

// bindStdUtils binds a generic wrapper to an already deployed contract.
func bindStdUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdUtilsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdUtils *StdUtilsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdUtils.Contract.StdUtilsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdUtils *StdUtilsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdUtils.Contract.StdUtilsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdUtils *StdUtilsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdUtils.Contract.StdUtilsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdUtils *StdUtilsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdUtils.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdUtils *StdUtilsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdUtils.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdUtils *StdUtilsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdUtils.Contract.contract.Transact(opts, method, params...)
}

// TestMetaData contains all meta data concerning the Test contract.
var TestMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"structStdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"structStdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"fa7626d4": "IS_TEST()",
		"b5508aa9": "excludeArtifacts()",
		"e20c9f71": "excludeContracts()",
		"1ed7831c": "excludeSenders()",
		"ba414fa6": "failed()",
		"66d9a9a0": "targetArtifactSelectors()",
		"85226c81": "targetArtifacts()",
		"3f7286f4": "targetContracts()",
		"2ade3880": "targetInterfaces()",
		"916a17c6": "targetSelectors()",
		"3e5e3c23": "targetSenders()",
	},
}

// TestABI is the input ABI used to generate the binding from.
// Deprecated: Use TestMetaData.ABI instead.
var TestABI = TestMetaData.ABI

// Deprecated: Use TestMetaData.Sigs instead.
// TestFuncSigs maps the 4-byte function signature to its string representation.
var TestFuncSigs = TestMetaData.Sigs

// Test is an auto generated Go binding around an Ethereum contract.
type Test struct {
	TestCaller     // Read-only binding to the contract
	TestTransactor // Write-only binding to the contract
	TestFilterer   // Log filterer for contract events
}

// TestCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestSession struct {
	Contract     *Test             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestCallerSession struct {
	Contract *TestCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestTransactorSession struct {
	Contract     *TestTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestRaw struct {
	Contract *Test // Generic contract binding to access the raw methods on
}

// TestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestCallerRaw struct {
	Contract *TestCaller // Generic read-only contract binding to access the raw methods on
}

// TestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestTransactorRaw struct {
	Contract *TestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTest creates a new instance of Test, bound to a specific deployed contract.
func NewTest(address common.Address, backend bind.ContractBackend) (*Test, error) {
	contract, err := bindTest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Test{TestCaller: TestCaller{contract: contract}, TestTransactor: TestTransactor{contract: contract}, TestFilterer: TestFilterer{contract: contract}}, nil
}

// NewTestCaller creates a new read-only instance of Test, bound to a specific deployed contract.
func NewTestCaller(address common.Address, caller bind.ContractCaller) (*TestCaller, error) {
	contract, err := bindTest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestCaller{contract: contract}, nil
}

// NewTestTransactor creates a new write-only instance of Test, bound to a specific deployed contract.
func NewTestTransactor(address common.Address, transactor bind.ContractTransactor) (*TestTransactor, error) {
	contract, err := bindTest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestTransactor{contract: contract}, nil
}

// NewTestFilterer creates a new log filterer instance of Test, bound to a specific deployed contract.
func NewTestFilterer(address common.Address, filterer bind.ContractFilterer) (*TestFilterer, error) {
	contract, err := bindTest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestFilterer{contract: contract}, nil
}

// bindTest binds a generic wrapper to an already deployed contract.
func bindTest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Test *TestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Test.Contract.TestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Test *TestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Test.Contract.TestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Test *TestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Test.Contract.TestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Test *TestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Test.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Test *TestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Test.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Test *TestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Test.Contract.contract.Transact(opts, method, params...)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_Test *TestCaller) ISTEST(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "IS_TEST")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_Test *TestSession) ISTEST() (bool, error) {
	return _Test.Contract.ISTEST(&_Test.CallOpts)
}

// ISTEST is a free data retrieval call binding the contract method 0xfa7626d4.
//
// Solidity: function IS_TEST() view returns(bool)
func (_Test *TestCallerSession) ISTEST() (bool, error) {
	return _Test.Contract.ISTEST(&_Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_Test *TestCaller) ExcludeArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "excludeArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_Test *TestSession) ExcludeArtifacts() ([]string, error) {
	return _Test.Contract.ExcludeArtifacts(&_Test.CallOpts)
}

// ExcludeArtifacts is a free data retrieval call binding the contract method 0xb5508aa9.
//
// Solidity: function excludeArtifacts() view returns(string[] excludedArtifacts_)
func (_Test *TestCallerSession) ExcludeArtifacts() ([]string, error) {
	return _Test.Contract.ExcludeArtifacts(&_Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_Test *TestCaller) ExcludeContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "excludeContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_Test *TestSession) ExcludeContracts() ([]common.Address, error) {
	return _Test.Contract.ExcludeContracts(&_Test.CallOpts)
}

// ExcludeContracts is a free data retrieval call binding the contract method 0xe20c9f71.
//
// Solidity: function excludeContracts() view returns(address[] excludedContracts_)
func (_Test *TestCallerSession) ExcludeContracts() ([]common.Address, error) {
	return _Test.Contract.ExcludeContracts(&_Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_Test *TestCaller) ExcludeSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "excludeSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_Test *TestSession) ExcludeSenders() ([]common.Address, error) {
	return _Test.Contract.ExcludeSenders(&_Test.CallOpts)
}

// ExcludeSenders is a free data retrieval call binding the contract method 0x1ed7831c.
//
// Solidity: function excludeSenders() view returns(address[] excludedSenders_)
func (_Test *TestCallerSession) ExcludeSenders() ([]common.Address, error) {
	return _Test.Contract.ExcludeSenders(&_Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_Test *TestCaller) Failed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "failed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_Test *TestSession) Failed() (bool, error) {
	return _Test.Contract.Failed(&_Test.CallOpts)
}

// Failed is a free data retrieval call binding the contract method 0xba414fa6.
//
// Solidity: function failed() view returns(bool)
func (_Test *TestCallerSession) Failed() (bool, error) {
	return _Test.Contract.Failed(&_Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_Test *TestCaller) TargetArtifactSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzArtifactSelector, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetArtifactSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzArtifactSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzArtifactSelector)).(*[]StdInvariantFuzzArtifactSelector)

	return out0, err

}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_Test *TestSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _Test.Contract.TargetArtifactSelectors(&_Test.CallOpts)
}

// TargetArtifactSelectors is a free data retrieval call binding the contract method 0x66d9a9a0.
//
// Solidity: function targetArtifactSelectors() view returns((string,bytes4[])[] targetedArtifactSelectors_)
func (_Test *TestCallerSession) TargetArtifactSelectors() ([]StdInvariantFuzzArtifactSelector, error) {
	return _Test.Contract.TargetArtifactSelectors(&_Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_Test *TestCaller) TargetArtifacts(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetArtifacts")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_Test *TestSession) TargetArtifacts() ([]string, error) {
	return _Test.Contract.TargetArtifacts(&_Test.CallOpts)
}

// TargetArtifacts is a free data retrieval call binding the contract method 0x85226c81.
//
// Solidity: function targetArtifacts() view returns(string[] targetedArtifacts_)
func (_Test *TestCallerSession) TargetArtifacts() ([]string, error) {
	return _Test.Contract.TargetArtifacts(&_Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_Test *TestCaller) TargetContracts(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetContracts")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_Test *TestSession) TargetContracts() ([]common.Address, error) {
	return _Test.Contract.TargetContracts(&_Test.CallOpts)
}

// TargetContracts is a free data retrieval call binding the contract method 0x3f7286f4.
//
// Solidity: function targetContracts() view returns(address[] targetedContracts_)
func (_Test *TestCallerSession) TargetContracts() ([]common.Address, error) {
	return _Test.Contract.TargetContracts(&_Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_Test *TestCaller) TargetInterfaces(opts *bind.CallOpts) ([]StdInvariantFuzzInterface, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetInterfaces")

	if err != nil {
		return *new([]StdInvariantFuzzInterface), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzInterface)).(*[]StdInvariantFuzzInterface)

	return out0, err

}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_Test *TestSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _Test.Contract.TargetInterfaces(&_Test.CallOpts)
}

// TargetInterfaces is a free data retrieval call binding the contract method 0x2ade3880.
//
// Solidity: function targetInterfaces() view returns((address,string[])[] targetedInterfaces_)
func (_Test *TestCallerSession) TargetInterfaces() ([]StdInvariantFuzzInterface, error) {
	return _Test.Contract.TargetInterfaces(&_Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_Test *TestCaller) TargetSelectors(opts *bind.CallOpts) ([]StdInvariantFuzzSelector, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetSelectors")

	if err != nil {
		return *new([]StdInvariantFuzzSelector), err
	}

	out0 := *abi.ConvertType(out[0], new([]StdInvariantFuzzSelector)).(*[]StdInvariantFuzzSelector)

	return out0, err

}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_Test *TestSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _Test.Contract.TargetSelectors(&_Test.CallOpts)
}

// TargetSelectors is a free data retrieval call binding the contract method 0x916a17c6.
//
// Solidity: function targetSelectors() view returns((address,bytes4[])[] targetedSelectors_)
func (_Test *TestCallerSession) TargetSelectors() ([]StdInvariantFuzzSelector, error) {
	return _Test.Contract.TargetSelectors(&_Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_Test *TestCaller) TargetSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Test.contract.Call(opts, &out, "targetSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_Test *TestSession) TargetSenders() ([]common.Address, error) {
	return _Test.Contract.TargetSenders(&_Test.CallOpts)
}

// TargetSenders is a free data retrieval call binding the contract method 0x3e5e3c23.
//
// Solidity: function targetSenders() view returns(address[] targetedSenders_)
func (_Test *TestCallerSession) TargetSenders() ([]common.Address, error) {
	return _Test.Contract.TargetSenders(&_Test.CallOpts)
}

// TestLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Test contract.
type TestLogIterator struct {
	Event *TestLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLog represents a Log event raised by the Test contract.
type TestLog struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_Test *TestFilterer) FilterLog(opts *bind.FilterOpts) (*TestLogIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return &TestLogIterator{contract: _Test.contract, event: "log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_Test *TestFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *TestLog) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLog)
				if err := _Test.contract.UnpackLog(event, "log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0x41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50.
//
// Solidity: event log(string arg0)
func (_Test *TestFilterer) ParseLog(log types.Log) (*TestLog, error) {
	event := new(TestLog)
	if err := _Test.contract.UnpackLog(event, "log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Test contract.
type TestLogAddressIterator struct {
	Event *TestLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogAddress represents a LogAddress event raised by the Test contract.
type TestLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_Test *TestFilterer) FilterLogAddress(opts *bind.FilterOpts) (*TestLogAddressIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return &TestLogAddressIterator{contract: _Test.contract, event: "log_address", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_Test *TestFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *TestLogAddress) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogAddress)
				if err := _Test.contract.UnpackLog(event, "log_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x7ae74c527414ae135fd97047b12921a5ec3911b804197855d67e25c7b75ee6f3.
//
// Solidity: event log_address(address arg0)
func (_Test *TestFilterer) ParseLogAddress(log types.Log) (*TestLogAddress, error) {
	event := new(TestLogAddress)
	if err := _Test.contract.UnpackLog(event, "log_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogArrayIterator is returned from FilterLogArray and is used to iterate over the raw logs and unpacked data for LogArray events raised by the Test contract.
type TestLogArrayIterator struct {
	Event *TestLogArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogArray represents a LogArray event raised by the Test contract.
type TestLogArray struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray is a free log retrieval operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_Test *TestFilterer) FilterLogArray(opts *bind.FilterOpts) (*TestLogArrayIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return &TestLogArrayIterator{contract: _Test.contract, event: "log_array", logs: logs, sub: sub}, nil
}

// WatchLogArray is a free log subscription operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_Test *TestFilterer) WatchLogArray(opts *bind.WatchOpts, sink chan<- *TestLogArray) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogArray)
				if err := _Test.contract.UnpackLog(event, "log_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray is a log parse operation binding the contract event 0xfb102865d50addddf69da9b5aa1bced66c80cf869a5c8d0471a467e18ce9cab1.
//
// Solidity: event log_array(uint256[] val)
func (_Test *TestFilterer) ParseLogArray(log types.Log) (*TestLogArray, error) {
	event := new(TestLogArray)
	if err := _Test.contract.UnpackLog(event, "log_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogArray0Iterator is returned from FilterLogArray0 and is used to iterate over the raw logs and unpacked data for LogArray0 events raised by the Test contract.
type TestLogArray0Iterator struct {
	Event *TestLogArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogArray0 represents a LogArray0 event raised by the Test contract.
type TestLogArray0 struct {
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray0 is a free log retrieval operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_Test *TestFilterer) FilterLogArray0(opts *bind.FilterOpts) (*TestLogArray0Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return &TestLogArray0Iterator{contract: _Test.contract, event: "log_array0", logs: logs, sub: sub}, nil
}

// WatchLogArray0 is a free log subscription operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_Test *TestFilterer) WatchLogArray0(opts *bind.WatchOpts, sink chan<- *TestLogArray0) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogArray0)
				if err := _Test.contract.UnpackLog(event, "log_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray0 is a log parse operation binding the contract event 0x890a82679b470f2bd82816ed9b161f97d8b967f37fa3647c21d5bf39749e2dd5.
//
// Solidity: event log_array(int256[] val)
func (_Test *TestFilterer) ParseLogArray0(log types.Log) (*TestLogArray0, error) {
	event := new(TestLogArray0)
	if err := _Test.contract.UnpackLog(event, "log_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogArray1Iterator is returned from FilterLogArray1 and is used to iterate over the raw logs and unpacked data for LogArray1 events raised by the Test contract.
type TestLogArray1Iterator struct {
	Event *TestLogArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogArray1 represents a LogArray1 event raised by the Test contract.
type TestLogArray1 struct {
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogArray1 is a free log retrieval operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_Test *TestFilterer) FilterLogArray1(opts *bind.FilterOpts) (*TestLogArray1Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return &TestLogArray1Iterator{contract: _Test.contract, event: "log_array1", logs: logs, sub: sub}, nil
}

// WatchLogArray1 is a free log subscription operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_Test *TestFilterer) WatchLogArray1(opts *bind.WatchOpts, sink chan<- *TestLogArray1) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogArray1)
				if err := _Test.contract.UnpackLog(event, "log_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogArray1 is a log parse operation binding the contract event 0x40e1840f5769073d61bd01372d9b75baa9842d5629a0c99ff103be1178a8e9e2.
//
// Solidity: event log_array(address[] val)
func (_Test *TestFilterer) ParseLogArray1(log types.Log) (*TestLogArray1, error) {
	event := new(TestLogArray1)
	if err := _Test.contract.UnpackLog(event, "log_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the Test contract.
type TestLogBytesIterator struct {
	Event *TestLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogBytes represents a LogBytes event raised by the Test contract.
type TestLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_Test *TestFilterer) FilterLogBytes(opts *bind.FilterOpts) (*TestLogBytesIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return &TestLogBytesIterator{contract: _Test.contract, event: "log_bytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_Test *TestFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *TestLogBytes) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogBytes)
				if err := _Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x23b62ad0584d24a75f0bf3560391ef5659ec6db1269c56e11aa241d637f19b20.
//
// Solidity: event log_bytes(bytes arg0)
func (_Test *TestFilterer) ParseLogBytes(log types.Log) (*TestLogBytes, error) {
	event := new(TestLogBytes)
	if err := _Test.contract.UnpackLog(event, "log_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Test contract.
type TestLogBytes32Iterator struct {
	Event *TestLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogBytes32 represents a LogBytes32 event raised by the Test contract.
type TestLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_Test *TestFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*TestLogBytes32Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return &TestLogBytes32Iterator{contract: _Test.contract, event: "log_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_Test *TestFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *TestLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogBytes32)
				if err := _Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0xe81699b85113eea1c73e10588b2b035e55893369632173afd43feb192fac64e3.
//
// Solidity: event log_bytes32(bytes32 arg0)
func (_Test *TestFilterer) ParseLogBytes32(log types.Log) (*TestLogBytes32, error) {
	event := new(TestLogBytes32)
	if err := _Test.contract.UnpackLog(event, "log_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogIntIterator is returned from FilterLogInt and is used to iterate over the raw logs and unpacked data for LogInt events raised by the Test contract.
type TestLogIntIterator struct {
	Event *TestLogInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogInt represents a LogInt event raised by the Test contract.
type TestLogInt struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogInt is a free log retrieval operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_Test *TestFilterer) FilterLogInt(opts *bind.FilterOpts) (*TestLogIntIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return &TestLogIntIterator{contract: _Test.contract, event: "log_int", logs: logs, sub: sub}, nil
}

// WatchLogInt is a free log subscription operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_Test *TestFilterer) WatchLogInt(opts *bind.WatchOpts, sink chan<- *TestLogInt) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogInt)
				if err := _Test.contract.UnpackLog(event, "log_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt is a log parse operation binding the contract event 0x0eb5d52624c8d28ada9fc55a8c502ed5aa3fbe2fb6e91b71b5f376882b1d2fb8.
//
// Solidity: event log_int(int256 arg0)
func (_Test *TestFilterer) ParseLogInt(log types.Log) (*TestLogInt, error) {
	event := new(TestLogInt)
	if err := _Test.contract.UnpackLog(event, "log_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedAddressIterator is returned from FilterLogNamedAddress and is used to iterate over the raw logs and unpacked data for LogNamedAddress events raised by the Test contract.
type TestLogNamedAddressIterator struct {
	Event *TestLogNamedAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedAddress represents a LogNamedAddress event raised by the Test contract.
type TestLogNamedAddress struct {
	Key string
	Val common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedAddress is a free log retrieval operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_Test *TestFilterer) FilterLogNamedAddress(opts *bind.FilterOpts) (*TestLogNamedAddressIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedAddressIterator{contract: _Test.contract, event: "log_named_address", logs: logs, sub: sub}, nil
}

// WatchLogNamedAddress is a free log subscription operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_Test *TestFilterer) WatchLogNamedAddress(opts *bind.WatchOpts, sink chan<- *TestLogNamedAddress) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_address")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedAddress)
				if err := _Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedAddress is a log parse operation binding the contract event 0x9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f.
//
// Solidity: event log_named_address(string key, address val)
func (_Test *TestFilterer) ParseLogNamedAddress(log types.Log) (*TestLogNamedAddress, error) {
	event := new(TestLogNamedAddress)
	if err := _Test.contract.UnpackLog(event, "log_named_address", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedArrayIterator is returned from FilterLogNamedArray and is used to iterate over the raw logs and unpacked data for LogNamedArray events raised by the Test contract.
type TestLogNamedArrayIterator struct {
	Event *TestLogNamedArray // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedArrayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedArray)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedArray)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedArrayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedArrayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedArray represents a LogNamedArray event raised by the Test contract.
type TestLogNamedArray struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray is a free log retrieval operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_Test *TestFilterer) FilterLogNamedArray(opts *bind.FilterOpts) (*TestLogNamedArrayIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedArrayIterator{contract: _Test.contract, event: "log_named_array", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray is a free log subscription operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_Test *TestFilterer) WatchLogNamedArray(opts *bind.WatchOpts, sink chan<- *TestLogNamedArray) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_array")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedArray)
				if err := _Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray is a log parse operation binding the contract event 0x00aaa39c9ffb5f567a4534380c737075702e1f7f14107fc95328e3b56c0325fb.
//
// Solidity: event log_named_array(string key, uint256[] val)
func (_Test *TestFilterer) ParseLogNamedArray(log types.Log) (*TestLogNamedArray, error) {
	event := new(TestLogNamedArray)
	if err := _Test.contract.UnpackLog(event, "log_named_array", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedArray0Iterator is returned from FilterLogNamedArray0 and is used to iterate over the raw logs and unpacked data for LogNamedArray0 events raised by the Test contract.
type TestLogNamedArray0Iterator struct {
	Event *TestLogNamedArray0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedArray0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedArray0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedArray0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedArray0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedArray0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedArray0 represents a LogNamedArray0 event raised by the Test contract.
type TestLogNamedArray0 struct {
	Key string
	Val []*big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray0 is a free log retrieval operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_Test *TestFilterer) FilterLogNamedArray0(opts *bind.FilterOpts) (*TestLogNamedArray0Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedArray0Iterator{contract: _Test.contract, event: "log_named_array0", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray0 is a free log subscription operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_Test *TestFilterer) WatchLogNamedArray0(opts *bind.WatchOpts, sink chan<- *TestLogNamedArray0) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_array0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedArray0)
				if err := _Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray0 is a log parse operation binding the contract event 0xa73eda09662f46dde729be4611385ff34fe6c44fbbc6f7e17b042b59a3445b57.
//
// Solidity: event log_named_array(string key, int256[] val)
func (_Test *TestFilterer) ParseLogNamedArray0(log types.Log) (*TestLogNamedArray0, error) {
	event := new(TestLogNamedArray0)
	if err := _Test.contract.UnpackLog(event, "log_named_array0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedArray1Iterator is returned from FilterLogNamedArray1 and is used to iterate over the raw logs and unpacked data for LogNamedArray1 events raised by the Test contract.
type TestLogNamedArray1Iterator struct {
	Event *TestLogNamedArray1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedArray1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedArray1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedArray1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedArray1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedArray1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedArray1 represents a LogNamedArray1 event raised by the Test contract.
type TestLogNamedArray1 struct {
	Key string
	Val []common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedArray1 is a free log retrieval operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_Test *TestFilterer) FilterLogNamedArray1(opts *bind.FilterOpts) (*TestLogNamedArray1Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedArray1Iterator{contract: _Test.contract, event: "log_named_array1", logs: logs, sub: sub}, nil
}

// WatchLogNamedArray1 is a free log subscription operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_Test *TestFilterer) WatchLogNamedArray1(opts *bind.WatchOpts, sink chan<- *TestLogNamedArray1) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_array1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedArray1)
				if err := _Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedArray1 is a log parse operation binding the contract event 0x3bcfb2ae2e8d132dd1fce7cf278a9a19756a9fceabe470df3bdabb4bc577d1bd.
//
// Solidity: event log_named_array(string key, address[] val)
func (_Test *TestFilterer) ParseLogNamedArray1(log types.Log) (*TestLogNamedArray1, error) {
	event := new(TestLogNamedArray1)
	if err := _Test.contract.UnpackLog(event, "log_named_array1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedBytesIterator is returned from FilterLogNamedBytes and is used to iterate over the raw logs and unpacked data for LogNamedBytes events raised by the Test contract.
type TestLogNamedBytesIterator struct {
	Event *TestLogNamedBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedBytes represents a LogNamedBytes event raised by the Test contract.
type TestLogNamedBytes struct {
	Key string
	Val []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes is a free log retrieval operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_Test *TestFilterer) FilterLogNamedBytes(opts *bind.FilterOpts) (*TestLogNamedBytesIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedBytesIterator{contract: _Test.contract, event: "log_named_bytes", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes is a free log subscription operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_Test *TestFilterer) WatchLogNamedBytes(opts *bind.WatchOpts, sink chan<- *TestLogNamedBytes) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_bytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedBytes)
				if err := _Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes is a log parse operation binding the contract event 0xd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18.
//
// Solidity: event log_named_bytes(string key, bytes val)
func (_Test *TestFilterer) ParseLogNamedBytes(log types.Log) (*TestLogNamedBytes, error) {
	event := new(TestLogNamedBytes)
	if err := _Test.contract.UnpackLog(event, "log_named_bytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedBytes32Iterator is returned from FilterLogNamedBytes32 and is used to iterate over the raw logs and unpacked data for LogNamedBytes32 events raised by the Test contract.
type TestLogNamedBytes32Iterator struct {
	Event *TestLogNamedBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedBytes32 represents a LogNamedBytes32 event raised by the Test contract.
type TestLogNamedBytes32 struct {
	Key string
	Val [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedBytes32 is a free log retrieval operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_Test *TestFilterer) FilterLogNamedBytes32(opts *bind.FilterOpts) (*TestLogNamedBytes32Iterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedBytes32Iterator{contract: _Test.contract, event: "log_named_bytes32", logs: logs, sub: sub}, nil
}

// WatchLogNamedBytes32 is a free log subscription operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_Test *TestFilterer) WatchLogNamedBytes32(opts *bind.WatchOpts, sink chan<- *TestLogNamedBytes32) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_bytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedBytes32)
				if err := _Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedBytes32 is a log parse operation binding the contract event 0xafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99.
//
// Solidity: event log_named_bytes32(string key, bytes32 val)
func (_Test *TestFilterer) ParseLogNamedBytes32(log types.Log) (*TestLogNamedBytes32, error) {
	event := new(TestLogNamedBytes32)
	if err := _Test.contract.UnpackLog(event, "log_named_bytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedDecimalIntIterator is returned from FilterLogNamedDecimalInt and is used to iterate over the raw logs and unpacked data for LogNamedDecimalInt events raised by the Test contract.
type TestLogNamedDecimalIntIterator struct {
	Event *TestLogNamedDecimalInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedDecimalIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedDecimalInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedDecimalInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedDecimalIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedDecimalIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedDecimalInt represents a LogNamedDecimalInt event raised by the Test contract.
type TestLogNamedDecimalInt struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalInt is a free log retrieval operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_Test *TestFilterer) FilterLogNamedDecimalInt(opts *bind.FilterOpts) (*TestLogNamedDecimalIntIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedDecimalIntIterator{contract: _Test.contract, event: "log_named_decimal_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalInt is a free log subscription operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_Test *TestFilterer) WatchLogNamedDecimalInt(opts *bind.WatchOpts, sink chan<- *TestLogNamedDecimalInt) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_decimal_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedDecimalInt)
				if err := _Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalInt is a log parse operation binding the contract event 0x5da6ce9d51151ba10c09a559ef24d520b9dac5c5b8810ae8434e4d0d86411a95.
//
// Solidity: event log_named_decimal_int(string key, int256 val, uint256 decimals)
func (_Test *TestFilterer) ParseLogNamedDecimalInt(log types.Log) (*TestLogNamedDecimalInt, error) {
	event := new(TestLogNamedDecimalInt)
	if err := _Test.contract.UnpackLog(event, "log_named_decimal_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedDecimalUintIterator is returned from FilterLogNamedDecimalUint and is used to iterate over the raw logs and unpacked data for LogNamedDecimalUint events raised by the Test contract.
type TestLogNamedDecimalUintIterator struct {
	Event *TestLogNamedDecimalUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedDecimalUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedDecimalUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedDecimalUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedDecimalUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedDecimalUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedDecimalUint represents a LogNamedDecimalUint event raised by the Test contract.
type TestLogNamedDecimalUint struct {
	Key      string
	Val      *big.Int
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNamedDecimalUint is a free log retrieval operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_Test *TestFilterer) FilterLogNamedDecimalUint(opts *bind.FilterOpts) (*TestLogNamedDecimalUintIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedDecimalUintIterator{contract: _Test.contract, event: "log_named_decimal_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedDecimalUint is a free log subscription operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_Test *TestFilterer) WatchLogNamedDecimalUint(opts *bind.WatchOpts, sink chan<- *TestLogNamedDecimalUint) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_decimal_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedDecimalUint)
				if err := _Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedDecimalUint is a log parse operation binding the contract event 0xeb8ba43ced7537421946bd43e828b8b2b8428927aa8f801c13d934bf11aca57b.
//
// Solidity: event log_named_decimal_uint(string key, uint256 val, uint256 decimals)
func (_Test *TestFilterer) ParseLogNamedDecimalUint(log types.Log) (*TestLogNamedDecimalUint, error) {
	event := new(TestLogNamedDecimalUint)
	if err := _Test.contract.UnpackLog(event, "log_named_decimal_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedIntIterator is returned from FilterLogNamedInt and is used to iterate over the raw logs and unpacked data for LogNamedInt events raised by the Test contract.
type TestLogNamedIntIterator struct {
	Event *TestLogNamedInt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedIntIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedInt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedInt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedIntIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedIntIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedInt represents a LogNamedInt event raised by the Test contract.
type TestLogNamedInt struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedInt is a free log retrieval operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_Test *TestFilterer) FilterLogNamedInt(opts *bind.FilterOpts) (*TestLogNamedIntIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedIntIterator{contract: _Test.contract, event: "log_named_int", logs: logs, sub: sub}, nil
}

// WatchLogNamedInt is a free log subscription operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_Test *TestFilterer) WatchLogNamedInt(opts *bind.WatchOpts, sink chan<- *TestLogNamedInt) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_int")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedInt)
				if err := _Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedInt is a log parse operation binding the contract event 0x2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f168.
//
// Solidity: event log_named_int(string key, int256 val)
func (_Test *TestFilterer) ParseLogNamedInt(log types.Log) (*TestLogNamedInt, error) {
	event := new(TestLogNamedInt)
	if err := _Test.contract.UnpackLog(event, "log_named_int", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedStringIterator is returned from FilterLogNamedString and is used to iterate over the raw logs and unpacked data for LogNamedString events raised by the Test contract.
type TestLogNamedStringIterator struct {
	Event *TestLogNamedString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedString represents a LogNamedString event raised by the Test contract.
type TestLogNamedString struct {
	Key string
	Val string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedString is a free log retrieval operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_Test *TestFilterer) FilterLogNamedString(opts *bind.FilterOpts) (*TestLogNamedStringIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedStringIterator{contract: _Test.contract, event: "log_named_string", logs: logs, sub: sub}, nil
}

// WatchLogNamedString is a free log subscription operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_Test *TestFilterer) WatchLogNamedString(opts *bind.WatchOpts, sink chan<- *TestLogNamedString) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedString)
				if err := _Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedString is a log parse operation binding the contract event 0x280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583.
//
// Solidity: event log_named_string(string key, string val)
func (_Test *TestFilterer) ParseLogNamedString(log types.Log) (*TestLogNamedString, error) {
	event := new(TestLogNamedString)
	if err := _Test.contract.UnpackLog(event, "log_named_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogNamedUintIterator is returned from FilterLogNamedUint and is used to iterate over the raw logs and unpacked data for LogNamedUint events raised by the Test contract.
type TestLogNamedUintIterator struct {
	Event *TestLogNamedUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogNamedUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogNamedUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogNamedUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogNamedUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogNamedUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogNamedUint represents a LogNamedUint event raised by the Test contract.
type TestLogNamedUint struct {
	Key string
	Val *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogNamedUint is a free log retrieval operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_Test *TestFilterer) FilterLogNamedUint(opts *bind.FilterOpts) (*TestLogNamedUintIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return &TestLogNamedUintIterator{contract: _Test.contract, event: "log_named_uint", logs: logs, sub: sub}, nil
}

// WatchLogNamedUint is a free log subscription operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_Test *TestFilterer) WatchLogNamedUint(opts *bind.WatchOpts, sink chan<- *TestLogNamedUint) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_named_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogNamedUint)
				if err := _Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNamedUint is a log parse operation binding the contract event 0xb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8.
//
// Solidity: event log_named_uint(string key, uint256 val)
func (_Test *TestFilterer) ParseLogNamedUint(log types.Log) (*TestLogNamedUint, error) {
	event := new(TestLogNamedUint)
	if err := _Test.contract.UnpackLog(event, "log_named_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the Test contract.
type TestLogStringIterator struct {
	Event *TestLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogString represents a LogString event raised by the Test contract.
type TestLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_Test *TestFilterer) FilterLogString(opts *bind.FilterOpts) (*TestLogStringIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return &TestLogStringIterator{contract: _Test.contract, event: "log_string", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_Test *TestFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *TestLogString) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_string")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogString)
				if err := _Test.contract.UnpackLog(event, "log_string", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0x0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b.
//
// Solidity: event log_string(string arg0)
func (_Test *TestFilterer) ParseLogString(log types.Log) (*TestLogString, error) {
	event := new(TestLogString)
	if err := _Test.contract.UnpackLog(event, "log_string", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogUintIterator is returned from FilterLogUint and is used to iterate over the raw logs and unpacked data for LogUint events raised by the Test contract.
type TestLogUintIterator struct {
	Event *TestLogUint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogUintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogUint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogUint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogUintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogUintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogUint represents a LogUint event raised by the Test contract.
type TestLogUint struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint is a free log retrieval operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_Test *TestFilterer) FilterLogUint(opts *bind.FilterOpts) (*TestLogUintIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return &TestLogUintIterator{contract: _Test.contract, event: "log_uint", logs: logs, sub: sub}, nil
}

// WatchLogUint is a free log subscription operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_Test *TestFilterer) WatchLogUint(opts *bind.WatchOpts, sink chan<- *TestLogUint) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "log_uint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogUint)
				if err := _Test.contract.UnpackLog(event, "log_uint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint is a log parse operation binding the contract event 0x2cab9790510fd8bdfbd2115288db33fec66691d476efc5427cfd4c0969301755.
//
// Solidity: event log_uint(uint256 arg0)
func (_Test *TestFilterer) ParseLogUint(log types.Log) (*TestLogUint, error) {
	event := new(TestLogUint)
	if err := _Test.contract.UnpackLog(event, "log_uint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestLogsIterator is returned from FilterLogs and is used to iterate over the raw logs and unpacked data for Logs events raised by the Test contract.
type TestLogsIterator struct {
	Event *TestLogs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestLogsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestLogs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestLogs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestLogsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestLogsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestLogs represents a Logs event raised by the Test contract.
type TestLogs struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogs is a free log retrieval operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_Test *TestFilterer) FilterLogs(opts *bind.FilterOpts) (*TestLogsIterator, error) {

	logs, sub, err := _Test.contract.FilterLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return &TestLogsIterator{contract: _Test.contract, event: "logs", logs: logs, sub: sub}, nil
}

// WatchLogs is a free log subscription operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_Test *TestFilterer) WatchLogs(opts *bind.WatchOpts, sink chan<- *TestLogs) (event.Subscription, error) {

	logs, sub, err := _Test.contract.WatchLogs(opts, "logs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestLogs)
				if err := _Test.contract.UnpackLog(event, "logs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogs is a log parse operation binding the contract event 0xe7950ede0394b9f2ce4a5a1bf5a7e1852411f7e6661b4308c913c4bfd11027e4.
//
// Solidity: event logs(bytes arg0)
func (_Test *TestFilterer) ParseLogs(log types.Log) (*TestLogs, error) {
	event := new(TestLogs)
	if err := _Test.contract.UnpackLog(event, "logs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestBaseMetaData contains all meta data concerning the TestBase contract.
var TestBaseMetaData = &bind.MetaData{
	ABI: "[]",
}

// TestBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBaseMetaData.ABI instead.
var TestBaseABI = TestBaseMetaData.ABI

// TestBase is an auto generated Go binding around an Ethereum contract.
type TestBase struct {
	TestBaseCaller     // Read-only binding to the contract
	TestBaseTransactor // Write-only binding to the contract
	TestBaseFilterer   // Log filterer for contract events
}

// TestBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestBaseSession struct {
	Contract     *TestBase         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestBaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestBaseCallerSession struct {
	Contract *TestBaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TestBaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestBaseTransactorSession struct {
	Contract     *TestBaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TestBaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestBaseRaw struct {
	Contract *TestBase // Generic contract binding to access the raw methods on
}

// TestBaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestBaseCallerRaw struct {
	Contract *TestBaseCaller // Generic read-only contract binding to access the raw methods on
}

// TestBaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestBaseTransactorRaw struct {
	Contract *TestBaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestBase creates a new instance of TestBase, bound to a specific deployed contract.
func NewTestBase(address common.Address, backend bind.ContractBackend) (*TestBase, error) {
	contract, err := bindTestBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestBase{TestBaseCaller: TestBaseCaller{contract: contract}, TestBaseTransactor: TestBaseTransactor{contract: contract}, TestBaseFilterer: TestBaseFilterer{contract: contract}}, nil
}

// NewTestBaseCaller creates a new read-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseCaller(address common.Address, caller bind.ContractCaller) (*TestBaseCaller, error) {
	contract, err := bindTestBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseCaller{contract: contract}, nil
}

// NewTestBaseTransactor creates a new write-only instance of TestBase, bound to a specific deployed contract.
func NewTestBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TestBaseTransactor, error) {
	contract, err := bindTestBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestBaseTransactor{contract: contract}, nil
}

// NewTestBaseFilterer creates a new log filterer instance of TestBase, bound to a specific deployed contract.
func NewTestBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TestBaseFilterer, error) {
	contract, err := bindTestBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestBaseFilterer{contract: contract}, nil
}

// bindTestBase binds a generic wrapper to an already deployed contract.
func bindTestBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TestBaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.TestBaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.TestBaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBase *TestBaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBase.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBase *TestBaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBase *TestBaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBase.Contract.contract.Transact(opts, method, params...)
}

// VmMetaData contains all meta data concerning the Vm contract.
var VmMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"accesses\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"readSlots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"writeSlots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"keyAddr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowCheatcodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertFalse\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assertFalse\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assertTrue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertTrue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assume\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlobBaseFee\",\"type\":\"uint256\"}],\"name\":\"blobBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"blobhashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"char\",\"type\":\"string\"}],\"name\":\"breakpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"char\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"breakpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainId\",\"type\":\"uint256\"}],\"name\":\"chainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearMockedCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"closeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCoinbase\",\"type\":\"address\"}],\"name\":\"coinbase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"computeCreateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"copyFile\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"copied\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"recursive\",\"type\":\"bool\"}],\"name\":\"createDir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"}],\"name\":\"createFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"createFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"createSelectFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"createSelectFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"urlOrAlias\",\"type\":\"string\"}],\"name\":\"createSelectFork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"walletLabel\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletLabel\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"deleteSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivationPath\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"language\",\"type\":\"string\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"language\",\"type\":\"string\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivationPath\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDifficulty\",\"type\":\"uint256\"}],\"name\":\"difficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathToStateJson\",\"type\":\"string\"}],\"name\":\"dumpState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ensNamehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBool\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBytes\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBytes32\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envInt\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"defaultValue\",\"type\":\"bytes32[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"defaultValue\",\"type\":\"int256[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"defaultValue\",\"type\":\"bool\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultValue\",\"type\":\"address\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"defaultValue\",\"type\":\"uint256\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"defaultValue\",\"type\":\"bytes[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"defaultValue\",\"type\":\"uint256[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"defaultValue\",\"type\":\"string[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"defaultValue\",\"type\":\"bytes\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"defaultValue\",\"type\":\"bytes32\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"defaultValue\",\"type\":\"int256\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"defaultValue\",\"type\":\"address[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"defaultValue\",\"type\":\"string\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"defaultValue\",\"type\":\"bool[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envUint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"newRuntimeBytecode\",\"type\":\"bytes\"}],\"name\":\"etch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"}],\"name\":\"eth_getLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"transactionIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.EthGetLogs[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"expectCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minGas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"expectCallMinGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minGas\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"expectCallMinGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkTopic1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkTopic2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkTopic3\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkData\",\"type\":\"bool\"}],\"name\":\"expectEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkTopic1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkTopic2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkTopic3\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"checkData\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"expectEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"expectEmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"revertData\",\"type\":\"bytes4\"}],\"name\":\"expectRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"expectRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"expectSafeMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"expectSafeMemoryCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasefee\",\"type\":\"uint256\"}],\"name\":\"fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"commandInput\",\"type\":\"string[]\"}],\"name\":\"ffi\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"fsMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readOnly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"modified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accessed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.FsMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlobBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blobBaseFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlobhashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"artifactPath\",\"type\":\"string\"}],\"name\":\"getCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"creationBytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"artifactPath\",\"type\":\"string\"}],\"name\":\"getDeployedCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"runtimeBytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLabel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentLabel\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"elementSlot\",\"type\":\"bytes32\"}],\"name\":\"getMappingKeyAndParentOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"mappingSlot\",\"type\":\"bytes32\"}],\"name\":\"getMappingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"mappingSlot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getMappingSlotAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecordedLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"internalType\":\"structVmSafe.Log[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumVmSafe.ForgeContext\",\"name\":\"context\",\"type\":\"uint8\"}],\"name\":\"isContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"isDir\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"isFile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPersistent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"persistent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExistsJson\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExistsToml\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newLabel\",\"type\":\"string\"}],\"name\":\"label\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCallGas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasTotalUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasMemoryUsed\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"gasRefunded\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"gasRemaining\",\"type\":\"uint64\"}],\"internalType\":\"structVmSafe.Gas\",\"name\":\"gas\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"load\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathToAllocsJson\",\"type\":\"string\"}],\"name\":\"loadAllocs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"makePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\"}],\"name\":\"makePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"makePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account2\",\"type\":\"address\"}],\"name\":\"makePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"mockCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"mockCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"mockCallRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"mockCallRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parsedValue\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"parsedValue\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"parsedValue\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parsedValue\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"parsedValue\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"name\":\"parseJson\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJson\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBoolArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytesArray\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonIntArray\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseToml\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"}],\"name\":\"parseToml\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBoolArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytesArray\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlIntArray\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parsedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGasMetering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"}],\"name\":\"prank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"prank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newPrevrandao\",\"type\":\"bytes32\"}],\"name\":\"prevrandao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrevrandao\",\"type\":\"uint256\"}],\"name\":\"prevrandao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptSecret\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readCallers\",\"outputs\":[{\"internalType\":\"enumVmSafe.CallerMode\",\"name\":\"callerMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"maxDepth\",\"type\":\"uint64\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"maxDepth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"followLinks\",\"type\":\"bool\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readFile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readFileBinary\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readLine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"line\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"linkPath\",\"type\":\"string\"}],\"name\":\"readLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"targetPath\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordLogs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"rememberKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"keyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"recursive\",\"type\":\"bool\"}],\"name\":\"removeDir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"removeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"replace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"resetNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeGasMetering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"revertTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"revertToAndDelete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"revokePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokePersistent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHeight\",\"type\":\"uint256\"}],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"rollFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"rollFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"rollFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"rollFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"}],\"name\":\"rpc\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rpcAlias\",\"type\":\"string\"}],\"name\":\"rpcUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpcUrlStructs\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"structVmSafe.Rpc[]\",\"name\":\"urls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpcUrls\",\"outputs\":[{\"internalType\":\"string[2][]\",\"name\":\"urls\",\"type\":\"string[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"}],\"name\":\"selectFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"serializeAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"serializeAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"serializeBool\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"serializeBool\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"name\":\"serializeBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"serializeBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"serializeBytes32\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"serializeBytes32\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"serializeInt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"values\",\"type\":\"int256[]\"}],\"name\":\"serializeInt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"serializeJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"serializeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"serializeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"serializeUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"serializeUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"serializeUintToHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setEnv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"newNonce\",\"type\":\"uint64\"}],\"name\":\"setNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"newNonce\",\"type\":\"uint64\"}],\"name\":\"setNonceUnsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"signP256\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"skipTest\",\"type\":\"bool\"}],\"name\":\"skip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"sleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delimiter\",\"type\":\"string\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"outputs\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMappingRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"startPrank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"}],\"name\":\"startPrank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStateDiffRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAndReturnStateDiff\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.ChainInfo\",\"name\":\"chainInfo\",\"type\":\"tuple\"},{\"internalType\":\"enumVmSafe.AccountAccessKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"deployedCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"reverted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isWrite\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"previousValue\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"reverted\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.StorageAccess[]\",\"name\":\"storageAccesses\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"}],\"internalType\":\"structVmSafe.AccountAccess[]\",\"name\":\"accountAccesses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopExpectSafeMemory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMappingRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPrank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"toBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"toBase64URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toBase64URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"toLowercase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"toUppercase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"trim\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"commandInput\",\"type\":\"string[]\"}],\"name\":\"tryFfi\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"exitCode\",\"type\":\"int32\"},{\"internalType\":\"bytes\",\"name\":\"stdout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stderr\",\"type\":\"bytes\"}],\"internalType\":\"structVmSafe.FfiResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasPrice\",\"type\":\"uint256\"}],\"name\":\"txGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"milliseconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"warp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"writeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"writeFileBinary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"}],\"name\":\"writeJson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"writeJson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"writeLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"}],\"name\":\"writeToml\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"writeToml\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"65bc9481": "accesses(address)",
		"2f103f22": "activeFork()",
		"ffa18649": "addr(uint256)",
		"ea060291": "allowCheatcodes(address)",
		"240f839d": "assertApproxEqAbs(int256,int256,uint256)",
		"8289e621": "assertApproxEqAbs(int256,int256,uint256,string)",
		"16d207c6": "assertApproxEqAbs(uint256,uint256,uint256)",
		"f710b062": "assertApproxEqAbs(uint256,uint256,uint256,string)",
		"3d5bc8bc": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256)",
		"6a5066d4": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)",
		"045c55ce": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)",
		"60429eb2": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)",
		"fea2d14f": "assertApproxEqRel(int256,int256,uint256)",
		"ef277d72": "assertApproxEqRel(int256,int256,uint256,string)",
		"8cf25ef4": "assertApproxEqRel(uint256,uint256,uint256)",
		"1ecb7d33": "assertApproxEqRel(uint256,uint256,uint256,string)",
		"abbf21cc": "assertApproxEqRelDecimal(int256,int256,uint256,uint256)",
		"fccc11c4": "assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)",
		"21ed2977": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)",
		"82d6c8fd": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)",
		"515361f6": "assertEq(address,address)",
		"2f2769d1": "assertEq(address,address,string)",
		"3868ac34": "assertEq(address[],address[])",
		"3e9173c5": "assertEq(address[],address[],string)",
		"f7fe3477": "assertEq(bool,bool)",
		"4db19e7e": "assertEq(bool,bool,string)",
		"707df785": "assertEq(bool[],bool[])",
		"e48a8f8d": "assertEq(bool[],bool[],string)",
		"97624631": "assertEq(bytes,bytes)",
		"e24fed00": "assertEq(bytes,bytes,string)",
		"7c84c69b": "assertEq(bytes32,bytes32)",
		"c1fa1ed0": "assertEq(bytes32,bytes32,string)",
		"0cc9ee84": "assertEq(bytes32[],bytes32[])",
		"e03e9177": "assertEq(bytes32[],bytes32[],string)",
		"e5fb9b4a": "assertEq(bytes[],bytes[])",
		"f413f0b6": "assertEq(bytes[],bytes[],string)",
		"fe74f05b": "assertEq(int256,int256)",
		"714a2f13": "assertEq(int256,int256,string)",
		"711043ac": "assertEq(int256[],int256[])",
		"191f1b30": "assertEq(int256[],int256[],string)",
		"f320d963": "assertEq(string,string)",
		"36f656d8": "assertEq(string,string,string)",
		"cf1c049c": "assertEq(string[],string[])",
		"eff6b27d": "assertEq(string[],string[],string)",
		"98296c54": "assertEq(uint256,uint256)",
		"88b44c85": "assertEq(uint256,uint256,string)",
		"975d5a12": "assertEq(uint256[],uint256[])",
		"5d18c73a": "assertEq(uint256[],uint256[],string)",
		"48016c04": "assertEqDecimal(int256,int256,uint256)",
		"7e77b0c5": "assertEqDecimal(int256,int256,uint256,string)",
		"27af7d9c": "assertEqDecimal(uint256,uint256,uint256)",
		"d0cbbdef": "assertEqDecimal(uint256,uint256,uint256,string)",
		"a5982885": "assertFalse(bool)",
		"7ba04809": "assertFalse(bool,string)",
		"0a30b771": "assertGe(int256,int256)",
		"a84328dd": "assertGe(int256,int256,string)",
		"a8d4d1d9": "assertGe(uint256,uint256)",
		"e25242c0": "assertGe(uint256,uint256,string)",
		"dc28c0f1": "assertGeDecimal(int256,int256,uint256)",
		"5df93c9b": "assertGeDecimal(int256,int256,uint256,string)",
		"3d1fe08a": "assertGeDecimal(uint256,uint256,uint256)",
		"8bff9133": "assertGeDecimal(uint256,uint256,uint256,string)",
		"5a362d45": "assertGt(int256,int256)",
		"f8d33b9b": "assertGt(int256,int256,string)",
		"db07fcd2": "assertGt(uint256,uint256)",
		"d9a3c4d2": "assertGt(uint256,uint256,string)",
		"78611f0e": "assertGtDecimal(int256,int256,uint256)",
		"04a5c7ab": "assertGtDecimal(int256,int256,uint256,string)",
		"eccd2437": "assertGtDecimal(uint256,uint256,uint256)",
		"64949a8d": "assertGtDecimal(uint256,uint256,uint256,string)",
		"95fd154e": "assertLe(int256,int256)",
		"4dfe692c": "assertLe(int256,int256,string)",
		"8466f415": "assertLe(uint256,uint256)",
		"d17d4b0d": "assertLe(uint256,uint256,string)",
		"11d1364a": "assertLeDecimal(int256,int256,uint256)",
		"aa5cf788": "assertLeDecimal(int256,int256,uint256,string)",
		"c304aab7": "assertLeDecimal(uint256,uint256,uint256)",
		"7fefbbe0": "assertLeDecimal(uint256,uint256,uint256,string)",
		"3e914080": "assertLt(int256,int256)",
		"9ff531e3": "assertLt(int256,int256,string)",
		"b12fc005": "assertLt(uint256,uint256)",
		"65d5c135": "assertLt(uint256,uint256,string)",
		"dbe8d88b": "assertLtDecimal(int256,int256,uint256)",
		"40f0b4e0": "assertLtDecimal(int256,int256,uint256,string)",
		"2077337e": "assertLtDecimal(uint256,uint256,uint256)",
		"a972d037": "assertLtDecimal(uint256,uint256,uint256,string)",
		"b12e1694": "assertNotEq(address,address)",
		"8775a591": "assertNotEq(address,address,string)",
		"46d0b252": "assertNotEq(address[],address[])",
		"72c7e0b5": "assertNotEq(address[],address[],string)",
		"236e4d66": "assertNotEq(bool,bool)",
		"1091a261": "assertNotEq(bool,bool,string)",
		"286fafea": "assertNotEq(bool[],bool[])",
		"62c6f9fb": "assertNotEq(bool[],bool[],string)",
		"3cf78e28": "assertNotEq(bytes,bytes)",
		"9507540e": "assertNotEq(bytes,bytes,string)",
		"898e83fc": "assertNotEq(bytes32,bytes32)",
		"b2332f51": "assertNotEq(bytes32,bytes32,string)",
		"0603ea68": "assertNotEq(bytes32[],bytes32[])",
		"b873634c": "assertNotEq(bytes32[],bytes32[],string)",
		"edecd035": "assertNotEq(bytes[],bytes[])",
		"1dcd1f68": "assertNotEq(bytes[],bytes[],string)",
		"f4c004e3": "assertNotEq(int256,int256)",
		"4724c5b9": "assertNotEq(int256,int256,string)",
		"0b72f4ef": "assertNotEq(int256[],int256[])",
		"d3977322": "assertNotEq(int256[],int256[],string)",
		"6a8237b3": "assertNotEq(string,string)",
		"78bdcea7": "assertNotEq(string,string,string)",
		"bdfacbe8": "assertNotEq(string[],string[])",
		"b67187f3": "assertNotEq(string[],string[],string)",
		"b7909320": "assertNotEq(uint256,uint256)",
		"98f9bdbd": "assertNotEq(uint256,uint256,string)",
		"56f29cba": "assertNotEq(uint256[],uint256[])",
		"9a7fbd8f": "assertNotEq(uint256[],uint256[],string)",
		"14e75680": "assertNotEqDecimal(int256,int256,uint256)",
		"33949f0b": "assertNotEqDecimal(int256,int256,uint256,string)",
		"669efca7": "assertNotEqDecimal(uint256,uint256,uint256)",
		"f5a55558": "assertNotEqDecimal(uint256,uint256,uint256,string)",
		"0c9fd581": "assertTrue(bool)",
		"a34edc03": "assertTrue(bool,string)",
		"4c63e562": "assume(bool)",
		"6d315d7e": "blobBaseFee(uint256)",
		"129de7eb": "blobhashes(bytes32[])",
		"f0259e92": "breakpoint(string)",
		"f7d39a8d": "breakpoint(string,bool)",
		"afc98040": "broadcast()",
		"e6962cdb": "broadcast(address)",
		"f67a965b": "broadcast(uint256)",
		"4049ddd2": "chainId(uint256)",
		"3fdf4e15": "clearMockedCalls()",
		"48c3241f": "closeFile(string)",
		"ff483c54": "coinbase(address)",
		"890c283b": "computeCreate2Address(bytes32,bytes32)",
		"d323826a": "computeCreate2Address(bytes32,bytes32,address)",
		"74637a7a": "computeCreateAddress(address,uint256)",
		"a54a87d8": "copyFile(string,string)",
		"168b64d3": "createDir(string,bool)",
		"31ba3498": "createFork(string)",
		"7ca29682": "createFork(string,bytes32)",
		"6ba3ba2b": "createFork(string,uint256)",
		"98680034": "createSelectFork(string)",
		"84d52b7a": "createSelectFork(string,bytes32)",
		"71ee464d": "createSelectFork(string,uint256)",
		"7404f1d2": "createWallet(string)",
		"7a675bb6": "createWallet(uint256)",
		"ed7c5462": "createWallet(uint256,string)",
		"c88a5e6d": "deal(address,uint256)",
		"a6368557": "deleteSnapshot(uint256)",
		"421ae469": "deleteSnapshots()",
		"6bcb2c1b": "deriveKey(string,string,uint32)",
		"29233b1f": "deriveKey(string,string,uint32,string)",
		"6229498b": "deriveKey(string,uint32)",
		"32c8176d": "deriveKey(string,uint32,string)",
		"46cc92d9": "difficulty(uint256)",
		"709ecd3f": "dumpState(string)",
		"8c374c65": "ensNamehash(string)",
		"350d56bf": "envAddress(string)",
		"ad31b9fa": "envAddress(string,string)",
		"7ed1ec7d": "envBool(string)",
		"aaaddeaf": "envBool(string,string)",
		"4d7baf06": "envBytes(string)",
		"ddc2651b": "envBytes(string,string)",
		"97949042": "envBytes32(string)",
		"5af231c1": "envBytes32(string,string)",
		"ce8365f9": "envExists(string)",
		"892a0c61": "envInt(string)",
		"42181150": "envInt(string,string)",
		"561fe540": "envOr(string,address)",
		"4777f3cf": "envOr(string,bool)",
		"b3e47705": "envOr(string,bytes)",
		"b4a85892": "envOr(string,bytes32)",
		"bbcb713e": "envOr(string,int256)",
		"d145736c": "envOr(string,string)",
		"c74e9deb": "envOr(string,string,address[])",
		"eb85e83b": "envOr(string,string,bool[])",
		"2281f367": "envOr(string,string,bytes32[])",
		"64bc3e64": "envOr(string,string,bytes[])",
		"4700d74b": "envOr(string,string,int256[])",
		"859216bc": "envOr(string,string,string[])",
		"74318528": "envOr(string,string,uint256[])",
		"5e97348f": "envOr(string,uint256)",
		"f877cb19": "envString(string)",
		"14b02bc9": "envString(string,string)",
		"c1978d1f": "envUint(string)",
		"f3dec099": "envUint(string,string)",
		"b4d6c782": "etch(address,bytes)",
		"35e1349b": "eth_getLogs(uint256,uint256,address,bytes32[])",
		"261a323e": "exists(string)",
		"bd6af434": "expectCall(address,bytes)",
		"c1adbbff": "expectCall(address,bytes,uint64)",
		"f30c7ba3": "expectCall(address,uint256,bytes)",
		"a2b1a1ae": "expectCall(address,uint256,bytes,uint64)",
		"23361207": "expectCall(address,uint256,uint64,bytes)",
		"65b7b7cc": "expectCall(address,uint256,uint64,bytes,uint64)",
		"08e4e116": "expectCallMinGas(address,uint256,uint64,bytes)",
		"e13a1834": "expectCallMinGas(address,uint256,uint64,bytes,uint64)",
		"440ed10d": "expectEmit()",
		"86b9620d": "expectEmit(address)",
		"491cc7c2": "expectEmit(bool,bool,bool,bool)",
		"81bad6f3": "expectEmit(bool,bool,bool,bool,address)",
		"f4844814": "expectRevert()",
		"f28dceb3": "expectRevert(bytes)",
		"c31eb0e0": "expectRevert(bytes4)",
		"6d016688": "expectSafeMemory(uint64,uint64)",
		"05838bf4": "expectSafeMemoryCall(uint64,uint64)",
		"39b37ab0": "fee(uint256)",
		"89160467": "ffi(string[])",
		"af368a08": "fsMetadata(string)",
		"1f6d6ef7": "getBlobBaseFee()",
		"f56ff18b": "getBlobhashes()",
		"42cbb15c": "getBlockNumber()",
		"796b89b9": "getBlockTimestamp()",
		"8d1cc925": "getCode(string)",
		"3ebf73b4": "getDeployedCode(string)",
		"28a249b0": "getLabel(address)",
		"876e24e6": "getMappingKeyAndParentOf(address,bytes32)",
		"2f2fd63f": "getMappingLength(address,bytes32)",
		"ebc73ab4": "getMappingSlotAt(address,bytes32,uint256)",
		"a5748aad": "getNonce((address,uint256,uint256,uint256))",
		"2d0335ab": "getNonce(address)",
		"191553a4": "getRecordedLogs()",
		"8a0807b7": "indexOf(string,string)",
		"64af255d": "isContext(uint8)",
		"7d15d019": "isDir(string)",
		"e0eb04d4": "isFile(string)",
		"d92d8efd": "isPersistent(address)",
		"528a683c": "keyExists(string,string)",
		"db4235f6": "keyExistsJson(string,string)",
		"600903ad": "keyExistsToml(string,string)",
		"c657c718": "label(address,string)",
		"2b589b28": "lastCallGas()",
		"667f9d70": "load(address,bytes32)",
		"b3a056d7": "loadAllocs(string)",
		"57e22dde": "makePersistent(address)",
		"4074e0a8": "makePersistent(address,address)",
		"efb77a75": "makePersistent(address,address,address)",
		"1d9e269e": "makePersistent(address[])",
		"b96213e4": "mockCall(address,bytes,bytes)",
		"81409b91": "mockCall(address,uint256,bytes,bytes)",
		"dbaad147": "mockCallRevert(address,bytes,bytes)",
		"d23cd037": "mockCallRevert(address,uint256,bytes,bytes)",
		"c6ce059d": "parseAddress(string)",
		"974ef924": "parseBool(string)",
		"8f5d232d": "parseBytes(string)",
		"087e6e81": "parseBytes32(string)",
		"42346c5e": "parseInt(string)",
		"6a82600a": "parseJson(string)",
		"85940ef1": "parseJson(string,string)",
		"1e19e657": "parseJsonAddress(string,string)",
		"2fce7883": "parseJsonAddressArray(string,string)",
		"9f86dc91": "parseJsonBool(string,string)",
		"91f3b94f": "parseJsonBoolArray(string,string)",
		"fd921be8": "parseJsonBytes(string,string)",
		"1777e59d": "parseJsonBytes32(string,string)",
		"91c75bc3": "parseJsonBytes32Array(string,string)",
		"6631aa99": "parseJsonBytesArray(string,string)",
		"7b048ccd": "parseJsonInt(string,string)",
		"9983c28a": "parseJsonIntArray(string,string)",
		"213e4198": "parseJsonKeys(string,string)",
		"49c4fac8": "parseJsonString(string,string)",
		"498fdcf4": "parseJsonStringArray(string,string)",
		"addde2b6": "parseJsonUint(string,string)",
		"522074ab": "parseJsonUintArray(string,string)",
		"592151f0": "parseToml(string)",
		"37736e08": "parseToml(string,string)",
		"65e7c844": "parseTomlAddress(string,string)",
		"65c428e7": "parseTomlAddressArray(string,string)",
		"d30dced6": "parseTomlBool(string,string)",
		"127cfe9a": "parseTomlBoolArray(string,string)",
		"d77bfdb9": "parseTomlBytes(string,string)",
		"8e214810": "parseTomlBytes32(string,string)",
		"3e716f81": "parseTomlBytes32Array(string,string)",
		"b197c247": "parseTomlBytesArray(string,string)",
		"c1350739": "parseTomlInt(string,string)",
		"d3522ae6": "parseTomlIntArray(string,string)",
		"812a44b2": "parseTomlKeys(string,string)",
		"8bb8dd43": "parseTomlString(string,string)",
		"9f629281": "parseTomlStringArray(string,string)",
		"cc7b0487": "parseTomlUint(string,string)",
		"b5df27c8": "parseTomlUintArray(string,string)",
		"fa91454d": "parseUint(string)",
		"d1a5b36f": "pauseGasMetering()",
		"ca669fa7": "prank(address)",
		"47e50cce": "prank(address,address)",
		"3b925549": "prevrandao(bytes32)",
		"9cb1c0d4": "prevrandao(uint256)",
		"d930a0e6": "projectRoot()",
		"47eaf474": "prompt(string)",
		"62ee05f4": "promptAddress(string)",
		"1e279d41": "promptSecret(string)",
		"652fd489": "promptUint(string)",
		"4ad0bac9": "readCallers()",
		"c4bc59e0": "readDir(string)",
		"1497876c": "readDir(string,uint64)",
		"8102d70d": "readDir(string,uint64,bool)",
		"60f9bb11": "readFile(string)",
		"16ed7bc4": "readFileBinary(string)",
		"70f55728": "readLine(string)",
		"9f5684a2": "readLink(string)",
		"266cf109": "record()",
		"41af2f52": "recordLogs()",
		"22100064": "rememberKey(uint256)",
		"45c62011": "removeDir(string,bool)",
		"f1afe04d": "removeFile(string)",
		"e00ad03e": "replace(string,string,string)",
		"1c72346d": "resetNonce(address)",
		"2bcd50e0": "resumeGasMetering()",
		"44d7f0a4": "revertTo(uint256)",
		"03e0aca9": "revertToAndDelete(uint256)",
		"997a0222": "revokePersistent(address)",
		"3ce969e6": "revokePersistent(address[])",
		"1f7b4f30": "roll(uint256)",
		"0f29772b": "rollFork(bytes32)",
		"d9bbf3a1": "rollFork(uint256)",
		"f2830f7b": "rollFork(uint256,bytes32)",
		"d74c83a4": "rollFork(uint256,uint256)",
		"1206c8a8": "rpc(string,string)",
		"975a6ce9": "rpcUrl(string)",
		"9d2ad72a": "rpcUrlStructs()",
		"a85a8418": "rpcUrls()",
		"9ebf6827": "selectFork(uint256)",
		"972c6062": "serializeAddress(string,string,address)",
		"1e356e1a": "serializeAddress(string,string,address[])",
		"ac22e971": "serializeBool(string,string,bool)",
		"92925aa1": "serializeBool(string,string,bool[])",
		"f21d52c7": "serializeBytes(string,string,bytes)",
		"9884b232": "serializeBytes(string,string,bytes[])",
		"2d812b44": "serializeBytes32(string,string,bytes32)",
		"201e43e2": "serializeBytes32(string,string,bytes32[])",
		"3f33db60": "serializeInt(string,string,int256)",
		"7676e127": "serializeInt(string,string,int256[])",
		"9b3358b0": "serializeJson(string,string)",
		"88da6d35": "serializeString(string,string,string)",
		"561cd6f3": "serializeString(string,string,string[])",
		"129e9002": "serializeUint(string,string,uint256)",
		"fee9a469": "serializeUint(string,string,uint256[])",
		"ae5a2ae8": "serializeUintToHex(string,string,uint256)",
		"3d5923ee": "setEnv(string,string)",
		"f8e18b57": "setNonce(address,uint64)",
		"9b67b21c": "setNonceUnsafe(address,uint64)",
		"b25c5a25": "sign((address,uint256,uint256,uint256),bytes32)",
		"8c1aa205": "sign(address,bytes32)",
		"799cd333": "sign(bytes32)",
		"e341eaa4": "sign(uint256,bytes32)",
		"83211b40": "signP256(uint256,bytes32)",
		"dd82d13e": "skip(bool)",
		"fa9d8713": "sleep(uint256)",
		"9711715a": "snapshot()",
		"8bb75533": "split(string,string)",
		"7fb5297f": "startBroadcast()",
		"7fec2a8d": "startBroadcast(address)",
		"ce817d47": "startBroadcast(uint256)",
		"3e9705c0": "startMappingRecording()",
		"06447d56": "startPrank(address)",
		"45b56078": "startPrank(address,address)",
		"cf22e3c9": "startStateDiffRecording()",
		"aa5cf90e": "stopAndReturnStateDiff()",
		"76eadd36": "stopBroadcast()",
		"0956441b": "stopExpectSafeMemory()",
		"0d4aae9b": "stopMappingRecording()",
		"90c5013b": "stopPrank()",
		"70ca10bb": "store(address,bytes32,bytes32)",
		"a5cbfe65": "toBase64(bytes)",
		"3f8be2c8": "toBase64(string)",
		"c8bd0e4a": "toBase64URL(bytes)",
		"ae3165b3": "toBase64URL(string)",
		"50bb0884": "toLowercase(string)",
		"56ca623e": "toString(address)",
		"71dce7da": "toString(bool)",
		"71aad10d": "toString(bytes)",
		"b11a19e8": "toString(bytes32)",
		"a322c40e": "toString(int256)",
		"6900a3ae": "toString(uint256)",
		"074ae3d7": "toUppercase(string)",
		"be646da1": "transact(bytes32)",
		"4d8abc4b": "transact(uint256,bytes32)",
		"b2dad155": "trim(string)",
		"f45c1ce7": "tryFfi(string[])",
		"48f50c0f": "txGasPrice(uint256)",
		"625387dc": "unixTime()",
		"e5d6bf02": "warp(uint256)",
		"897e0a97": "writeFile(string,string)",
		"1f21fc80": "writeFileBinary(string,bytes)",
		"e23cd19f": "writeJson(string,string)",
		"35d6ad46": "writeJson(string,string,string)",
		"619d897f": "writeLine(string,string)",
		"c0865ba7": "writeToml(string,string)",
		"51ac6a33": "writeToml(string,string,string)",
	},
}

// VmABI is the input ABI used to generate the binding from.
// Deprecated: Use VmMetaData.ABI instead.
var VmABI = VmMetaData.ABI

// Deprecated: Use VmMetaData.Sigs instead.
// VmFuncSigs maps the 4-byte function signature to its string representation.
var VmFuncSigs = VmMetaData.Sigs

// Vm is an auto generated Go binding around an Ethereum contract.
type Vm struct {
	VmCaller     // Read-only binding to the contract
	VmTransactor // Write-only binding to the contract
	VmFilterer   // Log filterer for contract events
}

// VmCaller is an auto generated read-only Go binding around an Ethereum contract.
type VmCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VmTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VmFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VmSession struct {
	Contract     *Vm               // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VmCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VmCallerSession struct {
	Contract *VmCaller     // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VmTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VmTransactorSession struct {
	Contract     *VmTransactor     // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VmRaw is an auto generated low-level Go binding around an Ethereum contract.
type VmRaw struct {
	Contract *Vm // Generic contract binding to access the raw methods on
}

// VmCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VmCallerRaw struct {
	Contract *VmCaller // Generic read-only contract binding to access the raw methods on
}

// VmTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VmTransactorRaw struct {
	Contract *VmTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVm creates a new instance of Vm, bound to a specific deployed contract.
func NewVm(address common.Address, backend bind.ContractBackend) (*Vm, error) {
	contract, err := bindVm(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vm{VmCaller: VmCaller{contract: contract}, VmTransactor: VmTransactor{contract: contract}, VmFilterer: VmFilterer{contract: contract}}, nil
}

// NewVmCaller creates a new read-only instance of Vm, bound to a specific deployed contract.
func NewVmCaller(address common.Address, caller bind.ContractCaller) (*VmCaller, error) {
	contract, err := bindVm(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VmCaller{contract: contract}, nil
}

// NewVmTransactor creates a new write-only instance of Vm, bound to a specific deployed contract.
func NewVmTransactor(address common.Address, transactor bind.ContractTransactor) (*VmTransactor, error) {
	contract, err := bindVm(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VmTransactor{contract: contract}, nil
}

// NewVmFilterer creates a new log filterer instance of Vm, bound to a specific deployed contract.
func NewVmFilterer(address common.Address, filterer bind.ContractFilterer) (*VmFilterer, error) {
	contract, err := bindVm(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VmFilterer{contract: contract}, nil
}

// bindVm binds a generic wrapper to an already deployed contract.
func bindVm(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VmMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vm *VmRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vm.Contract.VmCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vm *VmRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.Contract.VmTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vm *VmRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vm.Contract.VmTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vm *VmCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vm.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vm *VmTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vm *VmTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vm.Contract.contract.Transact(opts, method, params...)
}

// ActiveFork is a free data retrieval call binding the contract method 0x2f103f22.
//
// Solidity: function activeFork() view returns(uint256 forkId)
func (_Vm *VmCaller) ActiveFork(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "activeFork")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActiveFork is a free data retrieval call binding the contract method 0x2f103f22.
//
// Solidity: function activeFork() view returns(uint256 forkId)
func (_Vm *VmSession) ActiveFork() (*big.Int, error) {
	return _Vm.Contract.ActiveFork(&_Vm.CallOpts)
}

// ActiveFork is a free data retrieval call binding the contract method 0x2f103f22.
//
// Solidity: function activeFork() view returns(uint256 forkId)
func (_Vm *VmCallerSession) ActiveFork() (*big.Int, error) {
	return _Vm.Contract.ActiveFork(&_Vm.CallOpts)
}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_Vm *VmCaller) Addr(opts *bind.CallOpts, privateKey *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "addr", privateKey)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_Vm *VmSession) Addr(privateKey *big.Int) (common.Address, error) {
	return _Vm.Contract.Addr(&_Vm.CallOpts, privateKey)
}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_Vm *VmCallerSession) Addr(privateKey *big.Int) (common.Address, error) {
	return _Vm.Contract.Addr(&_Vm.CallOpts, privateKey)
}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbs(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbs", left, right, maxDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_Vm *VmSession) AssertApproxEqAbs(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbs(&_Vm.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbs(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbs(&_Vm.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbs0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbs0", left, right, maxDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_Vm *VmSession) AssertApproxEqAbs0(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbs0(&_Vm.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbs0(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbs0(&_Vm.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbs1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbs1", left, right, maxDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqAbs1(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbs1(&_Vm.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbs1(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbs1(&_Vm.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbs2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbs2", left, right, maxDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqAbs2(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbs2(&_Vm.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbs2(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbs2(&_Vm.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbsDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbsDecimal", left, right, maxDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertApproxEqAbsDecimal(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal(&_Vm.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbsDecimal(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal(&_Vm.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbsDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbsDecimal0", left, right, maxDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertApproxEqAbsDecimal0(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal0(&_Vm.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbsDecimal0(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal0(&_Vm.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbsDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbsDecimal1", left, right, maxDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqAbsDecimal1(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal1(&_Vm.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbsDecimal1(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal1(&_Vm.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqAbsDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqAbsDecimal2", left, right, maxDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqAbsDecimal2(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal2(&_Vm.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqAbsDecimal2(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqAbsDecimal2(&_Vm.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqRel(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRel", left, right, maxPercentDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqRel(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRel(&_Vm.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRel(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRel(&_Vm.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmCaller) AssertApproxEqRel0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRel0", left, right, maxPercentDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmSession) AssertApproxEqRel0(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqRel0(&_Vm.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRel0(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqRel0(&_Vm.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqRel1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRel1", left, right, maxPercentDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqRel1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRel1(&_Vm.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRel1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRel1(&_Vm.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmCaller) AssertApproxEqRel2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRel2", left, right, maxPercentDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmSession) AssertApproxEqRel2(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqRel2(&_Vm.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRel2(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _Vm.Contract.AssertApproxEqRel2(&_Vm.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertApproxEqRelDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRelDecimal", left, right, maxPercentDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertApproxEqRelDecimal(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqRelDecimal(&_Vm.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRelDecimal(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqRelDecimal(&_Vm.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqRelDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRelDecimal0", left, right, maxPercentDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqRelDecimal0(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRelDecimal0(&_Vm.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRelDecimal0(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRelDecimal0(&_Vm.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertApproxEqRelDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRelDecimal1", left, right, maxPercentDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertApproxEqRelDecimal1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqRelDecimal1(&_Vm.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRelDecimal1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertApproxEqRelDecimal1(&_Vm.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertApproxEqRelDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertApproxEqRelDecimal2", left, right, maxPercentDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertApproxEqRelDecimal2(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRelDecimal2(&_Vm.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertApproxEqRelDecimal2(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertApproxEqRelDecimal2(&_Vm.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmCaller) AssertEq(opts *bind.CallOpts, left [][32]byte, right [][32]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmSession) AssertEq(left [][32]byte, right [][32]byte) error {
	return _Vm.Contract.AssertEq(&_Vm.CallOpts, left, right)
}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq(left [][32]byte, right [][32]byte) error {
	return _Vm.Contract.AssertEq(&_Vm.CallOpts, left, right)
}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq0(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq0(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertEq0(&_Vm.CallOpts, left, right, error)
}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq0(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertEq0(&_Vm.CallOpts, left, right, error)
}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_Vm *VmCaller) AssertEq1(opts *bind.CallOpts, left common.Address, right common.Address, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_Vm *VmSession) AssertEq1(left common.Address, right common.Address, error string) error {
	return _Vm.Contract.AssertEq1(&_Vm.CallOpts, left, right, error)
}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq1(left common.Address, right common.Address, error string) error {
	return _Vm.Contract.AssertEq1(&_Vm.CallOpts, left, right, error)
}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertEq10(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq10", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertEq10(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertEq10(&_Vm.CallOpts, left, right, error)
}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq10(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertEq10(&_Vm.CallOpts, left, right, error)
}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmCaller) AssertEq11(opts *bind.CallOpts, left [32]byte, right [32]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq11", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmSession) AssertEq11(left [32]byte, right [32]byte) error {
	return _Vm.Contract.AssertEq11(&_Vm.CallOpts, left, right)
}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmCallerSession) AssertEq11(left [32]byte, right [32]byte) error {
	return _Vm.Contract.AssertEq11(&_Vm.CallOpts, left, right)
}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertEq12(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq12", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertEq12(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertEq12(&_Vm.CallOpts, left, right, error)
}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq12(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertEq12(&_Vm.CallOpts, left, right, error)
}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmCaller) AssertEq13(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq13", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmSession) AssertEq13(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertEq13(&_Vm.CallOpts, left, right)
}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq13(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertEq13(&_Vm.CallOpts, left, right)
}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_Vm *VmCaller) AssertEq14(opts *bind.CallOpts, left []byte, right []byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq14", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_Vm *VmSession) AssertEq14(left []byte, right []byte) error {
	return _Vm.Contract.AssertEq14(&_Vm.CallOpts, left, right)
}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_Vm *VmCallerSession) AssertEq14(left []byte, right []byte) error {
	return _Vm.Contract.AssertEq14(&_Vm.CallOpts, left, right)
}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertEq15(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq15", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertEq15(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertEq15(&_Vm.CallOpts, left, right)
}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertEq15(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertEq15(&_Vm.CallOpts, left, right)
}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmCaller) AssertEq16(opts *bind.CallOpts, left [32]byte, right [32]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq16", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmSession) AssertEq16(left [32]byte, right [32]byte, error string) error {
	return _Vm.Contract.AssertEq16(&_Vm.CallOpts, left, right, error)
}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq16(left [32]byte, right [32]byte, error string) error {
	return _Vm.Contract.AssertEq16(&_Vm.CallOpts, left, right, error)
}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_Vm *VmCaller) AssertEq17(opts *bind.CallOpts, left []string, right []string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq17", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_Vm *VmSession) AssertEq17(left []string, right []string) error {
	return _Vm.Contract.AssertEq17(&_Vm.CallOpts, left, right)
}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq17(left []string, right []string) error {
	return _Vm.Contract.AssertEq17(&_Vm.CallOpts, left, right)
}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq18(opts *bind.CallOpts, left [][32]byte, right [][32]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq18", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq18(left [][32]byte, right [][32]byte, error string) error {
	return _Vm.Contract.AssertEq18(&_Vm.CallOpts, left, right, error)
}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq18(left [][32]byte, right [][32]byte, error string) error {
	return _Vm.Contract.AssertEq18(&_Vm.CallOpts, left, right, error)
}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmCaller) AssertEq19(opts *bind.CallOpts, left []byte, right []byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq19", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmSession) AssertEq19(left []byte, right []byte, error string) error {
	return _Vm.Contract.AssertEq19(&_Vm.CallOpts, left, right, error)
}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq19(left []byte, right []byte, error string) error {
	return _Vm.Contract.AssertEq19(&_Vm.CallOpts, left, right, error)
}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_Vm *VmCaller) AssertEq2(opts *bind.CallOpts, left string, right string, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_Vm *VmSession) AssertEq2(left string, right string, error string) error {
	return _Vm.Contract.AssertEq2(&_Vm.CallOpts, left, right, error)
}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq2(left string, right string, error string) error {
	return _Vm.Contract.AssertEq2(&_Vm.CallOpts, left, right, error)
}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq20(opts *bind.CallOpts, left []bool, right []bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq20", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq20(left []bool, right []bool, error string) error {
	return _Vm.Contract.AssertEq20(&_Vm.CallOpts, left, right, error)
}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq20(left []bool, right []bool, error string) error {
	return _Vm.Contract.AssertEq20(&_Vm.CallOpts, left, right, error)
}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmCaller) AssertEq21(opts *bind.CallOpts, left [][]byte, right [][]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq21", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmSession) AssertEq21(left [][]byte, right [][]byte) error {
	return _Vm.Contract.AssertEq21(&_Vm.CallOpts, left, right)
}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq21(left [][]byte, right [][]byte) error {
	return _Vm.Contract.AssertEq21(&_Vm.CallOpts, left, right)
}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq22(opts *bind.CallOpts, left []string, right []string, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq22", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq22(left []string, right []string, error string) error {
	return _Vm.Contract.AssertEq22(&_Vm.CallOpts, left, right, error)
}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq22(left []string, right []string, error string) error {
	return _Vm.Contract.AssertEq22(&_Vm.CallOpts, left, right, error)
}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_Vm *VmCaller) AssertEq23(opts *bind.CallOpts, left string, right string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq23", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_Vm *VmSession) AssertEq23(left string, right string) error {
	return _Vm.Contract.AssertEq23(&_Vm.CallOpts, left, right)
}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_Vm *VmCallerSession) AssertEq23(left string, right string) error {
	return _Vm.Contract.AssertEq23(&_Vm.CallOpts, left, right)
}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq24(opts *bind.CallOpts, left [][]byte, right [][]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq24", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq24(left [][]byte, right [][]byte, error string) error {
	return _Vm.Contract.AssertEq24(&_Vm.CallOpts, left, right, error)
}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq24(left [][]byte, right [][]byte, error string) error {
	return _Vm.Contract.AssertEq24(&_Vm.CallOpts, left, right, error)
}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_Vm *VmCaller) AssertEq25(opts *bind.CallOpts, left bool, right bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq25", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_Vm *VmSession) AssertEq25(left bool, right bool) error {
	return _Vm.Contract.AssertEq25(&_Vm.CallOpts, left, right)
}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_Vm *VmCallerSession) AssertEq25(left bool, right bool) error {
	return _Vm.Contract.AssertEq25(&_Vm.CallOpts, left, right)
}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertEq26(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq26", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertEq26(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertEq26(&_Vm.CallOpts, left, right)
}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertEq26(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertEq26(&_Vm.CallOpts, left, right)
}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_Vm *VmCaller) AssertEq3(opts *bind.CallOpts, left []common.Address, right []common.Address) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq3", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_Vm *VmSession) AssertEq3(left []common.Address, right []common.Address) error {
	return _Vm.Contract.AssertEq3(&_Vm.CallOpts, left, right)
}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq3(left []common.Address, right []common.Address) error {
	return _Vm.Contract.AssertEq3(&_Vm.CallOpts, left, right)
}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq4(opts *bind.CallOpts, left []common.Address, right []common.Address, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq4", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq4(left []common.Address, right []common.Address, error string) error {
	return _Vm.Contract.AssertEq4(&_Vm.CallOpts, left, right, error)
}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq4(left []common.Address, right []common.Address, error string) error {
	return _Vm.Contract.AssertEq4(&_Vm.CallOpts, left, right, error)
}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_Vm *VmCaller) AssertEq5(opts *bind.CallOpts, left bool, right bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq5", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_Vm *VmSession) AssertEq5(left bool, right bool, error string) error {
	return _Vm.Contract.AssertEq5(&_Vm.CallOpts, left, right, error)
}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq5(left bool, right bool, error string) error {
	return _Vm.Contract.AssertEq5(&_Vm.CallOpts, left, right, error)
}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_Vm *VmCaller) AssertEq6(opts *bind.CallOpts, left common.Address, right common.Address) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq6", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_Vm *VmSession) AssertEq6(left common.Address, right common.Address) error {
	return _Vm.Contract.AssertEq6(&_Vm.CallOpts, left, right)
}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_Vm *VmCallerSession) AssertEq6(left common.Address, right common.Address) error {
	return _Vm.Contract.AssertEq6(&_Vm.CallOpts, left, right)
}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmCaller) AssertEq7(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq7", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmSession) AssertEq7(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertEq7(&_Vm.CallOpts, left, right, error)
}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertEq7(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertEq7(&_Vm.CallOpts, left, right, error)
}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmCaller) AssertEq8(opts *bind.CallOpts, left []bool, right []bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq8", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmSession) AssertEq8(left []bool, right []bool) error {
	return _Vm.Contract.AssertEq8(&_Vm.CallOpts, left, right)
}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq8(left []bool, right []bool) error {
	return _Vm.Contract.AssertEq8(&_Vm.CallOpts, left, right)
}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmCaller) AssertEq9(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEq9", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmSession) AssertEq9(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertEq9(&_Vm.CallOpts, left, right)
}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmCallerSession) AssertEq9(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertEq9(&_Vm.CallOpts, left, right)
}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertEqDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEqDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertEqDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertEqDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertEqDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEqDecimal0", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertEqDecimal0(&_Vm.CallOpts, left, right, decimals)
}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertEqDecimal0(&_Vm.CallOpts, left, right, decimals)
}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertEqDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEqDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertEqDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertEqDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertEqDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertEqDecimal2", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertEqDecimal2(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertEqDecimal2(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_Vm *VmCaller) AssertFalse(opts *bind.CallOpts, condition bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertFalse", condition, error)

	if err != nil {
		return err
	}

	return err

}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_Vm *VmSession) AssertFalse(condition bool, error string) error {
	return _Vm.Contract.AssertFalse(&_Vm.CallOpts, condition, error)
}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_Vm *VmCallerSession) AssertFalse(condition bool, error string) error {
	return _Vm.Contract.AssertFalse(&_Vm.CallOpts, condition, error)
}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_Vm *VmCaller) AssertFalse0(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertFalse0", condition)

	if err != nil {
		return err
	}

	return err

}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_Vm *VmSession) AssertFalse0(condition bool) error {
	return _Vm.Contract.AssertFalse0(&_Vm.CallOpts, condition)
}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_Vm *VmCallerSession) AssertFalse0(condition bool) error {
	return _Vm.Contract.AssertFalse0(&_Vm.CallOpts, condition)
}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertGe(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGe", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertGe(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGe(&_Vm.CallOpts, left, right)
}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertGe(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGe(&_Vm.CallOpts, left, right)
}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertGe0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGe0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertGe0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGe0(&_Vm.CallOpts, left, right, error)
}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertGe0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGe0(&_Vm.CallOpts, left, right, error)
}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertGe1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGe1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertGe1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGe1(&_Vm.CallOpts, left, right)
}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertGe1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGe1(&_Vm.CallOpts, left, right)
}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertGe2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGe2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertGe2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGe2(&_Vm.CallOpts, left, right, error)
}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertGe2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGe2(&_Vm.CallOpts, left, right, error)
}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertGeDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGeDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertGeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGeDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertGeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGeDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertGeDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGeDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertGeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGeDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertGeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGeDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertGeDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGeDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertGeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGeDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertGeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGeDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertGeDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGeDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertGeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGeDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertGeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGeDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertGt(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGt", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertGt(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGt(&_Vm.CallOpts, left, right)
}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertGt(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGt(&_Vm.CallOpts, left, right)
}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertGt0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGt0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertGt0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGt0(&_Vm.CallOpts, left, right, error)
}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertGt0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGt0(&_Vm.CallOpts, left, right, error)
}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertGt1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGt1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertGt1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGt1(&_Vm.CallOpts, left, right)
}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertGt1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertGt1(&_Vm.CallOpts, left, right)
}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertGt2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGt2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertGt2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGt2(&_Vm.CallOpts, left, right, error)
}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertGt2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertGt2(&_Vm.CallOpts, left, right, error)
}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertGtDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGtDecimal", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertGtDecimal(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGtDecimal(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertGtDecimal(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGtDecimal(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertGtDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGtDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertGtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGtDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertGtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertGtDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertGtDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGtDecimal1", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertGtDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGtDecimal1(&_Vm.CallOpts, left, right, decimals)
}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertGtDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGtDecimal1(&_Vm.CallOpts, left, right, decimals)
}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertGtDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertGtDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertGtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGtDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertGtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertGtDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertLe(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLe", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertLe(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLe(&_Vm.CallOpts, left, right, error)
}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertLe(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLe(&_Vm.CallOpts, left, right, error)
}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertLe0(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLe0", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertLe0(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLe0(&_Vm.CallOpts, left, right)
}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertLe0(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLe0(&_Vm.CallOpts, left, right)
}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertLe1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLe1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertLe1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLe1(&_Vm.CallOpts, left, right)
}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertLe1(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLe1(&_Vm.CallOpts, left, right)
}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertLe2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLe2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertLe2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLe2(&_Vm.CallOpts, left, right, error)
}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertLe2(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLe2(&_Vm.CallOpts, left, right, error)
}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertLeDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLeDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertLeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLeDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertLeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLeDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertLeDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLeDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertLeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLeDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertLeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLeDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertLeDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLeDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertLeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLeDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertLeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLeDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertLeDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLeDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertLeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLeDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertLeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLeDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertLt(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLt", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertLt(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLt(&_Vm.CallOpts, left, right)
}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertLt(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLt(&_Vm.CallOpts, left, right)
}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertLt0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLt0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertLt0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLt0(&_Vm.CallOpts, left, right, error)
}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertLt0(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLt0(&_Vm.CallOpts, left, right, error)
}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertLt1(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLt1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertLt1(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLt1(&_Vm.CallOpts, left, right, error)
}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertLt1(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertLt1(&_Vm.CallOpts, left, right, error)
}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertLt2(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLt2", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertLt2(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLt2(&_Vm.CallOpts, left, right)
}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertLt2(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertLt2(&_Vm.CallOpts, left, right)
}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertLtDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLtDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertLtDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLtDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertLtDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLtDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertLtDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLtDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertLtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLtDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertLtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLtDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertLtDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLtDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertLtDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLtDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertLtDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertLtDecimal1(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertLtDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertLtDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertLtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLtDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertLtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertLtDecimal2(&_Vm.CallOpts, left, right, decimals)
}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq(opts *bind.CallOpts, left [][32]byte, right [][32]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmSession) AssertNotEq(left [][32]byte, right [][32]byte) error {
	return _Vm.Contract.AssertNotEq(&_Vm.CallOpts, left, right)
}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq(left [][32]byte, right [][32]byte) error {
	return _Vm.Contract.AssertNotEq(&_Vm.CallOpts, left, right)
}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq0(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq0", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmSession) AssertNotEq0(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertNotEq0(&_Vm.CallOpts, left, right)
}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq0(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertNotEq0(&_Vm.CallOpts, left, right)
}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq1(opts *bind.CallOpts, left bool, right bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq1(left bool, right bool, error string) error {
	return _Vm.Contract.AssertNotEq1(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq1(left bool, right bool, error string) error {
	return _Vm.Contract.AssertNotEq1(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_Vm *VmCaller) AssertNotEq10(opts *bind.CallOpts, left string, right string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq10", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_Vm *VmSession) AssertNotEq10(left string, right string) error {
	return _Vm.Contract.AssertNotEq10(&_Vm.CallOpts, left, right)
}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq10(left string, right string) error {
	return _Vm.Contract.AssertNotEq10(&_Vm.CallOpts, left, right)
}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq11(opts *bind.CallOpts, left []common.Address, right []common.Address, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq11", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq11(left []common.Address, right []common.Address, error string) error {
	return _Vm.Contract.AssertNotEq11(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq11(left []common.Address, right []common.Address, error string) error {
	return _Vm.Contract.AssertNotEq11(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq12(opts *bind.CallOpts, left string, right string, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq12", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq12(left string, right string, error string) error {
	return _Vm.Contract.AssertNotEq12(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq12(left string, right string, error string) error {
	return _Vm.Contract.AssertNotEq12(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq13(opts *bind.CallOpts, left common.Address, right common.Address, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq13", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq13(left common.Address, right common.Address, error string) error {
	return _Vm.Contract.AssertNotEq13(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq13(left common.Address, right common.Address, error string) error {
	return _Vm.Contract.AssertNotEq13(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmCaller) AssertNotEq14(opts *bind.CallOpts, left [32]byte, right [32]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq14", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmSession) AssertNotEq14(left [32]byte, right [32]byte) error {
	return _Vm.Contract.AssertNotEq14(&_Vm.CallOpts, left, right)
}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq14(left [32]byte, right [32]byte) error {
	return _Vm.Contract.AssertNotEq14(&_Vm.CallOpts, left, right)
}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq15(opts *bind.CallOpts, left []byte, right []byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq15", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq15(left []byte, right []byte, error string) error {
	return _Vm.Contract.AssertNotEq15(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq15(left []byte, right []byte, error string) error {
	return _Vm.Contract.AssertNotEq15(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq16(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq16", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq16(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertNotEq16(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq16(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertNotEq16(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq17(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq17", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq17(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertNotEq17(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq17(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertNotEq17(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_Vm *VmCaller) AssertNotEq18(opts *bind.CallOpts, left common.Address, right common.Address) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq18", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_Vm *VmSession) AssertNotEq18(left common.Address, right common.Address) error {
	return _Vm.Contract.AssertNotEq18(&_Vm.CallOpts, left, right)
}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq18(left common.Address, right common.Address) error {
	return _Vm.Contract.AssertNotEq18(&_Vm.CallOpts, left, right)
}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq19(opts *bind.CallOpts, left [32]byte, right [32]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq19", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq19(left [32]byte, right [32]byte, error string) error {
	return _Vm.Contract.AssertNotEq19(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq19(left [32]byte, right [32]byte, error string) error {
	return _Vm.Contract.AssertNotEq19(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq2(opts *bind.CallOpts, left [][]byte, right [][]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq2(left [][]byte, right [][]byte, error string) error {
	return _Vm.Contract.AssertNotEq2(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq2(left [][]byte, right [][]byte, error string) error {
	return _Vm.Contract.AssertNotEq2(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq20(opts *bind.CallOpts, left []string, right []string, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq20", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq20(left []string, right []string, error string) error {
	return _Vm.Contract.AssertNotEq20(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq20(left []string, right []string, error string) error {
	return _Vm.Contract.AssertNotEq20(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmCaller) AssertNotEq21(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq21", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmSession) AssertNotEq21(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertNotEq21(&_Vm.CallOpts, left, right)
}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq21(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertNotEq21(&_Vm.CallOpts, left, right)
}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq22(opts *bind.CallOpts, left [][32]byte, right [][32]byte, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq22", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq22(left [][32]byte, right [][32]byte, error string) error {
	return _Vm.Contract.AssertNotEq22(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq22(left [][32]byte, right [][32]byte, error string) error {
	return _Vm.Contract.AssertNotEq22(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq23(opts *bind.CallOpts, left []string, right []string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq23", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_Vm *VmSession) AssertNotEq23(left []string, right []string) error {
	return _Vm.Contract.AssertNotEq23(&_Vm.CallOpts, left, right)
}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq23(left []string, right []string) error {
	return _Vm.Contract.AssertNotEq23(&_Vm.CallOpts, left, right)
}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq24(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq24", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq24(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertNotEq24(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq24(left []*big.Int, right []*big.Int, error string) error {
	return _Vm.Contract.AssertNotEq24(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq25(opts *bind.CallOpts, left [][]byte, right [][]byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq25", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmSession) AssertNotEq25(left [][]byte, right [][]byte) error {
	return _Vm.Contract.AssertNotEq25(&_Vm.CallOpts, left, right)
}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq25(left [][]byte, right [][]byte) error {
	return _Vm.Contract.AssertNotEq25(&_Vm.CallOpts, left, right)
}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_Vm *VmCaller) AssertNotEq26(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq26", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_Vm *VmSession) AssertNotEq26(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertNotEq26(&_Vm.CallOpts, left, right)
}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq26(left *big.Int, right *big.Int) error {
	return _Vm.Contract.AssertNotEq26(&_Vm.CallOpts, left, right)
}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_Vm *VmCaller) AssertNotEq3(opts *bind.CallOpts, left bool, right bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq3", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_Vm *VmSession) AssertNotEq3(left bool, right bool) error {
	return _Vm.Contract.AssertNotEq3(&_Vm.CallOpts, left, right)
}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq3(left bool, right bool) error {
	return _Vm.Contract.AssertNotEq3(&_Vm.CallOpts, left, right)
}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq4(opts *bind.CallOpts, left []bool, right []bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq4", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmSession) AssertNotEq4(left []bool, right []bool) error {
	return _Vm.Contract.AssertNotEq4(&_Vm.CallOpts, left, right)
}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq4(left []bool, right []bool) error {
	return _Vm.Contract.AssertNotEq4(&_Vm.CallOpts, left, right)
}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_Vm *VmCaller) AssertNotEq5(opts *bind.CallOpts, left []byte, right []byte) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq5", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_Vm *VmSession) AssertNotEq5(left []byte, right []byte) error {
	return _Vm.Contract.AssertNotEq5(&_Vm.CallOpts, left, right)
}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq5(left []byte, right []byte) error {
	return _Vm.Contract.AssertNotEq5(&_Vm.CallOpts, left, right)
}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq6(opts *bind.CallOpts, left []common.Address, right []common.Address) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq6", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_Vm *VmSession) AssertNotEq6(left []common.Address, right []common.Address) error {
	return _Vm.Contract.AssertNotEq6(&_Vm.CallOpts, left, right)
}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq6(left []common.Address, right []common.Address) error {
	return _Vm.Contract.AssertNotEq6(&_Vm.CallOpts, left, right)
}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq7(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq7", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq7(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertNotEq7(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq7(left *big.Int, right *big.Int, error string) error {
	return _Vm.Contract.AssertNotEq7(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmCaller) AssertNotEq8(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq8", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmSession) AssertNotEq8(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertNotEq8(&_Vm.CallOpts, left, right)
}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_Vm *VmCallerSession) AssertNotEq8(left []*big.Int, right []*big.Int) error {
	return _Vm.Contract.AssertNotEq8(&_Vm.CallOpts, left, right)
}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmCaller) AssertNotEq9(opts *bind.CallOpts, left []bool, right []bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEq9", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmSession) AssertNotEq9(left []bool, right []bool, error string) error {
	return _Vm.Contract.AssertNotEq9(&_Vm.CallOpts, left, right, error)
}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEq9(left []bool, right []bool, error string) error {
	return _Vm.Contract.AssertNotEq9(&_Vm.CallOpts, left, right, error)
}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertNotEqDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEqDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertNotEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertNotEqDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertNotEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertNotEqDecimal(&_Vm.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertNotEqDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEqDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertNotEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertNotEqDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertNotEqDecimal0(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCaller) AssertNotEqDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEqDecimal1", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmSession) AssertNotEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertNotEqDecimal1(&_Vm.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_Vm *VmCallerSession) AssertNotEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _Vm.Contract.AssertNotEqDecimal1(&_Vm.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCaller) AssertNotEqDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertNotEqDecimal2", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmSession) AssertNotEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertNotEqDecimal2(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_Vm *VmCallerSession) AssertNotEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _Vm.Contract.AssertNotEqDecimal2(&_Vm.CallOpts, left, right, decimals, error)
}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_Vm *VmCaller) AssertTrue(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertTrue", condition)

	if err != nil {
		return err
	}

	return err

}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_Vm *VmSession) AssertTrue(condition bool) error {
	return _Vm.Contract.AssertTrue(&_Vm.CallOpts, condition)
}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_Vm *VmCallerSession) AssertTrue(condition bool) error {
	return _Vm.Contract.AssertTrue(&_Vm.CallOpts, condition)
}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_Vm *VmCaller) AssertTrue0(opts *bind.CallOpts, condition bool, error string) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assertTrue0", condition, error)

	if err != nil {
		return err
	}

	return err

}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_Vm *VmSession) AssertTrue0(condition bool, error string) error {
	return _Vm.Contract.AssertTrue0(&_Vm.CallOpts, condition, error)
}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_Vm *VmCallerSession) AssertTrue0(condition bool, error string) error {
	return _Vm.Contract.AssertTrue0(&_Vm.CallOpts, condition, error)
}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_Vm *VmCaller) Assume(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "assume", condition)

	if err != nil {
		return err
	}

	return err

}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_Vm *VmSession) Assume(condition bool) error {
	return _Vm.Contract.Assume(&_Vm.CallOpts, condition)
}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_Vm *VmCallerSession) Assume(condition bool) error {
	return _Vm.Contract.Assume(&_Vm.CallOpts, condition)
}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_Vm *VmCaller) ComputeCreate2Address(opts *bind.CallOpts, salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "computeCreate2Address", salt, initCodeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_Vm *VmSession) ComputeCreate2Address(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _Vm.Contract.ComputeCreate2Address(&_Vm.CallOpts, salt, initCodeHash)
}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_Vm *VmCallerSession) ComputeCreate2Address(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _Vm.Contract.ComputeCreate2Address(&_Vm.CallOpts, salt, initCodeHash)
}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_Vm *VmCaller) ComputeCreate2Address0(opts *bind.CallOpts, salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "computeCreate2Address0", salt, initCodeHash, deployer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_Vm *VmSession) ComputeCreate2Address0(salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	return _Vm.Contract.ComputeCreate2Address0(&_Vm.CallOpts, salt, initCodeHash, deployer)
}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_Vm *VmCallerSession) ComputeCreate2Address0(salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	return _Vm.Contract.ComputeCreate2Address0(&_Vm.CallOpts, salt, initCodeHash, deployer)
}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_Vm *VmCaller) ComputeCreateAddress(opts *bind.CallOpts, deployer common.Address, nonce *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "computeCreateAddress", deployer, nonce)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_Vm *VmSession) ComputeCreateAddress(deployer common.Address, nonce *big.Int) (common.Address, error) {
	return _Vm.Contract.ComputeCreateAddress(&_Vm.CallOpts, deployer, nonce)
}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_Vm *VmCallerSession) ComputeCreateAddress(deployer common.Address, nonce *big.Int) (common.Address, error) {
	return _Vm.Contract.ComputeCreateAddress(&_Vm.CallOpts, deployer, nonce)
}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmCaller) DeriveKey(opts *bind.CallOpts, mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "deriveKey", mnemonic, derivationPath, index, language)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmSession) DeriveKey(mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	return _Vm.Contract.DeriveKey(&_Vm.CallOpts, mnemonic, derivationPath, index, language)
}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmCallerSession) DeriveKey(mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	return _Vm.Contract.DeriveKey(&_Vm.CallOpts, mnemonic, derivationPath, index, language)
}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmCaller) DeriveKey0(opts *bind.CallOpts, mnemonic string, index uint32, language string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "deriveKey0", mnemonic, index, language)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmSession) DeriveKey0(mnemonic string, index uint32, language string) (*big.Int, error) {
	return _Vm.Contract.DeriveKey0(&_Vm.CallOpts, mnemonic, index, language)
}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_Vm *VmCallerSession) DeriveKey0(mnemonic string, index uint32, language string) (*big.Int, error) {
	return _Vm.Contract.DeriveKey0(&_Vm.CallOpts, mnemonic, index, language)
}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmCaller) DeriveKey1(opts *bind.CallOpts, mnemonic string, index uint32) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "deriveKey1", mnemonic, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmSession) DeriveKey1(mnemonic string, index uint32) (*big.Int, error) {
	return _Vm.Contract.DeriveKey1(&_Vm.CallOpts, mnemonic, index)
}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmCallerSession) DeriveKey1(mnemonic string, index uint32) (*big.Int, error) {
	return _Vm.Contract.DeriveKey1(&_Vm.CallOpts, mnemonic, index)
}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmCaller) DeriveKey2(opts *bind.CallOpts, mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "deriveKey2", mnemonic, derivationPath, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmSession) DeriveKey2(mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	return _Vm.Contract.DeriveKey2(&_Vm.CallOpts, mnemonic, derivationPath, index)
}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_Vm *VmCallerSession) DeriveKey2(mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	return _Vm.Contract.DeriveKey2(&_Vm.CallOpts, mnemonic, derivationPath, index)
}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_Vm *VmCaller) EnsNamehash(opts *bind.CallOpts, name string) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "ensNamehash", name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_Vm *VmSession) EnsNamehash(name string) ([32]byte, error) {
	return _Vm.Contract.EnsNamehash(&_Vm.CallOpts, name)
}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_Vm *VmCallerSession) EnsNamehash(name string) ([32]byte, error) {
	return _Vm.Contract.EnsNamehash(&_Vm.CallOpts, name)
}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_Vm *VmCaller) EnvAddress(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envAddress", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_Vm *VmSession) EnvAddress(name string) (common.Address, error) {
	return _Vm.Contract.EnvAddress(&_Vm.CallOpts, name)
}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_Vm *VmCallerSession) EnvAddress(name string) (common.Address, error) {
	return _Vm.Contract.EnvAddress(&_Vm.CallOpts, name)
}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_Vm *VmCaller) EnvAddress0(opts *bind.CallOpts, name string, delim string) ([]common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envAddress0", name, delim)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_Vm *VmSession) EnvAddress0(name string, delim string) ([]common.Address, error) {
	return _Vm.Contract.EnvAddress0(&_Vm.CallOpts, name, delim)
}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_Vm *VmCallerSession) EnvAddress0(name string, delim string) ([]common.Address, error) {
	return _Vm.Contract.EnvAddress0(&_Vm.CallOpts, name, delim)
}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_Vm *VmCaller) EnvBool(opts *bind.CallOpts, name string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBool", name)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_Vm *VmSession) EnvBool(name string) (bool, error) {
	return _Vm.Contract.EnvBool(&_Vm.CallOpts, name)
}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_Vm *VmCallerSession) EnvBool(name string) (bool, error) {
	return _Vm.Contract.EnvBool(&_Vm.CallOpts, name)
}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_Vm *VmCaller) EnvBool0(opts *bind.CallOpts, name string, delim string) ([]bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBool0", name, delim)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_Vm *VmSession) EnvBool0(name string, delim string) ([]bool, error) {
	return _Vm.Contract.EnvBool0(&_Vm.CallOpts, name, delim)
}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_Vm *VmCallerSession) EnvBool0(name string, delim string) ([]bool, error) {
	return _Vm.Contract.EnvBool0(&_Vm.CallOpts, name, delim)
}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_Vm *VmCaller) EnvBytes(opts *bind.CallOpts, name string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBytes", name)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_Vm *VmSession) EnvBytes(name string) ([]byte, error) {
	return _Vm.Contract.EnvBytes(&_Vm.CallOpts, name)
}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_Vm *VmCallerSession) EnvBytes(name string) ([]byte, error) {
	return _Vm.Contract.EnvBytes(&_Vm.CallOpts, name)
}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_Vm *VmCaller) EnvBytes0(opts *bind.CallOpts, name string, delim string) ([][]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBytes0", name, delim)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_Vm *VmSession) EnvBytes0(name string, delim string) ([][]byte, error) {
	return _Vm.Contract.EnvBytes0(&_Vm.CallOpts, name, delim)
}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_Vm *VmCallerSession) EnvBytes0(name string, delim string) ([][]byte, error) {
	return _Vm.Contract.EnvBytes0(&_Vm.CallOpts, name, delim)
}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_Vm *VmCaller) EnvBytes32(opts *bind.CallOpts, name string, delim string) ([][32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBytes32", name, delim)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_Vm *VmSession) EnvBytes32(name string, delim string) ([][32]byte, error) {
	return _Vm.Contract.EnvBytes32(&_Vm.CallOpts, name, delim)
}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_Vm *VmCallerSession) EnvBytes32(name string, delim string) ([][32]byte, error) {
	return _Vm.Contract.EnvBytes32(&_Vm.CallOpts, name, delim)
}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_Vm *VmCaller) EnvBytes320(opts *bind.CallOpts, name string) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envBytes320", name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_Vm *VmSession) EnvBytes320(name string) ([32]byte, error) {
	return _Vm.Contract.EnvBytes320(&_Vm.CallOpts, name)
}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_Vm *VmCallerSession) EnvBytes320(name string) ([32]byte, error) {
	return _Vm.Contract.EnvBytes320(&_Vm.CallOpts, name)
}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_Vm *VmCaller) EnvExists(opts *bind.CallOpts, name string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envExists", name)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_Vm *VmSession) EnvExists(name string) (bool, error) {
	return _Vm.Contract.EnvExists(&_Vm.CallOpts, name)
}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_Vm *VmCallerSession) EnvExists(name string) (bool, error) {
	return _Vm.Contract.EnvExists(&_Vm.CallOpts, name)
}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_Vm *VmCaller) EnvInt(opts *bind.CallOpts, name string, delim string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envInt", name, delim)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_Vm *VmSession) EnvInt(name string, delim string) ([]*big.Int, error) {
	return _Vm.Contract.EnvInt(&_Vm.CallOpts, name, delim)
}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_Vm *VmCallerSession) EnvInt(name string, delim string) ([]*big.Int, error) {
	return _Vm.Contract.EnvInt(&_Vm.CallOpts, name, delim)
}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_Vm *VmCaller) EnvInt0(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envInt0", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_Vm *VmSession) EnvInt0(name string) (*big.Int, error) {
	return _Vm.Contract.EnvInt0(&_Vm.CallOpts, name)
}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_Vm *VmCallerSession) EnvInt0(name string) (*big.Int, error) {
	return _Vm.Contract.EnvInt0(&_Vm.CallOpts, name)
}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_Vm *VmCaller) EnvOr(opts *bind.CallOpts, name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr", name, delim, defaultValue)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_Vm *VmSession) EnvOr(name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	return _Vm.Contract.EnvOr(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_Vm *VmCallerSession) EnvOr(name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	return _Vm.Contract.EnvOr(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_Vm *VmCaller) EnvOr0(opts *bind.CallOpts, name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr0", name, delim, defaultValue)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_Vm *VmSession) EnvOr0(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _Vm.Contract.EnvOr0(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_Vm *VmCallerSession) EnvOr0(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _Vm.Contract.EnvOr0(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_Vm *VmCaller) EnvOr1(opts *bind.CallOpts, name string, defaultValue bool) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr1", name, defaultValue)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_Vm *VmSession) EnvOr1(name string, defaultValue bool) (bool, error) {
	return _Vm.Contract.EnvOr1(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_Vm *VmCallerSession) EnvOr1(name string, defaultValue bool) (bool, error) {
	return _Vm.Contract.EnvOr1(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_Vm *VmCaller) EnvOr10(opts *bind.CallOpts, name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr10", name, delim, defaultValue)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_Vm *VmSession) EnvOr10(name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	return _Vm.Contract.EnvOr10(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_Vm *VmCallerSession) EnvOr10(name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	return _Vm.Contract.EnvOr10(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_Vm *VmCaller) EnvOr11(opts *bind.CallOpts, name string, defaultValue string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr11", name, defaultValue)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_Vm *VmSession) EnvOr11(name string, defaultValue string) (string, error) {
	return _Vm.Contract.EnvOr11(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_Vm *VmCallerSession) EnvOr11(name string, defaultValue string) (string, error) {
	return _Vm.Contract.EnvOr11(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_Vm *VmCaller) EnvOr12(opts *bind.CallOpts, name string, delim string, defaultValue []bool) ([]bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr12", name, delim, defaultValue)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_Vm *VmSession) EnvOr12(name string, delim string, defaultValue []bool) ([]bool, error) {
	return _Vm.Contract.EnvOr12(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_Vm *VmCallerSession) EnvOr12(name string, delim string, defaultValue []bool) ([]bool, error) {
	return _Vm.Contract.EnvOr12(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_Vm *VmCaller) EnvOr2(opts *bind.CallOpts, name string, defaultValue common.Address) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr2", name, defaultValue)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_Vm *VmSession) EnvOr2(name string, defaultValue common.Address) (common.Address, error) {
	return _Vm.Contract.EnvOr2(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_Vm *VmCallerSession) EnvOr2(name string, defaultValue common.Address) (common.Address, error) {
	return _Vm.Contract.EnvOr2(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_Vm *VmCaller) EnvOr3(opts *bind.CallOpts, name string, defaultValue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr3", name, defaultValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_Vm *VmSession) EnvOr3(name string, defaultValue *big.Int) (*big.Int, error) {
	return _Vm.Contract.EnvOr3(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_Vm *VmCallerSession) EnvOr3(name string, defaultValue *big.Int) (*big.Int, error) {
	return _Vm.Contract.EnvOr3(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_Vm *VmCaller) EnvOr4(opts *bind.CallOpts, name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr4", name, delim, defaultValue)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_Vm *VmSession) EnvOr4(name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	return _Vm.Contract.EnvOr4(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_Vm *VmCallerSession) EnvOr4(name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	return _Vm.Contract.EnvOr4(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_Vm *VmCaller) EnvOr5(opts *bind.CallOpts, name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr5", name, delim, defaultValue)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_Vm *VmSession) EnvOr5(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _Vm.Contract.EnvOr5(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_Vm *VmCallerSession) EnvOr5(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _Vm.Contract.EnvOr5(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_Vm *VmCaller) EnvOr6(opts *bind.CallOpts, name string, delim string, defaultValue []string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr6", name, delim, defaultValue)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_Vm *VmSession) EnvOr6(name string, delim string, defaultValue []string) ([]string, error) {
	return _Vm.Contract.EnvOr6(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_Vm *VmCallerSession) EnvOr6(name string, delim string, defaultValue []string) ([]string, error) {
	return _Vm.Contract.EnvOr6(&_Vm.CallOpts, name, delim, defaultValue)
}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_Vm *VmCaller) EnvOr7(opts *bind.CallOpts, name string, defaultValue []byte) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr7", name, defaultValue)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_Vm *VmSession) EnvOr7(name string, defaultValue []byte) ([]byte, error) {
	return _Vm.Contract.EnvOr7(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_Vm *VmCallerSession) EnvOr7(name string, defaultValue []byte) ([]byte, error) {
	return _Vm.Contract.EnvOr7(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_Vm *VmCaller) EnvOr8(opts *bind.CallOpts, name string, defaultValue [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr8", name, defaultValue)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_Vm *VmSession) EnvOr8(name string, defaultValue [32]byte) ([32]byte, error) {
	return _Vm.Contract.EnvOr8(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_Vm *VmCallerSession) EnvOr8(name string, defaultValue [32]byte) ([32]byte, error) {
	return _Vm.Contract.EnvOr8(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_Vm *VmCaller) EnvOr9(opts *bind.CallOpts, name string, defaultValue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envOr9", name, defaultValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_Vm *VmSession) EnvOr9(name string, defaultValue *big.Int) (*big.Int, error) {
	return _Vm.Contract.EnvOr9(&_Vm.CallOpts, name, defaultValue)
}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_Vm *VmCallerSession) EnvOr9(name string, defaultValue *big.Int) (*big.Int, error) {
	return _Vm.Contract.EnvOr9(&_Vm.CallOpts, name, defaultValue)
}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_Vm *VmCaller) EnvString(opts *bind.CallOpts, name string, delim string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envString", name, delim)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_Vm *VmSession) EnvString(name string, delim string) ([]string, error) {
	return _Vm.Contract.EnvString(&_Vm.CallOpts, name, delim)
}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_Vm *VmCallerSession) EnvString(name string, delim string) ([]string, error) {
	return _Vm.Contract.EnvString(&_Vm.CallOpts, name, delim)
}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_Vm *VmCaller) EnvString0(opts *bind.CallOpts, name string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envString0", name)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_Vm *VmSession) EnvString0(name string) (string, error) {
	return _Vm.Contract.EnvString0(&_Vm.CallOpts, name)
}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_Vm *VmCallerSession) EnvString0(name string) (string, error) {
	return _Vm.Contract.EnvString0(&_Vm.CallOpts, name)
}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_Vm *VmCaller) EnvUint(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envUint", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_Vm *VmSession) EnvUint(name string) (*big.Int, error) {
	return _Vm.Contract.EnvUint(&_Vm.CallOpts, name)
}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_Vm *VmCallerSession) EnvUint(name string) (*big.Int, error) {
	return _Vm.Contract.EnvUint(&_Vm.CallOpts, name)
}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_Vm *VmCaller) EnvUint0(opts *bind.CallOpts, name string, delim string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "envUint0", name, delim)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_Vm *VmSession) EnvUint0(name string, delim string) ([]*big.Int, error) {
	return _Vm.Contract.EnvUint0(&_Vm.CallOpts, name, delim)
}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_Vm *VmCallerSession) EnvUint0(name string, delim string) ([]*big.Int, error) {
	return _Vm.Contract.EnvUint0(&_Vm.CallOpts, name, delim)
}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_Vm *VmCaller) FsMetadata(opts *bind.CallOpts, path string) (VmSafeFsMetadata, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "fsMetadata", path)

	if err != nil {
		return *new(VmSafeFsMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(VmSafeFsMetadata)).(*VmSafeFsMetadata)

	return out0, err

}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_Vm *VmSession) FsMetadata(path string) (VmSafeFsMetadata, error) {
	return _Vm.Contract.FsMetadata(&_Vm.CallOpts, path)
}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_Vm *VmCallerSession) FsMetadata(path string) (VmSafeFsMetadata, error) {
	return _Vm.Contract.FsMetadata(&_Vm.CallOpts, path)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_Vm *VmCaller) GetBlobBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getBlobBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_Vm *VmSession) GetBlobBaseFee() (*big.Int, error) {
	return _Vm.Contract.GetBlobBaseFee(&_Vm.CallOpts)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_Vm *VmCallerSession) GetBlobBaseFee() (*big.Int, error) {
	return _Vm.Contract.GetBlobBaseFee(&_Vm.CallOpts)
}

// GetBlobhashes is a free data retrieval call binding the contract method 0xf56ff18b.
//
// Solidity: function getBlobhashes() view returns(bytes32[] hashes)
func (_Vm *VmCaller) GetBlobhashes(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getBlobhashes")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetBlobhashes is a free data retrieval call binding the contract method 0xf56ff18b.
//
// Solidity: function getBlobhashes() view returns(bytes32[] hashes)
func (_Vm *VmSession) GetBlobhashes() ([][32]byte, error) {
	return _Vm.Contract.GetBlobhashes(&_Vm.CallOpts)
}

// GetBlobhashes is a free data retrieval call binding the contract method 0xf56ff18b.
//
// Solidity: function getBlobhashes() view returns(bytes32[] hashes)
func (_Vm *VmCallerSession) GetBlobhashes() ([][32]byte, error) {
	return _Vm.Contract.GetBlobhashes(&_Vm.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_Vm *VmCaller) GetBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_Vm *VmSession) GetBlockNumber() (*big.Int, error) {
	return _Vm.Contract.GetBlockNumber(&_Vm.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_Vm *VmCallerSession) GetBlockNumber() (*big.Int, error) {
	return _Vm.Contract.GetBlockNumber(&_Vm.CallOpts)
}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_Vm *VmCaller) GetBlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getBlockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_Vm *VmSession) GetBlockTimestamp() (*big.Int, error) {
	return _Vm.Contract.GetBlockTimestamp(&_Vm.CallOpts)
}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_Vm *VmCallerSession) GetBlockTimestamp() (*big.Int, error) {
	return _Vm.Contract.GetBlockTimestamp(&_Vm.CallOpts)
}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_Vm *VmCaller) GetCode(opts *bind.CallOpts, artifactPath string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getCode", artifactPath)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_Vm *VmSession) GetCode(artifactPath string) ([]byte, error) {
	return _Vm.Contract.GetCode(&_Vm.CallOpts, artifactPath)
}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_Vm *VmCallerSession) GetCode(artifactPath string) ([]byte, error) {
	return _Vm.Contract.GetCode(&_Vm.CallOpts, artifactPath)
}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_Vm *VmCaller) GetDeployedCode(opts *bind.CallOpts, artifactPath string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getDeployedCode", artifactPath)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_Vm *VmSession) GetDeployedCode(artifactPath string) ([]byte, error) {
	return _Vm.Contract.GetDeployedCode(&_Vm.CallOpts, artifactPath)
}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_Vm *VmCallerSession) GetDeployedCode(artifactPath string) ([]byte, error) {
	return _Vm.Contract.GetDeployedCode(&_Vm.CallOpts, artifactPath)
}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_Vm *VmCaller) GetLabel(opts *bind.CallOpts, account common.Address) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getLabel", account)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_Vm *VmSession) GetLabel(account common.Address) (string, error) {
	return _Vm.Contract.GetLabel(&_Vm.CallOpts, account)
}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_Vm *VmCallerSession) GetLabel(account common.Address) (string, error) {
	return _Vm.Contract.GetLabel(&_Vm.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_Vm *VmCaller) GetNonce(opts *bind.CallOpts, account common.Address) (uint64, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "getNonce", account)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_Vm *VmSession) GetNonce(account common.Address) (uint64, error) {
	return _Vm.Contract.GetNonce(&_Vm.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_Vm *VmCallerSession) GetNonce(account common.Address) (uint64, error) {
	return _Vm.Contract.GetNonce(&_Vm.CallOpts, account)
}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_Vm *VmCaller) IndexOf(opts *bind.CallOpts, input string, key string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "indexOf", input, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_Vm *VmSession) IndexOf(input string, key string) (*big.Int, error) {
	return _Vm.Contract.IndexOf(&_Vm.CallOpts, input, key)
}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_Vm *VmCallerSession) IndexOf(input string, key string) (*big.Int, error) {
	return _Vm.Contract.IndexOf(&_Vm.CallOpts, input, key)
}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_Vm *VmCaller) IsContext(opts *bind.CallOpts, context uint8) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "isContext", context)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_Vm *VmSession) IsContext(context uint8) (bool, error) {
	return _Vm.Contract.IsContext(&_Vm.CallOpts, context)
}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_Vm *VmCallerSession) IsContext(context uint8) (bool, error) {
	return _Vm.Contract.IsContext(&_Vm.CallOpts, context)
}

// IsPersistent is a free data retrieval call binding the contract method 0xd92d8efd.
//
// Solidity: function isPersistent(address account) view returns(bool persistent)
func (_Vm *VmCaller) IsPersistent(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "isPersistent", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPersistent is a free data retrieval call binding the contract method 0xd92d8efd.
//
// Solidity: function isPersistent(address account) view returns(bool persistent)
func (_Vm *VmSession) IsPersistent(account common.Address) (bool, error) {
	return _Vm.Contract.IsPersistent(&_Vm.CallOpts, account)
}

// IsPersistent is a free data retrieval call binding the contract method 0xd92d8efd.
//
// Solidity: function isPersistent(address account) view returns(bool persistent)
func (_Vm *VmCallerSession) IsPersistent(account common.Address) (bool, error) {
	return _Vm.Contract.IsPersistent(&_Vm.CallOpts, account)
}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_Vm *VmCaller) KeyExists(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "keyExists", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_Vm *VmSession) KeyExists(json string, key string) (bool, error) {
	return _Vm.Contract.KeyExists(&_Vm.CallOpts, json, key)
}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_Vm *VmCallerSession) KeyExists(json string, key string) (bool, error) {
	return _Vm.Contract.KeyExists(&_Vm.CallOpts, json, key)
}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_Vm *VmCaller) KeyExistsJson(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "keyExistsJson", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_Vm *VmSession) KeyExistsJson(json string, key string) (bool, error) {
	return _Vm.Contract.KeyExistsJson(&_Vm.CallOpts, json, key)
}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_Vm *VmCallerSession) KeyExistsJson(json string, key string) (bool, error) {
	return _Vm.Contract.KeyExistsJson(&_Vm.CallOpts, json, key)
}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_Vm *VmCaller) KeyExistsToml(opts *bind.CallOpts, toml string, key string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "keyExistsToml", toml, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_Vm *VmSession) KeyExistsToml(toml string, key string) (bool, error) {
	return _Vm.Contract.KeyExistsToml(&_Vm.CallOpts, toml, key)
}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_Vm *VmCallerSession) KeyExistsToml(toml string, key string) (bool, error) {
	return _Vm.Contract.KeyExistsToml(&_Vm.CallOpts, toml, key)
}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_Vm *VmCaller) LastCallGas(opts *bind.CallOpts) (VmSafeGas, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "lastCallGas")

	if err != nil {
		return *new(VmSafeGas), err
	}

	out0 := *abi.ConvertType(out[0], new(VmSafeGas)).(*VmSafeGas)

	return out0, err

}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_Vm *VmSession) LastCallGas() (VmSafeGas, error) {
	return _Vm.Contract.LastCallGas(&_Vm.CallOpts)
}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_Vm *VmCallerSession) LastCallGas() (VmSafeGas, error) {
	return _Vm.Contract.LastCallGas(&_Vm.CallOpts)
}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_Vm *VmCaller) Load(opts *bind.CallOpts, target common.Address, slot [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "load", target, slot)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_Vm *VmSession) Load(target common.Address, slot [32]byte) ([32]byte, error) {
	return _Vm.Contract.Load(&_Vm.CallOpts, target, slot)
}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_Vm *VmCallerSession) Load(target common.Address, slot [32]byte) ([32]byte, error) {
	return _Vm.Contract.Load(&_Vm.CallOpts, target, slot)
}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_Vm *VmCaller) ParseAddress(opts *bind.CallOpts, stringifiedValue string) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseAddress", stringifiedValue)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_Vm *VmSession) ParseAddress(stringifiedValue string) (common.Address, error) {
	return _Vm.Contract.ParseAddress(&_Vm.CallOpts, stringifiedValue)
}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_Vm *VmCallerSession) ParseAddress(stringifiedValue string) (common.Address, error) {
	return _Vm.Contract.ParseAddress(&_Vm.CallOpts, stringifiedValue)
}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_Vm *VmCaller) ParseBool(opts *bind.CallOpts, stringifiedValue string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseBool", stringifiedValue)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_Vm *VmSession) ParseBool(stringifiedValue string) (bool, error) {
	return _Vm.Contract.ParseBool(&_Vm.CallOpts, stringifiedValue)
}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_Vm *VmCallerSession) ParseBool(stringifiedValue string) (bool, error) {
	return _Vm.Contract.ParseBool(&_Vm.CallOpts, stringifiedValue)
}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_Vm *VmCaller) ParseBytes(opts *bind.CallOpts, stringifiedValue string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseBytes", stringifiedValue)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_Vm *VmSession) ParseBytes(stringifiedValue string) ([]byte, error) {
	return _Vm.Contract.ParseBytes(&_Vm.CallOpts, stringifiedValue)
}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_Vm *VmCallerSession) ParseBytes(stringifiedValue string) ([]byte, error) {
	return _Vm.Contract.ParseBytes(&_Vm.CallOpts, stringifiedValue)
}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_Vm *VmCaller) ParseBytes32(opts *bind.CallOpts, stringifiedValue string) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseBytes32", stringifiedValue)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_Vm *VmSession) ParseBytes32(stringifiedValue string) ([32]byte, error) {
	return _Vm.Contract.ParseBytes32(&_Vm.CallOpts, stringifiedValue)
}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_Vm *VmCallerSession) ParseBytes32(stringifiedValue string) ([32]byte, error) {
	return _Vm.Contract.ParseBytes32(&_Vm.CallOpts, stringifiedValue)
}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_Vm *VmCaller) ParseInt(opts *bind.CallOpts, stringifiedValue string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseInt", stringifiedValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_Vm *VmSession) ParseInt(stringifiedValue string) (*big.Int, error) {
	return _Vm.Contract.ParseInt(&_Vm.CallOpts, stringifiedValue)
}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_Vm *VmCallerSession) ParseInt(stringifiedValue string) (*big.Int, error) {
	return _Vm.Contract.ParseInt(&_Vm.CallOpts, stringifiedValue)
}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_Vm *VmCaller) ParseJson(opts *bind.CallOpts, json string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJson", json)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_Vm *VmSession) ParseJson(json string) ([]byte, error) {
	return _Vm.Contract.ParseJson(&_Vm.CallOpts, json)
}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_Vm *VmCallerSession) ParseJson(json string) ([]byte, error) {
	return _Vm.Contract.ParseJson(&_Vm.CallOpts, json)
}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmCaller) ParseJson0(opts *bind.CallOpts, json string, key string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJson0", json, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmSession) ParseJson0(json string, key string) ([]byte, error) {
	return _Vm.Contract.ParseJson0(&_Vm.CallOpts, json, key)
}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmCallerSession) ParseJson0(json string, key string) ([]byte, error) {
	return _Vm.Contract.ParseJson0(&_Vm.CallOpts, json, key)
}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_Vm *VmCaller) ParseJsonAddress(opts *bind.CallOpts, json string, key string) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonAddress", json, key)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_Vm *VmSession) ParseJsonAddress(json string, key string) (common.Address, error) {
	return _Vm.Contract.ParseJsonAddress(&_Vm.CallOpts, json, key)
}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_Vm *VmCallerSession) ParseJsonAddress(json string, key string) (common.Address, error) {
	return _Vm.Contract.ParseJsonAddress(&_Vm.CallOpts, json, key)
}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_Vm *VmCaller) ParseJsonAddressArray(opts *bind.CallOpts, json string, key string) ([]common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonAddressArray", json, key)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_Vm *VmSession) ParseJsonAddressArray(json string, key string) ([]common.Address, error) {
	return _Vm.Contract.ParseJsonAddressArray(&_Vm.CallOpts, json, key)
}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_Vm *VmCallerSession) ParseJsonAddressArray(json string, key string) ([]common.Address, error) {
	return _Vm.Contract.ParseJsonAddressArray(&_Vm.CallOpts, json, key)
}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_Vm *VmCaller) ParseJsonBool(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBool", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_Vm *VmSession) ParseJsonBool(json string, key string) (bool, error) {
	return _Vm.Contract.ParseJsonBool(&_Vm.CallOpts, json, key)
}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_Vm *VmCallerSession) ParseJsonBool(json string, key string) (bool, error) {
	return _Vm.Contract.ParseJsonBool(&_Vm.CallOpts, json, key)
}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_Vm *VmCaller) ParseJsonBoolArray(opts *bind.CallOpts, json string, key string) ([]bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBoolArray", json, key)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_Vm *VmSession) ParseJsonBoolArray(json string, key string) ([]bool, error) {
	return _Vm.Contract.ParseJsonBoolArray(&_Vm.CallOpts, json, key)
}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_Vm *VmCallerSession) ParseJsonBoolArray(json string, key string) ([]bool, error) {
	return _Vm.Contract.ParseJsonBoolArray(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_Vm *VmCaller) ParseJsonBytes(opts *bind.CallOpts, json string, key string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBytes", json, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_Vm *VmSession) ParseJsonBytes(json string, key string) ([]byte, error) {
	return _Vm.Contract.ParseJsonBytes(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_Vm *VmCallerSession) ParseJsonBytes(json string, key string) ([]byte, error) {
	return _Vm.Contract.ParseJsonBytes(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_Vm *VmCaller) ParseJsonBytes32(opts *bind.CallOpts, json string, key string) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBytes32", json, key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_Vm *VmSession) ParseJsonBytes32(json string, key string) ([32]byte, error) {
	return _Vm.Contract.ParseJsonBytes32(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_Vm *VmCallerSession) ParseJsonBytes32(json string, key string) ([32]byte, error) {
	return _Vm.Contract.ParseJsonBytes32(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_Vm *VmCaller) ParseJsonBytes32Array(opts *bind.CallOpts, json string, key string) ([][32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBytes32Array", json, key)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_Vm *VmSession) ParseJsonBytes32Array(json string, key string) ([][32]byte, error) {
	return _Vm.Contract.ParseJsonBytes32Array(&_Vm.CallOpts, json, key)
}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_Vm *VmCallerSession) ParseJsonBytes32Array(json string, key string) ([][32]byte, error) {
	return _Vm.Contract.ParseJsonBytes32Array(&_Vm.CallOpts, json, key)
}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_Vm *VmCaller) ParseJsonBytesArray(opts *bind.CallOpts, json string, key string) ([][]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonBytesArray", json, key)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_Vm *VmSession) ParseJsonBytesArray(json string, key string) ([][]byte, error) {
	return _Vm.Contract.ParseJsonBytesArray(&_Vm.CallOpts, json, key)
}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_Vm *VmCallerSession) ParseJsonBytesArray(json string, key string) ([][]byte, error) {
	return _Vm.Contract.ParseJsonBytesArray(&_Vm.CallOpts, json, key)
}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_Vm *VmCaller) ParseJsonInt(opts *bind.CallOpts, json string, key string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonInt", json, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_Vm *VmSession) ParseJsonInt(json string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseJsonInt(&_Vm.CallOpts, json, key)
}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_Vm *VmCallerSession) ParseJsonInt(json string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseJsonInt(&_Vm.CallOpts, json, key)
}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_Vm *VmCaller) ParseJsonIntArray(opts *bind.CallOpts, json string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonIntArray", json, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_Vm *VmSession) ParseJsonIntArray(json string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseJsonIntArray(&_Vm.CallOpts, json, key)
}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_Vm *VmCallerSession) ParseJsonIntArray(json string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseJsonIntArray(&_Vm.CallOpts, json, key)
}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_Vm *VmCaller) ParseJsonKeys(opts *bind.CallOpts, json string, key string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonKeys", json, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_Vm *VmSession) ParseJsonKeys(json string, key string) ([]string, error) {
	return _Vm.Contract.ParseJsonKeys(&_Vm.CallOpts, json, key)
}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_Vm *VmCallerSession) ParseJsonKeys(json string, key string) ([]string, error) {
	return _Vm.Contract.ParseJsonKeys(&_Vm.CallOpts, json, key)
}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_Vm *VmCaller) ParseJsonString(opts *bind.CallOpts, json string, key string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonString", json, key)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_Vm *VmSession) ParseJsonString(json string, key string) (string, error) {
	return _Vm.Contract.ParseJsonString(&_Vm.CallOpts, json, key)
}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_Vm *VmCallerSession) ParseJsonString(json string, key string) (string, error) {
	return _Vm.Contract.ParseJsonString(&_Vm.CallOpts, json, key)
}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_Vm *VmCaller) ParseJsonStringArray(opts *bind.CallOpts, json string, key string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonStringArray", json, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_Vm *VmSession) ParseJsonStringArray(json string, key string) ([]string, error) {
	return _Vm.Contract.ParseJsonStringArray(&_Vm.CallOpts, json, key)
}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_Vm *VmCallerSession) ParseJsonStringArray(json string, key string) ([]string, error) {
	return _Vm.Contract.ParseJsonStringArray(&_Vm.CallOpts, json, key)
}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_Vm *VmCaller) ParseJsonUint(opts *bind.CallOpts, json string, key string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonUint", json, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_Vm *VmSession) ParseJsonUint(json string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseJsonUint(&_Vm.CallOpts, json, key)
}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_Vm *VmCallerSession) ParseJsonUint(json string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseJsonUint(&_Vm.CallOpts, json, key)
}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_Vm *VmCaller) ParseJsonUintArray(opts *bind.CallOpts, json string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseJsonUintArray", json, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_Vm *VmSession) ParseJsonUintArray(json string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseJsonUintArray(&_Vm.CallOpts, json, key)
}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_Vm *VmCallerSession) ParseJsonUintArray(json string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseJsonUintArray(&_Vm.CallOpts, json, key)
}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmCaller) ParseToml(opts *bind.CallOpts, toml string, key string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseToml", toml, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmSession) ParseToml(toml string, key string) ([]byte, error) {
	return _Vm.Contract.ParseToml(&_Vm.CallOpts, toml, key)
}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_Vm *VmCallerSession) ParseToml(toml string, key string) ([]byte, error) {
	return _Vm.Contract.ParseToml(&_Vm.CallOpts, toml, key)
}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_Vm *VmCaller) ParseToml0(opts *bind.CallOpts, toml string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseToml0", toml)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_Vm *VmSession) ParseToml0(toml string) ([]byte, error) {
	return _Vm.Contract.ParseToml0(&_Vm.CallOpts, toml)
}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_Vm *VmCallerSession) ParseToml0(toml string) ([]byte, error) {
	return _Vm.Contract.ParseToml0(&_Vm.CallOpts, toml)
}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_Vm *VmCaller) ParseTomlAddress(opts *bind.CallOpts, toml string, key string) (common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlAddress", toml, key)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_Vm *VmSession) ParseTomlAddress(toml string, key string) (common.Address, error) {
	return _Vm.Contract.ParseTomlAddress(&_Vm.CallOpts, toml, key)
}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_Vm *VmCallerSession) ParseTomlAddress(toml string, key string) (common.Address, error) {
	return _Vm.Contract.ParseTomlAddress(&_Vm.CallOpts, toml, key)
}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_Vm *VmCaller) ParseTomlAddressArray(opts *bind.CallOpts, toml string, key string) ([]common.Address, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlAddressArray", toml, key)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_Vm *VmSession) ParseTomlAddressArray(toml string, key string) ([]common.Address, error) {
	return _Vm.Contract.ParseTomlAddressArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_Vm *VmCallerSession) ParseTomlAddressArray(toml string, key string) ([]common.Address, error) {
	return _Vm.Contract.ParseTomlAddressArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_Vm *VmCaller) ParseTomlBool(opts *bind.CallOpts, toml string, key string) (bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBool", toml, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_Vm *VmSession) ParseTomlBool(toml string, key string) (bool, error) {
	return _Vm.Contract.ParseTomlBool(&_Vm.CallOpts, toml, key)
}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_Vm *VmCallerSession) ParseTomlBool(toml string, key string) (bool, error) {
	return _Vm.Contract.ParseTomlBool(&_Vm.CallOpts, toml, key)
}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_Vm *VmCaller) ParseTomlBoolArray(opts *bind.CallOpts, toml string, key string) ([]bool, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBoolArray", toml, key)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_Vm *VmSession) ParseTomlBoolArray(toml string, key string) ([]bool, error) {
	return _Vm.Contract.ParseTomlBoolArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_Vm *VmCallerSession) ParseTomlBoolArray(toml string, key string) ([]bool, error) {
	return _Vm.Contract.ParseTomlBoolArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_Vm *VmCaller) ParseTomlBytes(opts *bind.CallOpts, toml string, key string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBytes", toml, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_Vm *VmSession) ParseTomlBytes(toml string, key string) ([]byte, error) {
	return _Vm.Contract.ParseTomlBytes(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_Vm *VmCallerSession) ParseTomlBytes(toml string, key string) ([]byte, error) {
	return _Vm.Contract.ParseTomlBytes(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_Vm *VmCaller) ParseTomlBytes32(opts *bind.CallOpts, toml string, key string) ([32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBytes32", toml, key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_Vm *VmSession) ParseTomlBytes32(toml string, key string) ([32]byte, error) {
	return _Vm.Contract.ParseTomlBytes32(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_Vm *VmCallerSession) ParseTomlBytes32(toml string, key string) ([32]byte, error) {
	return _Vm.Contract.ParseTomlBytes32(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_Vm *VmCaller) ParseTomlBytes32Array(opts *bind.CallOpts, toml string, key string) ([][32]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBytes32Array", toml, key)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_Vm *VmSession) ParseTomlBytes32Array(toml string, key string) ([][32]byte, error) {
	return _Vm.Contract.ParseTomlBytes32Array(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_Vm *VmCallerSession) ParseTomlBytes32Array(toml string, key string) ([][32]byte, error) {
	return _Vm.Contract.ParseTomlBytes32Array(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_Vm *VmCaller) ParseTomlBytesArray(opts *bind.CallOpts, toml string, key string) ([][]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlBytesArray", toml, key)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_Vm *VmSession) ParseTomlBytesArray(toml string, key string) ([][]byte, error) {
	return _Vm.Contract.ParseTomlBytesArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_Vm *VmCallerSession) ParseTomlBytesArray(toml string, key string) ([][]byte, error) {
	return _Vm.Contract.ParseTomlBytesArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_Vm *VmCaller) ParseTomlInt(opts *bind.CallOpts, toml string, key string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlInt", toml, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_Vm *VmSession) ParseTomlInt(toml string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseTomlInt(&_Vm.CallOpts, toml, key)
}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_Vm *VmCallerSession) ParseTomlInt(toml string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseTomlInt(&_Vm.CallOpts, toml, key)
}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_Vm *VmCaller) ParseTomlIntArray(opts *bind.CallOpts, toml string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlIntArray", toml, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_Vm *VmSession) ParseTomlIntArray(toml string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseTomlIntArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_Vm *VmCallerSession) ParseTomlIntArray(toml string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseTomlIntArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_Vm *VmCaller) ParseTomlKeys(opts *bind.CallOpts, toml string, key string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlKeys", toml, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_Vm *VmSession) ParseTomlKeys(toml string, key string) ([]string, error) {
	return _Vm.Contract.ParseTomlKeys(&_Vm.CallOpts, toml, key)
}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_Vm *VmCallerSession) ParseTomlKeys(toml string, key string) ([]string, error) {
	return _Vm.Contract.ParseTomlKeys(&_Vm.CallOpts, toml, key)
}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_Vm *VmCaller) ParseTomlString(opts *bind.CallOpts, toml string, key string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlString", toml, key)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_Vm *VmSession) ParseTomlString(toml string, key string) (string, error) {
	return _Vm.Contract.ParseTomlString(&_Vm.CallOpts, toml, key)
}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_Vm *VmCallerSession) ParseTomlString(toml string, key string) (string, error) {
	return _Vm.Contract.ParseTomlString(&_Vm.CallOpts, toml, key)
}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_Vm *VmCaller) ParseTomlStringArray(opts *bind.CallOpts, toml string, key string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlStringArray", toml, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_Vm *VmSession) ParseTomlStringArray(toml string, key string) ([]string, error) {
	return _Vm.Contract.ParseTomlStringArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_Vm *VmCallerSession) ParseTomlStringArray(toml string, key string) ([]string, error) {
	return _Vm.Contract.ParseTomlStringArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_Vm *VmCaller) ParseTomlUint(opts *bind.CallOpts, toml string, key string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlUint", toml, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_Vm *VmSession) ParseTomlUint(toml string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseTomlUint(&_Vm.CallOpts, toml, key)
}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_Vm *VmCallerSession) ParseTomlUint(toml string, key string) (*big.Int, error) {
	return _Vm.Contract.ParseTomlUint(&_Vm.CallOpts, toml, key)
}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_Vm *VmCaller) ParseTomlUintArray(opts *bind.CallOpts, toml string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseTomlUintArray", toml, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_Vm *VmSession) ParseTomlUintArray(toml string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseTomlUintArray(&_Vm.CallOpts, toml, key)
}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_Vm *VmCallerSession) ParseTomlUintArray(toml string, key string) ([]*big.Int, error) {
	return _Vm.Contract.ParseTomlUintArray(&_Vm.CallOpts, toml, key)
}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_Vm *VmCaller) ParseUint(opts *bind.CallOpts, stringifiedValue string) (*big.Int, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "parseUint", stringifiedValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_Vm *VmSession) ParseUint(stringifiedValue string) (*big.Int, error) {
	return _Vm.Contract.ParseUint(&_Vm.CallOpts, stringifiedValue)
}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_Vm *VmCallerSession) ParseUint(stringifiedValue string) (*big.Int, error) {
	return _Vm.Contract.ParseUint(&_Vm.CallOpts, stringifiedValue)
}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_Vm *VmCaller) ProjectRoot(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "projectRoot")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_Vm *VmSession) ProjectRoot() (string, error) {
	return _Vm.Contract.ProjectRoot(&_Vm.CallOpts)
}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_Vm *VmCallerSession) ProjectRoot() (string, error) {
	return _Vm.Contract.ProjectRoot(&_Vm.CallOpts)
}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCaller) ReadDir(opts *bind.CallOpts, path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readDir", path, maxDepth)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmSession) ReadDir(path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir(&_Vm.CallOpts, path, maxDepth)
}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCallerSession) ReadDir(path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir(&_Vm.CallOpts, path, maxDepth)
}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCaller) ReadDir0(opts *bind.CallOpts, path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readDir0", path, maxDepth, followLinks)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmSession) ReadDir0(path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir0(&_Vm.CallOpts, path, maxDepth, followLinks)
}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCallerSession) ReadDir0(path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir0(&_Vm.CallOpts, path, maxDepth, followLinks)
}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCaller) ReadDir1(opts *bind.CallOpts, path string) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readDir1", path)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmSession) ReadDir1(path string) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir1(&_Vm.CallOpts, path)
}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_Vm *VmCallerSession) ReadDir1(path string) ([]VmSafeDirEntry, error) {
	return _Vm.Contract.ReadDir1(&_Vm.CallOpts, path)
}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_Vm *VmCaller) ReadFile(opts *bind.CallOpts, path string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readFile", path)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_Vm *VmSession) ReadFile(path string) (string, error) {
	return _Vm.Contract.ReadFile(&_Vm.CallOpts, path)
}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_Vm *VmCallerSession) ReadFile(path string) (string, error) {
	return _Vm.Contract.ReadFile(&_Vm.CallOpts, path)
}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_Vm *VmCaller) ReadFileBinary(opts *bind.CallOpts, path string) ([]byte, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readFileBinary", path)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_Vm *VmSession) ReadFileBinary(path string) ([]byte, error) {
	return _Vm.Contract.ReadFileBinary(&_Vm.CallOpts, path)
}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_Vm *VmCallerSession) ReadFileBinary(path string) ([]byte, error) {
	return _Vm.Contract.ReadFileBinary(&_Vm.CallOpts, path)
}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_Vm *VmCaller) ReadLine(opts *bind.CallOpts, path string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readLine", path)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_Vm *VmSession) ReadLine(path string) (string, error) {
	return _Vm.Contract.ReadLine(&_Vm.CallOpts, path)
}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_Vm *VmCallerSession) ReadLine(path string) (string, error) {
	return _Vm.Contract.ReadLine(&_Vm.CallOpts, path)
}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_Vm *VmCaller) ReadLink(opts *bind.CallOpts, linkPath string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "readLink", linkPath)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_Vm *VmSession) ReadLink(linkPath string) (string, error) {
	return _Vm.Contract.ReadLink(&_Vm.CallOpts, linkPath)
}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_Vm *VmCallerSession) ReadLink(linkPath string) (string, error) {
	return _Vm.Contract.ReadLink(&_Vm.CallOpts, linkPath)
}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_Vm *VmCaller) Replace(opts *bind.CallOpts, input string, from string, to string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "replace", input, from, to)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_Vm *VmSession) Replace(input string, from string, to string) (string, error) {
	return _Vm.Contract.Replace(&_Vm.CallOpts, input, from, to)
}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_Vm *VmCallerSession) Replace(input string, from string, to string) (string, error) {
	return _Vm.Contract.Replace(&_Vm.CallOpts, input, from, to)
}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_Vm *VmCaller) RpcUrl(opts *bind.CallOpts, rpcAlias string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "rpcUrl", rpcAlias)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_Vm *VmSession) RpcUrl(rpcAlias string) (string, error) {
	return _Vm.Contract.RpcUrl(&_Vm.CallOpts, rpcAlias)
}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_Vm *VmCallerSession) RpcUrl(rpcAlias string) (string, error) {
	return _Vm.Contract.RpcUrl(&_Vm.CallOpts, rpcAlias)
}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_Vm *VmCaller) RpcUrlStructs(opts *bind.CallOpts) ([]VmSafeRpc, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "rpcUrlStructs")

	if err != nil {
		return *new([]VmSafeRpc), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeRpc)).(*[]VmSafeRpc)

	return out0, err

}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_Vm *VmSession) RpcUrlStructs() ([]VmSafeRpc, error) {
	return _Vm.Contract.RpcUrlStructs(&_Vm.CallOpts)
}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_Vm *VmCallerSession) RpcUrlStructs() ([]VmSafeRpc, error) {
	return _Vm.Contract.RpcUrlStructs(&_Vm.CallOpts)
}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_Vm *VmCaller) RpcUrls(opts *bind.CallOpts) ([][2]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "rpcUrls")

	if err != nil {
		return *new([][2]string), err
	}

	out0 := *abi.ConvertType(out[0], new([][2]string)).(*[][2]string)

	return out0, err

}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_Vm *VmSession) RpcUrls() ([][2]string, error) {
	return _Vm.Contract.RpcUrls(&_Vm.CallOpts)
}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_Vm *VmCallerSession) RpcUrls() ([][2]string, error) {
	return _Vm.Contract.RpcUrls(&_Vm.CallOpts)
}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCaller) Sign(opts *bind.CallOpts, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "sign", digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmSession) Sign(digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign(&_Vm.CallOpts, digest)
}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCallerSession) Sign(digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign(&_Vm.CallOpts, digest)
}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCaller) Sign0(opts *bind.CallOpts, signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "sign0", signer, digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmSession) Sign0(signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign0(&_Vm.CallOpts, signer, digest)
}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCallerSession) Sign0(signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign0(&_Vm.CallOpts, signer, digest)
}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCaller) Sign2(opts *bind.CallOpts, privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "sign2", privateKey, digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmSession) Sign2(privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign2(&_Vm.CallOpts, privateKey, digest)
}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmCallerSession) Sign2(privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.Sign2(&_Vm.CallOpts, privateKey, digest)
}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_Vm *VmCaller) SignP256(opts *bind.CallOpts, privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "signP256", privateKey, digest)

	outstruct := new(struct {
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.R = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_Vm *VmSession) SignP256(privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.SignP256(&_Vm.CallOpts, privateKey, digest)
}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_Vm *VmCallerSession) SignP256(privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	return _Vm.Contract.SignP256(&_Vm.CallOpts, privateKey, digest)
}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_Vm *VmCaller) Split(opts *bind.CallOpts, input string, delimiter string) ([]string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "split", input, delimiter)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_Vm *VmSession) Split(input string, delimiter string) ([]string, error) {
	return _Vm.Contract.Split(&_Vm.CallOpts, input, delimiter)
}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_Vm *VmCallerSession) Split(input string, delimiter string) ([]string, error) {
	return _Vm.Contract.Split(&_Vm.CallOpts, input, delimiter)
}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_Vm *VmCaller) ToBase64(opts *bind.CallOpts, data string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toBase64", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_Vm *VmSession) ToBase64(data string) (string, error) {
	return _Vm.Contract.ToBase64(&_Vm.CallOpts, data)
}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_Vm *VmCallerSession) ToBase64(data string) (string, error) {
	return _Vm.Contract.ToBase64(&_Vm.CallOpts, data)
}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_Vm *VmCaller) ToBase640(opts *bind.CallOpts, data []byte) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toBase640", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_Vm *VmSession) ToBase640(data []byte) (string, error) {
	return _Vm.Contract.ToBase640(&_Vm.CallOpts, data)
}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_Vm *VmCallerSession) ToBase640(data []byte) (string, error) {
	return _Vm.Contract.ToBase640(&_Vm.CallOpts, data)
}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_Vm *VmCaller) ToBase64URL(opts *bind.CallOpts, data string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toBase64URL", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_Vm *VmSession) ToBase64URL(data string) (string, error) {
	return _Vm.Contract.ToBase64URL(&_Vm.CallOpts, data)
}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_Vm *VmCallerSession) ToBase64URL(data string) (string, error) {
	return _Vm.Contract.ToBase64URL(&_Vm.CallOpts, data)
}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_Vm *VmCaller) ToBase64URL0(opts *bind.CallOpts, data []byte) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toBase64URL0", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_Vm *VmSession) ToBase64URL0(data []byte) (string, error) {
	return _Vm.Contract.ToBase64URL0(&_Vm.CallOpts, data)
}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_Vm *VmCallerSession) ToBase64URL0(data []byte) (string, error) {
	return _Vm.Contract.ToBase64URL0(&_Vm.CallOpts, data)
}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_Vm *VmCaller) ToLowercase(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toLowercase", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_Vm *VmSession) ToLowercase(input string) (string, error) {
	return _Vm.Contract.ToLowercase(&_Vm.CallOpts, input)
}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_Vm *VmCallerSession) ToLowercase(input string) (string, error) {
	return _Vm.Contract.ToLowercase(&_Vm.CallOpts, input)
}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString(opts *bind.CallOpts, value common.Address) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString(value common.Address) (string, error) {
	return _Vm.Contract.ToString(&_Vm.CallOpts, value)
}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString(value common.Address) (string, error) {
	return _Vm.Contract.ToString(&_Vm.CallOpts, value)
}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString0(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString0", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString0(value *big.Int) (string, error) {
	return _Vm.Contract.ToString0(&_Vm.CallOpts, value)
}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString0(value *big.Int) (string, error) {
	return _Vm.Contract.ToString0(&_Vm.CallOpts, value)
}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString1(opts *bind.CallOpts, value []byte) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString1", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString1(value []byte) (string, error) {
	return _Vm.Contract.ToString1(&_Vm.CallOpts, value)
}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString1(value []byte) (string, error) {
	return _Vm.Contract.ToString1(&_Vm.CallOpts, value)
}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString2(opts *bind.CallOpts, value bool) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString2", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString2(value bool) (string, error) {
	return _Vm.Contract.ToString2(&_Vm.CallOpts, value)
}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString2(value bool) (string, error) {
	return _Vm.Contract.ToString2(&_Vm.CallOpts, value)
}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString3(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString3", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString3(value *big.Int) (string, error) {
	return _Vm.Contract.ToString3(&_Vm.CallOpts, value)
}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString3(value *big.Int) (string, error) {
	return _Vm.Contract.ToString3(&_Vm.CallOpts, value)
}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_Vm *VmCaller) ToString4(opts *bind.CallOpts, value [32]byte) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toString4", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_Vm *VmSession) ToString4(value [32]byte) (string, error) {
	return _Vm.Contract.ToString4(&_Vm.CallOpts, value)
}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_Vm *VmCallerSession) ToString4(value [32]byte) (string, error) {
	return _Vm.Contract.ToString4(&_Vm.CallOpts, value)
}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_Vm *VmCaller) ToUppercase(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "toUppercase", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_Vm *VmSession) ToUppercase(input string) (string, error) {
	return _Vm.Contract.ToUppercase(&_Vm.CallOpts, input)
}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_Vm *VmCallerSession) ToUppercase(input string) (string, error) {
	return _Vm.Contract.ToUppercase(&_Vm.CallOpts, input)
}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_Vm *VmCaller) Trim(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _Vm.contract.Call(opts, &out, "trim", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_Vm *VmSession) Trim(input string) (string, error) {
	return _Vm.Contract.Trim(&_Vm.CallOpts, input)
}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_Vm *VmCallerSession) Trim(input string) (string, error) {
	return _Vm.Contract.Trim(&_Vm.CallOpts, input)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_Vm *VmTransactor) Accesses(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "accesses", target)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_Vm *VmSession) Accesses(target common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Accesses(&_Vm.TransactOpts, target)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_Vm *VmTransactorSession) Accesses(target common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Accesses(&_Vm.TransactOpts, target)
}

// AllowCheatcodes is a paid mutator transaction binding the contract method 0xea060291.
//
// Solidity: function allowCheatcodes(address account) returns()
func (_Vm *VmTransactor) AllowCheatcodes(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "allowCheatcodes", account)
}

// AllowCheatcodes is a paid mutator transaction binding the contract method 0xea060291.
//
// Solidity: function allowCheatcodes(address account) returns()
func (_Vm *VmSession) AllowCheatcodes(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.AllowCheatcodes(&_Vm.TransactOpts, account)
}

// AllowCheatcodes is a paid mutator transaction binding the contract method 0xea060291.
//
// Solidity: function allowCheatcodes(address account) returns()
func (_Vm *VmTransactorSession) AllowCheatcodes(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.AllowCheatcodes(&_Vm.TransactOpts, account)
}

// BlobBaseFee is a paid mutator transaction binding the contract method 0x6d315d7e.
//
// Solidity: function blobBaseFee(uint256 newBlobBaseFee) returns()
func (_Vm *VmTransactor) BlobBaseFee(opts *bind.TransactOpts, newBlobBaseFee *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "blobBaseFee", newBlobBaseFee)
}

// BlobBaseFee is a paid mutator transaction binding the contract method 0x6d315d7e.
//
// Solidity: function blobBaseFee(uint256 newBlobBaseFee) returns()
func (_Vm *VmSession) BlobBaseFee(newBlobBaseFee *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.BlobBaseFee(&_Vm.TransactOpts, newBlobBaseFee)
}

// BlobBaseFee is a paid mutator transaction binding the contract method 0x6d315d7e.
//
// Solidity: function blobBaseFee(uint256 newBlobBaseFee) returns()
func (_Vm *VmTransactorSession) BlobBaseFee(newBlobBaseFee *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.BlobBaseFee(&_Vm.TransactOpts, newBlobBaseFee)
}

// Blobhashes is a paid mutator transaction binding the contract method 0x129de7eb.
//
// Solidity: function blobhashes(bytes32[] hashes) returns()
func (_Vm *VmTransactor) Blobhashes(opts *bind.TransactOpts, hashes [][32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "blobhashes", hashes)
}

// Blobhashes is a paid mutator transaction binding the contract method 0x129de7eb.
//
// Solidity: function blobhashes(bytes32[] hashes) returns()
func (_Vm *VmSession) Blobhashes(hashes [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Blobhashes(&_Vm.TransactOpts, hashes)
}

// Blobhashes is a paid mutator transaction binding the contract method 0x129de7eb.
//
// Solidity: function blobhashes(bytes32[] hashes) returns()
func (_Vm *VmTransactorSession) Blobhashes(hashes [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Blobhashes(&_Vm.TransactOpts, hashes)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_Vm *VmTransactor) Breakpoint(opts *bind.TransactOpts, char string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "breakpoint", char)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_Vm *VmSession) Breakpoint(char string) (*types.Transaction, error) {
	return _Vm.Contract.Breakpoint(&_Vm.TransactOpts, char)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_Vm *VmTransactorSession) Breakpoint(char string) (*types.Transaction, error) {
	return _Vm.Contract.Breakpoint(&_Vm.TransactOpts, char)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_Vm *VmTransactor) Breakpoint0(opts *bind.TransactOpts, char string, value bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "breakpoint0", char, value)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_Vm *VmSession) Breakpoint0(char string, value bool) (*types.Transaction, error) {
	return _Vm.Contract.Breakpoint0(&_Vm.TransactOpts, char, value)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_Vm *VmTransactorSession) Breakpoint0(char string, value bool) (*types.Transaction, error) {
	return _Vm.Contract.Breakpoint0(&_Vm.TransactOpts, char, value)
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_Vm *VmTransactor) Broadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "broadcast")
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_Vm *VmSession) Broadcast() (*types.Transaction, error) {
	return _Vm.Contract.Broadcast(&_Vm.TransactOpts)
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_Vm *VmTransactorSession) Broadcast() (*types.Transaction, error) {
	return _Vm.Contract.Broadcast(&_Vm.TransactOpts)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_Vm *VmTransactor) Broadcast0(opts *bind.TransactOpts, signer common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "broadcast0", signer)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_Vm *VmSession) Broadcast0(signer common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Broadcast0(&_Vm.TransactOpts, signer)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_Vm *VmTransactorSession) Broadcast0(signer common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Broadcast0(&_Vm.TransactOpts, signer)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_Vm *VmTransactor) Broadcast1(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "broadcast1", privateKey)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_Vm *VmSession) Broadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Broadcast1(&_Vm.TransactOpts, privateKey)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_Vm *VmTransactorSession) Broadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Broadcast1(&_Vm.TransactOpts, privateKey)
}

// ChainId is a paid mutator transaction binding the contract method 0x4049ddd2.
//
// Solidity: function chainId(uint256 newChainId) returns()
func (_Vm *VmTransactor) ChainId(opts *bind.TransactOpts, newChainId *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "chainId", newChainId)
}

// ChainId is a paid mutator transaction binding the contract method 0x4049ddd2.
//
// Solidity: function chainId(uint256 newChainId) returns()
func (_Vm *VmSession) ChainId(newChainId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.ChainId(&_Vm.TransactOpts, newChainId)
}

// ChainId is a paid mutator transaction binding the contract method 0x4049ddd2.
//
// Solidity: function chainId(uint256 newChainId) returns()
func (_Vm *VmTransactorSession) ChainId(newChainId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.ChainId(&_Vm.TransactOpts, newChainId)
}

// ClearMockedCalls is a paid mutator transaction binding the contract method 0x3fdf4e15.
//
// Solidity: function clearMockedCalls() returns()
func (_Vm *VmTransactor) ClearMockedCalls(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "clearMockedCalls")
}

// ClearMockedCalls is a paid mutator transaction binding the contract method 0x3fdf4e15.
//
// Solidity: function clearMockedCalls() returns()
func (_Vm *VmSession) ClearMockedCalls() (*types.Transaction, error) {
	return _Vm.Contract.ClearMockedCalls(&_Vm.TransactOpts)
}

// ClearMockedCalls is a paid mutator transaction binding the contract method 0x3fdf4e15.
//
// Solidity: function clearMockedCalls() returns()
func (_Vm *VmTransactorSession) ClearMockedCalls() (*types.Transaction, error) {
	return _Vm.Contract.ClearMockedCalls(&_Vm.TransactOpts)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_Vm *VmTransactor) CloseFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "closeFile", path)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_Vm *VmSession) CloseFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.CloseFile(&_Vm.TransactOpts, path)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_Vm *VmTransactorSession) CloseFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.CloseFile(&_Vm.TransactOpts, path)
}

// Coinbase is a paid mutator transaction binding the contract method 0xff483c54.
//
// Solidity: function coinbase(address newCoinbase) returns()
func (_Vm *VmTransactor) Coinbase(opts *bind.TransactOpts, newCoinbase common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "coinbase", newCoinbase)
}

// Coinbase is a paid mutator transaction binding the contract method 0xff483c54.
//
// Solidity: function coinbase(address newCoinbase) returns()
func (_Vm *VmSession) Coinbase(newCoinbase common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Coinbase(&_Vm.TransactOpts, newCoinbase)
}

// Coinbase is a paid mutator transaction binding the contract method 0xff483c54.
//
// Solidity: function coinbase(address newCoinbase) returns()
func (_Vm *VmTransactorSession) Coinbase(newCoinbase common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Coinbase(&_Vm.TransactOpts, newCoinbase)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_Vm *VmTransactor) CopyFile(opts *bind.TransactOpts, from string, to string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "copyFile", from, to)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_Vm *VmSession) CopyFile(from string, to string) (*types.Transaction, error) {
	return _Vm.Contract.CopyFile(&_Vm.TransactOpts, from, to)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_Vm *VmTransactorSession) CopyFile(from string, to string) (*types.Transaction, error) {
	return _Vm.Contract.CopyFile(&_Vm.TransactOpts, from, to)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_Vm *VmTransactor) CreateDir(opts *bind.TransactOpts, path string, recursive bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createDir", path, recursive)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_Vm *VmSession) CreateDir(path string, recursive bool) (*types.Transaction, error) {
	return _Vm.Contract.CreateDir(&_Vm.TransactOpts, path, recursive)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_Vm *VmTransactorSession) CreateDir(path string, recursive bool) (*types.Transaction, error) {
	return _Vm.Contract.CreateDir(&_Vm.TransactOpts, path, recursive)
}

// CreateFork is a paid mutator transaction binding the contract method 0x31ba3498.
//
// Solidity: function createFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateFork(opts *bind.TransactOpts, urlOrAlias string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createFork", urlOrAlias)
}

// CreateFork is a paid mutator transaction binding the contract method 0x31ba3498.
//
// Solidity: function createFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmSession) CreateFork(urlOrAlias string) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork(&_Vm.TransactOpts, urlOrAlias)
}

// CreateFork is a paid mutator transaction binding the contract method 0x31ba3498.
//
// Solidity: function createFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateFork(urlOrAlias string) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork(&_Vm.TransactOpts, urlOrAlias)
}

// CreateFork0 is a paid mutator transaction binding the contract method 0x6ba3ba2b.
//
// Solidity: function createFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateFork0(opts *bind.TransactOpts, urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createFork0", urlOrAlias, blockNumber)
}

// CreateFork0 is a paid mutator transaction binding the contract method 0x6ba3ba2b.
//
// Solidity: function createFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmSession) CreateFork0(urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork0(&_Vm.TransactOpts, urlOrAlias, blockNumber)
}

// CreateFork0 is a paid mutator transaction binding the contract method 0x6ba3ba2b.
//
// Solidity: function createFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateFork0(urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork0(&_Vm.TransactOpts, urlOrAlias, blockNumber)
}

// CreateFork1 is a paid mutator transaction binding the contract method 0x7ca29682.
//
// Solidity: function createFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateFork1(opts *bind.TransactOpts, urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createFork1", urlOrAlias, txHash)
}

// CreateFork1 is a paid mutator transaction binding the contract method 0x7ca29682.
//
// Solidity: function createFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmSession) CreateFork1(urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork1(&_Vm.TransactOpts, urlOrAlias, txHash)
}

// CreateFork1 is a paid mutator transaction binding the contract method 0x7ca29682.
//
// Solidity: function createFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateFork1(urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.CreateFork1(&_Vm.TransactOpts, urlOrAlias, txHash)
}

// CreateSelectFork is a paid mutator transaction binding the contract method 0x71ee464d.
//
// Solidity: function createSelectFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateSelectFork(opts *bind.TransactOpts, urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createSelectFork", urlOrAlias, blockNumber)
}

// CreateSelectFork is a paid mutator transaction binding the contract method 0x71ee464d.
//
// Solidity: function createSelectFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmSession) CreateSelectFork(urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork(&_Vm.TransactOpts, urlOrAlias, blockNumber)
}

// CreateSelectFork is a paid mutator transaction binding the contract method 0x71ee464d.
//
// Solidity: function createSelectFork(string urlOrAlias, uint256 blockNumber) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateSelectFork(urlOrAlias string, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork(&_Vm.TransactOpts, urlOrAlias, blockNumber)
}

// CreateSelectFork0 is a paid mutator transaction binding the contract method 0x84d52b7a.
//
// Solidity: function createSelectFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateSelectFork0(opts *bind.TransactOpts, urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createSelectFork0", urlOrAlias, txHash)
}

// CreateSelectFork0 is a paid mutator transaction binding the contract method 0x84d52b7a.
//
// Solidity: function createSelectFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmSession) CreateSelectFork0(urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork0(&_Vm.TransactOpts, urlOrAlias, txHash)
}

// CreateSelectFork0 is a paid mutator transaction binding the contract method 0x84d52b7a.
//
// Solidity: function createSelectFork(string urlOrAlias, bytes32 txHash) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateSelectFork0(urlOrAlias string, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork0(&_Vm.TransactOpts, urlOrAlias, txHash)
}

// CreateSelectFork1 is a paid mutator transaction binding the contract method 0x98680034.
//
// Solidity: function createSelectFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmTransactor) CreateSelectFork1(opts *bind.TransactOpts, urlOrAlias string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createSelectFork1", urlOrAlias)
}

// CreateSelectFork1 is a paid mutator transaction binding the contract method 0x98680034.
//
// Solidity: function createSelectFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmSession) CreateSelectFork1(urlOrAlias string) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork1(&_Vm.TransactOpts, urlOrAlias)
}

// CreateSelectFork1 is a paid mutator transaction binding the contract method 0x98680034.
//
// Solidity: function createSelectFork(string urlOrAlias) returns(uint256 forkId)
func (_Vm *VmTransactorSession) CreateSelectFork1(urlOrAlias string) (*types.Transaction, error) {
	return _Vm.Contract.CreateSelectFork1(&_Vm.TransactOpts, urlOrAlias)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactor) CreateWallet(opts *bind.TransactOpts, walletLabel string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createWallet", walletLabel)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmSession) CreateWallet(walletLabel string) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet(&_Vm.TransactOpts, walletLabel)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactorSession) CreateWallet(walletLabel string) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet(&_Vm.TransactOpts, walletLabel)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactor) CreateWallet0(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createWallet0", privateKey)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmSession) CreateWallet0(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet0(&_Vm.TransactOpts, privateKey)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactorSession) CreateWallet0(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet0(&_Vm.TransactOpts, privateKey)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactor) CreateWallet1(opts *bind.TransactOpts, privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "createWallet1", privateKey, walletLabel)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmSession) CreateWallet1(privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet1(&_Vm.TransactOpts, privateKey, walletLabel)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_Vm *VmTransactorSession) CreateWallet1(privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _Vm.Contract.CreateWallet1(&_Vm.TransactOpts, privateKey, walletLabel)
}

// Deal is a paid mutator transaction binding the contract method 0xc88a5e6d.
//
// Solidity: function deal(address account, uint256 newBalance) returns()
func (_Vm *VmTransactor) Deal(opts *bind.TransactOpts, account common.Address, newBalance *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "deal", account, newBalance)
}

// Deal is a paid mutator transaction binding the contract method 0xc88a5e6d.
//
// Solidity: function deal(address account, uint256 newBalance) returns()
func (_Vm *VmSession) Deal(account common.Address, newBalance *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Deal(&_Vm.TransactOpts, account, newBalance)
}

// Deal is a paid mutator transaction binding the contract method 0xc88a5e6d.
//
// Solidity: function deal(address account, uint256 newBalance) returns()
func (_Vm *VmTransactorSession) Deal(account common.Address, newBalance *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Deal(&_Vm.TransactOpts, account, newBalance)
}

// DeleteSnapshot is a paid mutator transaction binding the contract method 0xa6368557.
//
// Solidity: function deleteSnapshot(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactor) DeleteSnapshot(opts *bind.TransactOpts, snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "deleteSnapshot", snapshotId)
}

// DeleteSnapshot is a paid mutator transaction binding the contract method 0xa6368557.
//
// Solidity: function deleteSnapshot(uint256 snapshotId) returns(bool success)
func (_Vm *VmSession) DeleteSnapshot(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.DeleteSnapshot(&_Vm.TransactOpts, snapshotId)
}

// DeleteSnapshot is a paid mutator transaction binding the contract method 0xa6368557.
//
// Solidity: function deleteSnapshot(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactorSession) DeleteSnapshot(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.DeleteSnapshot(&_Vm.TransactOpts, snapshotId)
}

// DeleteSnapshots is a paid mutator transaction binding the contract method 0x421ae469.
//
// Solidity: function deleteSnapshots() returns()
func (_Vm *VmTransactor) DeleteSnapshots(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "deleteSnapshots")
}

// DeleteSnapshots is a paid mutator transaction binding the contract method 0x421ae469.
//
// Solidity: function deleteSnapshots() returns()
func (_Vm *VmSession) DeleteSnapshots() (*types.Transaction, error) {
	return _Vm.Contract.DeleteSnapshots(&_Vm.TransactOpts)
}

// DeleteSnapshots is a paid mutator transaction binding the contract method 0x421ae469.
//
// Solidity: function deleteSnapshots() returns()
func (_Vm *VmTransactorSession) DeleteSnapshots() (*types.Transaction, error) {
	return _Vm.Contract.DeleteSnapshots(&_Vm.TransactOpts)
}

// Difficulty is a paid mutator transaction binding the contract method 0x46cc92d9.
//
// Solidity: function difficulty(uint256 newDifficulty) returns()
func (_Vm *VmTransactor) Difficulty(opts *bind.TransactOpts, newDifficulty *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "difficulty", newDifficulty)
}

// Difficulty is a paid mutator transaction binding the contract method 0x46cc92d9.
//
// Solidity: function difficulty(uint256 newDifficulty) returns()
func (_Vm *VmSession) Difficulty(newDifficulty *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Difficulty(&_Vm.TransactOpts, newDifficulty)
}

// Difficulty is a paid mutator transaction binding the contract method 0x46cc92d9.
//
// Solidity: function difficulty(uint256 newDifficulty) returns()
func (_Vm *VmTransactorSession) Difficulty(newDifficulty *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Difficulty(&_Vm.TransactOpts, newDifficulty)
}

// DumpState is a paid mutator transaction binding the contract method 0x709ecd3f.
//
// Solidity: function dumpState(string pathToStateJson) returns()
func (_Vm *VmTransactor) DumpState(opts *bind.TransactOpts, pathToStateJson string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "dumpState", pathToStateJson)
}

// DumpState is a paid mutator transaction binding the contract method 0x709ecd3f.
//
// Solidity: function dumpState(string pathToStateJson) returns()
func (_Vm *VmSession) DumpState(pathToStateJson string) (*types.Transaction, error) {
	return _Vm.Contract.DumpState(&_Vm.TransactOpts, pathToStateJson)
}

// DumpState is a paid mutator transaction binding the contract method 0x709ecd3f.
//
// Solidity: function dumpState(string pathToStateJson) returns()
func (_Vm *VmTransactorSession) DumpState(pathToStateJson string) (*types.Transaction, error) {
	return _Vm.Contract.DumpState(&_Vm.TransactOpts, pathToStateJson)
}

// Etch is a paid mutator transaction binding the contract method 0xb4d6c782.
//
// Solidity: function etch(address target, bytes newRuntimeBytecode) returns()
func (_Vm *VmTransactor) Etch(opts *bind.TransactOpts, target common.Address, newRuntimeBytecode []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "etch", target, newRuntimeBytecode)
}

// Etch is a paid mutator transaction binding the contract method 0xb4d6c782.
//
// Solidity: function etch(address target, bytes newRuntimeBytecode) returns()
func (_Vm *VmSession) Etch(target common.Address, newRuntimeBytecode []byte) (*types.Transaction, error) {
	return _Vm.Contract.Etch(&_Vm.TransactOpts, target, newRuntimeBytecode)
}

// Etch is a paid mutator transaction binding the contract method 0xb4d6c782.
//
// Solidity: function etch(address target, bytes newRuntimeBytecode) returns()
func (_Vm *VmTransactorSession) Etch(target common.Address, newRuntimeBytecode []byte) (*types.Transaction, error) {
	return _Vm.Contract.Etch(&_Vm.TransactOpts, target, newRuntimeBytecode)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_Vm *VmTransactor) EthGetLogs(opts *bind.TransactOpts, fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "eth_getLogs", fromBlock, toBlock, target, topics)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_Vm *VmSession) EthGetLogs(fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.EthGetLogs(&_Vm.TransactOpts, fromBlock, toBlock, target, topics)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_Vm *VmTransactorSession) EthGetLogs(fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.EthGetLogs(&_Vm.TransactOpts, fromBlock, toBlock, target, topics)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_Vm *VmTransactor) Exists(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "exists", path)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_Vm *VmSession) Exists(path string) (*types.Transaction, error) {
	return _Vm.Contract.Exists(&_Vm.TransactOpts, path)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_Vm *VmTransactorSession) Exists(path string) (*types.Transaction, error) {
	return _Vm.Contract.Exists(&_Vm.TransactOpts, path)
}

// ExpectCall is a paid mutator transaction binding the contract method 0x23361207.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data) returns()
func (_Vm *VmTransactor) ExpectCall(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, gas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall", callee, msgValue, gas, data)
}

// ExpectCall is a paid mutator transaction binding the contract method 0x23361207.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data) returns()
func (_Vm *VmSession) ExpectCall(callee common.Address, msgValue *big.Int, gas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall(&_Vm.TransactOpts, callee, msgValue, gas, data)
}

// ExpectCall is a paid mutator transaction binding the contract method 0x23361207.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data) returns()
func (_Vm *VmTransactorSession) ExpectCall(callee common.Address, msgValue *big.Int, gas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall(&_Vm.TransactOpts, callee, msgValue, gas, data)
}

// ExpectCall0 is a paid mutator transaction binding the contract method 0x65b7b7cc.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data, uint64 count) returns()
func (_Vm *VmTransactor) ExpectCall0(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, gas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall0", callee, msgValue, gas, data, count)
}

// ExpectCall0 is a paid mutator transaction binding the contract method 0x65b7b7cc.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data, uint64 count) returns()
func (_Vm *VmSession) ExpectCall0(callee common.Address, msgValue *big.Int, gas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall0(&_Vm.TransactOpts, callee, msgValue, gas, data, count)
}

// ExpectCall0 is a paid mutator transaction binding the contract method 0x65b7b7cc.
//
// Solidity: function expectCall(address callee, uint256 msgValue, uint64 gas, bytes data, uint64 count) returns()
func (_Vm *VmTransactorSession) ExpectCall0(callee common.Address, msgValue *big.Int, gas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall0(&_Vm.TransactOpts, callee, msgValue, gas, data, count)
}

// ExpectCall1 is a paid mutator transaction binding the contract method 0xa2b1a1ae.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data, uint64 count) returns()
func (_Vm *VmTransactor) ExpectCall1(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall1", callee, msgValue, data, count)
}

// ExpectCall1 is a paid mutator transaction binding the contract method 0xa2b1a1ae.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data, uint64 count) returns()
func (_Vm *VmSession) ExpectCall1(callee common.Address, msgValue *big.Int, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall1(&_Vm.TransactOpts, callee, msgValue, data, count)
}

// ExpectCall1 is a paid mutator transaction binding the contract method 0xa2b1a1ae.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data, uint64 count) returns()
func (_Vm *VmTransactorSession) ExpectCall1(callee common.Address, msgValue *big.Int, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall1(&_Vm.TransactOpts, callee, msgValue, data, count)
}

// ExpectCall2 is a paid mutator transaction binding the contract method 0xbd6af434.
//
// Solidity: function expectCall(address callee, bytes data) returns()
func (_Vm *VmTransactor) ExpectCall2(opts *bind.TransactOpts, callee common.Address, data []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall2", callee, data)
}

// ExpectCall2 is a paid mutator transaction binding the contract method 0xbd6af434.
//
// Solidity: function expectCall(address callee, bytes data) returns()
func (_Vm *VmSession) ExpectCall2(callee common.Address, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall2(&_Vm.TransactOpts, callee, data)
}

// ExpectCall2 is a paid mutator transaction binding the contract method 0xbd6af434.
//
// Solidity: function expectCall(address callee, bytes data) returns()
func (_Vm *VmTransactorSession) ExpectCall2(callee common.Address, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall2(&_Vm.TransactOpts, callee, data)
}

// ExpectCall3 is a paid mutator transaction binding the contract method 0xc1adbbff.
//
// Solidity: function expectCall(address callee, bytes data, uint64 count) returns()
func (_Vm *VmTransactor) ExpectCall3(opts *bind.TransactOpts, callee common.Address, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall3", callee, data, count)
}

// ExpectCall3 is a paid mutator transaction binding the contract method 0xc1adbbff.
//
// Solidity: function expectCall(address callee, bytes data, uint64 count) returns()
func (_Vm *VmSession) ExpectCall3(callee common.Address, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall3(&_Vm.TransactOpts, callee, data, count)
}

// ExpectCall3 is a paid mutator transaction binding the contract method 0xc1adbbff.
//
// Solidity: function expectCall(address callee, bytes data, uint64 count) returns()
func (_Vm *VmTransactorSession) ExpectCall3(callee common.Address, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall3(&_Vm.TransactOpts, callee, data, count)
}

// ExpectCall4 is a paid mutator transaction binding the contract method 0xf30c7ba3.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data) returns()
func (_Vm *VmTransactor) ExpectCall4(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, data []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCall4", callee, msgValue, data)
}

// ExpectCall4 is a paid mutator transaction binding the contract method 0xf30c7ba3.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data) returns()
func (_Vm *VmSession) ExpectCall4(callee common.Address, msgValue *big.Int, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall4(&_Vm.TransactOpts, callee, msgValue, data)
}

// ExpectCall4 is a paid mutator transaction binding the contract method 0xf30c7ba3.
//
// Solidity: function expectCall(address callee, uint256 msgValue, bytes data) returns()
func (_Vm *VmTransactorSession) ExpectCall4(callee common.Address, msgValue *big.Int, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCall4(&_Vm.TransactOpts, callee, msgValue, data)
}

// ExpectCallMinGas is a paid mutator transaction binding the contract method 0x08e4e116.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data) returns()
func (_Vm *VmTransactor) ExpectCallMinGas(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, minGas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCallMinGas", callee, msgValue, minGas, data)
}

// ExpectCallMinGas is a paid mutator transaction binding the contract method 0x08e4e116.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data) returns()
func (_Vm *VmSession) ExpectCallMinGas(callee common.Address, msgValue *big.Int, minGas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCallMinGas(&_Vm.TransactOpts, callee, msgValue, minGas, data)
}

// ExpectCallMinGas is a paid mutator transaction binding the contract method 0x08e4e116.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data) returns()
func (_Vm *VmTransactorSession) ExpectCallMinGas(callee common.Address, msgValue *big.Int, minGas uint64, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCallMinGas(&_Vm.TransactOpts, callee, msgValue, minGas, data)
}

// ExpectCallMinGas0 is a paid mutator transaction binding the contract method 0xe13a1834.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data, uint64 count) returns()
func (_Vm *VmTransactor) ExpectCallMinGas0(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, minGas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectCallMinGas0", callee, msgValue, minGas, data, count)
}

// ExpectCallMinGas0 is a paid mutator transaction binding the contract method 0xe13a1834.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data, uint64 count) returns()
func (_Vm *VmSession) ExpectCallMinGas0(callee common.Address, msgValue *big.Int, minGas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCallMinGas0(&_Vm.TransactOpts, callee, msgValue, minGas, data, count)
}

// ExpectCallMinGas0 is a paid mutator transaction binding the contract method 0xe13a1834.
//
// Solidity: function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes data, uint64 count) returns()
func (_Vm *VmTransactorSession) ExpectCallMinGas0(callee common.Address, msgValue *big.Int, minGas uint64, data []byte, count uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectCallMinGas0(&_Vm.TransactOpts, callee, msgValue, minGas, data, count)
}

// ExpectEmit is a paid mutator transaction binding the contract method 0x440ed10d.
//
// Solidity: function expectEmit() returns()
func (_Vm *VmTransactor) ExpectEmit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectEmit")
}

// ExpectEmit is a paid mutator transaction binding the contract method 0x440ed10d.
//
// Solidity: function expectEmit() returns()
func (_Vm *VmSession) ExpectEmit() (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit(&_Vm.TransactOpts)
}

// ExpectEmit is a paid mutator transaction binding the contract method 0x440ed10d.
//
// Solidity: function expectEmit() returns()
func (_Vm *VmTransactorSession) ExpectEmit() (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit(&_Vm.TransactOpts)
}

// ExpectEmit0 is a paid mutator transaction binding the contract method 0x491cc7c2.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) returns()
func (_Vm *VmTransactor) ExpectEmit0(opts *bind.TransactOpts, checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectEmit0", checkTopic1, checkTopic2, checkTopic3, checkData)
}

// ExpectEmit0 is a paid mutator transaction binding the contract method 0x491cc7c2.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) returns()
func (_Vm *VmSession) ExpectEmit0(checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit0(&_Vm.TransactOpts, checkTopic1, checkTopic2, checkTopic3, checkData)
}

// ExpectEmit0 is a paid mutator transaction binding the contract method 0x491cc7c2.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) returns()
func (_Vm *VmTransactorSession) ExpectEmit0(checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit0(&_Vm.TransactOpts, checkTopic1, checkTopic2, checkTopic3, checkData)
}

// ExpectEmit1 is a paid mutator transaction binding the contract method 0x81bad6f3.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter) returns()
func (_Vm *VmTransactor) ExpectEmit1(opts *bind.TransactOpts, checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool, emitter common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectEmit1", checkTopic1, checkTopic2, checkTopic3, checkData, emitter)
}

// ExpectEmit1 is a paid mutator transaction binding the contract method 0x81bad6f3.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter) returns()
func (_Vm *VmSession) ExpectEmit1(checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool, emitter common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit1(&_Vm.TransactOpts, checkTopic1, checkTopic2, checkTopic3, checkData, emitter)
}

// ExpectEmit1 is a paid mutator transaction binding the contract method 0x81bad6f3.
//
// Solidity: function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter) returns()
func (_Vm *VmTransactorSession) ExpectEmit1(checkTopic1 bool, checkTopic2 bool, checkTopic3 bool, checkData bool, emitter common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit1(&_Vm.TransactOpts, checkTopic1, checkTopic2, checkTopic3, checkData, emitter)
}

// ExpectEmit2 is a paid mutator transaction binding the contract method 0x86b9620d.
//
// Solidity: function expectEmit(address emitter) returns()
func (_Vm *VmTransactor) ExpectEmit2(opts *bind.TransactOpts, emitter common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectEmit2", emitter)
}

// ExpectEmit2 is a paid mutator transaction binding the contract method 0x86b9620d.
//
// Solidity: function expectEmit(address emitter) returns()
func (_Vm *VmSession) ExpectEmit2(emitter common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit2(&_Vm.TransactOpts, emitter)
}

// ExpectEmit2 is a paid mutator transaction binding the contract method 0x86b9620d.
//
// Solidity: function expectEmit(address emitter) returns()
func (_Vm *VmTransactorSession) ExpectEmit2(emitter common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ExpectEmit2(&_Vm.TransactOpts, emitter)
}

// ExpectRevert is a paid mutator transaction binding the contract method 0xc31eb0e0.
//
// Solidity: function expectRevert(bytes4 revertData) returns()
func (_Vm *VmTransactor) ExpectRevert(opts *bind.TransactOpts, revertData [4]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectRevert", revertData)
}

// ExpectRevert is a paid mutator transaction binding the contract method 0xc31eb0e0.
//
// Solidity: function expectRevert(bytes4 revertData) returns()
func (_Vm *VmSession) ExpectRevert(revertData [4]byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert(&_Vm.TransactOpts, revertData)
}

// ExpectRevert is a paid mutator transaction binding the contract method 0xc31eb0e0.
//
// Solidity: function expectRevert(bytes4 revertData) returns()
func (_Vm *VmTransactorSession) ExpectRevert(revertData [4]byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert(&_Vm.TransactOpts, revertData)
}

// ExpectRevert0 is a paid mutator transaction binding the contract method 0xf28dceb3.
//
// Solidity: function expectRevert(bytes revertData) returns()
func (_Vm *VmTransactor) ExpectRevert0(opts *bind.TransactOpts, revertData []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectRevert0", revertData)
}

// ExpectRevert0 is a paid mutator transaction binding the contract method 0xf28dceb3.
//
// Solidity: function expectRevert(bytes revertData) returns()
func (_Vm *VmSession) ExpectRevert0(revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert0(&_Vm.TransactOpts, revertData)
}

// ExpectRevert0 is a paid mutator transaction binding the contract method 0xf28dceb3.
//
// Solidity: function expectRevert(bytes revertData) returns()
func (_Vm *VmTransactorSession) ExpectRevert0(revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert0(&_Vm.TransactOpts, revertData)
}

// ExpectRevert1 is a paid mutator transaction binding the contract method 0xf4844814.
//
// Solidity: function expectRevert() returns()
func (_Vm *VmTransactor) ExpectRevert1(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectRevert1")
}

// ExpectRevert1 is a paid mutator transaction binding the contract method 0xf4844814.
//
// Solidity: function expectRevert() returns()
func (_Vm *VmSession) ExpectRevert1() (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert1(&_Vm.TransactOpts)
}

// ExpectRevert1 is a paid mutator transaction binding the contract method 0xf4844814.
//
// Solidity: function expectRevert() returns()
func (_Vm *VmTransactorSession) ExpectRevert1() (*types.Transaction, error) {
	return _Vm.Contract.ExpectRevert1(&_Vm.TransactOpts)
}

// ExpectSafeMemory is a paid mutator transaction binding the contract method 0x6d016688.
//
// Solidity: function expectSafeMemory(uint64 min, uint64 max) returns()
func (_Vm *VmTransactor) ExpectSafeMemory(opts *bind.TransactOpts, min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectSafeMemory", min, max)
}

// ExpectSafeMemory is a paid mutator transaction binding the contract method 0x6d016688.
//
// Solidity: function expectSafeMemory(uint64 min, uint64 max) returns()
func (_Vm *VmSession) ExpectSafeMemory(min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectSafeMemory(&_Vm.TransactOpts, min, max)
}

// ExpectSafeMemory is a paid mutator transaction binding the contract method 0x6d016688.
//
// Solidity: function expectSafeMemory(uint64 min, uint64 max) returns()
func (_Vm *VmTransactorSession) ExpectSafeMemory(min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectSafeMemory(&_Vm.TransactOpts, min, max)
}

// ExpectSafeMemoryCall is a paid mutator transaction binding the contract method 0x05838bf4.
//
// Solidity: function expectSafeMemoryCall(uint64 min, uint64 max) returns()
func (_Vm *VmTransactor) ExpectSafeMemoryCall(opts *bind.TransactOpts, min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "expectSafeMemoryCall", min, max)
}

// ExpectSafeMemoryCall is a paid mutator transaction binding the contract method 0x05838bf4.
//
// Solidity: function expectSafeMemoryCall(uint64 min, uint64 max) returns()
func (_Vm *VmSession) ExpectSafeMemoryCall(min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectSafeMemoryCall(&_Vm.TransactOpts, min, max)
}

// ExpectSafeMemoryCall is a paid mutator transaction binding the contract method 0x05838bf4.
//
// Solidity: function expectSafeMemoryCall(uint64 min, uint64 max) returns()
func (_Vm *VmTransactorSession) ExpectSafeMemoryCall(min uint64, max uint64) (*types.Transaction, error) {
	return _Vm.Contract.ExpectSafeMemoryCall(&_Vm.TransactOpts, min, max)
}

// Fee is a paid mutator transaction binding the contract method 0x39b37ab0.
//
// Solidity: function fee(uint256 newBasefee) returns()
func (_Vm *VmTransactor) Fee(opts *bind.TransactOpts, newBasefee *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "fee", newBasefee)
}

// Fee is a paid mutator transaction binding the contract method 0x39b37ab0.
//
// Solidity: function fee(uint256 newBasefee) returns()
func (_Vm *VmSession) Fee(newBasefee *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Fee(&_Vm.TransactOpts, newBasefee)
}

// Fee is a paid mutator transaction binding the contract method 0x39b37ab0.
//
// Solidity: function fee(uint256 newBasefee) returns()
func (_Vm *VmTransactorSession) Fee(newBasefee *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Fee(&_Vm.TransactOpts, newBasefee)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_Vm *VmTransactor) Ffi(opts *bind.TransactOpts, commandInput []string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "ffi", commandInput)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_Vm *VmSession) Ffi(commandInput []string) (*types.Transaction, error) {
	return _Vm.Contract.Ffi(&_Vm.TransactOpts, commandInput)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_Vm *VmTransactorSession) Ffi(commandInput []string) (*types.Transaction, error) {
	return _Vm.Contract.Ffi(&_Vm.TransactOpts, commandInput)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_Vm *VmTransactor) GetMappingKeyAndParentOf(opts *bind.TransactOpts, target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "getMappingKeyAndParentOf", target, elementSlot)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_Vm *VmSession) GetMappingKeyAndParentOf(target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingKeyAndParentOf(&_Vm.TransactOpts, target, elementSlot)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_Vm *VmTransactorSession) GetMappingKeyAndParentOf(target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingKeyAndParentOf(&_Vm.TransactOpts, target, elementSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_Vm *VmTransactor) GetMappingLength(opts *bind.TransactOpts, target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "getMappingLength", target, mappingSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_Vm *VmSession) GetMappingLength(target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingLength(&_Vm.TransactOpts, target, mappingSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_Vm *VmTransactorSession) GetMappingLength(target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingLength(&_Vm.TransactOpts, target, mappingSlot)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_Vm *VmTransactor) GetMappingSlotAt(opts *bind.TransactOpts, target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "getMappingSlotAt", target, mappingSlot, idx)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_Vm *VmSession) GetMappingSlotAt(target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingSlotAt(&_Vm.TransactOpts, target, mappingSlot, idx)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_Vm *VmTransactorSession) GetMappingSlotAt(target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.GetMappingSlotAt(&_Vm.TransactOpts, target, mappingSlot, idx)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_Vm *VmTransactor) GetNonce0(opts *bind.TransactOpts, wallet VmSafeWallet) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "getNonce0", wallet)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_Vm *VmSession) GetNonce0(wallet VmSafeWallet) (*types.Transaction, error) {
	return _Vm.Contract.GetNonce0(&_Vm.TransactOpts, wallet)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_Vm *VmTransactorSession) GetNonce0(wallet VmSafeWallet) (*types.Transaction, error) {
	return _Vm.Contract.GetNonce0(&_Vm.TransactOpts, wallet)
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_Vm *VmTransactor) GetRecordedLogs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "getRecordedLogs")
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_Vm *VmSession) GetRecordedLogs() (*types.Transaction, error) {
	return _Vm.Contract.GetRecordedLogs(&_Vm.TransactOpts)
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_Vm *VmTransactorSession) GetRecordedLogs() (*types.Transaction, error) {
	return _Vm.Contract.GetRecordedLogs(&_Vm.TransactOpts)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_Vm *VmTransactor) IsDir(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "isDir", path)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_Vm *VmSession) IsDir(path string) (*types.Transaction, error) {
	return _Vm.Contract.IsDir(&_Vm.TransactOpts, path)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_Vm *VmTransactorSession) IsDir(path string) (*types.Transaction, error) {
	return _Vm.Contract.IsDir(&_Vm.TransactOpts, path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_Vm *VmTransactor) IsFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "isFile", path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_Vm *VmSession) IsFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.IsFile(&_Vm.TransactOpts, path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_Vm *VmTransactorSession) IsFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.IsFile(&_Vm.TransactOpts, path)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_Vm *VmTransactor) Label(opts *bind.TransactOpts, account common.Address, newLabel string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "label", account, newLabel)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_Vm *VmSession) Label(account common.Address, newLabel string) (*types.Transaction, error) {
	return _Vm.Contract.Label(&_Vm.TransactOpts, account, newLabel)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_Vm *VmTransactorSession) Label(account common.Address, newLabel string) (*types.Transaction, error) {
	return _Vm.Contract.Label(&_Vm.TransactOpts, account, newLabel)
}

// LoadAllocs is a paid mutator transaction binding the contract method 0xb3a056d7.
//
// Solidity: function loadAllocs(string pathToAllocsJson) returns()
func (_Vm *VmTransactor) LoadAllocs(opts *bind.TransactOpts, pathToAllocsJson string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "loadAllocs", pathToAllocsJson)
}

// LoadAllocs is a paid mutator transaction binding the contract method 0xb3a056d7.
//
// Solidity: function loadAllocs(string pathToAllocsJson) returns()
func (_Vm *VmSession) LoadAllocs(pathToAllocsJson string) (*types.Transaction, error) {
	return _Vm.Contract.LoadAllocs(&_Vm.TransactOpts, pathToAllocsJson)
}

// LoadAllocs is a paid mutator transaction binding the contract method 0xb3a056d7.
//
// Solidity: function loadAllocs(string pathToAllocsJson) returns()
func (_Vm *VmTransactorSession) LoadAllocs(pathToAllocsJson string) (*types.Transaction, error) {
	return _Vm.Contract.LoadAllocs(&_Vm.TransactOpts, pathToAllocsJson)
}

// MakePersistent is a paid mutator transaction binding the contract method 0x1d9e269e.
//
// Solidity: function makePersistent(address[] accounts) returns()
func (_Vm *VmTransactor) MakePersistent(opts *bind.TransactOpts, accounts []common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "makePersistent", accounts)
}

// MakePersistent is a paid mutator transaction binding the contract method 0x1d9e269e.
//
// Solidity: function makePersistent(address[] accounts) returns()
func (_Vm *VmSession) MakePersistent(accounts []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent(&_Vm.TransactOpts, accounts)
}

// MakePersistent is a paid mutator transaction binding the contract method 0x1d9e269e.
//
// Solidity: function makePersistent(address[] accounts) returns()
func (_Vm *VmTransactorSession) MakePersistent(accounts []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent(&_Vm.TransactOpts, accounts)
}

// MakePersistent0 is a paid mutator transaction binding the contract method 0x4074e0a8.
//
// Solidity: function makePersistent(address account0, address account1) returns()
func (_Vm *VmTransactor) MakePersistent0(opts *bind.TransactOpts, account0 common.Address, account1 common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "makePersistent0", account0, account1)
}

// MakePersistent0 is a paid mutator transaction binding the contract method 0x4074e0a8.
//
// Solidity: function makePersistent(address account0, address account1) returns()
func (_Vm *VmSession) MakePersistent0(account0 common.Address, account1 common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent0(&_Vm.TransactOpts, account0, account1)
}

// MakePersistent0 is a paid mutator transaction binding the contract method 0x4074e0a8.
//
// Solidity: function makePersistent(address account0, address account1) returns()
func (_Vm *VmTransactorSession) MakePersistent0(account0 common.Address, account1 common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent0(&_Vm.TransactOpts, account0, account1)
}

// MakePersistent1 is a paid mutator transaction binding the contract method 0x57e22dde.
//
// Solidity: function makePersistent(address account) returns()
func (_Vm *VmTransactor) MakePersistent1(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "makePersistent1", account)
}

// MakePersistent1 is a paid mutator transaction binding the contract method 0x57e22dde.
//
// Solidity: function makePersistent(address account) returns()
func (_Vm *VmSession) MakePersistent1(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent1(&_Vm.TransactOpts, account)
}

// MakePersistent1 is a paid mutator transaction binding the contract method 0x57e22dde.
//
// Solidity: function makePersistent(address account) returns()
func (_Vm *VmTransactorSession) MakePersistent1(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent1(&_Vm.TransactOpts, account)
}

// MakePersistent2 is a paid mutator transaction binding the contract method 0xefb77a75.
//
// Solidity: function makePersistent(address account0, address account1, address account2) returns()
func (_Vm *VmTransactor) MakePersistent2(opts *bind.TransactOpts, account0 common.Address, account1 common.Address, account2 common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "makePersistent2", account0, account1, account2)
}

// MakePersistent2 is a paid mutator transaction binding the contract method 0xefb77a75.
//
// Solidity: function makePersistent(address account0, address account1, address account2) returns()
func (_Vm *VmSession) MakePersistent2(account0 common.Address, account1 common.Address, account2 common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent2(&_Vm.TransactOpts, account0, account1, account2)
}

// MakePersistent2 is a paid mutator transaction binding the contract method 0xefb77a75.
//
// Solidity: function makePersistent(address account0, address account1, address account2) returns()
func (_Vm *VmTransactorSession) MakePersistent2(account0 common.Address, account1 common.Address, account2 common.Address) (*types.Transaction, error) {
	return _Vm.Contract.MakePersistent2(&_Vm.TransactOpts, account0, account1, account2)
}

// MockCall is a paid mutator transaction binding the contract method 0x81409b91.
//
// Solidity: function mockCall(address callee, uint256 msgValue, bytes data, bytes returnData) returns()
func (_Vm *VmTransactor) MockCall(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "mockCall", callee, msgValue, data, returnData)
}

// MockCall is a paid mutator transaction binding the contract method 0x81409b91.
//
// Solidity: function mockCall(address callee, uint256 msgValue, bytes data, bytes returnData) returns()
func (_Vm *VmSession) MockCall(callee common.Address, msgValue *big.Int, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCall(&_Vm.TransactOpts, callee, msgValue, data, returnData)
}

// MockCall is a paid mutator transaction binding the contract method 0x81409b91.
//
// Solidity: function mockCall(address callee, uint256 msgValue, bytes data, bytes returnData) returns()
func (_Vm *VmTransactorSession) MockCall(callee common.Address, msgValue *big.Int, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCall(&_Vm.TransactOpts, callee, msgValue, data, returnData)
}

// MockCall0 is a paid mutator transaction binding the contract method 0xb96213e4.
//
// Solidity: function mockCall(address callee, bytes data, bytes returnData) returns()
func (_Vm *VmTransactor) MockCall0(opts *bind.TransactOpts, callee common.Address, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "mockCall0", callee, data, returnData)
}

// MockCall0 is a paid mutator transaction binding the contract method 0xb96213e4.
//
// Solidity: function mockCall(address callee, bytes data, bytes returnData) returns()
func (_Vm *VmSession) MockCall0(callee common.Address, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCall0(&_Vm.TransactOpts, callee, data, returnData)
}

// MockCall0 is a paid mutator transaction binding the contract method 0xb96213e4.
//
// Solidity: function mockCall(address callee, bytes data, bytes returnData) returns()
func (_Vm *VmTransactorSession) MockCall0(callee common.Address, data []byte, returnData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCall0(&_Vm.TransactOpts, callee, data, returnData)
}

// MockCallRevert is a paid mutator transaction binding the contract method 0xd23cd037.
//
// Solidity: function mockCallRevert(address callee, uint256 msgValue, bytes data, bytes revertData) returns()
func (_Vm *VmTransactor) MockCallRevert(opts *bind.TransactOpts, callee common.Address, msgValue *big.Int, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "mockCallRevert", callee, msgValue, data, revertData)
}

// MockCallRevert is a paid mutator transaction binding the contract method 0xd23cd037.
//
// Solidity: function mockCallRevert(address callee, uint256 msgValue, bytes data, bytes revertData) returns()
func (_Vm *VmSession) MockCallRevert(callee common.Address, msgValue *big.Int, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCallRevert(&_Vm.TransactOpts, callee, msgValue, data, revertData)
}

// MockCallRevert is a paid mutator transaction binding the contract method 0xd23cd037.
//
// Solidity: function mockCallRevert(address callee, uint256 msgValue, bytes data, bytes revertData) returns()
func (_Vm *VmTransactorSession) MockCallRevert(callee common.Address, msgValue *big.Int, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCallRevert(&_Vm.TransactOpts, callee, msgValue, data, revertData)
}

// MockCallRevert0 is a paid mutator transaction binding the contract method 0xdbaad147.
//
// Solidity: function mockCallRevert(address callee, bytes data, bytes revertData) returns()
func (_Vm *VmTransactor) MockCallRevert0(opts *bind.TransactOpts, callee common.Address, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "mockCallRevert0", callee, data, revertData)
}

// MockCallRevert0 is a paid mutator transaction binding the contract method 0xdbaad147.
//
// Solidity: function mockCallRevert(address callee, bytes data, bytes revertData) returns()
func (_Vm *VmSession) MockCallRevert0(callee common.Address, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCallRevert0(&_Vm.TransactOpts, callee, data, revertData)
}

// MockCallRevert0 is a paid mutator transaction binding the contract method 0xdbaad147.
//
// Solidity: function mockCallRevert(address callee, bytes data, bytes revertData) returns()
func (_Vm *VmTransactorSession) MockCallRevert0(callee common.Address, data []byte, revertData []byte) (*types.Transaction, error) {
	return _Vm.Contract.MockCallRevert0(&_Vm.TransactOpts, callee, data, revertData)
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_Vm *VmTransactor) PauseGasMetering(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "pauseGasMetering")
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_Vm *VmSession) PauseGasMetering() (*types.Transaction, error) {
	return _Vm.Contract.PauseGasMetering(&_Vm.TransactOpts)
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_Vm *VmTransactorSession) PauseGasMetering() (*types.Transaction, error) {
	return _Vm.Contract.PauseGasMetering(&_Vm.TransactOpts)
}

// Prank is a paid mutator transaction binding the contract method 0x47e50cce.
//
// Solidity: function prank(address msgSender, address txOrigin) returns()
func (_Vm *VmTransactor) Prank(opts *bind.TransactOpts, msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "prank", msgSender, txOrigin)
}

// Prank is a paid mutator transaction binding the contract method 0x47e50cce.
//
// Solidity: function prank(address msgSender, address txOrigin) returns()
func (_Vm *VmSession) Prank(msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Prank(&_Vm.TransactOpts, msgSender, txOrigin)
}

// Prank is a paid mutator transaction binding the contract method 0x47e50cce.
//
// Solidity: function prank(address msgSender, address txOrigin) returns()
func (_Vm *VmTransactorSession) Prank(msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Prank(&_Vm.TransactOpts, msgSender, txOrigin)
}

// Prank0 is a paid mutator transaction binding the contract method 0xca669fa7.
//
// Solidity: function prank(address msgSender) returns()
func (_Vm *VmTransactor) Prank0(opts *bind.TransactOpts, msgSender common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "prank0", msgSender)
}

// Prank0 is a paid mutator transaction binding the contract method 0xca669fa7.
//
// Solidity: function prank(address msgSender) returns()
func (_Vm *VmSession) Prank0(msgSender common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Prank0(&_Vm.TransactOpts, msgSender)
}

// Prank0 is a paid mutator transaction binding the contract method 0xca669fa7.
//
// Solidity: function prank(address msgSender) returns()
func (_Vm *VmTransactorSession) Prank0(msgSender common.Address) (*types.Transaction, error) {
	return _Vm.Contract.Prank0(&_Vm.TransactOpts, msgSender)
}

// Prevrandao is a paid mutator transaction binding the contract method 0x3b925549.
//
// Solidity: function prevrandao(bytes32 newPrevrandao) returns()
func (_Vm *VmTransactor) Prevrandao(opts *bind.TransactOpts, newPrevrandao [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "prevrandao", newPrevrandao)
}

// Prevrandao is a paid mutator transaction binding the contract method 0x3b925549.
//
// Solidity: function prevrandao(bytes32 newPrevrandao) returns()
func (_Vm *VmSession) Prevrandao(newPrevrandao [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Prevrandao(&_Vm.TransactOpts, newPrevrandao)
}

// Prevrandao is a paid mutator transaction binding the contract method 0x3b925549.
//
// Solidity: function prevrandao(bytes32 newPrevrandao) returns()
func (_Vm *VmTransactorSession) Prevrandao(newPrevrandao [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Prevrandao(&_Vm.TransactOpts, newPrevrandao)
}

// Prevrandao0 is a paid mutator transaction binding the contract method 0x9cb1c0d4.
//
// Solidity: function prevrandao(uint256 newPrevrandao) returns()
func (_Vm *VmTransactor) Prevrandao0(opts *bind.TransactOpts, newPrevrandao *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "prevrandao0", newPrevrandao)
}

// Prevrandao0 is a paid mutator transaction binding the contract method 0x9cb1c0d4.
//
// Solidity: function prevrandao(uint256 newPrevrandao) returns()
func (_Vm *VmSession) Prevrandao0(newPrevrandao *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Prevrandao0(&_Vm.TransactOpts, newPrevrandao)
}

// Prevrandao0 is a paid mutator transaction binding the contract method 0x9cb1c0d4.
//
// Solidity: function prevrandao(uint256 newPrevrandao) returns()
func (_Vm *VmTransactorSession) Prevrandao0(newPrevrandao *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Prevrandao0(&_Vm.TransactOpts, newPrevrandao)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_Vm *VmTransactor) Prompt(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "prompt", promptText)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_Vm *VmSession) Prompt(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.Prompt(&_Vm.TransactOpts, promptText)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_Vm *VmTransactorSession) Prompt(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.Prompt(&_Vm.TransactOpts, promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_Vm *VmTransactor) PromptAddress(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "promptAddress", promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_Vm *VmSession) PromptAddress(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptAddress(&_Vm.TransactOpts, promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_Vm *VmTransactorSession) PromptAddress(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptAddress(&_Vm.TransactOpts, promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_Vm *VmTransactor) PromptSecret(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "promptSecret", promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_Vm *VmSession) PromptSecret(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptSecret(&_Vm.TransactOpts, promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_Vm *VmTransactorSession) PromptSecret(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptSecret(&_Vm.TransactOpts, promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_Vm *VmTransactor) PromptUint(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "promptUint", promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_Vm *VmSession) PromptUint(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptUint(&_Vm.TransactOpts, promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_Vm *VmTransactorSession) PromptUint(promptText string) (*types.Transaction, error) {
	return _Vm.Contract.PromptUint(&_Vm.TransactOpts, promptText)
}

// ReadCallers is a paid mutator transaction binding the contract method 0x4ad0bac9.
//
// Solidity: function readCallers() returns(uint8 callerMode, address msgSender, address txOrigin)
func (_Vm *VmTransactor) ReadCallers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "readCallers")
}

// ReadCallers is a paid mutator transaction binding the contract method 0x4ad0bac9.
//
// Solidity: function readCallers() returns(uint8 callerMode, address msgSender, address txOrigin)
func (_Vm *VmSession) ReadCallers() (*types.Transaction, error) {
	return _Vm.Contract.ReadCallers(&_Vm.TransactOpts)
}

// ReadCallers is a paid mutator transaction binding the contract method 0x4ad0bac9.
//
// Solidity: function readCallers() returns(uint8 callerMode, address msgSender, address txOrigin)
func (_Vm *VmTransactorSession) ReadCallers() (*types.Transaction, error) {
	return _Vm.Contract.ReadCallers(&_Vm.TransactOpts)
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_Vm *VmTransactor) Record(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "record")
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_Vm *VmSession) Record() (*types.Transaction, error) {
	return _Vm.Contract.Record(&_Vm.TransactOpts)
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_Vm *VmTransactorSession) Record() (*types.Transaction, error) {
	return _Vm.Contract.Record(&_Vm.TransactOpts)
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_Vm *VmTransactor) RecordLogs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "recordLogs")
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_Vm *VmSession) RecordLogs() (*types.Transaction, error) {
	return _Vm.Contract.RecordLogs(&_Vm.TransactOpts)
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_Vm *VmTransactorSession) RecordLogs() (*types.Transaction, error) {
	return _Vm.Contract.RecordLogs(&_Vm.TransactOpts)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_Vm *VmTransactor) RememberKey(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rememberKey", privateKey)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_Vm *VmSession) RememberKey(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RememberKey(&_Vm.TransactOpts, privateKey)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_Vm *VmTransactorSession) RememberKey(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RememberKey(&_Vm.TransactOpts, privateKey)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_Vm *VmTransactor) RemoveDir(opts *bind.TransactOpts, path string, recursive bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "removeDir", path, recursive)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_Vm *VmSession) RemoveDir(path string, recursive bool) (*types.Transaction, error) {
	return _Vm.Contract.RemoveDir(&_Vm.TransactOpts, path, recursive)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_Vm *VmTransactorSession) RemoveDir(path string, recursive bool) (*types.Transaction, error) {
	return _Vm.Contract.RemoveDir(&_Vm.TransactOpts, path, recursive)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_Vm *VmTransactor) RemoveFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "removeFile", path)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_Vm *VmSession) RemoveFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.RemoveFile(&_Vm.TransactOpts, path)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_Vm *VmTransactorSession) RemoveFile(path string) (*types.Transaction, error) {
	return _Vm.Contract.RemoveFile(&_Vm.TransactOpts, path)
}

// ResetNonce is a paid mutator transaction binding the contract method 0x1c72346d.
//
// Solidity: function resetNonce(address account) returns()
func (_Vm *VmTransactor) ResetNonce(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "resetNonce", account)
}

// ResetNonce is a paid mutator transaction binding the contract method 0x1c72346d.
//
// Solidity: function resetNonce(address account) returns()
func (_Vm *VmSession) ResetNonce(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ResetNonce(&_Vm.TransactOpts, account)
}

// ResetNonce is a paid mutator transaction binding the contract method 0x1c72346d.
//
// Solidity: function resetNonce(address account) returns()
func (_Vm *VmTransactorSession) ResetNonce(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.ResetNonce(&_Vm.TransactOpts, account)
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_Vm *VmTransactor) ResumeGasMetering(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "resumeGasMetering")
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_Vm *VmSession) ResumeGasMetering() (*types.Transaction, error) {
	return _Vm.Contract.ResumeGasMetering(&_Vm.TransactOpts)
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_Vm *VmTransactorSession) ResumeGasMetering() (*types.Transaction, error) {
	return _Vm.Contract.ResumeGasMetering(&_Vm.TransactOpts)
}

// RevertTo is a paid mutator transaction binding the contract method 0x44d7f0a4.
//
// Solidity: function revertTo(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactor) RevertTo(opts *bind.TransactOpts, snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "revertTo", snapshotId)
}

// RevertTo is a paid mutator transaction binding the contract method 0x44d7f0a4.
//
// Solidity: function revertTo(uint256 snapshotId) returns(bool success)
func (_Vm *VmSession) RevertTo(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RevertTo(&_Vm.TransactOpts, snapshotId)
}

// RevertTo is a paid mutator transaction binding the contract method 0x44d7f0a4.
//
// Solidity: function revertTo(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactorSession) RevertTo(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RevertTo(&_Vm.TransactOpts, snapshotId)
}

// RevertToAndDelete is a paid mutator transaction binding the contract method 0x03e0aca9.
//
// Solidity: function revertToAndDelete(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactor) RevertToAndDelete(opts *bind.TransactOpts, snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "revertToAndDelete", snapshotId)
}

// RevertToAndDelete is a paid mutator transaction binding the contract method 0x03e0aca9.
//
// Solidity: function revertToAndDelete(uint256 snapshotId) returns(bool success)
func (_Vm *VmSession) RevertToAndDelete(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RevertToAndDelete(&_Vm.TransactOpts, snapshotId)
}

// RevertToAndDelete is a paid mutator transaction binding the contract method 0x03e0aca9.
//
// Solidity: function revertToAndDelete(uint256 snapshotId) returns(bool success)
func (_Vm *VmTransactorSession) RevertToAndDelete(snapshotId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RevertToAndDelete(&_Vm.TransactOpts, snapshotId)
}

// RevokePersistent is a paid mutator transaction binding the contract method 0x3ce969e6.
//
// Solidity: function revokePersistent(address[] accounts) returns()
func (_Vm *VmTransactor) RevokePersistent(opts *bind.TransactOpts, accounts []common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "revokePersistent", accounts)
}

// RevokePersistent is a paid mutator transaction binding the contract method 0x3ce969e6.
//
// Solidity: function revokePersistent(address[] accounts) returns()
func (_Vm *VmSession) RevokePersistent(accounts []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.RevokePersistent(&_Vm.TransactOpts, accounts)
}

// RevokePersistent is a paid mutator transaction binding the contract method 0x3ce969e6.
//
// Solidity: function revokePersistent(address[] accounts) returns()
func (_Vm *VmTransactorSession) RevokePersistent(accounts []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.RevokePersistent(&_Vm.TransactOpts, accounts)
}

// RevokePersistent0 is a paid mutator transaction binding the contract method 0x997a0222.
//
// Solidity: function revokePersistent(address account) returns()
func (_Vm *VmTransactor) RevokePersistent0(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "revokePersistent0", account)
}

// RevokePersistent0 is a paid mutator transaction binding the contract method 0x997a0222.
//
// Solidity: function revokePersistent(address account) returns()
func (_Vm *VmSession) RevokePersistent0(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.RevokePersistent0(&_Vm.TransactOpts, account)
}

// RevokePersistent0 is a paid mutator transaction binding the contract method 0x997a0222.
//
// Solidity: function revokePersistent(address account) returns()
func (_Vm *VmTransactorSession) RevokePersistent0(account common.Address) (*types.Transaction, error) {
	return _Vm.Contract.RevokePersistent0(&_Vm.TransactOpts, account)
}

// Roll is a paid mutator transaction binding the contract method 0x1f7b4f30.
//
// Solidity: function roll(uint256 newHeight) returns()
func (_Vm *VmTransactor) Roll(opts *bind.TransactOpts, newHeight *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "roll", newHeight)
}

// Roll is a paid mutator transaction binding the contract method 0x1f7b4f30.
//
// Solidity: function roll(uint256 newHeight) returns()
func (_Vm *VmSession) Roll(newHeight *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Roll(&_Vm.TransactOpts, newHeight)
}

// Roll is a paid mutator transaction binding the contract method 0x1f7b4f30.
//
// Solidity: function roll(uint256 newHeight) returns()
func (_Vm *VmTransactorSession) Roll(newHeight *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Roll(&_Vm.TransactOpts, newHeight)
}

// RollFork is a paid mutator transaction binding the contract method 0x0f29772b.
//
// Solidity: function rollFork(bytes32 txHash) returns()
func (_Vm *VmTransactor) RollFork(opts *bind.TransactOpts, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rollFork", txHash)
}

// RollFork is a paid mutator transaction binding the contract method 0x0f29772b.
//
// Solidity: function rollFork(bytes32 txHash) returns()
func (_Vm *VmSession) RollFork(txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.RollFork(&_Vm.TransactOpts, txHash)
}

// RollFork is a paid mutator transaction binding the contract method 0x0f29772b.
//
// Solidity: function rollFork(bytes32 txHash) returns()
func (_Vm *VmTransactorSession) RollFork(txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.RollFork(&_Vm.TransactOpts, txHash)
}

// RollFork0 is a paid mutator transaction binding the contract method 0xd74c83a4.
//
// Solidity: function rollFork(uint256 forkId, uint256 blockNumber) returns()
func (_Vm *VmTransactor) RollFork0(opts *bind.TransactOpts, forkId *big.Int, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rollFork0", forkId, blockNumber)
}

// RollFork0 is a paid mutator transaction binding the contract method 0xd74c83a4.
//
// Solidity: function rollFork(uint256 forkId, uint256 blockNumber) returns()
func (_Vm *VmSession) RollFork0(forkId *big.Int, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RollFork0(&_Vm.TransactOpts, forkId, blockNumber)
}

// RollFork0 is a paid mutator transaction binding the contract method 0xd74c83a4.
//
// Solidity: function rollFork(uint256 forkId, uint256 blockNumber) returns()
func (_Vm *VmTransactorSession) RollFork0(forkId *big.Int, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RollFork0(&_Vm.TransactOpts, forkId, blockNumber)
}

// RollFork1 is a paid mutator transaction binding the contract method 0xd9bbf3a1.
//
// Solidity: function rollFork(uint256 blockNumber) returns()
func (_Vm *VmTransactor) RollFork1(opts *bind.TransactOpts, blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rollFork1", blockNumber)
}

// RollFork1 is a paid mutator transaction binding the contract method 0xd9bbf3a1.
//
// Solidity: function rollFork(uint256 blockNumber) returns()
func (_Vm *VmSession) RollFork1(blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RollFork1(&_Vm.TransactOpts, blockNumber)
}

// RollFork1 is a paid mutator transaction binding the contract method 0xd9bbf3a1.
//
// Solidity: function rollFork(uint256 blockNumber) returns()
func (_Vm *VmTransactorSession) RollFork1(blockNumber *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.RollFork1(&_Vm.TransactOpts, blockNumber)
}

// RollFork2 is a paid mutator transaction binding the contract method 0xf2830f7b.
//
// Solidity: function rollFork(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmTransactor) RollFork2(opts *bind.TransactOpts, forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rollFork2", forkId, txHash)
}

// RollFork2 is a paid mutator transaction binding the contract method 0xf2830f7b.
//
// Solidity: function rollFork(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmSession) RollFork2(forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.RollFork2(&_Vm.TransactOpts, forkId, txHash)
}

// RollFork2 is a paid mutator transaction binding the contract method 0xf2830f7b.
//
// Solidity: function rollFork(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmTransactorSession) RollFork2(forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.RollFork2(&_Vm.TransactOpts, forkId, txHash)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_Vm *VmTransactor) Rpc(opts *bind.TransactOpts, method string, params string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "rpc", method, params)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_Vm *VmSession) Rpc(method string, params string) (*types.Transaction, error) {
	return _Vm.Contract.Rpc(&_Vm.TransactOpts, method, params)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_Vm *VmTransactorSession) Rpc(method string, params string) (*types.Transaction, error) {
	return _Vm.Contract.Rpc(&_Vm.TransactOpts, method, params)
}

// SelectFork is a paid mutator transaction binding the contract method 0x9ebf6827.
//
// Solidity: function selectFork(uint256 forkId) returns()
func (_Vm *VmTransactor) SelectFork(opts *bind.TransactOpts, forkId *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "selectFork", forkId)
}

// SelectFork is a paid mutator transaction binding the contract method 0x9ebf6827.
//
// Solidity: function selectFork(uint256 forkId) returns()
func (_Vm *VmSession) SelectFork(forkId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SelectFork(&_Vm.TransactOpts, forkId)
}

// SelectFork is a paid mutator transaction binding the contract method 0x9ebf6827.
//
// Solidity: function selectFork(uint256 forkId) returns()
func (_Vm *VmTransactorSession) SelectFork(forkId *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SelectFork(&_Vm.TransactOpts, forkId)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_Vm *VmTransactor) SerializeAddress(opts *bind.TransactOpts, objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeAddress", objectKey, valueKey, values)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_Vm *VmSession) SerializeAddress(objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.SerializeAddress(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeAddress(objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _Vm.Contract.SerializeAddress(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_Vm *VmTransactor) SerializeAddress0(opts *bind.TransactOpts, objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeAddress0", objectKey, valueKey, value)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_Vm *VmSession) SerializeAddress0(objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _Vm.Contract.SerializeAddress0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_Vm *VmTransactorSession) SerializeAddress0(objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _Vm.Contract.SerializeAddress0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_Vm *VmTransactor) SerializeBool(opts *bind.TransactOpts, objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBool", objectKey, valueKey, values)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_Vm *VmSession) SerializeBool(objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBool(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeBool(objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBool(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_Vm *VmTransactor) SerializeBool0(opts *bind.TransactOpts, objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBool0", objectKey, valueKey, value)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_Vm *VmSession) SerializeBool0(objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBool0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_Vm *VmTransactorSession) SerializeBool0(objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBool0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_Vm *VmTransactor) SerializeBytes(opts *bind.TransactOpts, objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBytes", objectKey, valueKey, values)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_Vm *VmSession) SerializeBytes(objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeBytes(objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_Vm *VmTransactor) SerializeBytes0(opts *bind.TransactOpts, objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBytes0", objectKey, valueKey, value)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_Vm *VmSession) SerializeBytes0(objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_Vm *VmTransactorSession) SerializeBytes0(objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_Vm *VmTransactor) SerializeBytes32(opts *bind.TransactOpts, objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBytes32", objectKey, valueKey, values)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_Vm *VmSession) SerializeBytes32(objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes32(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeBytes32(objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes32(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_Vm *VmTransactor) SerializeBytes320(opts *bind.TransactOpts, objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeBytes320", objectKey, valueKey, value)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_Vm *VmSession) SerializeBytes320(objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes320(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_Vm *VmTransactorSession) SerializeBytes320(objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.SerializeBytes320(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_Vm *VmTransactor) SerializeInt(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeInt", objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_Vm *VmSession) SerializeInt(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeInt(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_Vm *VmTransactorSession) SerializeInt(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeInt(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_Vm *VmTransactor) SerializeInt0(opts *bind.TransactOpts, objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeInt0", objectKey, valueKey, values)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_Vm *VmSession) SerializeInt0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeInt0(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeInt0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeInt0(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_Vm *VmTransactor) SerializeJson(opts *bind.TransactOpts, objectKey string, value string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeJson", objectKey, value)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_Vm *VmSession) SerializeJson(objectKey string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeJson(&_Vm.TransactOpts, objectKey, value)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_Vm *VmTransactorSession) SerializeJson(objectKey string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeJson(&_Vm.TransactOpts, objectKey, value)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_Vm *VmTransactor) SerializeString(opts *bind.TransactOpts, objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeString", objectKey, valueKey, values)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_Vm *VmSession) SerializeString(objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeString(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeString(objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeString(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_Vm *VmTransactor) SerializeString0(opts *bind.TransactOpts, objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeString0", objectKey, valueKey, value)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_Vm *VmSession) SerializeString0(objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeString0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_Vm *VmTransactorSession) SerializeString0(objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SerializeString0(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmTransactor) SerializeUint(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeUint", objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmSession) SerializeUint(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUint(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmTransactorSession) SerializeUint(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUint(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_Vm *VmTransactor) SerializeUint0(opts *bind.TransactOpts, objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeUint0", objectKey, valueKey, values)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_Vm *VmSession) SerializeUint0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUint0(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_Vm *VmTransactorSession) SerializeUint0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUint0(&_Vm.TransactOpts, objectKey, valueKey, values)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmTransactor) SerializeUintToHex(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "serializeUintToHex", objectKey, valueKey, value)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmSession) SerializeUintToHex(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUintToHex(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_Vm *VmTransactorSession) SerializeUintToHex(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.SerializeUintToHex(&_Vm.TransactOpts, objectKey, valueKey, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_Vm *VmTransactor) SetEnv(opts *bind.TransactOpts, name string, value string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "setEnv", name, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_Vm *VmSession) SetEnv(name string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SetEnv(&_Vm.TransactOpts, name, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_Vm *VmTransactorSession) SetEnv(name string, value string) (*types.Transaction, error) {
	return _Vm.Contract.SetEnv(&_Vm.TransactOpts, name, value)
}

// SetNonce is a paid mutator transaction binding the contract method 0xf8e18b57.
//
// Solidity: function setNonce(address account, uint64 newNonce) returns()
func (_Vm *VmTransactor) SetNonce(opts *bind.TransactOpts, account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "setNonce", account, newNonce)
}

// SetNonce is a paid mutator transaction binding the contract method 0xf8e18b57.
//
// Solidity: function setNonce(address account, uint64 newNonce) returns()
func (_Vm *VmSession) SetNonce(account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.Contract.SetNonce(&_Vm.TransactOpts, account, newNonce)
}

// SetNonce is a paid mutator transaction binding the contract method 0xf8e18b57.
//
// Solidity: function setNonce(address account, uint64 newNonce) returns()
func (_Vm *VmTransactorSession) SetNonce(account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.Contract.SetNonce(&_Vm.TransactOpts, account, newNonce)
}

// SetNonceUnsafe is a paid mutator transaction binding the contract method 0x9b67b21c.
//
// Solidity: function setNonceUnsafe(address account, uint64 newNonce) returns()
func (_Vm *VmTransactor) SetNonceUnsafe(opts *bind.TransactOpts, account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "setNonceUnsafe", account, newNonce)
}

// SetNonceUnsafe is a paid mutator transaction binding the contract method 0x9b67b21c.
//
// Solidity: function setNonceUnsafe(address account, uint64 newNonce) returns()
func (_Vm *VmSession) SetNonceUnsafe(account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.Contract.SetNonceUnsafe(&_Vm.TransactOpts, account, newNonce)
}

// SetNonceUnsafe is a paid mutator transaction binding the contract method 0x9b67b21c.
//
// Solidity: function setNonceUnsafe(address account, uint64 newNonce) returns()
func (_Vm *VmTransactorSession) SetNonceUnsafe(account common.Address, newNonce uint64) (*types.Transaction, error) {
	return _Vm.Contract.SetNonceUnsafe(&_Vm.TransactOpts, account, newNonce)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmTransactor) Sign1(opts *bind.TransactOpts, wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "sign1", wallet, digest)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmSession) Sign1(wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Sign1(&_Vm.TransactOpts, wallet, digest)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_Vm *VmTransactorSession) Sign1(wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Sign1(&_Vm.TransactOpts, wallet, digest)
}

// Skip is a paid mutator transaction binding the contract method 0xdd82d13e.
//
// Solidity: function skip(bool skipTest) returns()
func (_Vm *VmTransactor) Skip(opts *bind.TransactOpts, skipTest bool) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "skip", skipTest)
}

// Skip is a paid mutator transaction binding the contract method 0xdd82d13e.
//
// Solidity: function skip(bool skipTest) returns()
func (_Vm *VmSession) Skip(skipTest bool) (*types.Transaction, error) {
	return _Vm.Contract.Skip(&_Vm.TransactOpts, skipTest)
}

// Skip is a paid mutator transaction binding the contract method 0xdd82d13e.
//
// Solidity: function skip(bool skipTest) returns()
func (_Vm *VmTransactorSession) Skip(skipTest bool) (*types.Transaction, error) {
	return _Vm.Contract.Skip(&_Vm.TransactOpts, skipTest)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_Vm *VmTransactor) Sleep(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "sleep", duration)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_Vm *VmSession) Sleep(duration *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Sleep(&_Vm.TransactOpts, duration)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_Vm *VmTransactorSession) Sleep(duration *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Sleep(&_Vm.TransactOpts, duration)
}

// Snapshot is a paid mutator transaction binding the contract method 0x9711715a.
//
// Solidity: function snapshot() returns(uint256 snapshotId)
func (_Vm *VmTransactor) Snapshot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "snapshot")
}

// Snapshot is a paid mutator transaction binding the contract method 0x9711715a.
//
// Solidity: function snapshot() returns(uint256 snapshotId)
func (_Vm *VmSession) Snapshot() (*types.Transaction, error) {
	return _Vm.Contract.Snapshot(&_Vm.TransactOpts)
}

// Snapshot is a paid mutator transaction binding the contract method 0x9711715a.
//
// Solidity: function snapshot() returns(uint256 snapshotId)
func (_Vm *VmTransactorSession) Snapshot() (*types.Transaction, error) {
	return _Vm.Contract.Snapshot(&_Vm.TransactOpts)
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_Vm *VmTransactor) StartBroadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startBroadcast")
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_Vm *VmSession) StartBroadcast() (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast(&_Vm.TransactOpts)
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_Vm *VmTransactorSession) StartBroadcast() (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast(&_Vm.TransactOpts)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_Vm *VmTransactor) StartBroadcast0(opts *bind.TransactOpts, signer common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startBroadcast0", signer)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_Vm *VmSession) StartBroadcast0(signer common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast0(&_Vm.TransactOpts, signer)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_Vm *VmTransactorSession) StartBroadcast0(signer common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast0(&_Vm.TransactOpts, signer)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_Vm *VmTransactor) StartBroadcast1(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startBroadcast1", privateKey)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_Vm *VmSession) StartBroadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast1(&_Vm.TransactOpts, privateKey)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_Vm *VmTransactorSession) StartBroadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.StartBroadcast1(&_Vm.TransactOpts, privateKey)
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_Vm *VmTransactor) StartMappingRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startMappingRecording")
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_Vm *VmSession) StartMappingRecording() (*types.Transaction, error) {
	return _Vm.Contract.StartMappingRecording(&_Vm.TransactOpts)
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_Vm *VmTransactorSession) StartMappingRecording() (*types.Transaction, error) {
	return _Vm.Contract.StartMappingRecording(&_Vm.TransactOpts)
}

// StartPrank is a paid mutator transaction binding the contract method 0x06447d56.
//
// Solidity: function startPrank(address msgSender) returns()
func (_Vm *VmTransactor) StartPrank(opts *bind.TransactOpts, msgSender common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startPrank", msgSender)
}

// StartPrank is a paid mutator transaction binding the contract method 0x06447d56.
//
// Solidity: function startPrank(address msgSender) returns()
func (_Vm *VmSession) StartPrank(msgSender common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartPrank(&_Vm.TransactOpts, msgSender)
}

// StartPrank is a paid mutator transaction binding the contract method 0x06447d56.
//
// Solidity: function startPrank(address msgSender) returns()
func (_Vm *VmTransactorSession) StartPrank(msgSender common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartPrank(&_Vm.TransactOpts, msgSender)
}

// StartPrank0 is a paid mutator transaction binding the contract method 0x45b56078.
//
// Solidity: function startPrank(address msgSender, address txOrigin) returns()
func (_Vm *VmTransactor) StartPrank0(opts *bind.TransactOpts, msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startPrank0", msgSender, txOrigin)
}

// StartPrank0 is a paid mutator transaction binding the contract method 0x45b56078.
//
// Solidity: function startPrank(address msgSender, address txOrigin) returns()
func (_Vm *VmSession) StartPrank0(msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartPrank0(&_Vm.TransactOpts, msgSender, txOrigin)
}

// StartPrank0 is a paid mutator transaction binding the contract method 0x45b56078.
//
// Solidity: function startPrank(address msgSender, address txOrigin) returns()
func (_Vm *VmTransactorSession) StartPrank0(msgSender common.Address, txOrigin common.Address) (*types.Transaction, error) {
	return _Vm.Contract.StartPrank0(&_Vm.TransactOpts, msgSender, txOrigin)
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_Vm *VmTransactor) StartStateDiffRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "startStateDiffRecording")
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_Vm *VmSession) StartStateDiffRecording() (*types.Transaction, error) {
	return _Vm.Contract.StartStateDiffRecording(&_Vm.TransactOpts)
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_Vm *VmTransactorSession) StartStateDiffRecording() (*types.Transaction, error) {
	return _Vm.Contract.StartStateDiffRecording(&_Vm.TransactOpts)
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_Vm *VmTransactor) StopAndReturnStateDiff(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "stopAndReturnStateDiff")
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_Vm *VmSession) StopAndReturnStateDiff() (*types.Transaction, error) {
	return _Vm.Contract.StopAndReturnStateDiff(&_Vm.TransactOpts)
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_Vm *VmTransactorSession) StopAndReturnStateDiff() (*types.Transaction, error) {
	return _Vm.Contract.StopAndReturnStateDiff(&_Vm.TransactOpts)
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_Vm *VmTransactor) StopBroadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "stopBroadcast")
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_Vm *VmSession) StopBroadcast() (*types.Transaction, error) {
	return _Vm.Contract.StopBroadcast(&_Vm.TransactOpts)
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_Vm *VmTransactorSession) StopBroadcast() (*types.Transaction, error) {
	return _Vm.Contract.StopBroadcast(&_Vm.TransactOpts)
}

// StopExpectSafeMemory is a paid mutator transaction binding the contract method 0x0956441b.
//
// Solidity: function stopExpectSafeMemory() returns()
func (_Vm *VmTransactor) StopExpectSafeMemory(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "stopExpectSafeMemory")
}

// StopExpectSafeMemory is a paid mutator transaction binding the contract method 0x0956441b.
//
// Solidity: function stopExpectSafeMemory() returns()
func (_Vm *VmSession) StopExpectSafeMemory() (*types.Transaction, error) {
	return _Vm.Contract.StopExpectSafeMemory(&_Vm.TransactOpts)
}

// StopExpectSafeMemory is a paid mutator transaction binding the contract method 0x0956441b.
//
// Solidity: function stopExpectSafeMemory() returns()
func (_Vm *VmTransactorSession) StopExpectSafeMemory() (*types.Transaction, error) {
	return _Vm.Contract.StopExpectSafeMemory(&_Vm.TransactOpts)
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_Vm *VmTransactor) StopMappingRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "stopMappingRecording")
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_Vm *VmSession) StopMappingRecording() (*types.Transaction, error) {
	return _Vm.Contract.StopMappingRecording(&_Vm.TransactOpts)
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_Vm *VmTransactorSession) StopMappingRecording() (*types.Transaction, error) {
	return _Vm.Contract.StopMappingRecording(&_Vm.TransactOpts)
}

// StopPrank is a paid mutator transaction binding the contract method 0x90c5013b.
//
// Solidity: function stopPrank() returns()
func (_Vm *VmTransactor) StopPrank(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "stopPrank")
}

// StopPrank is a paid mutator transaction binding the contract method 0x90c5013b.
//
// Solidity: function stopPrank() returns()
func (_Vm *VmSession) StopPrank() (*types.Transaction, error) {
	return _Vm.Contract.StopPrank(&_Vm.TransactOpts)
}

// StopPrank is a paid mutator transaction binding the contract method 0x90c5013b.
//
// Solidity: function stopPrank() returns()
func (_Vm *VmTransactorSession) StopPrank() (*types.Transaction, error) {
	return _Vm.Contract.StopPrank(&_Vm.TransactOpts)
}

// Store is a paid mutator transaction binding the contract method 0x70ca10bb.
//
// Solidity: function store(address target, bytes32 slot, bytes32 value) returns()
func (_Vm *VmTransactor) Store(opts *bind.TransactOpts, target common.Address, slot [32]byte, value [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "store", target, slot, value)
}

// Store is a paid mutator transaction binding the contract method 0x70ca10bb.
//
// Solidity: function store(address target, bytes32 slot, bytes32 value) returns()
func (_Vm *VmSession) Store(target common.Address, slot [32]byte, value [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Store(&_Vm.TransactOpts, target, slot, value)
}

// Store is a paid mutator transaction binding the contract method 0x70ca10bb.
//
// Solidity: function store(address target, bytes32 slot, bytes32 value) returns()
func (_Vm *VmTransactorSession) Store(target common.Address, slot [32]byte, value [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Store(&_Vm.TransactOpts, target, slot, value)
}

// Transact is a paid mutator transaction binding the contract method 0x4d8abc4b.
//
// Solidity: function transact(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmTransactor) Transact(opts *bind.TransactOpts, forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "transact", forkId, txHash)
}

// Transact is a paid mutator transaction binding the contract method 0x4d8abc4b.
//
// Solidity: function transact(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmSession) Transact(forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Transact(&_Vm.TransactOpts, forkId, txHash)
}

// Transact is a paid mutator transaction binding the contract method 0x4d8abc4b.
//
// Solidity: function transact(uint256 forkId, bytes32 txHash) returns()
func (_Vm *VmTransactorSession) Transact(forkId *big.Int, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Transact(&_Vm.TransactOpts, forkId, txHash)
}

// Transact0 is a paid mutator transaction binding the contract method 0xbe646da1.
//
// Solidity: function transact(bytes32 txHash) returns()
func (_Vm *VmTransactor) Transact0(opts *bind.TransactOpts, txHash [32]byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "transact0", txHash)
}

// Transact0 is a paid mutator transaction binding the contract method 0xbe646da1.
//
// Solidity: function transact(bytes32 txHash) returns()
func (_Vm *VmSession) Transact0(txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Transact0(&_Vm.TransactOpts, txHash)
}

// Transact0 is a paid mutator transaction binding the contract method 0xbe646da1.
//
// Solidity: function transact(bytes32 txHash) returns()
func (_Vm *VmTransactorSession) Transact0(txHash [32]byte) (*types.Transaction, error) {
	return _Vm.Contract.Transact0(&_Vm.TransactOpts, txHash)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_Vm *VmTransactor) TryFfi(opts *bind.TransactOpts, commandInput []string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "tryFfi", commandInput)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_Vm *VmSession) TryFfi(commandInput []string) (*types.Transaction, error) {
	return _Vm.Contract.TryFfi(&_Vm.TransactOpts, commandInput)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_Vm *VmTransactorSession) TryFfi(commandInput []string) (*types.Transaction, error) {
	return _Vm.Contract.TryFfi(&_Vm.TransactOpts, commandInput)
}

// TxGasPrice is a paid mutator transaction binding the contract method 0x48f50c0f.
//
// Solidity: function txGasPrice(uint256 newGasPrice) returns()
func (_Vm *VmTransactor) TxGasPrice(opts *bind.TransactOpts, newGasPrice *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "txGasPrice", newGasPrice)
}

// TxGasPrice is a paid mutator transaction binding the contract method 0x48f50c0f.
//
// Solidity: function txGasPrice(uint256 newGasPrice) returns()
func (_Vm *VmSession) TxGasPrice(newGasPrice *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.TxGasPrice(&_Vm.TransactOpts, newGasPrice)
}

// TxGasPrice is a paid mutator transaction binding the contract method 0x48f50c0f.
//
// Solidity: function txGasPrice(uint256 newGasPrice) returns()
func (_Vm *VmTransactorSession) TxGasPrice(newGasPrice *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.TxGasPrice(&_Vm.TransactOpts, newGasPrice)
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_Vm *VmTransactor) UnixTime(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "unixTime")
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_Vm *VmSession) UnixTime() (*types.Transaction, error) {
	return _Vm.Contract.UnixTime(&_Vm.TransactOpts)
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_Vm *VmTransactorSession) UnixTime() (*types.Transaction, error) {
	return _Vm.Contract.UnixTime(&_Vm.TransactOpts)
}

// Warp is a paid mutator transaction binding the contract method 0xe5d6bf02.
//
// Solidity: function warp(uint256 newTimestamp) returns()
func (_Vm *VmTransactor) Warp(opts *bind.TransactOpts, newTimestamp *big.Int) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "warp", newTimestamp)
}

// Warp is a paid mutator transaction binding the contract method 0xe5d6bf02.
//
// Solidity: function warp(uint256 newTimestamp) returns()
func (_Vm *VmSession) Warp(newTimestamp *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Warp(&_Vm.TransactOpts, newTimestamp)
}

// Warp is a paid mutator transaction binding the contract method 0xe5d6bf02.
//
// Solidity: function warp(uint256 newTimestamp) returns()
func (_Vm *VmTransactorSession) Warp(newTimestamp *big.Int) (*types.Transaction, error) {
	return _Vm.Contract.Warp(&_Vm.TransactOpts, newTimestamp)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_Vm *VmTransactor) WriteFile(opts *bind.TransactOpts, path string, data string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeFile", path, data)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_Vm *VmSession) WriteFile(path string, data string) (*types.Transaction, error) {
	return _Vm.Contract.WriteFile(&_Vm.TransactOpts, path, data)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_Vm *VmTransactorSession) WriteFile(path string, data string) (*types.Transaction, error) {
	return _Vm.Contract.WriteFile(&_Vm.TransactOpts, path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_Vm *VmTransactor) WriteFileBinary(opts *bind.TransactOpts, path string, data []byte) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeFileBinary", path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_Vm *VmSession) WriteFileBinary(path string, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.WriteFileBinary(&_Vm.TransactOpts, path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_Vm *VmTransactorSession) WriteFileBinary(path string, data []byte) (*types.Transaction, error) {
	return _Vm.Contract.WriteFileBinary(&_Vm.TransactOpts, path, data)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_Vm *VmTransactor) WriteJson(opts *bind.TransactOpts, json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeJson", json, path, valueKey)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_Vm *VmSession) WriteJson(json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.Contract.WriteJson(&_Vm.TransactOpts, json, path, valueKey)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_Vm *VmTransactorSession) WriteJson(json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.Contract.WriteJson(&_Vm.TransactOpts, json, path, valueKey)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_Vm *VmTransactor) WriteJson0(opts *bind.TransactOpts, json string, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeJson0", json, path)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_Vm *VmSession) WriteJson0(json string, path string) (*types.Transaction, error) {
	return _Vm.Contract.WriteJson0(&_Vm.TransactOpts, json, path)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_Vm *VmTransactorSession) WriteJson0(json string, path string) (*types.Transaction, error) {
	return _Vm.Contract.WriteJson0(&_Vm.TransactOpts, json, path)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_Vm *VmTransactor) WriteLine(opts *bind.TransactOpts, path string, data string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeLine", path, data)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_Vm *VmSession) WriteLine(path string, data string) (*types.Transaction, error) {
	return _Vm.Contract.WriteLine(&_Vm.TransactOpts, path, data)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_Vm *VmTransactorSession) WriteLine(path string, data string) (*types.Transaction, error) {
	return _Vm.Contract.WriteLine(&_Vm.TransactOpts, path, data)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_Vm *VmTransactor) WriteToml(opts *bind.TransactOpts, json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeToml", json, path, valueKey)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_Vm *VmSession) WriteToml(json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.Contract.WriteToml(&_Vm.TransactOpts, json, path, valueKey)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_Vm *VmTransactorSession) WriteToml(json string, path string, valueKey string) (*types.Transaction, error) {
	return _Vm.Contract.WriteToml(&_Vm.TransactOpts, json, path, valueKey)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_Vm *VmTransactor) WriteToml0(opts *bind.TransactOpts, json string, path string) (*types.Transaction, error) {
	return _Vm.contract.Transact(opts, "writeToml0", json, path)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_Vm *VmSession) WriteToml0(json string, path string) (*types.Transaction, error) {
	return _Vm.Contract.WriteToml0(&_Vm.TransactOpts, json, path)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_Vm *VmTransactorSession) WriteToml0(json string, path string) (*types.Transaction, error) {
	return _Vm.Contract.WriteToml0(&_Vm.TransactOpts, json, path)
}

// VmSafeMetaData contains all meta data concerning the VmSafe contract.
var VmSafeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"accesses\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"readSlots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"writeSlots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"keyAddr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbs\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqAbsDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRel\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertApproxEqRelDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertFalse\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assertFalse\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertGtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLe\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLeDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertLt\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertLtDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"right\",\"type\":\"bool\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"left\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"right\",\"type\":\"bool[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"left\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"right\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"left\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"right\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"left\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"right\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right\",\"type\":\"address\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"left\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"right\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"left\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"right\",\"type\":\"string[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"left\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"right\",\"type\":\"int256[]\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"left\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"right\",\"type\":\"bytes[]\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"}],\"name\":\"assertNotEq\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"left\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"right\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertNotEqDecimal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assertTrue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"assertTrue\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"assume\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"char\",\"type\":\"string\"}],\"name\":\"breakpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"char\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"breakpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"broadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"closeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"computeCreateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"copyFile\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"copied\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"recursive\",\"type\":\"bool\"}],\"name\":\"createDir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"walletLabel\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletLabel\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivationPath\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"language\",\"type\":\"string\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"language\",\"type\":\"string\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"mnemonic\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivationPath\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"deriveKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ensNamehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBool\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBytes\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envBytes32\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envInt\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"defaultValue\",\"type\":\"bytes32[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"defaultValue\",\"type\":\"int256[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"defaultValue\",\"type\":\"bool\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultValue\",\"type\":\"address\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"defaultValue\",\"type\":\"uint256\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"defaultValue\",\"type\":\"bytes[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"defaultValue\",\"type\":\"uint256[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"defaultValue\",\"type\":\"string[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"defaultValue\",\"type\":\"bytes\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"defaultValue\",\"type\":\"bytes32\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"defaultValue\",\"type\":\"int256\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"defaultValue\",\"type\":\"address[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"defaultValue\",\"type\":\"string\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"defaultValue\",\"type\":\"bool[]\"}],\"name\":\"envOr\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"envUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"envUint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"}],\"name\":\"eth_getLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"transactionIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.EthGetLogs[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"commandInput\",\"type\":\"string[]\"}],\"name\":\"ffi\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"fsMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readOnly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"modified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accessed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.FsMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlobBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blobBaseFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"artifactPath\",\"type\":\"string\"}],\"name\":\"getCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"creationBytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"artifactPath\",\"type\":\"string\"}],\"name\":\"getDeployedCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"runtimeBytecode\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLabel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"currentLabel\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"elementSlot\",\"type\":\"bytes32\"}],\"name\":\"getMappingKeyAndParentOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"mappingSlot\",\"type\":\"bytes32\"}],\"name\":\"getMappingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"mappingSlot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getMappingSlotAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecordedLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"internalType\":\"structVmSafe.Log[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumVmSafe.ForgeContext\",\"name\":\"context\",\"type\":\"uint8\"}],\"name\":\"isContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"isDir\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"isFile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExistsJson\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"keyExistsToml\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newLabel\",\"type\":\"string\"}],\"name\":\"label\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCallGas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasTotalUsed\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasMemoryUsed\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"gasRefunded\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"gasRemaining\",\"type\":\"uint64\"}],\"internalType\":\"structVmSafe.Gas\",\"name\":\"gas\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"load\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parsedValue\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"parsedValue\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"parsedValue\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parsedValue\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"parsedValue\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"name\":\"parseJson\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJson\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBoolArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonBytesArray\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonIntArray\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseJsonUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseToml\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"}],\"name\":\"parseToml\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"abiEncodedData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBoolArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlBytesArray\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlIntArray\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlStringArray\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toml\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"parseTomlUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"name\":\"parseUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parsedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGasMetering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptSecret\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promptText\",\"type\":\"string\"}],\"name\":\"promptUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"maxDepth\",\"type\":\"uint64\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"maxDepth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"followLinks\",\"type\":\"bool\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readDir\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isDir\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSymlink\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.DirEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readFile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readFileBinary\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"readLine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"line\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"linkPath\",\"type\":\"string\"}],\"name\":\"readLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"targetPath\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordLogs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"rememberKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"keyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"recursive\",\"type\":\"bool\"}],\"name\":\"removeDir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"removeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"replace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeGasMetering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"}],\"name\":\"rpc\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rpcAlias\",\"type\":\"string\"}],\"name\":\"rpcUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpcUrlStructs\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"structVmSafe.Rpc[]\",\"name\":\"urls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rpcUrls\",\"outputs\":[{\"internalType\":\"string[2][]\",\"name\":\"urls\",\"type\":\"string[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"serializeAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"serializeAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"serializeBool\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"serializeBool\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"name\":\"serializeBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"serializeBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"serializeBytes32\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"serializeBytes32\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"serializeInt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"values\",\"type\":\"int256[]\"}],\"name\":\"serializeInt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"serializeJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"serializeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"serializeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"serializeUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"serializeUint\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"objectKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"serializeUintToHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setEnv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicKeyY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.Wallet\",\"name\":\"wallet\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"signP256\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"sleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delimiter\",\"type\":\"string\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"outputs\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"privateKey\",\"type\":\"uint256\"}],\"name\":\"startBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMappingRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStateDiffRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAndReturnStateDiff\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"forkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"structVmSafe.ChainInfo\",\"name\":\"chainInfo\",\"type\":\"tuple\"},{\"internalType\":\"enumVmSafe.AccountAccessKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"deployedCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"reverted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isWrite\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"previousValue\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"reverted\",\"type\":\"bool\"}],\"internalType\":\"structVmSafe.StorageAccess[]\",\"name\":\"storageAccesses\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"depth\",\"type\":\"uint64\"}],\"internalType\":\"structVmSafe.AccountAccess[]\",\"name\":\"accountAccesses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMappingRecording\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"toBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"toBase64URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toBase64URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"toLowercase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"stringifiedValue\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"toUppercase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"trim\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"commandInput\",\"type\":\"string[]\"}],\"name\":\"tryFfi\",\"outputs\":[{\"components\":[{\"internalType\":\"int32\",\"name\":\"exitCode\",\"type\":\"int32\"},{\"internalType\":\"bytes\",\"name\":\"stdout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stderr\",\"type\":\"bytes\"}],\"internalType\":\"structVmSafe.FfiResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unixTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"milliseconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"writeFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"writeFileBinary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"}],\"name\":\"writeJson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"writeJson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"writeLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"valueKey\",\"type\":\"string\"}],\"name\":\"writeToml\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"}],\"name\":\"writeToml\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"65bc9481": "accesses(address)",
		"ffa18649": "addr(uint256)",
		"240f839d": "assertApproxEqAbs(int256,int256,uint256)",
		"8289e621": "assertApproxEqAbs(int256,int256,uint256,string)",
		"16d207c6": "assertApproxEqAbs(uint256,uint256,uint256)",
		"f710b062": "assertApproxEqAbs(uint256,uint256,uint256,string)",
		"3d5bc8bc": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256)",
		"6a5066d4": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)",
		"045c55ce": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)",
		"60429eb2": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)",
		"fea2d14f": "assertApproxEqRel(int256,int256,uint256)",
		"ef277d72": "assertApproxEqRel(int256,int256,uint256,string)",
		"8cf25ef4": "assertApproxEqRel(uint256,uint256,uint256)",
		"1ecb7d33": "assertApproxEqRel(uint256,uint256,uint256,string)",
		"abbf21cc": "assertApproxEqRelDecimal(int256,int256,uint256,uint256)",
		"fccc11c4": "assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)",
		"21ed2977": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)",
		"82d6c8fd": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)",
		"515361f6": "assertEq(address,address)",
		"2f2769d1": "assertEq(address,address,string)",
		"3868ac34": "assertEq(address[],address[])",
		"3e9173c5": "assertEq(address[],address[],string)",
		"f7fe3477": "assertEq(bool,bool)",
		"4db19e7e": "assertEq(bool,bool,string)",
		"707df785": "assertEq(bool[],bool[])",
		"e48a8f8d": "assertEq(bool[],bool[],string)",
		"97624631": "assertEq(bytes,bytes)",
		"e24fed00": "assertEq(bytes,bytes,string)",
		"7c84c69b": "assertEq(bytes32,bytes32)",
		"c1fa1ed0": "assertEq(bytes32,bytes32,string)",
		"0cc9ee84": "assertEq(bytes32[],bytes32[])",
		"e03e9177": "assertEq(bytes32[],bytes32[],string)",
		"e5fb9b4a": "assertEq(bytes[],bytes[])",
		"f413f0b6": "assertEq(bytes[],bytes[],string)",
		"fe74f05b": "assertEq(int256,int256)",
		"714a2f13": "assertEq(int256,int256,string)",
		"711043ac": "assertEq(int256[],int256[])",
		"191f1b30": "assertEq(int256[],int256[],string)",
		"f320d963": "assertEq(string,string)",
		"36f656d8": "assertEq(string,string,string)",
		"cf1c049c": "assertEq(string[],string[])",
		"eff6b27d": "assertEq(string[],string[],string)",
		"98296c54": "assertEq(uint256,uint256)",
		"88b44c85": "assertEq(uint256,uint256,string)",
		"975d5a12": "assertEq(uint256[],uint256[])",
		"5d18c73a": "assertEq(uint256[],uint256[],string)",
		"48016c04": "assertEqDecimal(int256,int256,uint256)",
		"7e77b0c5": "assertEqDecimal(int256,int256,uint256,string)",
		"27af7d9c": "assertEqDecimal(uint256,uint256,uint256)",
		"d0cbbdef": "assertEqDecimal(uint256,uint256,uint256,string)",
		"a5982885": "assertFalse(bool)",
		"7ba04809": "assertFalse(bool,string)",
		"0a30b771": "assertGe(int256,int256)",
		"a84328dd": "assertGe(int256,int256,string)",
		"a8d4d1d9": "assertGe(uint256,uint256)",
		"e25242c0": "assertGe(uint256,uint256,string)",
		"dc28c0f1": "assertGeDecimal(int256,int256,uint256)",
		"5df93c9b": "assertGeDecimal(int256,int256,uint256,string)",
		"3d1fe08a": "assertGeDecimal(uint256,uint256,uint256)",
		"8bff9133": "assertGeDecimal(uint256,uint256,uint256,string)",
		"5a362d45": "assertGt(int256,int256)",
		"f8d33b9b": "assertGt(int256,int256,string)",
		"db07fcd2": "assertGt(uint256,uint256)",
		"d9a3c4d2": "assertGt(uint256,uint256,string)",
		"78611f0e": "assertGtDecimal(int256,int256,uint256)",
		"04a5c7ab": "assertGtDecimal(int256,int256,uint256,string)",
		"eccd2437": "assertGtDecimal(uint256,uint256,uint256)",
		"64949a8d": "assertGtDecimal(uint256,uint256,uint256,string)",
		"95fd154e": "assertLe(int256,int256)",
		"4dfe692c": "assertLe(int256,int256,string)",
		"8466f415": "assertLe(uint256,uint256)",
		"d17d4b0d": "assertLe(uint256,uint256,string)",
		"11d1364a": "assertLeDecimal(int256,int256,uint256)",
		"aa5cf788": "assertLeDecimal(int256,int256,uint256,string)",
		"c304aab7": "assertLeDecimal(uint256,uint256,uint256)",
		"7fefbbe0": "assertLeDecimal(uint256,uint256,uint256,string)",
		"3e914080": "assertLt(int256,int256)",
		"9ff531e3": "assertLt(int256,int256,string)",
		"b12fc005": "assertLt(uint256,uint256)",
		"65d5c135": "assertLt(uint256,uint256,string)",
		"dbe8d88b": "assertLtDecimal(int256,int256,uint256)",
		"40f0b4e0": "assertLtDecimal(int256,int256,uint256,string)",
		"2077337e": "assertLtDecimal(uint256,uint256,uint256)",
		"a972d037": "assertLtDecimal(uint256,uint256,uint256,string)",
		"b12e1694": "assertNotEq(address,address)",
		"8775a591": "assertNotEq(address,address,string)",
		"46d0b252": "assertNotEq(address[],address[])",
		"72c7e0b5": "assertNotEq(address[],address[],string)",
		"236e4d66": "assertNotEq(bool,bool)",
		"1091a261": "assertNotEq(bool,bool,string)",
		"286fafea": "assertNotEq(bool[],bool[])",
		"62c6f9fb": "assertNotEq(bool[],bool[],string)",
		"3cf78e28": "assertNotEq(bytes,bytes)",
		"9507540e": "assertNotEq(bytes,bytes,string)",
		"898e83fc": "assertNotEq(bytes32,bytes32)",
		"b2332f51": "assertNotEq(bytes32,bytes32,string)",
		"0603ea68": "assertNotEq(bytes32[],bytes32[])",
		"b873634c": "assertNotEq(bytes32[],bytes32[],string)",
		"edecd035": "assertNotEq(bytes[],bytes[])",
		"1dcd1f68": "assertNotEq(bytes[],bytes[],string)",
		"f4c004e3": "assertNotEq(int256,int256)",
		"4724c5b9": "assertNotEq(int256,int256,string)",
		"0b72f4ef": "assertNotEq(int256[],int256[])",
		"d3977322": "assertNotEq(int256[],int256[],string)",
		"6a8237b3": "assertNotEq(string,string)",
		"78bdcea7": "assertNotEq(string,string,string)",
		"bdfacbe8": "assertNotEq(string[],string[])",
		"b67187f3": "assertNotEq(string[],string[],string)",
		"b7909320": "assertNotEq(uint256,uint256)",
		"98f9bdbd": "assertNotEq(uint256,uint256,string)",
		"56f29cba": "assertNotEq(uint256[],uint256[])",
		"9a7fbd8f": "assertNotEq(uint256[],uint256[],string)",
		"14e75680": "assertNotEqDecimal(int256,int256,uint256)",
		"33949f0b": "assertNotEqDecimal(int256,int256,uint256,string)",
		"669efca7": "assertNotEqDecimal(uint256,uint256,uint256)",
		"f5a55558": "assertNotEqDecimal(uint256,uint256,uint256,string)",
		"0c9fd581": "assertTrue(bool)",
		"a34edc03": "assertTrue(bool,string)",
		"4c63e562": "assume(bool)",
		"f0259e92": "breakpoint(string)",
		"f7d39a8d": "breakpoint(string,bool)",
		"afc98040": "broadcast()",
		"e6962cdb": "broadcast(address)",
		"f67a965b": "broadcast(uint256)",
		"48c3241f": "closeFile(string)",
		"890c283b": "computeCreate2Address(bytes32,bytes32)",
		"d323826a": "computeCreate2Address(bytes32,bytes32,address)",
		"74637a7a": "computeCreateAddress(address,uint256)",
		"a54a87d8": "copyFile(string,string)",
		"168b64d3": "createDir(string,bool)",
		"7404f1d2": "createWallet(string)",
		"7a675bb6": "createWallet(uint256)",
		"ed7c5462": "createWallet(uint256,string)",
		"6bcb2c1b": "deriveKey(string,string,uint32)",
		"29233b1f": "deriveKey(string,string,uint32,string)",
		"6229498b": "deriveKey(string,uint32)",
		"32c8176d": "deriveKey(string,uint32,string)",
		"8c374c65": "ensNamehash(string)",
		"350d56bf": "envAddress(string)",
		"ad31b9fa": "envAddress(string,string)",
		"7ed1ec7d": "envBool(string)",
		"aaaddeaf": "envBool(string,string)",
		"4d7baf06": "envBytes(string)",
		"ddc2651b": "envBytes(string,string)",
		"97949042": "envBytes32(string)",
		"5af231c1": "envBytes32(string,string)",
		"ce8365f9": "envExists(string)",
		"892a0c61": "envInt(string)",
		"42181150": "envInt(string,string)",
		"561fe540": "envOr(string,address)",
		"4777f3cf": "envOr(string,bool)",
		"b3e47705": "envOr(string,bytes)",
		"b4a85892": "envOr(string,bytes32)",
		"bbcb713e": "envOr(string,int256)",
		"d145736c": "envOr(string,string)",
		"c74e9deb": "envOr(string,string,address[])",
		"eb85e83b": "envOr(string,string,bool[])",
		"2281f367": "envOr(string,string,bytes32[])",
		"64bc3e64": "envOr(string,string,bytes[])",
		"4700d74b": "envOr(string,string,int256[])",
		"859216bc": "envOr(string,string,string[])",
		"74318528": "envOr(string,string,uint256[])",
		"5e97348f": "envOr(string,uint256)",
		"f877cb19": "envString(string)",
		"14b02bc9": "envString(string,string)",
		"c1978d1f": "envUint(string)",
		"f3dec099": "envUint(string,string)",
		"35e1349b": "eth_getLogs(uint256,uint256,address,bytes32[])",
		"261a323e": "exists(string)",
		"89160467": "ffi(string[])",
		"af368a08": "fsMetadata(string)",
		"1f6d6ef7": "getBlobBaseFee()",
		"42cbb15c": "getBlockNumber()",
		"796b89b9": "getBlockTimestamp()",
		"8d1cc925": "getCode(string)",
		"3ebf73b4": "getDeployedCode(string)",
		"28a249b0": "getLabel(address)",
		"876e24e6": "getMappingKeyAndParentOf(address,bytes32)",
		"2f2fd63f": "getMappingLength(address,bytes32)",
		"ebc73ab4": "getMappingSlotAt(address,bytes32,uint256)",
		"a5748aad": "getNonce((address,uint256,uint256,uint256))",
		"2d0335ab": "getNonce(address)",
		"191553a4": "getRecordedLogs()",
		"8a0807b7": "indexOf(string,string)",
		"64af255d": "isContext(uint8)",
		"7d15d019": "isDir(string)",
		"e0eb04d4": "isFile(string)",
		"528a683c": "keyExists(string,string)",
		"db4235f6": "keyExistsJson(string,string)",
		"600903ad": "keyExistsToml(string,string)",
		"c657c718": "label(address,string)",
		"2b589b28": "lastCallGas()",
		"667f9d70": "load(address,bytes32)",
		"c6ce059d": "parseAddress(string)",
		"974ef924": "parseBool(string)",
		"8f5d232d": "parseBytes(string)",
		"087e6e81": "parseBytes32(string)",
		"42346c5e": "parseInt(string)",
		"6a82600a": "parseJson(string)",
		"85940ef1": "parseJson(string,string)",
		"1e19e657": "parseJsonAddress(string,string)",
		"2fce7883": "parseJsonAddressArray(string,string)",
		"9f86dc91": "parseJsonBool(string,string)",
		"91f3b94f": "parseJsonBoolArray(string,string)",
		"fd921be8": "parseJsonBytes(string,string)",
		"1777e59d": "parseJsonBytes32(string,string)",
		"91c75bc3": "parseJsonBytes32Array(string,string)",
		"6631aa99": "parseJsonBytesArray(string,string)",
		"7b048ccd": "parseJsonInt(string,string)",
		"9983c28a": "parseJsonIntArray(string,string)",
		"213e4198": "parseJsonKeys(string,string)",
		"49c4fac8": "parseJsonString(string,string)",
		"498fdcf4": "parseJsonStringArray(string,string)",
		"addde2b6": "parseJsonUint(string,string)",
		"522074ab": "parseJsonUintArray(string,string)",
		"592151f0": "parseToml(string)",
		"37736e08": "parseToml(string,string)",
		"65e7c844": "parseTomlAddress(string,string)",
		"65c428e7": "parseTomlAddressArray(string,string)",
		"d30dced6": "parseTomlBool(string,string)",
		"127cfe9a": "parseTomlBoolArray(string,string)",
		"d77bfdb9": "parseTomlBytes(string,string)",
		"8e214810": "parseTomlBytes32(string,string)",
		"3e716f81": "parseTomlBytes32Array(string,string)",
		"b197c247": "parseTomlBytesArray(string,string)",
		"c1350739": "parseTomlInt(string,string)",
		"d3522ae6": "parseTomlIntArray(string,string)",
		"812a44b2": "parseTomlKeys(string,string)",
		"8bb8dd43": "parseTomlString(string,string)",
		"9f629281": "parseTomlStringArray(string,string)",
		"cc7b0487": "parseTomlUint(string,string)",
		"b5df27c8": "parseTomlUintArray(string,string)",
		"fa91454d": "parseUint(string)",
		"d1a5b36f": "pauseGasMetering()",
		"d930a0e6": "projectRoot()",
		"47eaf474": "prompt(string)",
		"62ee05f4": "promptAddress(string)",
		"1e279d41": "promptSecret(string)",
		"652fd489": "promptUint(string)",
		"c4bc59e0": "readDir(string)",
		"1497876c": "readDir(string,uint64)",
		"8102d70d": "readDir(string,uint64,bool)",
		"60f9bb11": "readFile(string)",
		"16ed7bc4": "readFileBinary(string)",
		"70f55728": "readLine(string)",
		"9f5684a2": "readLink(string)",
		"266cf109": "record()",
		"41af2f52": "recordLogs()",
		"22100064": "rememberKey(uint256)",
		"45c62011": "removeDir(string,bool)",
		"f1afe04d": "removeFile(string)",
		"e00ad03e": "replace(string,string,string)",
		"2bcd50e0": "resumeGasMetering()",
		"1206c8a8": "rpc(string,string)",
		"975a6ce9": "rpcUrl(string)",
		"9d2ad72a": "rpcUrlStructs()",
		"a85a8418": "rpcUrls()",
		"972c6062": "serializeAddress(string,string,address)",
		"1e356e1a": "serializeAddress(string,string,address[])",
		"ac22e971": "serializeBool(string,string,bool)",
		"92925aa1": "serializeBool(string,string,bool[])",
		"f21d52c7": "serializeBytes(string,string,bytes)",
		"9884b232": "serializeBytes(string,string,bytes[])",
		"2d812b44": "serializeBytes32(string,string,bytes32)",
		"201e43e2": "serializeBytes32(string,string,bytes32[])",
		"3f33db60": "serializeInt(string,string,int256)",
		"7676e127": "serializeInt(string,string,int256[])",
		"9b3358b0": "serializeJson(string,string)",
		"88da6d35": "serializeString(string,string,string)",
		"561cd6f3": "serializeString(string,string,string[])",
		"129e9002": "serializeUint(string,string,uint256)",
		"fee9a469": "serializeUint(string,string,uint256[])",
		"ae5a2ae8": "serializeUintToHex(string,string,uint256)",
		"3d5923ee": "setEnv(string,string)",
		"b25c5a25": "sign((address,uint256,uint256,uint256),bytes32)",
		"8c1aa205": "sign(address,bytes32)",
		"799cd333": "sign(bytes32)",
		"e341eaa4": "sign(uint256,bytes32)",
		"83211b40": "signP256(uint256,bytes32)",
		"fa9d8713": "sleep(uint256)",
		"8bb75533": "split(string,string)",
		"7fb5297f": "startBroadcast()",
		"7fec2a8d": "startBroadcast(address)",
		"ce817d47": "startBroadcast(uint256)",
		"3e9705c0": "startMappingRecording()",
		"cf22e3c9": "startStateDiffRecording()",
		"aa5cf90e": "stopAndReturnStateDiff()",
		"76eadd36": "stopBroadcast()",
		"0d4aae9b": "stopMappingRecording()",
		"a5cbfe65": "toBase64(bytes)",
		"3f8be2c8": "toBase64(string)",
		"c8bd0e4a": "toBase64URL(bytes)",
		"ae3165b3": "toBase64URL(string)",
		"50bb0884": "toLowercase(string)",
		"56ca623e": "toString(address)",
		"71dce7da": "toString(bool)",
		"71aad10d": "toString(bytes)",
		"b11a19e8": "toString(bytes32)",
		"a322c40e": "toString(int256)",
		"6900a3ae": "toString(uint256)",
		"074ae3d7": "toUppercase(string)",
		"b2dad155": "trim(string)",
		"f45c1ce7": "tryFfi(string[])",
		"625387dc": "unixTime()",
		"897e0a97": "writeFile(string,string)",
		"1f21fc80": "writeFileBinary(string,bytes)",
		"e23cd19f": "writeJson(string,string)",
		"35d6ad46": "writeJson(string,string,string)",
		"619d897f": "writeLine(string,string)",
		"c0865ba7": "writeToml(string,string)",
		"51ac6a33": "writeToml(string,string,string)",
	},
}

// VmSafeABI is the input ABI used to generate the binding from.
// Deprecated: Use VmSafeMetaData.ABI instead.
var VmSafeABI = VmSafeMetaData.ABI

// Deprecated: Use VmSafeMetaData.Sigs instead.
// VmSafeFuncSigs maps the 4-byte function signature to its string representation.
var VmSafeFuncSigs = VmSafeMetaData.Sigs

// VmSafe is an auto generated Go binding around an Ethereum contract.
type VmSafe struct {
	VmSafeCaller     // Read-only binding to the contract
	VmSafeTransactor // Write-only binding to the contract
	VmSafeFilterer   // Log filterer for contract events
}

// VmSafeCaller is an auto generated read-only Go binding around an Ethereum contract.
type VmSafeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmSafeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VmSafeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmSafeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VmSafeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VmSafeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VmSafeSession struct {
	Contract     *VmSafe           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VmSafeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VmSafeCallerSession struct {
	Contract *VmSafeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VmSafeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VmSafeTransactorSession struct {
	Contract     *VmSafeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VmSafeRaw is an auto generated low-level Go binding around an Ethereum contract.
type VmSafeRaw struct {
	Contract *VmSafe // Generic contract binding to access the raw methods on
}

// VmSafeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VmSafeCallerRaw struct {
	Contract *VmSafeCaller // Generic read-only contract binding to access the raw methods on
}

// VmSafeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VmSafeTransactorRaw struct {
	Contract *VmSafeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVmSafe creates a new instance of VmSafe, bound to a specific deployed contract.
func NewVmSafe(address common.Address, backend bind.ContractBackend) (*VmSafe, error) {
	contract, err := bindVmSafe(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VmSafe{VmSafeCaller: VmSafeCaller{contract: contract}, VmSafeTransactor: VmSafeTransactor{contract: contract}, VmSafeFilterer: VmSafeFilterer{contract: contract}}, nil
}

// NewVmSafeCaller creates a new read-only instance of VmSafe, bound to a specific deployed contract.
func NewVmSafeCaller(address common.Address, caller bind.ContractCaller) (*VmSafeCaller, error) {
	contract, err := bindVmSafe(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VmSafeCaller{contract: contract}, nil
}

// NewVmSafeTransactor creates a new write-only instance of VmSafe, bound to a specific deployed contract.
func NewVmSafeTransactor(address common.Address, transactor bind.ContractTransactor) (*VmSafeTransactor, error) {
	contract, err := bindVmSafe(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VmSafeTransactor{contract: contract}, nil
}

// NewVmSafeFilterer creates a new log filterer instance of VmSafe, bound to a specific deployed contract.
func NewVmSafeFilterer(address common.Address, filterer bind.ContractFilterer) (*VmSafeFilterer, error) {
	contract, err := bindVmSafe(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VmSafeFilterer{contract: contract}, nil
}

// bindVmSafe binds a generic wrapper to an already deployed contract.
func bindVmSafe(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VmSafeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VmSafe *VmSafeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VmSafe.Contract.VmSafeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VmSafe *VmSafeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.Contract.VmSafeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VmSafe *VmSafeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VmSafe.Contract.VmSafeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VmSafe *VmSafeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VmSafe.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VmSafe *VmSafeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VmSafe *VmSafeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VmSafe.Contract.contract.Transact(opts, method, params...)
}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_VmSafe *VmSafeCaller) Addr(opts *bind.CallOpts, privateKey *big.Int) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "addr", privateKey)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_VmSafe *VmSafeSession) Addr(privateKey *big.Int) (common.Address, error) {
	return _VmSafe.Contract.Addr(&_VmSafe.CallOpts, privateKey)
}

// Addr is a free data retrieval call binding the contract method 0xffa18649.
//
// Solidity: function addr(uint256 privateKey) pure returns(address keyAddr)
func (_VmSafe *VmSafeCallerSession) Addr(privateKey *big.Int) (common.Address, error) {
	return _VmSafe.Contract.Addr(&_VmSafe.CallOpts, privateKey)
}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbs(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbs", left, right, maxDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbs(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbs(&_VmSafe.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs is a free data retrieval call binding the contract method 0x16d207c6.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbs(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbs(&_VmSafe.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbs0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbs0", left, right, maxDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbs0(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbs0(&_VmSafe.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs0 is a free data retrieval call binding the contract method 0x240f839d.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbs0(left *big.Int, right *big.Int, maxDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbs0(&_VmSafe.CallOpts, left, right, maxDelta)
}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbs1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbs1", left, right, maxDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbs1(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbs1(&_VmSafe.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs1 is a free data retrieval call binding the contract method 0x8289e621.
//
// Solidity: function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbs1(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbs1(&_VmSafe.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbs2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbs2", left, right, maxDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbs2(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbs2(&_VmSafe.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbs2 is a free data retrieval call binding the contract method 0xf710b062.
//
// Solidity: function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbs2(left *big.Int, right *big.Int, maxDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbs2(&_VmSafe.CallOpts, left, right, maxDelta, error)
}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbsDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbsDecimal", left, right, maxDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbsDecimal(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal(&_VmSafe.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal is a free data retrieval call binding the contract method 0x045c55ce.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbsDecimal(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal(&_VmSafe.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbsDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbsDecimal0", left, right, maxDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbsDecimal0(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal0(&_VmSafe.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal0 is a free data retrieval call binding the contract method 0x3d5bc8bc.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbsDecimal0(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal0(&_VmSafe.CallOpts, left, right, maxDelta, decimals)
}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbsDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbsDecimal1", left, right, maxDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbsDecimal1(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal1(&_VmSafe.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal1 is a free data retrieval call binding the contract method 0x60429eb2.
//
// Solidity: function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbsDecimal1(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal1(&_VmSafe.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqAbsDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqAbsDecimal2", left, right, maxDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqAbsDecimal2(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal2(&_VmSafe.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqAbsDecimal2 is a free data retrieval call binding the contract method 0x6a5066d4.
//
// Solidity: function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqAbsDecimal2(left *big.Int, right *big.Int, maxDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqAbsDecimal2(&_VmSafe.CallOpts, left, right, maxDelta, decimals, error)
}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRel(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRel", left, right, maxPercentDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRel(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRel(&_VmSafe.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel is a free data retrieval call binding the contract method 0x1ecb7d33.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRel(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRel(&_VmSafe.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRel0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRel0", left, right, maxPercentDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRel0(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRel0(&_VmSafe.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel0 is a free data retrieval call binding the contract method 0x8cf25ef4.
//
// Solidity: function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRel0(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRel0(&_VmSafe.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRel1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRel1", left, right, maxPercentDelta, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRel1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRel1(&_VmSafe.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel1 is a free data retrieval call binding the contract method 0xef277d72.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRel1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRel1(&_VmSafe.CallOpts, left, right, maxPercentDelta, error)
}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRel2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRel2", left, right, maxPercentDelta)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRel2(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRel2(&_VmSafe.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRel2 is a free data retrieval call binding the contract method 0xfea2d14f.
//
// Solidity: function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRel2(left *big.Int, right *big.Int, maxPercentDelta *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRel2(&_VmSafe.CallOpts, left, right, maxPercentDelta)
}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRelDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRelDecimal", left, right, maxPercentDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRelDecimal(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal is a free data retrieval call binding the contract method 0x21ed2977.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRelDecimal(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRelDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRelDecimal0", left, right, maxPercentDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRelDecimal0(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal0(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal0 is a free data retrieval call binding the contract method 0x82d6c8fd.
//
// Solidity: function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRelDecimal0(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal0(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRelDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRelDecimal1", left, right, maxPercentDelta, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRelDecimal1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal1(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal1 is a free data retrieval call binding the contract method 0xabbf21cc.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRelDecimal1(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal1(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals)
}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertApproxEqRelDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertApproxEqRelDecimal2", left, right, maxPercentDelta, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertApproxEqRelDecimal2(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal2(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertApproxEqRelDecimal2 is a free data retrieval call binding the contract method 0xfccc11c4.
//
// Solidity: function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertApproxEqRelDecimal2(left *big.Int, right *big.Int, maxPercentDelta *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertApproxEqRelDecimal2(&_VmSafe.CallOpts, left, right, maxPercentDelta, decimals, error)
}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq(opts *bind.CallOpts, left [][32]byte, right [][32]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq(left [][32]byte, right [][32]byte) error {
	return _VmSafe.Contract.AssertEq(&_VmSafe.CallOpts, left, right)
}

// AssertEq is a free data retrieval call binding the contract method 0x0cc9ee84.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq(left [][32]byte, right [][32]byte) error {
	return _VmSafe.Contract.AssertEq(&_VmSafe.CallOpts, left, right)
}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq0(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq0(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertEq0(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq0 is a free data retrieval call binding the contract method 0x191f1b30.
//
// Solidity: function assertEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq0(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertEq0(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq1(opts *bind.CallOpts, left common.Address, right common.Address, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq1(left common.Address, right common.Address, error string) error {
	return _VmSafe.Contract.AssertEq1(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq1 is a free data retrieval call binding the contract method 0x2f2769d1.
//
// Solidity: function assertEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq1(left common.Address, right common.Address, error string) error {
	return _VmSafe.Contract.AssertEq1(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq10(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq10", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq10(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertEq10(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq10 is a free data retrieval call binding the contract method 0x714a2f13.
//
// Solidity: function assertEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq10(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertEq10(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq11(opts *bind.CallOpts, left [32]byte, right [32]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq11", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq11(left [32]byte, right [32]byte) error {
	return _VmSafe.Contract.AssertEq11(&_VmSafe.CallOpts, left, right)
}

// AssertEq11 is a free data retrieval call binding the contract method 0x7c84c69b.
//
// Solidity: function assertEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq11(left [32]byte, right [32]byte) error {
	return _VmSafe.Contract.AssertEq11(&_VmSafe.CallOpts, left, right)
}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq12(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq12", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq12(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertEq12(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq12 is a free data retrieval call binding the contract method 0x88b44c85.
//
// Solidity: function assertEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq12(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertEq12(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq13(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq13", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq13(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertEq13(&_VmSafe.CallOpts, left, right)
}

// AssertEq13 is a free data retrieval call binding the contract method 0x975d5a12.
//
// Solidity: function assertEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq13(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertEq13(&_VmSafe.CallOpts, left, right)
}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq14(opts *bind.CallOpts, left []byte, right []byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq14", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq14(left []byte, right []byte) error {
	return _VmSafe.Contract.AssertEq14(&_VmSafe.CallOpts, left, right)
}

// AssertEq14 is a free data retrieval call binding the contract method 0x97624631.
//
// Solidity: function assertEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq14(left []byte, right []byte) error {
	return _VmSafe.Contract.AssertEq14(&_VmSafe.CallOpts, left, right)
}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq15(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq15", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq15(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertEq15(&_VmSafe.CallOpts, left, right)
}

// AssertEq15 is a free data retrieval call binding the contract method 0x98296c54.
//
// Solidity: function assertEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq15(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertEq15(&_VmSafe.CallOpts, left, right)
}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq16(opts *bind.CallOpts, left [32]byte, right [32]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq16", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq16(left [32]byte, right [32]byte, error string) error {
	return _VmSafe.Contract.AssertEq16(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq16 is a free data retrieval call binding the contract method 0xc1fa1ed0.
//
// Solidity: function assertEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq16(left [32]byte, right [32]byte, error string) error {
	return _VmSafe.Contract.AssertEq16(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq17(opts *bind.CallOpts, left []string, right []string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq17", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq17(left []string, right []string) error {
	return _VmSafe.Contract.AssertEq17(&_VmSafe.CallOpts, left, right)
}

// AssertEq17 is a free data retrieval call binding the contract method 0xcf1c049c.
//
// Solidity: function assertEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq17(left []string, right []string) error {
	return _VmSafe.Contract.AssertEq17(&_VmSafe.CallOpts, left, right)
}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq18(opts *bind.CallOpts, left [][32]byte, right [][32]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq18", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq18(left [][32]byte, right [][32]byte, error string) error {
	return _VmSafe.Contract.AssertEq18(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq18 is a free data retrieval call binding the contract method 0xe03e9177.
//
// Solidity: function assertEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq18(left [][32]byte, right [][32]byte, error string) error {
	return _VmSafe.Contract.AssertEq18(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq19(opts *bind.CallOpts, left []byte, right []byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq19", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq19(left []byte, right []byte, error string) error {
	return _VmSafe.Contract.AssertEq19(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq19 is a free data retrieval call binding the contract method 0xe24fed00.
//
// Solidity: function assertEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq19(left []byte, right []byte, error string) error {
	return _VmSafe.Contract.AssertEq19(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq2(opts *bind.CallOpts, left string, right string, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq2(left string, right string, error string) error {
	return _VmSafe.Contract.AssertEq2(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq2 is a free data retrieval call binding the contract method 0x36f656d8.
//
// Solidity: function assertEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq2(left string, right string, error string) error {
	return _VmSafe.Contract.AssertEq2(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq20(opts *bind.CallOpts, left []bool, right []bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq20", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq20(left []bool, right []bool, error string) error {
	return _VmSafe.Contract.AssertEq20(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq20 is a free data retrieval call binding the contract method 0xe48a8f8d.
//
// Solidity: function assertEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq20(left []bool, right []bool, error string) error {
	return _VmSafe.Contract.AssertEq20(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq21(opts *bind.CallOpts, left [][]byte, right [][]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq21", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq21(left [][]byte, right [][]byte) error {
	return _VmSafe.Contract.AssertEq21(&_VmSafe.CallOpts, left, right)
}

// AssertEq21 is a free data retrieval call binding the contract method 0xe5fb9b4a.
//
// Solidity: function assertEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq21(left [][]byte, right [][]byte) error {
	return _VmSafe.Contract.AssertEq21(&_VmSafe.CallOpts, left, right)
}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq22(opts *bind.CallOpts, left []string, right []string, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq22", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq22(left []string, right []string, error string) error {
	return _VmSafe.Contract.AssertEq22(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq22 is a free data retrieval call binding the contract method 0xeff6b27d.
//
// Solidity: function assertEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq22(left []string, right []string, error string) error {
	return _VmSafe.Contract.AssertEq22(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq23(opts *bind.CallOpts, left string, right string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq23", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq23(left string, right string) error {
	return _VmSafe.Contract.AssertEq23(&_VmSafe.CallOpts, left, right)
}

// AssertEq23 is a free data retrieval call binding the contract method 0xf320d963.
//
// Solidity: function assertEq(string left, string right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq23(left string, right string) error {
	return _VmSafe.Contract.AssertEq23(&_VmSafe.CallOpts, left, right)
}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq24(opts *bind.CallOpts, left [][]byte, right [][]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq24", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq24(left [][]byte, right [][]byte, error string) error {
	return _VmSafe.Contract.AssertEq24(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq24 is a free data retrieval call binding the contract method 0xf413f0b6.
//
// Solidity: function assertEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq24(left [][]byte, right [][]byte, error string) error {
	return _VmSafe.Contract.AssertEq24(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq25(opts *bind.CallOpts, left bool, right bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq25", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq25(left bool, right bool) error {
	return _VmSafe.Contract.AssertEq25(&_VmSafe.CallOpts, left, right)
}

// AssertEq25 is a free data retrieval call binding the contract method 0xf7fe3477.
//
// Solidity: function assertEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq25(left bool, right bool) error {
	return _VmSafe.Contract.AssertEq25(&_VmSafe.CallOpts, left, right)
}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq26(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq26", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq26(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertEq26(&_VmSafe.CallOpts, left, right)
}

// AssertEq26 is a free data retrieval call binding the contract method 0xfe74f05b.
//
// Solidity: function assertEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq26(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertEq26(&_VmSafe.CallOpts, left, right)
}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq3(opts *bind.CallOpts, left []common.Address, right []common.Address) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq3", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq3(left []common.Address, right []common.Address) error {
	return _VmSafe.Contract.AssertEq3(&_VmSafe.CallOpts, left, right)
}

// AssertEq3 is a free data retrieval call binding the contract method 0x3868ac34.
//
// Solidity: function assertEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq3(left []common.Address, right []common.Address) error {
	return _VmSafe.Contract.AssertEq3(&_VmSafe.CallOpts, left, right)
}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq4(opts *bind.CallOpts, left []common.Address, right []common.Address, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq4", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq4(left []common.Address, right []common.Address, error string) error {
	return _VmSafe.Contract.AssertEq4(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq4 is a free data retrieval call binding the contract method 0x3e9173c5.
//
// Solidity: function assertEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq4(left []common.Address, right []common.Address, error string) error {
	return _VmSafe.Contract.AssertEq4(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq5(opts *bind.CallOpts, left bool, right bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq5", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq5(left bool, right bool, error string) error {
	return _VmSafe.Contract.AssertEq5(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq5 is a free data retrieval call binding the contract method 0x4db19e7e.
//
// Solidity: function assertEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq5(left bool, right bool, error string) error {
	return _VmSafe.Contract.AssertEq5(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq6(opts *bind.CallOpts, left common.Address, right common.Address) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq6", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq6(left common.Address, right common.Address) error {
	return _VmSafe.Contract.AssertEq6(&_VmSafe.CallOpts, left, right)
}

// AssertEq6 is a free data retrieval call binding the contract method 0x515361f6.
//
// Solidity: function assertEq(address left, address right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq6(left common.Address, right common.Address) error {
	return _VmSafe.Contract.AssertEq6(&_VmSafe.CallOpts, left, right)
}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq7(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq7", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEq7(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertEq7(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq7 is a free data retrieval call binding the contract method 0x5d18c73a.
//
// Solidity: function assertEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq7(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertEq7(&_VmSafe.CallOpts, left, right, error)
}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq8(opts *bind.CallOpts, left []bool, right []bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq8", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq8(left []bool, right []bool) error {
	return _VmSafe.Contract.AssertEq8(&_VmSafe.CallOpts, left, right)
}

// AssertEq8 is a free data retrieval call binding the contract method 0x707df785.
//
// Solidity: function assertEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq8(left []bool, right []bool) error {
	return _VmSafe.Contract.AssertEq8(&_VmSafe.CallOpts, left, right)
}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertEq9(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEq9", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertEq9(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertEq9(&_VmSafe.CallOpts, left, right)
}

// AssertEq9 is a free data retrieval call binding the contract method 0x711043ac.
//
// Solidity: function assertEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEq9(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertEq9(&_VmSafe.CallOpts, left, right)
}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertEqDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEqDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertEqDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertEqDecimal is a free data retrieval call binding the contract method 0x27af7d9c.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertEqDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertEqDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEqDecimal0", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertEqDecimal0(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertEqDecimal0 is a free data retrieval call binding the contract method 0x48016c04.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertEqDecimal0(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEqDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEqDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertEqDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal1 is a free data retrieval call binding the contract method 0x7e77b0c5.
//
// Solidity: function assertEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertEqDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertEqDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertEqDecimal2", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertEqDecimal2(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertEqDecimal2 is a free data retrieval call binding the contract method 0xd0cbbdef.
//
// Solidity: function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertEqDecimal2(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertFalse(opts *bind.CallOpts, condition bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertFalse", condition, error)

	if err != nil {
		return err
	}

	return err

}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertFalse(condition bool, error string) error {
	return _VmSafe.Contract.AssertFalse(&_VmSafe.CallOpts, condition, error)
}

// AssertFalse is a free data retrieval call binding the contract method 0x7ba04809.
//
// Solidity: function assertFalse(bool condition, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertFalse(condition bool, error string) error {
	return _VmSafe.Contract.AssertFalse(&_VmSafe.CallOpts, condition, error)
}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_VmSafe *VmSafeCaller) AssertFalse0(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertFalse0", condition)

	if err != nil {
		return err
	}

	return err

}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_VmSafe *VmSafeSession) AssertFalse0(condition bool) error {
	return _VmSafe.Contract.AssertFalse0(&_VmSafe.CallOpts, condition)
}

// AssertFalse0 is a free data retrieval call binding the contract method 0xa5982885.
//
// Solidity: function assertFalse(bool condition) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertFalse0(condition bool) error {
	return _VmSafe.Contract.AssertFalse0(&_VmSafe.CallOpts, condition)
}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertGe(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGe", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertGe(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGe(&_VmSafe.CallOpts, left, right)
}

// AssertGe is a free data retrieval call binding the contract method 0x0a30b771.
//
// Solidity: function assertGe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGe(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGe(&_VmSafe.CallOpts, left, right)
}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGe0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGe0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGe0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGe0(&_VmSafe.CallOpts, left, right, error)
}

// AssertGe0 is a free data retrieval call binding the contract method 0xa84328dd.
//
// Solidity: function assertGe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGe0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGe0(&_VmSafe.CallOpts, left, right, error)
}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertGe1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGe1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertGe1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGe1(&_VmSafe.CallOpts, left, right)
}

// AssertGe1 is a free data retrieval call binding the contract method 0xa8d4d1d9.
//
// Solidity: function assertGe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGe1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGe1(&_VmSafe.CallOpts, left, right)
}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGe2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGe2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGe2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGe2(&_VmSafe.CallOpts, left, right, error)
}

// AssertGe2 is a free data retrieval call binding the contract method 0xe25242c0.
//
// Solidity: function assertGe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGe2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGe2(&_VmSafe.CallOpts, left, right, error)
}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertGeDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGeDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertGeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGeDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGeDecimal is a free data retrieval call binding the contract method 0x3d1fe08a.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGeDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGeDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGeDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGeDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal0 is a free data retrieval call binding the contract method 0x5df93c9b.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGeDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGeDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGeDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGeDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal1 is a free data retrieval call binding the contract method 0x8bff9133.
//
// Solidity: function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGeDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertGeDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGeDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertGeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGeDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGeDecimal2 is a free data retrieval call binding the contract method 0xdc28c0f1.
//
// Solidity: function assertGeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGeDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertGt(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGt", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertGt(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGt(&_VmSafe.CallOpts, left, right)
}

// AssertGt is a free data retrieval call binding the contract method 0x5a362d45.
//
// Solidity: function assertGt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGt(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGt(&_VmSafe.CallOpts, left, right)
}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGt0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGt0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGt0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGt0(&_VmSafe.CallOpts, left, right, error)
}

// AssertGt0 is a free data retrieval call binding the contract method 0xd9a3c4d2.
//
// Solidity: function assertGt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGt0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGt0(&_VmSafe.CallOpts, left, right, error)
}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertGt1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGt1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertGt1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGt1(&_VmSafe.CallOpts, left, right)
}

// AssertGt1 is a free data retrieval call binding the contract method 0xdb07fcd2.
//
// Solidity: function assertGt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGt1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertGt1(&_VmSafe.CallOpts, left, right)
}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGt2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGt2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGt2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGt2(&_VmSafe.CallOpts, left, right, error)
}

// AssertGt2 is a free data retrieval call binding the contract method 0xf8d33b9b.
//
// Solidity: function assertGt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGt2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertGt2(&_VmSafe.CallOpts, left, right, error)
}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGtDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGtDecimal", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGtDecimal(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGtDecimal(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal is a free data retrieval call binding the contract method 0x04a5c7ab.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGtDecimal(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGtDecimal(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertGtDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGtDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertGtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGtDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal0 is a free data retrieval call binding the contract method 0x64949a8d.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertGtDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertGtDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGtDecimal1", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertGtDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGtDecimal1(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGtDecimal1 is a free data retrieval call binding the contract method 0x78611f0e.
//
// Solidity: function assertGtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGtDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGtDecimal1(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertGtDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertGtDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertGtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGtDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertGtDecimal2 is a free data retrieval call binding the contract method 0xeccd2437.
//
// Solidity: function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertGtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertGtDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLe(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLe", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLe(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLe(&_VmSafe.CallOpts, left, right, error)
}

// AssertLe is a free data retrieval call binding the contract method 0x4dfe692c.
//
// Solidity: function assertLe(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLe(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLe(&_VmSafe.CallOpts, left, right, error)
}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertLe0(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLe0", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertLe0(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLe0(&_VmSafe.CallOpts, left, right)
}

// AssertLe0 is a free data retrieval call binding the contract method 0x8466f415.
//
// Solidity: function assertLe(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLe0(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLe0(&_VmSafe.CallOpts, left, right)
}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertLe1(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLe1", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertLe1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLe1(&_VmSafe.CallOpts, left, right)
}

// AssertLe1 is a free data retrieval call binding the contract method 0x95fd154e.
//
// Solidity: function assertLe(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLe1(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLe1(&_VmSafe.CallOpts, left, right)
}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLe2(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLe2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLe2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLe2(&_VmSafe.CallOpts, left, right, error)
}

// AssertLe2 is a free data retrieval call binding the contract method 0xd17d4b0d.
//
// Solidity: function assertLe(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLe2(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLe2(&_VmSafe.CallOpts, left, right, error)
}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertLeDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLeDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertLeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLeDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLeDecimal is a free data retrieval call binding the contract method 0x11d1364a.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLeDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLeDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLeDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLeDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLeDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal0 is a free data retrieval call binding the contract method 0x7fefbbe0.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLeDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLeDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLeDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLeDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLeDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal1 is a free data retrieval call binding the contract method 0xaa5cf788.
//
// Solidity: function assertLeDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLeDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLeDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertLeDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLeDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertLeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLeDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLeDecimal2 is a free data retrieval call binding the contract method 0xc304aab7.
//
// Solidity: function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLeDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLeDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertLt(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLt", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertLt(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLt(&_VmSafe.CallOpts, left, right)
}

// AssertLt is a free data retrieval call binding the contract method 0x3e914080.
//
// Solidity: function assertLt(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLt(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLt(&_VmSafe.CallOpts, left, right)
}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLt0(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLt0", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLt0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLt0(&_VmSafe.CallOpts, left, right, error)
}

// AssertLt0 is a free data retrieval call binding the contract method 0x65d5c135.
//
// Solidity: function assertLt(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLt0(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLt0(&_VmSafe.CallOpts, left, right, error)
}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLt1(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLt1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLt1(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLt1(&_VmSafe.CallOpts, left, right, error)
}

// AssertLt1 is a free data retrieval call binding the contract method 0x9ff531e3.
//
// Solidity: function assertLt(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLt1(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertLt1(&_VmSafe.CallOpts, left, right, error)
}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertLt2(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLt2", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertLt2(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLt2(&_VmSafe.CallOpts, left, right)
}

// AssertLt2 is a free data retrieval call binding the contract method 0xb12fc005.
//
// Solidity: function assertLt(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLt2(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertLt2(&_VmSafe.CallOpts, left, right)
}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertLtDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLtDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertLtDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLtDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLtDecimal is a free data retrieval call binding the contract method 0x2077337e.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLtDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLtDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLtDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLtDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLtDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal0 is a free data retrieval call binding the contract method 0x40f0b4e0.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLtDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLtDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertLtDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLtDecimal1", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertLtDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLtDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal1 is a free data retrieval call binding the contract method 0xa972d037.
//
// Solidity: function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLtDecimal1(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertLtDecimal1(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertLtDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertLtDecimal2", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertLtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLtDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertLtDecimal2 is a free data retrieval call binding the contract method 0xdbe8d88b.
//
// Solidity: function assertLtDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertLtDecimal2(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertLtDecimal2(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq(opts *bind.CallOpts, left [][32]byte, right [][32]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq(left [][32]byte, right [][32]byte) error {
	return _VmSafe.Contract.AssertNotEq(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq is a free data retrieval call binding the contract method 0x0603ea68.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq(left [][32]byte, right [][32]byte) error {
	return _VmSafe.Contract.AssertNotEq(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq0(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq0", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq0(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertNotEq0(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq0 is a free data retrieval call binding the contract method 0x0b72f4ef.
//
// Solidity: function assertNotEq(int256[] left, int256[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq0(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertNotEq0(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq1(opts *bind.CallOpts, left bool, right bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq1", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq1(left bool, right bool, error string) error {
	return _VmSafe.Contract.AssertNotEq1(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq1 is a free data retrieval call binding the contract method 0x1091a261.
//
// Solidity: function assertNotEq(bool left, bool right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq1(left bool, right bool, error string) error {
	return _VmSafe.Contract.AssertNotEq1(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq10(opts *bind.CallOpts, left string, right string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq10", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq10(left string, right string) error {
	return _VmSafe.Contract.AssertNotEq10(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq10 is a free data retrieval call binding the contract method 0x6a8237b3.
//
// Solidity: function assertNotEq(string left, string right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq10(left string, right string) error {
	return _VmSafe.Contract.AssertNotEq10(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq11(opts *bind.CallOpts, left []common.Address, right []common.Address, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq11", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq11(left []common.Address, right []common.Address, error string) error {
	return _VmSafe.Contract.AssertNotEq11(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq11 is a free data retrieval call binding the contract method 0x72c7e0b5.
//
// Solidity: function assertNotEq(address[] left, address[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq11(left []common.Address, right []common.Address, error string) error {
	return _VmSafe.Contract.AssertNotEq11(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq12(opts *bind.CallOpts, left string, right string, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq12", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq12(left string, right string, error string) error {
	return _VmSafe.Contract.AssertNotEq12(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq12 is a free data retrieval call binding the contract method 0x78bdcea7.
//
// Solidity: function assertNotEq(string left, string right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq12(left string, right string, error string) error {
	return _VmSafe.Contract.AssertNotEq12(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq13(opts *bind.CallOpts, left common.Address, right common.Address, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq13", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq13(left common.Address, right common.Address, error string) error {
	return _VmSafe.Contract.AssertNotEq13(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq13 is a free data retrieval call binding the contract method 0x8775a591.
//
// Solidity: function assertNotEq(address left, address right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq13(left common.Address, right common.Address, error string) error {
	return _VmSafe.Contract.AssertNotEq13(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq14(opts *bind.CallOpts, left [32]byte, right [32]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq14", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq14(left [32]byte, right [32]byte) error {
	return _VmSafe.Contract.AssertNotEq14(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq14 is a free data retrieval call binding the contract method 0x898e83fc.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq14(left [32]byte, right [32]byte) error {
	return _VmSafe.Contract.AssertNotEq14(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq15(opts *bind.CallOpts, left []byte, right []byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq15", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq15(left []byte, right []byte, error string) error {
	return _VmSafe.Contract.AssertNotEq15(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq15 is a free data retrieval call binding the contract method 0x9507540e.
//
// Solidity: function assertNotEq(bytes left, bytes right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq15(left []byte, right []byte, error string) error {
	return _VmSafe.Contract.AssertNotEq15(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq16(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq16", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq16(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq16(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq16 is a free data retrieval call binding the contract method 0x98f9bdbd.
//
// Solidity: function assertNotEq(uint256 left, uint256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq16(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq16(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq17(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq17", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq17(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq17(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq17 is a free data retrieval call binding the contract method 0x9a7fbd8f.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq17(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq17(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq18(opts *bind.CallOpts, left common.Address, right common.Address) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq18", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq18(left common.Address, right common.Address) error {
	return _VmSafe.Contract.AssertNotEq18(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq18 is a free data retrieval call binding the contract method 0xb12e1694.
//
// Solidity: function assertNotEq(address left, address right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq18(left common.Address, right common.Address) error {
	return _VmSafe.Contract.AssertNotEq18(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq19(opts *bind.CallOpts, left [32]byte, right [32]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq19", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq19(left [32]byte, right [32]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq19(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq19 is a free data retrieval call binding the contract method 0xb2332f51.
//
// Solidity: function assertNotEq(bytes32 left, bytes32 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq19(left [32]byte, right [32]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq19(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq2(opts *bind.CallOpts, left [][]byte, right [][]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq2", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq2(left [][]byte, right [][]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq2(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq2 is a free data retrieval call binding the contract method 0x1dcd1f68.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq2(left [][]byte, right [][]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq2(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq20(opts *bind.CallOpts, left []string, right []string, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq20", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq20(left []string, right []string, error string) error {
	return _VmSafe.Contract.AssertNotEq20(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq20 is a free data retrieval call binding the contract method 0xb67187f3.
//
// Solidity: function assertNotEq(string[] left, string[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq20(left []string, right []string, error string) error {
	return _VmSafe.Contract.AssertNotEq20(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq21(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq21", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq21(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertNotEq21(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq21 is a free data retrieval call binding the contract method 0xb7909320.
//
// Solidity: function assertNotEq(uint256 left, uint256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq21(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertNotEq21(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq22(opts *bind.CallOpts, left [][32]byte, right [][32]byte, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq22", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq22(left [][32]byte, right [][32]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq22(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq22 is a free data retrieval call binding the contract method 0xb873634c.
//
// Solidity: function assertNotEq(bytes32[] left, bytes32[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq22(left [][32]byte, right [][32]byte, error string) error {
	return _VmSafe.Contract.AssertNotEq22(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq23(opts *bind.CallOpts, left []string, right []string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq23", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq23(left []string, right []string) error {
	return _VmSafe.Contract.AssertNotEq23(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq23 is a free data retrieval call binding the contract method 0xbdfacbe8.
//
// Solidity: function assertNotEq(string[] left, string[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq23(left []string, right []string) error {
	return _VmSafe.Contract.AssertNotEq23(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq24(opts *bind.CallOpts, left []*big.Int, right []*big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq24", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq24(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq24(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq24 is a free data retrieval call binding the contract method 0xd3977322.
//
// Solidity: function assertNotEq(int256[] left, int256[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq24(left []*big.Int, right []*big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq24(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq25(opts *bind.CallOpts, left [][]byte, right [][]byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq25", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq25(left [][]byte, right [][]byte) error {
	return _VmSafe.Contract.AssertNotEq25(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq25 is a free data retrieval call binding the contract method 0xedecd035.
//
// Solidity: function assertNotEq(bytes[] left, bytes[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq25(left [][]byte, right [][]byte) error {
	return _VmSafe.Contract.AssertNotEq25(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq26(opts *bind.CallOpts, left *big.Int, right *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq26", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq26(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertNotEq26(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq26 is a free data retrieval call binding the contract method 0xf4c004e3.
//
// Solidity: function assertNotEq(int256 left, int256 right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq26(left *big.Int, right *big.Int) error {
	return _VmSafe.Contract.AssertNotEq26(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq3(opts *bind.CallOpts, left bool, right bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq3", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq3(left bool, right bool) error {
	return _VmSafe.Contract.AssertNotEq3(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq3 is a free data retrieval call binding the contract method 0x236e4d66.
//
// Solidity: function assertNotEq(bool left, bool right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq3(left bool, right bool) error {
	return _VmSafe.Contract.AssertNotEq3(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq4(opts *bind.CallOpts, left []bool, right []bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq4", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq4(left []bool, right []bool) error {
	return _VmSafe.Contract.AssertNotEq4(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq4 is a free data retrieval call binding the contract method 0x286fafea.
//
// Solidity: function assertNotEq(bool[] left, bool[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq4(left []bool, right []bool) error {
	return _VmSafe.Contract.AssertNotEq4(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq5(opts *bind.CallOpts, left []byte, right []byte) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq5", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq5(left []byte, right []byte) error {
	return _VmSafe.Contract.AssertNotEq5(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq5 is a free data retrieval call binding the contract method 0x3cf78e28.
//
// Solidity: function assertNotEq(bytes left, bytes right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq5(left []byte, right []byte) error {
	return _VmSafe.Contract.AssertNotEq5(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq6(opts *bind.CallOpts, left []common.Address, right []common.Address) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq6", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq6(left []common.Address, right []common.Address) error {
	return _VmSafe.Contract.AssertNotEq6(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq6 is a free data retrieval call binding the contract method 0x46d0b252.
//
// Solidity: function assertNotEq(address[] left, address[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq6(left []common.Address, right []common.Address) error {
	return _VmSafe.Contract.AssertNotEq6(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq7(opts *bind.CallOpts, left *big.Int, right *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq7", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq7(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq7(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq7 is a free data retrieval call binding the contract method 0x4724c5b9.
//
// Solidity: function assertNotEq(int256 left, int256 right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq7(left *big.Int, right *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEq7(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq8(opts *bind.CallOpts, left []*big.Int, right []*big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq8", left, right)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq8(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertNotEq8(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq8 is a free data retrieval call binding the contract method 0x56f29cba.
//
// Solidity: function assertNotEq(uint256[] left, uint256[] right) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq8(left []*big.Int, right []*big.Int) error {
	return _VmSafe.Contract.AssertNotEq8(&_VmSafe.CallOpts, left, right)
}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEq9(opts *bind.CallOpts, left []bool, right []bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEq9", left, right, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEq9(left []bool, right []bool, error string) error {
	return _VmSafe.Contract.AssertNotEq9(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEq9 is a free data retrieval call binding the contract method 0x62c6f9fb.
//
// Solidity: function assertNotEq(bool[] left, bool[] right, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEq9(left []bool, right []bool, error string) error {
	return _VmSafe.Contract.AssertNotEq9(&_VmSafe.CallOpts, left, right, error)
}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEqDecimal(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEqDecimal", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertNotEqDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal is a free data retrieval call binding the contract method 0x14e75680.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEqDecimal(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertNotEqDecimal(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEqDecimal0(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEqDecimal0", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEqDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal0 is a free data retrieval call binding the contract method 0x33949f0b.
//
// Solidity: function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEqDecimal0(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEqDecimal0(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEqDecimal1(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEqDecimal1", left, right, decimals)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertNotEqDecimal1(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal1 is a free data retrieval call binding the contract method 0x669efca7.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEqDecimal1(left *big.Int, right *big.Int, decimals *big.Int) error {
	return _VmSafe.Contract.AssertNotEqDecimal1(&_VmSafe.CallOpts, left, right, decimals)
}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertNotEqDecimal2(opts *bind.CallOpts, left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertNotEqDecimal2", left, right, decimals, error)

	if err != nil {
		return err
	}

	return err

}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertNotEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEqDecimal2(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertNotEqDecimal2 is a free data retrieval call binding the contract method 0xf5a55558.
//
// Solidity: function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertNotEqDecimal2(left *big.Int, right *big.Int, decimals *big.Int, error string) error {
	return _VmSafe.Contract.AssertNotEqDecimal2(&_VmSafe.CallOpts, left, right, decimals, error)
}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_VmSafe *VmSafeCaller) AssertTrue(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertTrue", condition)

	if err != nil {
		return err
	}

	return err

}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_VmSafe *VmSafeSession) AssertTrue(condition bool) error {
	return _VmSafe.Contract.AssertTrue(&_VmSafe.CallOpts, condition)
}

// AssertTrue is a free data retrieval call binding the contract method 0x0c9fd581.
//
// Solidity: function assertTrue(bool condition) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertTrue(condition bool) error {
	return _VmSafe.Contract.AssertTrue(&_VmSafe.CallOpts, condition)
}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_VmSafe *VmSafeCaller) AssertTrue0(opts *bind.CallOpts, condition bool, error string) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assertTrue0", condition, error)

	if err != nil {
		return err
	}

	return err

}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_VmSafe *VmSafeSession) AssertTrue0(condition bool, error string) error {
	return _VmSafe.Contract.AssertTrue0(&_VmSafe.CallOpts, condition, error)
}

// AssertTrue0 is a free data retrieval call binding the contract method 0xa34edc03.
//
// Solidity: function assertTrue(bool condition, string error) pure returns()
func (_VmSafe *VmSafeCallerSession) AssertTrue0(condition bool, error string) error {
	return _VmSafe.Contract.AssertTrue0(&_VmSafe.CallOpts, condition, error)
}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_VmSafe *VmSafeCaller) Assume(opts *bind.CallOpts, condition bool) error {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "assume", condition)

	if err != nil {
		return err
	}

	return err

}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_VmSafe *VmSafeSession) Assume(condition bool) error {
	return _VmSafe.Contract.Assume(&_VmSafe.CallOpts, condition)
}

// Assume is a free data retrieval call binding the contract method 0x4c63e562.
//
// Solidity: function assume(bool condition) pure returns()
func (_VmSafe *VmSafeCallerSession) Assume(condition bool) error {
	return _VmSafe.Contract.Assume(&_VmSafe.CallOpts, condition)
}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_VmSafe *VmSafeCaller) ComputeCreate2Address(opts *bind.CallOpts, salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "computeCreate2Address", salt, initCodeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_VmSafe *VmSafeSession) ComputeCreate2Address(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreate2Address(&_VmSafe.CallOpts, salt, initCodeHash)
}

// ComputeCreate2Address is a free data retrieval call binding the contract method 0x890c283b.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) pure returns(address)
func (_VmSafe *VmSafeCallerSession) ComputeCreate2Address(salt [32]byte, initCodeHash [32]byte) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreate2Address(&_VmSafe.CallOpts, salt, initCodeHash)
}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_VmSafe *VmSafeCaller) ComputeCreate2Address0(opts *bind.CallOpts, salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "computeCreate2Address0", salt, initCodeHash, deployer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_VmSafe *VmSafeSession) ComputeCreate2Address0(salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreate2Address0(&_VmSafe.CallOpts, salt, initCodeHash, deployer)
}

// ComputeCreate2Address0 is a free data retrieval call binding the contract method 0xd323826a.
//
// Solidity: function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) pure returns(address)
func (_VmSafe *VmSafeCallerSession) ComputeCreate2Address0(salt [32]byte, initCodeHash [32]byte, deployer common.Address) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreate2Address0(&_VmSafe.CallOpts, salt, initCodeHash, deployer)
}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_VmSafe *VmSafeCaller) ComputeCreateAddress(opts *bind.CallOpts, deployer common.Address, nonce *big.Int) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "computeCreateAddress", deployer, nonce)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_VmSafe *VmSafeSession) ComputeCreateAddress(deployer common.Address, nonce *big.Int) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreateAddress(&_VmSafe.CallOpts, deployer, nonce)
}

// ComputeCreateAddress is a free data retrieval call binding the contract method 0x74637a7a.
//
// Solidity: function computeCreateAddress(address deployer, uint256 nonce) pure returns(address)
func (_VmSafe *VmSafeCallerSession) ComputeCreateAddress(deployer common.Address, nonce *big.Int) (common.Address, error) {
	return _VmSafe.Contract.ComputeCreateAddress(&_VmSafe.CallOpts, deployer, nonce)
}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCaller) DeriveKey(opts *bind.CallOpts, mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "deriveKey", mnemonic, derivationPath, index, language)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeSession) DeriveKey(mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey(&_VmSafe.CallOpts, mnemonic, derivationPath, index, language)
}

// DeriveKey is a free data retrieval call binding the contract method 0x29233b1f.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCallerSession) DeriveKey(mnemonic string, derivationPath string, index uint32, language string) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey(&_VmSafe.CallOpts, mnemonic, derivationPath, index, language)
}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCaller) DeriveKey0(opts *bind.CallOpts, mnemonic string, index uint32, language string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "deriveKey0", mnemonic, index, language)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeSession) DeriveKey0(mnemonic string, index uint32, language string) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey0(&_VmSafe.CallOpts, mnemonic, index, language)
}

// DeriveKey0 is a free data retrieval call binding the contract method 0x32c8176d.
//
// Solidity: function deriveKey(string mnemonic, uint32 index, string language) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCallerSession) DeriveKey0(mnemonic string, index uint32, language string) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey0(&_VmSafe.CallOpts, mnemonic, index, language)
}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCaller) DeriveKey1(opts *bind.CallOpts, mnemonic string, index uint32) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "deriveKey1", mnemonic, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeSession) DeriveKey1(mnemonic string, index uint32) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey1(&_VmSafe.CallOpts, mnemonic, index)
}

// DeriveKey1 is a free data retrieval call binding the contract method 0x6229498b.
//
// Solidity: function deriveKey(string mnemonic, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCallerSession) DeriveKey1(mnemonic string, index uint32) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey1(&_VmSafe.CallOpts, mnemonic, index)
}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCaller) DeriveKey2(opts *bind.CallOpts, mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "deriveKey2", mnemonic, derivationPath, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeSession) DeriveKey2(mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey2(&_VmSafe.CallOpts, mnemonic, derivationPath, index)
}

// DeriveKey2 is a free data retrieval call binding the contract method 0x6bcb2c1b.
//
// Solidity: function deriveKey(string mnemonic, string derivationPath, uint32 index) pure returns(uint256 privateKey)
func (_VmSafe *VmSafeCallerSession) DeriveKey2(mnemonic string, derivationPath string, index uint32) (*big.Int, error) {
	return _VmSafe.Contract.DeriveKey2(&_VmSafe.CallOpts, mnemonic, derivationPath, index)
}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_VmSafe *VmSafeCaller) EnsNamehash(opts *bind.CallOpts, name string) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "ensNamehash", name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_VmSafe *VmSafeSession) EnsNamehash(name string) ([32]byte, error) {
	return _VmSafe.Contract.EnsNamehash(&_VmSafe.CallOpts, name)
}

// EnsNamehash is a free data retrieval call binding the contract method 0x8c374c65.
//
// Solidity: function ensNamehash(string name) pure returns(bytes32)
func (_VmSafe *VmSafeCallerSession) EnsNamehash(name string) ([32]byte, error) {
	return _VmSafe.Contract.EnsNamehash(&_VmSafe.CallOpts, name)
}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_VmSafe *VmSafeCaller) EnvAddress(opts *bind.CallOpts, name string) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envAddress", name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_VmSafe *VmSafeSession) EnvAddress(name string) (common.Address, error) {
	return _VmSafe.Contract.EnvAddress(&_VmSafe.CallOpts, name)
}

// EnvAddress is a free data retrieval call binding the contract method 0x350d56bf.
//
// Solidity: function envAddress(string name) view returns(address value)
func (_VmSafe *VmSafeCallerSession) EnvAddress(name string) (common.Address, error) {
	return _VmSafe.Contract.EnvAddress(&_VmSafe.CallOpts, name)
}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_VmSafe *VmSafeCaller) EnvAddress0(opts *bind.CallOpts, name string, delim string) ([]common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envAddress0", name, delim)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_VmSafe *VmSafeSession) EnvAddress0(name string, delim string) ([]common.Address, error) {
	return _VmSafe.Contract.EnvAddress0(&_VmSafe.CallOpts, name, delim)
}

// EnvAddress0 is a free data retrieval call binding the contract method 0xad31b9fa.
//
// Solidity: function envAddress(string name, string delim) view returns(address[] value)
func (_VmSafe *VmSafeCallerSession) EnvAddress0(name string, delim string) ([]common.Address, error) {
	return _VmSafe.Contract.EnvAddress0(&_VmSafe.CallOpts, name, delim)
}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_VmSafe *VmSafeCaller) EnvBool(opts *bind.CallOpts, name string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBool", name)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_VmSafe *VmSafeSession) EnvBool(name string) (bool, error) {
	return _VmSafe.Contract.EnvBool(&_VmSafe.CallOpts, name)
}

// EnvBool is a free data retrieval call binding the contract method 0x7ed1ec7d.
//
// Solidity: function envBool(string name) view returns(bool value)
func (_VmSafe *VmSafeCallerSession) EnvBool(name string) (bool, error) {
	return _VmSafe.Contract.EnvBool(&_VmSafe.CallOpts, name)
}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_VmSafe *VmSafeCaller) EnvBool0(opts *bind.CallOpts, name string, delim string) ([]bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBool0", name, delim)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_VmSafe *VmSafeSession) EnvBool0(name string, delim string) ([]bool, error) {
	return _VmSafe.Contract.EnvBool0(&_VmSafe.CallOpts, name, delim)
}

// EnvBool0 is a free data retrieval call binding the contract method 0xaaaddeaf.
//
// Solidity: function envBool(string name, string delim) view returns(bool[] value)
func (_VmSafe *VmSafeCallerSession) EnvBool0(name string, delim string) ([]bool, error) {
	return _VmSafe.Contract.EnvBool0(&_VmSafe.CallOpts, name, delim)
}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_VmSafe *VmSafeCaller) EnvBytes(opts *bind.CallOpts, name string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBytes", name)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_VmSafe *VmSafeSession) EnvBytes(name string) ([]byte, error) {
	return _VmSafe.Contract.EnvBytes(&_VmSafe.CallOpts, name)
}

// EnvBytes is a free data retrieval call binding the contract method 0x4d7baf06.
//
// Solidity: function envBytes(string name) view returns(bytes value)
func (_VmSafe *VmSafeCallerSession) EnvBytes(name string) ([]byte, error) {
	return _VmSafe.Contract.EnvBytes(&_VmSafe.CallOpts, name)
}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_VmSafe *VmSafeCaller) EnvBytes0(opts *bind.CallOpts, name string, delim string) ([][]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBytes0", name, delim)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_VmSafe *VmSafeSession) EnvBytes0(name string, delim string) ([][]byte, error) {
	return _VmSafe.Contract.EnvBytes0(&_VmSafe.CallOpts, name, delim)
}

// EnvBytes0 is a free data retrieval call binding the contract method 0xddc2651b.
//
// Solidity: function envBytes(string name, string delim) view returns(bytes[] value)
func (_VmSafe *VmSafeCallerSession) EnvBytes0(name string, delim string) ([][]byte, error) {
	return _VmSafe.Contract.EnvBytes0(&_VmSafe.CallOpts, name, delim)
}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_VmSafe *VmSafeCaller) EnvBytes32(opts *bind.CallOpts, name string, delim string) ([][32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBytes32", name, delim)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_VmSafe *VmSafeSession) EnvBytes32(name string, delim string) ([][32]byte, error) {
	return _VmSafe.Contract.EnvBytes32(&_VmSafe.CallOpts, name, delim)
}

// EnvBytes32 is a free data retrieval call binding the contract method 0x5af231c1.
//
// Solidity: function envBytes32(string name, string delim) view returns(bytes32[] value)
func (_VmSafe *VmSafeCallerSession) EnvBytes32(name string, delim string) ([][32]byte, error) {
	return _VmSafe.Contract.EnvBytes32(&_VmSafe.CallOpts, name, delim)
}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_VmSafe *VmSafeCaller) EnvBytes320(opts *bind.CallOpts, name string) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envBytes320", name)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_VmSafe *VmSafeSession) EnvBytes320(name string) ([32]byte, error) {
	return _VmSafe.Contract.EnvBytes320(&_VmSafe.CallOpts, name)
}

// EnvBytes320 is a free data retrieval call binding the contract method 0x97949042.
//
// Solidity: function envBytes32(string name) view returns(bytes32 value)
func (_VmSafe *VmSafeCallerSession) EnvBytes320(name string) ([32]byte, error) {
	return _VmSafe.Contract.EnvBytes320(&_VmSafe.CallOpts, name)
}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_VmSafe *VmSafeCaller) EnvExists(opts *bind.CallOpts, name string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envExists", name)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_VmSafe *VmSafeSession) EnvExists(name string) (bool, error) {
	return _VmSafe.Contract.EnvExists(&_VmSafe.CallOpts, name)
}

// EnvExists is a free data retrieval call binding the contract method 0xce8365f9.
//
// Solidity: function envExists(string name) view returns(bool result)
func (_VmSafe *VmSafeCallerSession) EnvExists(name string) (bool, error) {
	return _VmSafe.Contract.EnvExists(&_VmSafe.CallOpts, name)
}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_VmSafe *VmSafeCaller) EnvInt(opts *bind.CallOpts, name string, delim string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envInt", name, delim)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_VmSafe *VmSafeSession) EnvInt(name string, delim string) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvInt(&_VmSafe.CallOpts, name, delim)
}

// EnvInt is a free data retrieval call binding the contract method 0x42181150.
//
// Solidity: function envInt(string name, string delim) view returns(int256[] value)
func (_VmSafe *VmSafeCallerSession) EnvInt(name string, delim string) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvInt(&_VmSafe.CallOpts, name, delim)
}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_VmSafe *VmSafeCaller) EnvInt0(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envInt0", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_VmSafe *VmSafeSession) EnvInt0(name string) (*big.Int, error) {
	return _VmSafe.Contract.EnvInt0(&_VmSafe.CallOpts, name)
}

// EnvInt0 is a free data retrieval call binding the contract method 0x892a0c61.
//
// Solidity: function envInt(string name) view returns(int256 value)
func (_VmSafe *VmSafeCallerSession) EnvInt0(name string) (*big.Int, error) {
	return _VmSafe.Contract.EnvInt0(&_VmSafe.CallOpts, name)
}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_VmSafe *VmSafeCaller) EnvOr(opts *bind.CallOpts, name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr", name, delim, defaultValue)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_VmSafe *VmSafeSession) EnvOr(name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	return _VmSafe.Contract.EnvOr(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr is a free data retrieval call binding the contract method 0x2281f367.
//
// Solidity: function envOr(string name, string delim, bytes32[] defaultValue) view returns(bytes32[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr(name string, delim string, defaultValue [][32]byte) ([][32]byte, error) {
	return _VmSafe.Contract.EnvOr(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_VmSafe *VmSafeCaller) EnvOr0(opts *bind.CallOpts, name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr0", name, delim, defaultValue)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_VmSafe *VmSafeSession) EnvOr0(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvOr0(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr0 is a free data retrieval call binding the contract method 0x4700d74b.
//
// Solidity: function envOr(string name, string delim, int256[] defaultValue) view returns(int256[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr0(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvOr0(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_VmSafe *VmSafeCaller) EnvOr1(opts *bind.CallOpts, name string, defaultValue bool) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr1", name, defaultValue)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_VmSafe *VmSafeSession) EnvOr1(name string, defaultValue bool) (bool, error) {
	return _VmSafe.Contract.EnvOr1(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr1 is a free data retrieval call binding the contract method 0x4777f3cf.
//
// Solidity: function envOr(string name, bool defaultValue) view returns(bool value)
func (_VmSafe *VmSafeCallerSession) EnvOr1(name string, defaultValue bool) (bool, error) {
	return _VmSafe.Contract.EnvOr1(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_VmSafe *VmSafeCaller) EnvOr10(opts *bind.CallOpts, name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr10", name, delim, defaultValue)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_VmSafe *VmSafeSession) EnvOr10(name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	return _VmSafe.Contract.EnvOr10(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr10 is a free data retrieval call binding the contract method 0xc74e9deb.
//
// Solidity: function envOr(string name, string delim, address[] defaultValue) view returns(address[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr10(name string, delim string, defaultValue []common.Address) ([]common.Address, error) {
	return _VmSafe.Contract.EnvOr10(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_VmSafe *VmSafeCaller) EnvOr11(opts *bind.CallOpts, name string, defaultValue string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr11", name, defaultValue)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_VmSafe *VmSafeSession) EnvOr11(name string, defaultValue string) (string, error) {
	return _VmSafe.Contract.EnvOr11(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr11 is a free data retrieval call binding the contract method 0xd145736c.
//
// Solidity: function envOr(string name, string defaultValue) view returns(string value)
func (_VmSafe *VmSafeCallerSession) EnvOr11(name string, defaultValue string) (string, error) {
	return _VmSafe.Contract.EnvOr11(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_VmSafe *VmSafeCaller) EnvOr12(opts *bind.CallOpts, name string, delim string, defaultValue []bool) ([]bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr12", name, delim, defaultValue)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_VmSafe *VmSafeSession) EnvOr12(name string, delim string, defaultValue []bool) ([]bool, error) {
	return _VmSafe.Contract.EnvOr12(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr12 is a free data retrieval call binding the contract method 0xeb85e83b.
//
// Solidity: function envOr(string name, string delim, bool[] defaultValue) view returns(bool[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr12(name string, delim string, defaultValue []bool) ([]bool, error) {
	return _VmSafe.Contract.EnvOr12(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_VmSafe *VmSafeCaller) EnvOr2(opts *bind.CallOpts, name string, defaultValue common.Address) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr2", name, defaultValue)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_VmSafe *VmSafeSession) EnvOr2(name string, defaultValue common.Address) (common.Address, error) {
	return _VmSafe.Contract.EnvOr2(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr2 is a free data retrieval call binding the contract method 0x561fe540.
//
// Solidity: function envOr(string name, address defaultValue) view returns(address value)
func (_VmSafe *VmSafeCallerSession) EnvOr2(name string, defaultValue common.Address) (common.Address, error) {
	return _VmSafe.Contract.EnvOr2(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_VmSafe *VmSafeCaller) EnvOr3(opts *bind.CallOpts, name string, defaultValue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr3", name, defaultValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_VmSafe *VmSafeSession) EnvOr3(name string, defaultValue *big.Int) (*big.Int, error) {
	return _VmSafe.Contract.EnvOr3(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr3 is a free data retrieval call binding the contract method 0x5e97348f.
//
// Solidity: function envOr(string name, uint256 defaultValue) view returns(uint256 value)
func (_VmSafe *VmSafeCallerSession) EnvOr3(name string, defaultValue *big.Int) (*big.Int, error) {
	return _VmSafe.Contract.EnvOr3(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_VmSafe *VmSafeCaller) EnvOr4(opts *bind.CallOpts, name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr4", name, delim, defaultValue)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_VmSafe *VmSafeSession) EnvOr4(name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	return _VmSafe.Contract.EnvOr4(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr4 is a free data retrieval call binding the contract method 0x64bc3e64.
//
// Solidity: function envOr(string name, string delim, bytes[] defaultValue) view returns(bytes[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr4(name string, delim string, defaultValue [][]byte) ([][]byte, error) {
	return _VmSafe.Contract.EnvOr4(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_VmSafe *VmSafeCaller) EnvOr5(opts *bind.CallOpts, name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr5", name, delim, defaultValue)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_VmSafe *VmSafeSession) EnvOr5(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvOr5(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr5 is a free data retrieval call binding the contract method 0x74318528.
//
// Solidity: function envOr(string name, string delim, uint256[] defaultValue) view returns(uint256[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr5(name string, delim string, defaultValue []*big.Int) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvOr5(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_VmSafe *VmSafeCaller) EnvOr6(opts *bind.CallOpts, name string, delim string, defaultValue []string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr6", name, delim, defaultValue)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_VmSafe *VmSafeSession) EnvOr6(name string, delim string, defaultValue []string) ([]string, error) {
	return _VmSafe.Contract.EnvOr6(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr6 is a free data retrieval call binding the contract method 0x859216bc.
//
// Solidity: function envOr(string name, string delim, string[] defaultValue) view returns(string[] value)
func (_VmSafe *VmSafeCallerSession) EnvOr6(name string, delim string, defaultValue []string) ([]string, error) {
	return _VmSafe.Contract.EnvOr6(&_VmSafe.CallOpts, name, delim, defaultValue)
}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_VmSafe *VmSafeCaller) EnvOr7(opts *bind.CallOpts, name string, defaultValue []byte) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr7", name, defaultValue)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_VmSafe *VmSafeSession) EnvOr7(name string, defaultValue []byte) ([]byte, error) {
	return _VmSafe.Contract.EnvOr7(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr7 is a free data retrieval call binding the contract method 0xb3e47705.
//
// Solidity: function envOr(string name, bytes defaultValue) view returns(bytes value)
func (_VmSafe *VmSafeCallerSession) EnvOr7(name string, defaultValue []byte) ([]byte, error) {
	return _VmSafe.Contract.EnvOr7(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_VmSafe *VmSafeCaller) EnvOr8(opts *bind.CallOpts, name string, defaultValue [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr8", name, defaultValue)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_VmSafe *VmSafeSession) EnvOr8(name string, defaultValue [32]byte) ([32]byte, error) {
	return _VmSafe.Contract.EnvOr8(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr8 is a free data retrieval call binding the contract method 0xb4a85892.
//
// Solidity: function envOr(string name, bytes32 defaultValue) view returns(bytes32 value)
func (_VmSafe *VmSafeCallerSession) EnvOr8(name string, defaultValue [32]byte) ([32]byte, error) {
	return _VmSafe.Contract.EnvOr8(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_VmSafe *VmSafeCaller) EnvOr9(opts *bind.CallOpts, name string, defaultValue *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envOr9", name, defaultValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_VmSafe *VmSafeSession) EnvOr9(name string, defaultValue *big.Int) (*big.Int, error) {
	return _VmSafe.Contract.EnvOr9(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvOr9 is a free data retrieval call binding the contract method 0xbbcb713e.
//
// Solidity: function envOr(string name, int256 defaultValue) view returns(int256 value)
func (_VmSafe *VmSafeCallerSession) EnvOr9(name string, defaultValue *big.Int) (*big.Int, error) {
	return _VmSafe.Contract.EnvOr9(&_VmSafe.CallOpts, name, defaultValue)
}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_VmSafe *VmSafeCaller) EnvString(opts *bind.CallOpts, name string, delim string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envString", name, delim)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_VmSafe *VmSafeSession) EnvString(name string, delim string) ([]string, error) {
	return _VmSafe.Contract.EnvString(&_VmSafe.CallOpts, name, delim)
}

// EnvString is a free data retrieval call binding the contract method 0x14b02bc9.
//
// Solidity: function envString(string name, string delim) view returns(string[] value)
func (_VmSafe *VmSafeCallerSession) EnvString(name string, delim string) ([]string, error) {
	return _VmSafe.Contract.EnvString(&_VmSafe.CallOpts, name, delim)
}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_VmSafe *VmSafeCaller) EnvString0(opts *bind.CallOpts, name string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envString0", name)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_VmSafe *VmSafeSession) EnvString0(name string) (string, error) {
	return _VmSafe.Contract.EnvString0(&_VmSafe.CallOpts, name)
}

// EnvString0 is a free data retrieval call binding the contract method 0xf877cb19.
//
// Solidity: function envString(string name) view returns(string value)
func (_VmSafe *VmSafeCallerSession) EnvString0(name string) (string, error) {
	return _VmSafe.Contract.EnvString0(&_VmSafe.CallOpts, name)
}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_VmSafe *VmSafeCaller) EnvUint(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envUint", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_VmSafe *VmSafeSession) EnvUint(name string) (*big.Int, error) {
	return _VmSafe.Contract.EnvUint(&_VmSafe.CallOpts, name)
}

// EnvUint is a free data retrieval call binding the contract method 0xc1978d1f.
//
// Solidity: function envUint(string name) view returns(uint256 value)
func (_VmSafe *VmSafeCallerSession) EnvUint(name string) (*big.Int, error) {
	return _VmSafe.Contract.EnvUint(&_VmSafe.CallOpts, name)
}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_VmSafe *VmSafeCaller) EnvUint0(opts *bind.CallOpts, name string, delim string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "envUint0", name, delim)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_VmSafe *VmSafeSession) EnvUint0(name string, delim string) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvUint0(&_VmSafe.CallOpts, name, delim)
}

// EnvUint0 is a free data retrieval call binding the contract method 0xf3dec099.
//
// Solidity: function envUint(string name, string delim) view returns(uint256[] value)
func (_VmSafe *VmSafeCallerSession) EnvUint0(name string, delim string) ([]*big.Int, error) {
	return _VmSafe.Contract.EnvUint0(&_VmSafe.CallOpts, name, delim)
}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_VmSafe *VmSafeCaller) FsMetadata(opts *bind.CallOpts, path string) (VmSafeFsMetadata, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "fsMetadata", path)

	if err != nil {
		return *new(VmSafeFsMetadata), err
	}

	out0 := *abi.ConvertType(out[0], new(VmSafeFsMetadata)).(*VmSafeFsMetadata)

	return out0, err

}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_VmSafe *VmSafeSession) FsMetadata(path string) (VmSafeFsMetadata, error) {
	return _VmSafe.Contract.FsMetadata(&_VmSafe.CallOpts, path)
}

// FsMetadata is a free data retrieval call binding the contract method 0xaf368a08.
//
// Solidity: function fsMetadata(string path) view returns((bool,bool,uint256,bool,uint256,uint256,uint256) metadata)
func (_VmSafe *VmSafeCallerSession) FsMetadata(path string) (VmSafeFsMetadata, error) {
	return _VmSafe.Contract.FsMetadata(&_VmSafe.CallOpts, path)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_VmSafe *VmSafeCaller) GetBlobBaseFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getBlobBaseFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_VmSafe *VmSafeSession) GetBlobBaseFee() (*big.Int, error) {
	return _VmSafe.Contract.GetBlobBaseFee(&_VmSafe.CallOpts)
}

// GetBlobBaseFee is a free data retrieval call binding the contract method 0x1f6d6ef7.
//
// Solidity: function getBlobBaseFee() view returns(uint256 blobBaseFee)
func (_VmSafe *VmSafeCallerSession) GetBlobBaseFee() (*big.Int, error) {
	return _VmSafe.Contract.GetBlobBaseFee(&_VmSafe.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_VmSafe *VmSafeCaller) GetBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_VmSafe *VmSafeSession) GetBlockNumber() (*big.Int, error) {
	return _VmSafe.Contract.GetBlockNumber(&_VmSafe.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint256 height)
func (_VmSafe *VmSafeCallerSession) GetBlockNumber() (*big.Int, error) {
	return _VmSafe.Contract.GetBlockNumber(&_VmSafe.CallOpts)
}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_VmSafe *VmSafeCaller) GetBlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getBlockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_VmSafe *VmSafeSession) GetBlockTimestamp() (*big.Int, error) {
	return _VmSafe.Contract.GetBlockTimestamp(&_VmSafe.CallOpts)
}

// GetBlockTimestamp is a free data retrieval call binding the contract method 0x796b89b9.
//
// Solidity: function getBlockTimestamp() view returns(uint256 timestamp)
func (_VmSafe *VmSafeCallerSession) GetBlockTimestamp() (*big.Int, error) {
	return _VmSafe.Contract.GetBlockTimestamp(&_VmSafe.CallOpts)
}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_VmSafe *VmSafeCaller) GetCode(opts *bind.CallOpts, artifactPath string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getCode", artifactPath)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_VmSafe *VmSafeSession) GetCode(artifactPath string) ([]byte, error) {
	return _VmSafe.Contract.GetCode(&_VmSafe.CallOpts, artifactPath)
}

// GetCode is a free data retrieval call binding the contract method 0x8d1cc925.
//
// Solidity: function getCode(string artifactPath) view returns(bytes creationBytecode)
func (_VmSafe *VmSafeCallerSession) GetCode(artifactPath string) ([]byte, error) {
	return _VmSafe.Contract.GetCode(&_VmSafe.CallOpts, artifactPath)
}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_VmSafe *VmSafeCaller) GetDeployedCode(opts *bind.CallOpts, artifactPath string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getDeployedCode", artifactPath)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_VmSafe *VmSafeSession) GetDeployedCode(artifactPath string) ([]byte, error) {
	return _VmSafe.Contract.GetDeployedCode(&_VmSafe.CallOpts, artifactPath)
}

// GetDeployedCode is a free data retrieval call binding the contract method 0x3ebf73b4.
//
// Solidity: function getDeployedCode(string artifactPath) view returns(bytes runtimeBytecode)
func (_VmSafe *VmSafeCallerSession) GetDeployedCode(artifactPath string) ([]byte, error) {
	return _VmSafe.Contract.GetDeployedCode(&_VmSafe.CallOpts, artifactPath)
}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_VmSafe *VmSafeCaller) GetLabel(opts *bind.CallOpts, account common.Address) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getLabel", account)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_VmSafe *VmSafeSession) GetLabel(account common.Address) (string, error) {
	return _VmSafe.Contract.GetLabel(&_VmSafe.CallOpts, account)
}

// GetLabel is a free data retrieval call binding the contract method 0x28a249b0.
//
// Solidity: function getLabel(address account) view returns(string currentLabel)
func (_VmSafe *VmSafeCallerSession) GetLabel(account common.Address) (string, error) {
	return _VmSafe.Contract.GetLabel(&_VmSafe.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_VmSafe *VmSafeCaller) GetNonce(opts *bind.CallOpts, account common.Address) (uint64, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "getNonce", account)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_VmSafe *VmSafeSession) GetNonce(account common.Address) (uint64, error) {
	return _VmSafe.Contract.GetNonce(&_VmSafe.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address account) view returns(uint64 nonce)
func (_VmSafe *VmSafeCallerSession) GetNonce(account common.Address) (uint64, error) {
	return _VmSafe.Contract.GetNonce(&_VmSafe.CallOpts, account)
}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_VmSafe *VmSafeCaller) IndexOf(opts *bind.CallOpts, input string, key string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "indexOf", input, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_VmSafe *VmSafeSession) IndexOf(input string, key string) (*big.Int, error) {
	return _VmSafe.Contract.IndexOf(&_VmSafe.CallOpts, input, key)
}

// IndexOf is a free data retrieval call binding the contract method 0x8a0807b7.
//
// Solidity: function indexOf(string input, string key) pure returns(uint256)
func (_VmSafe *VmSafeCallerSession) IndexOf(input string, key string) (*big.Int, error) {
	return _VmSafe.Contract.IndexOf(&_VmSafe.CallOpts, input, key)
}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_VmSafe *VmSafeCaller) IsContext(opts *bind.CallOpts, context uint8) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "isContext", context)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_VmSafe *VmSafeSession) IsContext(context uint8) (bool, error) {
	return _VmSafe.Contract.IsContext(&_VmSafe.CallOpts, context)
}

// IsContext is a free data retrieval call binding the contract method 0x64af255d.
//
// Solidity: function isContext(uint8 context) view returns(bool result)
func (_VmSafe *VmSafeCallerSession) IsContext(context uint8) (bool, error) {
	return _VmSafe.Contract.IsContext(&_VmSafe.CallOpts, context)
}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_VmSafe *VmSafeCaller) KeyExists(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "keyExists", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_VmSafe *VmSafeSession) KeyExists(json string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExists(&_VmSafe.CallOpts, json, key)
}

// KeyExists is a free data retrieval call binding the contract method 0x528a683c.
//
// Solidity: function keyExists(string json, string key) view returns(bool)
func (_VmSafe *VmSafeCallerSession) KeyExists(json string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExists(&_VmSafe.CallOpts, json, key)
}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_VmSafe *VmSafeCaller) KeyExistsJson(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "keyExistsJson", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_VmSafe *VmSafeSession) KeyExistsJson(json string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExistsJson(&_VmSafe.CallOpts, json, key)
}

// KeyExistsJson is a free data retrieval call binding the contract method 0xdb4235f6.
//
// Solidity: function keyExistsJson(string json, string key) view returns(bool)
func (_VmSafe *VmSafeCallerSession) KeyExistsJson(json string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExistsJson(&_VmSafe.CallOpts, json, key)
}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_VmSafe *VmSafeCaller) KeyExistsToml(opts *bind.CallOpts, toml string, key string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "keyExistsToml", toml, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_VmSafe *VmSafeSession) KeyExistsToml(toml string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExistsToml(&_VmSafe.CallOpts, toml, key)
}

// KeyExistsToml is a free data retrieval call binding the contract method 0x600903ad.
//
// Solidity: function keyExistsToml(string toml, string key) view returns(bool)
func (_VmSafe *VmSafeCallerSession) KeyExistsToml(toml string, key string) (bool, error) {
	return _VmSafe.Contract.KeyExistsToml(&_VmSafe.CallOpts, toml, key)
}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_VmSafe *VmSafeCaller) LastCallGas(opts *bind.CallOpts) (VmSafeGas, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "lastCallGas")

	if err != nil {
		return *new(VmSafeGas), err
	}

	out0 := *abi.ConvertType(out[0], new(VmSafeGas)).(*VmSafeGas)

	return out0, err

}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_VmSafe *VmSafeSession) LastCallGas() (VmSafeGas, error) {
	return _VmSafe.Contract.LastCallGas(&_VmSafe.CallOpts)
}

// LastCallGas is a free data retrieval call binding the contract method 0x2b589b28.
//
// Solidity: function lastCallGas() view returns((uint64,uint64,uint64,int64,uint64) gas)
func (_VmSafe *VmSafeCallerSession) LastCallGas() (VmSafeGas, error) {
	return _VmSafe.Contract.LastCallGas(&_VmSafe.CallOpts)
}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_VmSafe *VmSafeCaller) Load(opts *bind.CallOpts, target common.Address, slot [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "load", target, slot)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_VmSafe *VmSafeSession) Load(target common.Address, slot [32]byte) ([32]byte, error) {
	return _VmSafe.Contract.Load(&_VmSafe.CallOpts, target, slot)
}

// Load is a free data retrieval call binding the contract method 0x667f9d70.
//
// Solidity: function load(address target, bytes32 slot) view returns(bytes32 data)
func (_VmSafe *VmSafeCallerSession) Load(target common.Address, slot [32]byte) ([32]byte, error) {
	return _VmSafe.Contract.Load(&_VmSafe.CallOpts, target, slot)
}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_VmSafe *VmSafeCaller) ParseAddress(opts *bind.CallOpts, stringifiedValue string) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseAddress", stringifiedValue)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_VmSafe *VmSafeSession) ParseAddress(stringifiedValue string) (common.Address, error) {
	return _VmSafe.Contract.ParseAddress(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseAddress is a free data retrieval call binding the contract method 0xc6ce059d.
//
// Solidity: function parseAddress(string stringifiedValue) pure returns(address parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseAddress(stringifiedValue string) (common.Address, error) {
	return _VmSafe.Contract.ParseAddress(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_VmSafe *VmSafeCaller) ParseBool(opts *bind.CallOpts, stringifiedValue string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseBool", stringifiedValue)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_VmSafe *VmSafeSession) ParseBool(stringifiedValue string) (bool, error) {
	return _VmSafe.Contract.ParseBool(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBool is a free data retrieval call binding the contract method 0x974ef924.
//
// Solidity: function parseBool(string stringifiedValue) pure returns(bool parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseBool(stringifiedValue string) (bool, error) {
	return _VmSafe.Contract.ParseBool(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_VmSafe *VmSafeCaller) ParseBytes(opts *bind.CallOpts, stringifiedValue string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseBytes", stringifiedValue)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_VmSafe *VmSafeSession) ParseBytes(stringifiedValue string) ([]byte, error) {
	return _VmSafe.Contract.ParseBytes(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBytes is a free data retrieval call binding the contract method 0x8f5d232d.
//
// Solidity: function parseBytes(string stringifiedValue) pure returns(bytes parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseBytes(stringifiedValue string) ([]byte, error) {
	return _VmSafe.Contract.ParseBytes(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_VmSafe *VmSafeCaller) ParseBytes32(opts *bind.CallOpts, stringifiedValue string) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseBytes32", stringifiedValue)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_VmSafe *VmSafeSession) ParseBytes32(stringifiedValue string) ([32]byte, error) {
	return _VmSafe.Contract.ParseBytes32(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseBytes32 is a free data retrieval call binding the contract method 0x087e6e81.
//
// Solidity: function parseBytes32(string stringifiedValue) pure returns(bytes32 parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseBytes32(stringifiedValue string) ([32]byte, error) {
	return _VmSafe.Contract.ParseBytes32(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_VmSafe *VmSafeCaller) ParseInt(opts *bind.CallOpts, stringifiedValue string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseInt", stringifiedValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_VmSafe *VmSafeSession) ParseInt(stringifiedValue string) (*big.Int, error) {
	return _VmSafe.Contract.ParseInt(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseInt is a free data retrieval call binding the contract method 0x42346c5e.
//
// Solidity: function parseInt(string stringifiedValue) pure returns(int256 parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseInt(stringifiedValue string) (*big.Int, error) {
	return _VmSafe.Contract.ParseInt(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCaller) ParseJson(opts *bind.CallOpts, json string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJson", json)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeSession) ParseJson(json string) ([]byte, error) {
	return _VmSafe.Contract.ParseJson(&_VmSafe.CallOpts, json)
}

// ParseJson is a free data retrieval call binding the contract method 0x6a82600a.
//
// Solidity: function parseJson(string json) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCallerSession) ParseJson(json string) ([]byte, error) {
	return _VmSafe.Contract.ParseJson(&_VmSafe.CallOpts, json)
}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCaller) ParseJson0(opts *bind.CallOpts, json string, key string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJson0", json, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeSession) ParseJson0(json string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseJson0(&_VmSafe.CallOpts, json, key)
}

// ParseJson0 is a free data retrieval call binding the contract method 0x85940ef1.
//
// Solidity: function parseJson(string json, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCallerSession) ParseJson0(json string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseJson0(&_VmSafe.CallOpts, json, key)
}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_VmSafe *VmSafeCaller) ParseJsonAddress(opts *bind.CallOpts, json string, key string) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonAddress", json, key)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_VmSafe *VmSafeSession) ParseJsonAddress(json string, key string) (common.Address, error) {
	return _VmSafe.Contract.ParseJsonAddress(&_VmSafe.CallOpts, json, key)
}

// ParseJsonAddress is a free data retrieval call binding the contract method 0x1e19e657.
//
// Solidity: function parseJsonAddress(string json, string key) pure returns(address)
func (_VmSafe *VmSafeCallerSession) ParseJsonAddress(json string, key string) (common.Address, error) {
	return _VmSafe.Contract.ParseJsonAddress(&_VmSafe.CallOpts, json, key)
}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_VmSafe *VmSafeCaller) ParseJsonAddressArray(opts *bind.CallOpts, json string, key string) ([]common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonAddressArray", json, key)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_VmSafe *VmSafeSession) ParseJsonAddressArray(json string, key string) ([]common.Address, error) {
	return _VmSafe.Contract.ParseJsonAddressArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonAddressArray is a free data retrieval call binding the contract method 0x2fce7883.
//
// Solidity: function parseJsonAddressArray(string json, string key) pure returns(address[])
func (_VmSafe *VmSafeCallerSession) ParseJsonAddressArray(json string, key string) ([]common.Address, error) {
	return _VmSafe.Contract.ParseJsonAddressArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_VmSafe *VmSafeCaller) ParseJsonBool(opts *bind.CallOpts, json string, key string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBool", json, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_VmSafe *VmSafeSession) ParseJsonBool(json string, key string) (bool, error) {
	return _VmSafe.Contract.ParseJsonBool(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBool is a free data retrieval call binding the contract method 0x9f86dc91.
//
// Solidity: function parseJsonBool(string json, string key) pure returns(bool)
func (_VmSafe *VmSafeCallerSession) ParseJsonBool(json string, key string) (bool, error) {
	return _VmSafe.Contract.ParseJsonBool(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_VmSafe *VmSafeCaller) ParseJsonBoolArray(opts *bind.CallOpts, json string, key string) ([]bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBoolArray", json, key)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_VmSafe *VmSafeSession) ParseJsonBoolArray(json string, key string) ([]bool, error) {
	return _VmSafe.Contract.ParseJsonBoolArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBoolArray is a free data retrieval call binding the contract method 0x91f3b94f.
//
// Solidity: function parseJsonBoolArray(string json, string key) pure returns(bool[])
func (_VmSafe *VmSafeCallerSession) ParseJsonBoolArray(json string, key string) ([]bool, error) {
	return _VmSafe.Contract.ParseJsonBoolArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_VmSafe *VmSafeCaller) ParseJsonBytes(opts *bind.CallOpts, json string, key string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBytes", json, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_VmSafe *VmSafeSession) ParseJsonBytes(json string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes is a free data retrieval call binding the contract method 0xfd921be8.
//
// Solidity: function parseJsonBytes(string json, string key) pure returns(bytes)
func (_VmSafe *VmSafeCallerSession) ParseJsonBytes(json string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_VmSafe *VmSafeCaller) ParseJsonBytes32(opts *bind.CallOpts, json string, key string) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBytes32", json, key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_VmSafe *VmSafeSession) ParseJsonBytes32(json string, key string) ([32]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes32(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes32 is a free data retrieval call binding the contract method 0x1777e59d.
//
// Solidity: function parseJsonBytes32(string json, string key) pure returns(bytes32)
func (_VmSafe *VmSafeCallerSession) ParseJsonBytes32(json string, key string) ([32]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes32(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeCaller) ParseJsonBytes32Array(opts *bind.CallOpts, json string, key string) ([][32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBytes32Array", json, key)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeSession) ParseJsonBytes32Array(json string, key string) ([][32]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes32Array(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytes32Array is a free data retrieval call binding the contract method 0x91c75bc3.
//
// Solidity: function parseJsonBytes32Array(string json, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeCallerSession) ParseJsonBytes32Array(json string, key string) ([][32]byte, error) {
	return _VmSafe.Contract.ParseJsonBytes32Array(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_VmSafe *VmSafeCaller) ParseJsonBytesArray(opts *bind.CallOpts, json string, key string) ([][]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonBytesArray", json, key)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_VmSafe *VmSafeSession) ParseJsonBytesArray(json string, key string) ([][]byte, error) {
	return _VmSafe.Contract.ParseJsonBytesArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonBytesArray is a free data retrieval call binding the contract method 0x6631aa99.
//
// Solidity: function parseJsonBytesArray(string json, string key) pure returns(bytes[])
func (_VmSafe *VmSafeCallerSession) ParseJsonBytesArray(json string, key string) ([][]byte, error) {
	return _VmSafe.Contract.ParseJsonBytesArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_VmSafe *VmSafeCaller) ParseJsonInt(opts *bind.CallOpts, json string, key string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonInt", json, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_VmSafe *VmSafeSession) ParseJsonInt(json string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseJsonInt(&_VmSafe.CallOpts, json, key)
}

// ParseJsonInt is a free data retrieval call binding the contract method 0x7b048ccd.
//
// Solidity: function parseJsonInt(string json, string key) pure returns(int256)
func (_VmSafe *VmSafeCallerSession) ParseJsonInt(json string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseJsonInt(&_VmSafe.CallOpts, json, key)
}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_VmSafe *VmSafeCaller) ParseJsonIntArray(opts *bind.CallOpts, json string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonIntArray", json, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_VmSafe *VmSafeSession) ParseJsonIntArray(json string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseJsonIntArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonIntArray is a free data retrieval call binding the contract method 0x9983c28a.
//
// Solidity: function parseJsonIntArray(string json, string key) pure returns(int256[])
func (_VmSafe *VmSafeCallerSession) ParseJsonIntArray(json string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseJsonIntArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeCaller) ParseJsonKeys(opts *bind.CallOpts, json string, key string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonKeys", json, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeSession) ParseJsonKeys(json string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseJsonKeys(&_VmSafe.CallOpts, json, key)
}

// ParseJsonKeys is a free data retrieval call binding the contract method 0x213e4198.
//
// Solidity: function parseJsonKeys(string json, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeCallerSession) ParseJsonKeys(json string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseJsonKeys(&_VmSafe.CallOpts, json, key)
}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_VmSafe *VmSafeCaller) ParseJsonString(opts *bind.CallOpts, json string, key string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonString", json, key)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_VmSafe *VmSafeSession) ParseJsonString(json string, key string) (string, error) {
	return _VmSafe.Contract.ParseJsonString(&_VmSafe.CallOpts, json, key)
}

// ParseJsonString is a free data retrieval call binding the contract method 0x49c4fac8.
//
// Solidity: function parseJsonString(string json, string key) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ParseJsonString(json string, key string) (string, error) {
	return _VmSafe.Contract.ParseJsonString(&_VmSafe.CallOpts, json, key)
}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_VmSafe *VmSafeCaller) ParseJsonStringArray(opts *bind.CallOpts, json string, key string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonStringArray", json, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_VmSafe *VmSafeSession) ParseJsonStringArray(json string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseJsonStringArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonStringArray is a free data retrieval call binding the contract method 0x498fdcf4.
//
// Solidity: function parseJsonStringArray(string json, string key) pure returns(string[])
func (_VmSafe *VmSafeCallerSession) ParseJsonStringArray(json string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseJsonStringArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_VmSafe *VmSafeCaller) ParseJsonUint(opts *bind.CallOpts, json string, key string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonUint", json, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_VmSafe *VmSafeSession) ParseJsonUint(json string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseJsonUint(&_VmSafe.CallOpts, json, key)
}

// ParseJsonUint is a free data retrieval call binding the contract method 0xaddde2b6.
//
// Solidity: function parseJsonUint(string json, string key) pure returns(uint256)
func (_VmSafe *VmSafeCallerSession) ParseJsonUint(json string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseJsonUint(&_VmSafe.CallOpts, json, key)
}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_VmSafe *VmSafeCaller) ParseJsonUintArray(opts *bind.CallOpts, json string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseJsonUintArray", json, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_VmSafe *VmSafeSession) ParseJsonUintArray(json string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseJsonUintArray(&_VmSafe.CallOpts, json, key)
}

// ParseJsonUintArray is a free data retrieval call binding the contract method 0x522074ab.
//
// Solidity: function parseJsonUintArray(string json, string key) pure returns(uint256[])
func (_VmSafe *VmSafeCallerSession) ParseJsonUintArray(json string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseJsonUintArray(&_VmSafe.CallOpts, json, key)
}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCaller) ParseToml(opts *bind.CallOpts, toml string, key string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseToml", toml, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeSession) ParseToml(toml string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseToml(&_VmSafe.CallOpts, toml, key)
}

// ParseToml is a free data retrieval call binding the contract method 0x37736e08.
//
// Solidity: function parseToml(string toml, string key) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCallerSession) ParseToml(toml string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseToml(&_VmSafe.CallOpts, toml, key)
}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCaller) ParseToml0(opts *bind.CallOpts, toml string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseToml0", toml)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeSession) ParseToml0(toml string) ([]byte, error) {
	return _VmSafe.Contract.ParseToml0(&_VmSafe.CallOpts, toml)
}

// ParseToml0 is a free data retrieval call binding the contract method 0x592151f0.
//
// Solidity: function parseToml(string toml) pure returns(bytes abiEncodedData)
func (_VmSafe *VmSafeCallerSession) ParseToml0(toml string) ([]byte, error) {
	return _VmSafe.Contract.ParseToml0(&_VmSafe.CallOpts, toml)
}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_VmSafe *VmSafeCaller) ParseTomlAddress(opts *bind.CallOpts, toml string, key string) (common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlAddress", toml, key)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_VmSafe *VmSafeSession) ParseTomlAddress(toml string, key string) (common.Address, error) {
	return _VmSafe.Contract.ParseTomlAddress(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlAddress is a free data retrieval call binding the contract method 0x65e7c844.
//
// Solidity: function parseTomlAddress(string toml, string key) pure returns(address)
func (_VmSafe *VmSafeCallerSession) ParseTomlAddress(toml string, key string) (common.Address, error) {
	return _VmSafe.Contract.ParseTomlAddress(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_VmSafe *VmSafeCaller) ParseTomlAddressArray(opts *bind.CallOpts, toml string, key string) ([]common.Address, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlAddressArray", toml, key)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_VmSafe *VmSafeSession) ParseTomlAddressArray(toml string, key string) ([]common.Address, error) {
	return _VmSafe.Contract.ParseTomlAddressArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlAddressArray is a free data retrieval call binding the contract method 0x65c428e7.
//
// Solidity: function parseTomlAddressArray(string toml, string key) pure returns(address[])
func (_VmSafe *VmSafeCallerSession) ParseTomlAddressArray(toml string, key string) ([]common.Address, error) {
	return _VmSafe.Contract.ParseTomlAddressArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_VmSafe *VmSafeCaller) ParseTomlBool(opts *bind.CallOpts, toml string, key string) (bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBool", toml, key)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_VmSafe *VmSafeSession) ParseTomlBool(toml string, key string) (bool, error) {
	return _VmSafe.Contract.ParseTomlBool(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBool is a free data retrieval call binding the contract method 0xd30dced6.
//
// Solidity: function parseTomlBool(string toml, string key) pure returns(bool)
func (_VmSafe *VmSafeCallerSession) ParseTomlBool(toml string, key string) (bool, error) {
	return _VmSafe.Contract.ParseTomlBool(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_VmSafe *VmSafeCaller) ParseTomlBoolArray(opts *bind.CallOpts, toml string, key string) ([]bool, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBoolArray", toml, key)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_VmSafe *VmSafeSession) ParseTomlBoolArray(toml string, key string) ([]bool, error) {
	return _VmSafe.Contract.ParseTomlBoolArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBoolArray is a free data retrieval call binding the contract method 0x127cfe9a.
//
// Solidity: function parseTomlBoolArray(string toml, string key) pure returns(bool[])
func (_VmSafe *VmSafeCallerSession) ParseTomlBoolArray(toml string, key string) ([]bool, error) {
	return _VmSafe.Contract.ParseTomlBoolArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_VmSafe *VmSafeCaller) ParseTomlBytes(opts *bind.CallOpts, toml string, key string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBytes", toml, key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_VmSafe *VmSafeSession) ParseTomlBytes(toml string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes is a free data retrieval call binding the contract method 0xd77bfdb9.
//
// Solidity: function parseTomlBytes(string toml, string key) pure returns(bytes)
func (_VmSafe *VmSafeCallerSession) ParseTomlBytes(toml string, key string) ([]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_VmSafe *VmSafeCaller) ParseTomlBytes32(opts *bind.CallOpts, toml string, key string) ([32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBytes32", toml, key)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_VmSafe *VmSafeSession) ParseTomlBytes32(toml string, key string) ([32]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes32(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes32 is a free data retrieval call binding the contract method 0x8e214810.
//
// Solidity: function parseTomlBytes32(string toml, string key) pure returns(bytes32)
func (_VmSafe *VmSafeCallerSession) ParseTomlBytes32(toml string, key string) ([32]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes32(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeCaller) ParseTomlBytes32Array(opts *bind.CallOpts, toml string, key string) ([][32]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBytes32Array", toml, key)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeSession) ParseTomlBytes32Array(toml string, key string) ([][32]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes32Array(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytes32Array is a free data retrieval call binding the contract method 0x3e716f81.
//
// Solidity: function parseTomlBytes32Array(string toml, string key) pure returns(bytes32[])
func (_VmSafe *VmSafeCallerSession) ParseTomlBytes32Array(toml string, key string) ([][32]byte, error) {
	return _VmSafe.Contract.ParseTomlBytes32Array(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_VmSafe *VmSafeCaller) ParseTomlBytesArray(opts *bind.CallOpts, toml string, key string) ([][]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlBytesArray", toml, key)

	if err != nil {
		return *new([][]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][]byte)).(*[][]byte)

	return out0, err

}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_VmSafe *VmSafeSession) ParseTomlBytesArray(toml string, key string) ([][]byte, error) {
	return _VmSafe.Contract.ParseTomlBytesArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlBytesArray is a free data retrieval call binding the contract method 0xb197c247.
//
// Solidity: function parseTomlBytesArray(string toml, string key) pure returns(bytes[])
func (_VmSafe *VmSafeCallerSession) ParseTomlBytesArray(toml string, key string) ([][]byte, error) {
	return _VmSafe.Contract.ParseTomlBytesArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_VmSafe *VmSafeCaller) ParseTomlInt(opts *bind.CallOpts, toml string, key string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlInt", toml, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_VmSafe *VmSafeSession) ParseTomlInt(toml string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseTomlInt(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlInt is a free data retrieval call binding the contract method 0xc1350739.
//
// Solidity: function parseTomlInt(string toml, string key) pure returns(int256)
func (_VmSafe *VmSafeCallerSession) ParseTomlInt(toml string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseTomlInt(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_VmSafe *VmSafeCaller) ParseTomlIntArray(opts *bind.CallOpts, toml string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlIntArray", toml, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_VmSafe *VmSafeSession) ParseTomlIntArray(toml string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseTomlIntArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlIntArray is a free data retrieval call binding the contract method 0xd3522ae6.
//
// Solidity: function parseTomlIntArray(string toml, string key) pure returns(int256[])
func (_VmSafe *VmSafeCallerSession) ParseTomlIntArray(toml string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseTomlIntArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeCaller) ParseTomlKeys(opts *bind.CallOpts, toml string, key string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlKeys", toml, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeSession) ParseTomlKeys(toml string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseTomlKeys(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlKeys is a free data retrieval call binding the contract method 0x812a44b2.
//
// Solidity: function parseTomlKeys(string toml, string key) pure returns(string[] keys)
func (_VmSafe *VmSafeCallerSession) ParseTomlKeys(toml string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseTomlKeys(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_VmSafe *VmSafeCaller) ParseTomlString(opts *bind.CallOpts, toml string, key string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlString", toml, key)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_VmSafe *VmSafeSession) ParseTomlString(toml string, key string) (string, error) {
	return _VmSafe.Contract.ParseTomlString(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlString is a free data retrieval call binding the contract method 0x8bb8dd43.
//
// Solidity: function parseTomlString(string toml, string key) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ParseTomlString(toml string, key string) (string, error) {
	return _VmSafe.Contract.ParseTomlString(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_VmSafe *VmSafeCaller) ParseTomlStringArray(opts *bind.CallOpts, toml string, key string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlStringArray", toml, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_VmSafe *VmSafeSession) ParseTomlStringArray(toml string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseTomlStringArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlStringArray is a free data retrieval call binding the contract method 0x9f629281.
//
// Solidity: function parseTomlStringArray(string toml, string key) pure returns(string[])
func (_VmSafe *VmSafeCallerSession) ParseTomlStringArray(toml string, key string) ([]string, error) {
	return _VmSafe.Contract.ParseTomlStringArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_VmSafe *VmSafeCaller) ParseTomlUint(opts *bind.CallOpts, toml string, key string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlUint", toml, key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_VmSafe *VmSafeSession) ParseTomlUint(toml string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseTomlUint(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlUint is a free data retrieval call binding the contract method 0xcc7b0487.
//
// Solidity: function parseTomlUint(string toml, string key) pure returns(uint256)
func (_VmSafe *VmSafeCallerSession) ParseTomlUint(toml string, key string) (*big.Int, error) {
	return _VmSafe.Contract.ParseTomlUint(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_VmSafe *VmSafeCaller) ParseTomlUintArray(opts *bind.CallOpts, toml string, key string) ([]*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseTomlUintArray", toml, key)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_VmSafe *VmSafeSession) ParseTomlUintArray(toml string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseTomlUintArray(&_VmSafe.CallOpts, toml, key)
}

// ParseTomlUintArray is a free data retrieval call binding the contract method 0xb5df27c8.
//
// Solidity: function parseTomlUintArray(string toml, string key) pure returns(uint256[])
func (_VmSafe *VmSafeCallerSession) ParseTomlUintArray(toml string, key string) ([]*big.Int, error) {
	return _VmSafe.Contract.ParseTomlUintArray(&_VmSafe.CallOpts, toml, key)
}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_VmSafe *VmSafeCaller) ParseUint(opts *bind.CallOpts, stringifiedValue string) (*big.Int, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "parseUint", stringifiedValue)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_VmSafe *VmSafeSession) ParseUint(stringifiedValue string) (*big.Int, error) {
	return _VmSafe.Contract.ParseUint(&_VmSafe.CallOpts, stringifiedValue)
}

// ParseUint is a free data retrieval call binding the contract method 0xfa91454d.
//
// Solidity: function parseUint(string stringifiedValue) pure returns(uint256 parsedValue)
func (_VmSafe *VmSafeCallerSession) ParseUint(stringifiedValue string) (*big.Int, error) {
	return _VmSafe.Contract.ParseUint(&_VmSafe.CallOpts, stringifiedValue)
}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_VmSafe *VmSafeCaller) ProjectRoot(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "projectRoot")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_VmSafe *VmSafeSession) ProjectRoot() (string, error) {
	return _VmSafe.Contract.ProjectRoot(&_VmSafe.CallOpts)
}

// ProjectRoot is a free data retrieval call binding the contract method 0xd930a0e6.
//
// Solidity: function projectRoot() view returns(string path)
func (_VmSafe *VmSafeCallerSession) ProjectRoot() (string, error) {
	return _VmSafe.Contract.ProjectRoot(&_VmSafe.CallOpts)
}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCaller) ReadDir(opts *bind.CallOpts, path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readDir", path, maxDepth)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeSession) ReadDir(path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir(&_VmSafe.CallOpts, path, maxDepth)
}

// ReadDir is a free data retrieval call binding the contract method 0x1497876c.
//
// Solidity: function readDir(string path, uint64 maxDepth) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCallerSession) ReadDir(path string, maxDepth uint64) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir(&_VmSafe.CallOpts, path, maxDepth)
}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCaller) ReadDir0(opts *bind.CallOpts, path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readDir0", path, maxDepth, followLinks)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeSession) ReadDir0(path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir0(&_VmSafe.CallOpts, path, maxDepth, followLinks)
}

// ReadDir0 is a free data retrieval call binding the contract method 0x8102d70d.
//
// Solidity: function readDir(string path, uint64 maxDepth, bool followLinks) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCallerSession) ReadDir0(path string, maxDepth uint64, followLinks bool) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir0(&_VmSafe.CallOpts, path, maxDepth, followLinks)
}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCaller) ReadDir1(opts *bind.CallOpts, path string) ([]VmSafeDirEntry, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readDir1", path)

	if err != nil {
		return *new([]VmSafeDirEntry), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeDirEntry)).(*[]VmSafeDirEntry)

	return out0, err

}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeSession) ReadDir1(path string) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir1(&_VmSafe.CallOpts, path)
}

// ReadDir1 is a free data retrieval call binding the contract method 0xc4bc59e0.
//
// Solidity: function readDir(string path) view returns((string,string,uint64,bool,bool)[] entries)
func (_VmSafe *VmSafeCallerSession) ReadDir1(path string) ([]VmSafeDirEntry, error) {
	return _VmSafe.Contract.ReadDir1(&_VmSafe.CallOpts, path)
}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_VmSafe *VmSafeCaller) ReadFile(opts *bind.CallOpts, path string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readFile", path)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_VmSafe *VmSafeSession) ReadFile(path string) (string, error) {
	return _VmSafe.Contract.ReadFile(&_VmSafe.CallOpts, path)
}

// ReadFile is a free data retrieval call binding the contract method 0x60f9bb11.
//
// Solidity: function readFile(string path) view returns(string data)
func (_VmSafe *VmSafeCallerSession) ReadFile(path string) (string, error) {
	return _VmSafe.Contract.ReadFile(&_VmSafe.CallOpts, path)
}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_VmSafe *VmSafeCaller) ReadFileBinary(opts *bind.CallOpts, path string) ([]byte, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readFileBinary", path)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_VmSafe *VmSafeSession) ReadFileBinary(path string) ([]byte, error) {
	return _VmSafe.Contract.ReadFileBinary(&_VmSafe.CallOpts, path)
}

// ReadFileBinary is a free data retrieval call binding the contract method 0x16ed7bc4.
//
// Solidity: function readFileBinary(string path) view returns(bytes data)
func (_VmSafe *VmSafeCallerSession) ReadFileBinary(path string) ([]byte, error) {
	return _VmSafe.Contract.ReadFileBinary(&_VmSafe.CallOpts, path)
}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_VmSafe *VmSafeCaller) ReadLine(opts *bind.CallOpts, path string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readLine", path)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_VmSafe *VmSafeSession) ReadLine(path string) (string, error) {
	return _VmSafe.Contract.ReadLine(&_VmSafe.CallOpts, path)
}

// ReadLine is a free data retrieval call binding the contract method 0x70f55728.
//
// Solidity: function readLine(string path) view returns(string line)
func (_VmSafe *VmSafeCallerSession) ReadLine(path string) (string, error) {
	return _VmSafe.Contract.ReadLine(&_VmSafe.CallOpts, path)
}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_VmSafe *VmSafeCaller) ReadLink(opts *bind.CallOpts, linkPath string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "readLink", linkPath)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_VmSafe *VmSafeSession) ReadLink(linkPath string) (string, error) {
	return _VmSafe.Contract.ReadLink(&_VmSafe.CallOpts, linkPath)
}

// ReadLink is a free data retrieval call binding the contract method 0x9f5684a2.
//
// Solidity: function readLink(string linkPath) view returns(string targetPath)
func (_VmSafe *VmSafeCallerSession) ReadLink(linkPath string) (string, error) {
	return _VmSafe.Contract.ReadLink(&_VmSafe.CallOpts, linkPath)
}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_VmSafe *VmSafeCaller) Replace(opts *bind.CallOpts, input string, from string, to string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "replace", input, from, to)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_VmSafe *VmSafeSession) Replace(input string, from string, to string) (string, error) {
	return _VmSafe.Contract.Replace(&_VmSafe.CallOpts, input, from, to)
}

// Replace is a free data retrieval call binding the contract method 0xe00ad03e.
//
// Solidity: function replace(string input, string from, string to) pure returns(string output)
func (_VmSafe *VmSafeCallerSession) Replace(input string, from string, to string) (string, error) {
	return _VmSafe.Contract.Replace(&_VmSafe.CallOpts, input, from, to)
}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_VmSafe *VmSafeCaller) RpcUrl(opts *bind.CallOpts, rpcAlias string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "rpcUrl", rpcAlias)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_VmSafe *VmSafeSession) RpcUrl(rpcAlias string) (string, error) {
	return _VmSafe.Contract.RpcUrl(&_VmSafe.CallOpts, rpcAlias)
}

// RpcUrl is a free data retrieval call binding the contract method 0x975a6ce9.
//
// Solidity: function rpcUrl(string rpcAlias) view returns(string json)
func (_VmSafe *VmSafeCallerSession) RpcUrl(rpcAlias string) (string, error) {
	return _VmSafe.Contract.RpcUrl(&_VmSafe.CallOpts, rpcAlias)
}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_VmSafe *VmSafeCaller) RpcUrlStructs(opts *bind.CallOpts) ([]VmSafeRpc, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "rpcUrlStructs")

	if err != nil {
		return *new([]VmSafeRpc), err
	}

	out0 := *abi.ConvertType(out[0], new([]VmSafeRpc)).(*[]VmSafeRpc)

	return out0, err

}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_VmSafe *VmSafeSession) RpcUrlStructs() ([]VmSafeRpc, error) {
	return _VmSafe.Contract.RpcUrlStructs(&_VmSafe.CallOpts)
}

// RpcUrlStructs is a free data retrieval call binding the contract method 0x9d2ad72a.
//
// Solidity: function rpcUrlStructs() view returns((string,string)[] urls)
func (_VmSafe *VmSafeCallerSession) RpcUrlStructs() ([]VmSafeRpc, error) {
	return _VmSafe.Contract.RpcUrlStructs(&_VmSafe.CallOpts)
}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_VmSafe *VmSafeCaller) RpcUrls(opts *bind.CallOpts) ([][2]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "rpcUrls")

	if err != nil {
		return *new([][2]string), err
	}

	out0 := *abi.ConvertType(out[0], new([][2]string)).(*[][2]string)

	return out0, err

}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_VmSafe *VmSafeSession) RpcUrls() ([][2]string, error) {
	return _VmSafe.Contract.RpcUrls(&_VmSafe.CallOpts)
}

// RpcUrls is a free data retrieval call binding the contract method 0xa85a8418.
//
// Solidity: function rpcUrls() view returns(string[2][] urls)
func (_VmSafe *VmSafeCallerSession) RpcUrls() ([][2]string, error) {
	return _VmSafe.Contract.RpcUrls(&_VmSafe.CallOpts)
}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCaller) Sign(opts *bind.CallOpts, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "sign", digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeSession) Sign(digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign(&_VmSafe.CallOpts, digest)
}

// Sign is a free data retrieval call binding the contract method 0x799cd333.
//
// Solidity: function sign(bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCallerSession) Sign(digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign(&_VmSafe.CallOpts, digest)
}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCaller) Sign0(opts *bind.CallOpts, signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "sign0", signer, digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeSession) Sign0(signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign0(&_VmSafe.CallOpts, signer, digest)
}

// Sign0 is a free data retrieval call binding the contract method 0x8c1aa205.
//
// Solidity: function sign(address signer, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCallerSession) Sign0(signer common.Address, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign0(&_VmSafe.CallOpts, signer, digest)
}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCaller) Sign2(opts *bind.CallOpts, privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "sign2", privateKey, digest)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeSession) Sign2(privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign2(&_VmSafe.CallOpts, privateKey, digest)
}

// Sign2 is a free data retrieval call binding the contract method 0xe341eaa4.
//
// Solidity: function sign(uint256 privateKey, bytes32 digest) pure returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCallerSession) Sign2(privateKey *big.Int, digest [32]byte) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.Sign2(&_VmSafe.CallOpts, privateKey, digest)
}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCaller) SignP256(opts *bind.CallOpts, privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "signP256", privateKey, digest)

	outstruct := new(struct {
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.R = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_VmSafe *VmSafeSession) SignP256(privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.SignP256(&_VmSafe.CallOpts, privateKey, digest)
}

// SignP256 is a free data retrieval call binding the contract method 0x83211b40.
//
// Solidity: function signP256(uint256 privateKey, bytes32 digest) pure returns(bytes32 r, bytes32 s)
func (_VmSafe *VmSafeCallerSession) SignP256(privateKey *big.Int, digest [32]byte) (struct {
	R [32]byte
	S [32]byte
}, error) {
	return _VmSafe.Contract.SignP256(&_VmSafe.CallOpts, privateKey, digest)
}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_VmSafe *VmSafeCaller) Split(opts *bind.CallOpts, input string, delimiter string) ([]string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "split", input, delimiter)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_VmSafe *VmSafeSession) Split(input string, delimiter string) ([]string, error) {
	return _VmSafe.Contract.Split(&_VmSafe.CallOpts, input, delimiter)
}

// Split is a free data retrieval call binding the contract method 0x8bb75533.
//
// Solidity: function split(string input, string delimiter) pure returns(string[] outputs)
func (_VmSafe *VmSafeCallerSession) Split(input string, delimiter string) ([]string, error) {
	return _VmSafe.Contract.Split(&_VmSafe.CallOpts, input, delimiter)
}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_VmSafe *VmSafeCaller) ToBase64(opts *bind.CallOpts, data string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toBase64", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_VmSafe *VmSafeSession) ToBase64(data string) (string, error) {
	return _VmSafe.Contract.ToBase64(&_VmSafe.CallOpts, data)
}

// ToBase64 is a free data retrieval call binding the contract method 0x3f8be2c8.
//
// Solidity: function toBase64(string data) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ToBase64(data string) (string, error) {
	return _VmSafe.Contract.ToBase64(&_VmSafe.CallOpts, data)
}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_VmSafe *VmSafeCaller) ToBase640(opts *bind.CallOpts, data []byte) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toBase640", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_VmSafe *VmSafeSession) ToBase640(data []byte) (string, error) {
	return _VmSafe.Contract.ToBase640(&_VmSafe.CallOpts, data)
}

// ToBase640 is a free data retrieval call binding the contract method 0xa5cbfe65.
//
// Solidity: function toBase64(bytes data) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ToBase640(data []byte) (string, error) {
	return _VmSafe.Contract.ToBase640(&_VmSafe.CallOpts, data)
}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_VmSafe *VmSafeCaller) ToBase64URL(opts *bind.CallOpts, data string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toBase64URL", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_VmSafe *VmSafeSession) ToBase64URL(data string) (string, error) {
	return _VmSafe.Contract.ToBase64URL(&_VmSafe.CallOpts, data)
}

// ToBase64URL is a free data retrieval call binding the contract method 0xae3165b3.
//
// Solidity: function toBase64URL(string data) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ToBase64URL(data string) (string, error) {
	return _VmSafe.Contract.ToBase64URL(&_VmSafe.CallOpts, data)
}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_VmSafe *VmSafeCaller) ToBase64URL0(opts *bind.CallOpts, data []byte) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toBase64URL0", data)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_VmSafe *VmSafeSession) ToBase64URL0(data []byte) (string, error) {
	return _VmSafe.Contract.ToBase64URL0(&_VmSafe.CallOpts, data)
}

// ToBase64URL0 is a free data retrieval call binding the contract method 0xc8bd0e4a.
//
// Solidity: function toBase64URL(bytes data) pure returns(string)
func (_VmSafe *VmSafeCallerSession) ToBase64URL0(data []byte) (string, error) {
	return _VmSafe.Contract.ToBase64URL0(&_VmSafe.CallOpts, data)
}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_VmSafe *VmSafeCaller) ToLowercase(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toLowercase", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_VmSafe *VmSafeSession) ToLowercase(input string) (string, error) {
	return _VmSafe.Contract.ToLowercase(&_VmSafe.CallOpts, input)
}

// ToLowercase is a free data retrieval call binding the contract method 0x50bb0884.
//
// Solidity: function toLowercase(string input) pure returns(string output)
func (_VmSafe *VmSafeCallerSession) ToLowercase(input string) (string, error) {
	return _VmSafe.Contract.ToLowercase(&_VmSafe.CallOpts, input)
}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString(opts *bind.CallOpts, value common.Address) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString(value common.Address) (string, error) {
	return _VmSafe.Contract.ToString(&_VmSafe.CallOpts, value)
}

// ToString is a free data retrieval call binding the contract method 0x56ca623e.
//
// Solidity: function toString(address value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString(value common.Address) (string, error) {
	return _VmSafe.Contract.ToString(&_VmSafe.CallOpts, value)
}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString0(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString0", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString0(value *big.Int) (string, error) {
	return _VmSafe.Contract.ToString0(&_VmSafe.CallOpts, value)
}

// ToString0 is a free data retrieval call binding the contract method 0x6900a3ae.
//
// Solidity: function toString(uint256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString0(value *big.Int) (string, error) {
	return _VmSafe.Contract.ToString0(&_VmSafe.CallOpts, value)
}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString1(opts *bind.CallOpts, value []byte) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString1", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString1(value []byte) (string, error) {
	return _VmSafe.Contract.ToString1(&_VmSafe.CallOpts, value)
}

// ToString1 is a free data retrieval call binding the contract method 0x71aad10d.
//
// Solidity: function toString(bytes value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString1(value []byte) (string, error) {
	return _VmSafe.Contract.ToString1(&_VmSafe.CallOpts, value)
}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString2(opts *bind.CallOpts, value bool) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString2", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString2(value bool) (string, error) {
	return _VmSafe.Contract.ToString2(&_VmSafe.CallOpts, value)
}

// ToString2 is a free data retrieval call binding the contract method 0x71dce7da.
//
// Solidity: function toString(bool value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString2(value bool) (string, error) {
	return _VmSafe.Contract.ToString2(&_VmSafe.CallOpts, value)
}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString3(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString3", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString3(value *big.Int) (string, error) {
	return _VmSafe.Contract.ToString3(&_VmSafe.CallOpts, value)
}

// ToString3 is a free data retrieval call binding the contract method 0xa322c40e.
//
// Solidity: function toString(int256 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString3(value *big.Int) (string, error) {
	return _VmSafe.Contract.ToString3(&_VmSafe.CallOpts, value)
}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCaller) ToString4(opts *bind.CallOpts, value [32]byte) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toString4", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeSession) ToString4(value [32]byte) (string, error) {
	return _VmSafe.Contract.ToString4(&_VmSafe.CallOpts, value)
}

// ToString4 is a free data retrieval call binding the contract method 0xb11a19e8.
//
// Solidity: function toString(bytes32 value) pure returns(string stringifiedValue)
func (_VmSafe *VmSafeCallerSession) ToString4(value [32]byte) (string, error) {
	return _VmSafe.Contract.ToString4(&_VmSafe.CallOpts, value)
}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_VmSafe *VmSafeCaller) ToUppercase(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "toUppercase", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_VmSafe *VmSafeSession) ToUppercase(input string) (string, error) {
	return _VmSafe.Contract.ToUppercase(&_VmSafe.CallOpts, input)
}

// ToUppercase is a free data retrieval call binding the contract method 0x074ae3d7.
//
// Solidity: function toUppercase(string input) pure returns(string output)
func (_VmSafe *VmSafeCallerSession) ToUppercase(input string) (string, error) {
	return _VmSafe.Contract.ToUppercase(&_VmSafe.CallOpts, input)
}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_VmSafe *VmSafeCaller) Trim(opts *bind.CallOpts, input string) (string, error) {
	var out []interface{}
	err := _VmSafe.contract.Call(opts, &out, "trim", input)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_VmSafe *VmSafeSession) Trim(input string) (string, error) {
	return _VmSafe.Contract.Trim(&_VmSafe.CallOpts, input)
}

// Trim is a free data retrieval call binding the contract method 0xb2dad155.
//
// Solidity: function trim(string input) pure returns(string output)
func (_VmSafe *VmSafeCallerSession) Trim(input string) (string, error) {
	return _VmSafe.Contract.Trim(&_VmSafe.CallOpts, input)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_VmSafe *VmSafeTransactor) Accesses(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "accesses", target)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_VmSafe *VmSafeSession) Accesses(target common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.Accesses(&_VmSafe.TransactOpts, target)
}

// Accesses is a paid mutator transaction binding the contract method 0x65bc9481.
//
// Solidity: function accesses(address target) returns(bytes32[] readSlots, bytes32[] writeSlots)
func (_VmSafe *VmSafeTransactorSession) Accesses(target common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.Accesses(&_VmSafe.TransactOpts, target)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_VmSafe *VmSafeTransactor) Breakpoint(opts *bind.TransactOpts, char string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "breakpoint", char)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_VmSafe *VmSafeSession) Breakpoint(char string) (*types.Transaction, error) {
	return _VmSafe.Contract.Breakpoint(&_VmSafe.TransactOpts, char)
}

// Breakpoint is a paid mutator transaction binding the contract method 0xf0259e92.
//
// Solidity: function breakpoint(string char) returns()
func (_VmSafe *VmSafeTransactorSession) Breakpoint(char string) (*types.Transaction, error) {
	return _VmSafe.Contract.Breakpoint(&_VmSafe.TransactOpts, char)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_VmSafe *VmSafeTransactor) Breakpoint0(opts *bind.TransactOpts, char string, value bool) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "breakpoint0", char, value)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_VmSafe *VmSafeSession) Breakpoint0(char string, value bool) (*types.Transaction, error) {
	return _VmSafe.Contract.Breakpoint0(&_VmSafe.TransactOpts, char, value)
}

// Breakpoint0 is a paid mutator transaction binding the contract method 0xf7d39a8d.
//
// Solidity: function breakpoint(string char, bool value) returns()
func (_VmSafe *VmSafeTransactorSession) Breakpoint0(char string, value bool) (*types.Transaction, error) {
	return _VmSafe.Contract.Breakpoint0(&_VmSafe.TransactOpts, char, value)
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_VmSafe *VmSafeTransactor) Broadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "broadcast")
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_VmSafe *VmSafeSession) Broadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast(&_VmSafe.TransactOpts)
}

// Broadcast is a paid mutator transaction binding the contract method 0xafc98040.
//
// Solidity: function broadcast() returns()
func (_VmSafe *VmSafeTransactorSession) Broadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast(&_VmSafe.TransactOpts)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_VmSafe *VmSafeTransactor) Broadcast0(opts *bind.TransactOpts, signer common.Address) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "broadcast0", signer)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_VmSafe *VmSafeSession) Broadcast0(signer common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast0(&_VmSafe.TransactOpts, signer)
}

// Broadcast0 is a paid mutator transaction binding the contract method 0xe6962cdb.
//
// Solidity: function broadcast(address signer) returns()
func (_VmSafe *VmSafeTransactorSession) Broadcast0(signer common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast0(&_VmSafe.TransactOpts, signer)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeTransactor) Broadcast1(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "broadcast1", privateKey)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeSession) Broadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast1(&_VmSafe.TransactOpts, privateKey)
}

// Broadcast1 is a paid mutator transaction binding the contract method 0xf67a965b.
//
// Solidity: function broadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeTransactorSession) Broadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.Broadcast1(&_VmSafe.TransactOpts, privateKey)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_VmSafe *VmSafeTransactor) CloseFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "closeFile", path)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_VmSafe *VmSafeSession) CloseFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.CloseFile(&_VmSafe.TransactOpts, path)
}

// CloseFile is a paid mutator transaction binding the contract method 0x48c3241f.
//
// Solidity: function closeFile(string path) returns()
func (_VmSafe *VmSafeTransactorSession) CloseFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.CloseFile(&_VmSafe.TransactOpts, path)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_VmSafe *VmSafeTransactor) CopyFile(opts *bind.TransactOpts, from string, to string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "copyFile", from, to)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_VmSafe *VmSafeSession) CopyFile(from string, to string) (*types.Transaction, error) {
	return _VmSafe.Contract.CopyFile(&_VmSafe.TransactOpts, from, to)
}

// CopyFile is a paid mutator transaction binding the contract method 0xa54a87d8.
//
// Solidity: function copyFile(string from, string to) returns(uint64 copied)
func (_VmSafe *VmSafeTransactorSession) CopyFile(from string, to string) (*types.Transaction, error) {
	return _VmSafe.Contract.CopyFile(&_VmSafe.TransactOpts, from, to)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeTransactor) CreateDir(opts *bind.TransactOpts, path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "createDir", path, recursive)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeSession) CreateDir(path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateDir(&_VmSafe.TransactOpts, path, recursive)
}

// CreateDir is a paid mutator transaction binding the contract method 0x168b64d3.
//
// Solidity: function createDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeTransactorSession) CreateDir(path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateDir(&_VmSafe.TransactOpts, path, recursive)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactor) CreateWallet(opts *bind.TransactOpts, walletLabel string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "createWallet", walletLabel)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeSession) CreateWallet(walletLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet(&_VmSafe.TransactOpts, walletLabel)
}

// CreateWallet is a paid mutator transaction binding the contract method 0x7404f1d2.
//
// Solidity: function createWallet(string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactorSession) CreateWallet(walletLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet(&_VmSafe.TransactOpts, walletLabel)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactor) CreateWallet0(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "createWallet0", privateKey)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeSession) CreateWallet0(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet0(&_VmSafe.TransactOpts, privateKey)
}

// CreateWallet0 is a paid mutator transaction binding the contract method 0x7a675bb6.
//
// Solidity: function createWallet(uint256 privateKey) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactorSession) CreateWallet0(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet0(&_VmSafe.TransactOpts, privateKey)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactor) CreateWallet1(opts *bind.TransactOpts, privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "createWallet1", privateKey, walletLabel)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeSession) CreateWallet1(privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet1(&_VmSafe.TransactOpts, privateKey, walletLabel)
}

// CreateWallet1 is a paid mutator transaction binding the contract method 0xed7c5462.
//
// Solidity: function createWallet(uint256 privateKey, string walletLabel) returns((address,uint256,uint256,uint256) wallet)
func (_VmSafe *VmSafeTransactorSession) CreateWallet1(privateKey *big.Int, walletLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.CreateWallet1(&_VmSafe.TransactOpts, privateKey, walletLabel)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_VmSafe *VmSafeTransactor) EthGetLogs(opts *bind.TransactOpts, fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "eth_getLogs", fromBlock, toBlock, target, topics)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_VmSafe *VmSafeSession) EthGetLogs(fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.EthGetLogs(&_VmSafe.TransactOpts, fromBlock, toBlock, target, topics)
}

// EthGetLogs is a paid mutator transaction binding the contract method 0x35e1349b.
//
// Solidity: function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] topics) returns((address,bytes32[],bytes,bytes32,uint64,bytes32,uint64,uint256,bool)[] logs)
func (_VmSafe *VmSafeTransactorSession) EthGetLogs(fromBlock *big.Int, toBlock *big.Int, target common.Address, topics [][32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.EthGetLogs(&_VmSafe.TransactOpts, fromBlock, toBlock, target, topics)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_VmSafe *VmSafeTransactor) Exists(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "exists", path)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_VmSafe *VmSafeSession) Exists(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.Exists(&_VmSafe.TransactOpts, path)
}

// Exists is a paid mutator transaction binding the contract method 0x261a323e.
//
// Solidity: function exists(string path) returns(bool result)
func (_VmSafe *VmSafeTransactorSession) Exists(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.Exists(&_VmSafe.TransactOpts, path)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_VmSafe *VmSafeTransactor) Ffi(opts *bind.TransactOpts, commandInput []string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "ffi", commandInput)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_VmSafe *VmSafeSession) Ffi(commandInput []string) (*types.Transaction, error) {
	return _VmSafe.Contract.Ffi(&_VmSafe.TransactOpts, commandInput)
}

// Ffi is a paid mutator transaction binding the contract method 0x89160467.
//
// Solidity: function ffi(string[] commandInput) returns(bytes result)
func (_VmSafe *VmSafeTransactorSession) Ffi(commandInput []string) (*types.Transaction, error) {
	return _VmSafe.Contract.Ffi(&_VmSafe.TransactOpts, commandInput)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_VmSafe *VmSafeTransactor) GetMappingKeyAndParentOf(opts *bind.TransactOpts, target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "getMappingKeyAndParentOf", target, elementSlot)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_VmSafe *VmSafeSession) GetMappingKeyAndParentOf(target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingKeyAndParentOf(&_VmSafe.TransactOpts, target, elementSlot)
}

// GetMappingKeyAndParentOf is a paid mutator transaction binding the contract method 0x876e24e6.
//
// Solidity: function getMappingKeyAndParentOf(address target, bytes32 elementSlot) returns(bool found, bytes32 key, bytes32 parent)
func (_VmSafe *VmSafeTransactorSession) GetMappingKeyAndParentOf(target common.Address, elementSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingKeyAndParentOf(&_VmSafe.TransactOpts, target, elementSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_VmSafe *VmSafeTransactor) GetMappingLength(opts *bind.TransactOpts, target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "getMappingLength", target, mappingSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_VmSafe *VmSafeSession) GetMappingLength(target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingLength(&_VmSafe.TransactOpts, target, mappingSlot)
}

// GetMappingLength is a paid mutator transaction binding the contract method 0x2f2fd63f.
//
// Solidity: function getMappingLength(address target, bytes32 mappingSlot) returns(uint256 length)
func (_VmSafe *VmSafeTransactorSession) GetMappingLength(target common.Address, mappingSlot [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingLength(&_VmSafe.TransactOpts, target, mappingSlot)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_VmSafe *VmSafeTransactor) GetMappingSlotAt(opts *bind.TransactOpts, target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "getMappingSlotAt", target, mappingSlot, idx)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_VmSafe *VmSafeSession) GetMappingSlotAt(target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingSlotAt(&_VmSafe.TransactOpts, target, mappingSlot, idx)
}

// GetMappingSlotAt is a paid mutator transaction binding the contract method 0xebc73ab4.
//
// Solidity: function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) returns(bytes32 value)
func (_VmSafe *VmSafeTransactorSession) GetMappingSlotAt(target common.Address, mappingSlot [32]byte, idx *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.GetMappingSlotAt(&_VmSafe.TransactOpts, target, mappingSlot, idx)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_VmSafe *VmSafeTransactor) GetNonce0(opts *bind.TransactOpts, wallet VmSafeWallet) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "getNonce0", wallet)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_VmSafe *VmSafeSession) GetNonce0(wallet VmSafeWallet) (*types.Transaction, error) {
	return _VmSafe.Contract.GetNonce0(&_VmSafe.TransactOpts, wallet)
}

// GetNonce0 is a paid mutator transaction binding the contract method 0xa5748aad.
//
// Solidity: function getNonce((address,uint256,uint256,uint256) wallet) returns(uint64 nonce)
func (_VmSafe *VmSafeTransactorSession) GetNonce0(wallet VmSafeWallet) (*types.Transaction, error) {
	return _VmSafe.Contract.GetNonce0(&_VmSafe.TransactOpts, wallet)
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_VmSafe *VmSafeTransactor) GetRecordedLogs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "getRecordedLogs")
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_VmSafe *VmSafeSession) GetRecordedLogs() (*types.Transaction, error) {
	return _VmSafe.Contract.GetRecordedLogs(&_VmSafe.TransactOpts)
}

// GetRecordedLogs is a paid mutator transaction binding the contract method 0x191553a4.
//
// Solidity: function getRecordedLogs() returns((bytes32[],bytes,address)[] logs)
func (_VmSafe *VmSafeTransactorSession) GetRecordedLogs() (*types.Transaction, error) {
	return _VmSafe.Contract.GetRecordedLogs(&_VmSafe.TransactOpts)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_VmSafe *VmSafeTransactor) IsDir(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "isDir", path)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_VmSafe *VmSafeSession) IsDir(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.IsDir(&_VmSafe.TransactOpts, path)
}

// IsDir is a paid mutator transaction binding the contract method 0x7d15d019.
//
// Solidity: function isDir(string path) returns(bool result)
func (_VmSafe *VmSafeTransactorSession) IsDir(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.IsDir(&_VmSafe.TransactOpts, path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_VmSafe *VmSafeTransactor) IsFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "isFile", path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_VmSafe *VmSafeSession) IsFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.IsFile(&_VmSafe.TransactOpts, path)
}

// IsFile is a paid mutator transaction binding the contract method 0xe0eb04d4.
//
// Solidity: function isFile(string path) returns(bool result)
func (_VmSafe *VmSafeTransactorSession) IsFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.IsFile(&_VmSafe.TransactOpts, path)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_VmSafe *VmSafeTransactor) Label(opts *bind.TransactOpts, account common.Address, newLabel string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "label", account, newLabel)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_VmSafe *VmSafeSession) Label(account common.Address, newLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.Label(&_VmSafe.TransactOpts, account, newLabel)
}

// Label is a paid mutator transaction binding the contract method 0xc657c718.
//
// Solidity: function label(address account, string newLabel) returns()
func (_VmSafe *VmSafeTransactorSession) Label(account common.Address, newLabel string) (*types.Transaction, error) {
	return _VmSafe.Contract.Label(&_VmSafe.TransactOpts, account, newLabel)
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_VmSafe *VmSafeTransactor) PauseGasMetering(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "pauseGasMetering")
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_VmSafe *VmSafeSession) PauseGasMetering() (*types.Transaction, error) {
	return _VmSafe.Contract.PauseGasMetering(&_VmSafe.TransactOpts)
}

// PauseGasMetering is a paid mutator transaction binding the contract method 0xd1a5b36f.
//
// Solidity: function pauseGasMetering() returns()
func (_VmSafe *VmSafeTransactorSession) PauseGasMetering() (*types.Transaction, error) {
	return _VmSafe.Contract.PauseGasMetering(&_VmSafe.TransactOpts)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_VmSafe *VmSafeTransactor) Prompt(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "prompt", promptText)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_VmSafe *VmSafeSession) Prompt(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.Prompt(&_VmSafe.TransactOpts, promptText)
}

// Prompt is a paid mutator transaction binding the contract method 0x47eaf474.
//
// Solidity: function prompt(string promptText) returns(string input)
func (_VmSafe *VmSafeTransactorSession) Prompt(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.Prompt(&_VmSafe.TransactOpts, promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_VmSafe *VmSafeTransactor) PromptAddress(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "promptAddress", promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_VmSafe *VmSafeSession) PromptAddress(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptAddress(&_VmSafe.TransactOpts, promptText)
}

// PromptAddress is a paid mutator transaction binding the contract method 0x62ee05f4.
//
// Solidity: function promptAddress(string promptText) returns(address)
func (_VmSafe *VmSafeTransactorSession) PromptAddress(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptAddress(&_VmSafe.TransactOpts, promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_VmSafe *VmSafeTransactor) PromptSecret(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "promptSecret", promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_VmSafe *VmSafeSession) PromptSecret(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptSecret(&_VmSafe.TransactOpts, promptText)
}

// PromptSecret is a paid mutator transaction binding the contract method 0x1e279d41.
//
// Solidity: function promptSecret(string promptText) returns(string input)
func (_VmSafe *VmSafeTransactorSession) PromptSecret(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptSecret(&_VmSafe.TransactOpts, promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_VmSafe *VmSafeTransactor) PromptUint(opts *bind.TransactOpts, promptText string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "promptUint", promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_VmSafe *VmSafeSession) PromptUint(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptUint(&_VmSafe.TransactOpts, promptText)
}

// PromptUint is a paid mutator transaction binding the contract method 0x652fd489.
//
// Solidity: function promptUint(string promptText) returns(uint256)
func (_VmSafe *VmSafeTransactorSession) PromptUint(promptText string) (*types.Transaction, error) {
	return _VmSafe.Contract.PromptUint(&_VmSafe.TransactOpts, promptText)
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_VmSafe *VmSafeTransactor) Record(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "record")
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_VmSafe *VmSafeSession) Record() (*types.Transaction, error) {
	return _VmSafe.Contract.Record(&_VmSafe.TransactOpts)
}

// Record is a paid mutator transaction binding the contract method 0x266cf109.
//
// Solidity: function record() returns()
func (_VmSafe *VmSafeTransactorSession) Record() (*types.Transaction, error) {
	return _VmSafe.Contract.Record(&_VmSafe.TransactOpts)
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_VmSafe *VmSafeTransactor) RecordLogs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "recordLogs")
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_VmSafe *VmSafeSession) RecordLogs() (*types.Transaction, error) {
	return _VmSafe.Contract.RecordLogs(&_VmSafe.TransactOpts)
}

// RecordLogs is a paid mutator transaction binding the contract method 0x41af2f52.
//
// Solidity: function recordLogs() returns()
func (_VmSafe *VmSafeTransactorSession) RecordLogs() (*types.Transaction, error) {
	return _VmSafe.Contract.RecordLogs(&_VmSafe.TransactOpts)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_VmSafe *VmSafeTransactor) RememberKey(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "rememberKey", privateKey)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_VmSafe *VmSafeSession) RememberKey(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.RememberKey(&_VmSafe.TransactOpts, privateKey)
}

// RememberKey is a paid mutator transaction binding the contract method 0x22100064.
//
// Solidity: function rememberKey(uint256 privateKey) returns(address keyAddr)
func (_VmSafe *VmSafeTransactorSession) RememberKey(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.RememberKey(&_VmSafe.TransactOpts, privateKey)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeTransactor) RemoveDir(opts *bind.TransactOpts, path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "removeDir", path, recursive)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeSession) RemoveDir(path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.Contract.RemoveDir(&_VmSafe.TransactOpts, path, recursive)
}

// RemoveDir is a paid mutator transaction binding the contract method 0x45c62011.
//
// Solidity: function removeDir(string path, bool recursive) returns()
func (_VmSafe *VmSafeTransactorSession) RemoveDir(path string, recursive bool) (*types.Transaction, error) {
	return _VmSafe.Contract.RemoveDir(&_VmSafe.TransactOpts, path, recursive)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_VmSafe *VmSafeTransactor) RemoveFile(opts *bind.TransactOpts, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "removeFile", path)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_VmSafe *VmSafeSession) RemoveFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.RemoveFile(&_VmSafe.TransactOpts, path)
}

// RemoveFile is a paid mutator transaction binding the contract method 0xf1afe04d.
//
// Solidity: function removeFile(string path) returns()
func (_VmSafe *VmSafeTransactorSession) RemoveFile(path string) (*types.Transaction, error) {
	return _VmSafe.Contract.RemoveFile(&_VmSafe.TransactOpts, path)
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_VmSafe *VmSafeTransactor) ResumeGasMetering(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "resumeGasMetering")
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_VmSafe *VmSafeSession) ResumeGasMetering() (*types.Transaction, error) {
	return _VmSafe.Contract.ResumeGasMetering(&_VmSafe.TransactOpts)
}

// ResumeGasMetering is a paid mutator transaction binding the contract method 0x2bcd50e0.
//
// Solidity: function resumeGasMetering() returns()
func (_VmSafe *VmSafeTransactorSession) ResumeGasMetering() (*types.Transaction, error) {
	return _VmSafe.Contract.ResumeGasMetering(&_VmSafe.TransactOpts)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_VmSafe *VmSafeTransactor) Rpc(opts *bind.TransactOpts, method string, params string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "rpc", method, params)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_VmSafe *VmSafeSession) Rpc(method string, params string) (*types.Transaction, error) {
	return _VmSafe.Contract.Rpc(&_VmSafe.TransactOpts, method, params)
}

// Rpc is a paid mutator transaction binding the contract method 0x1206c8a8.
//
// Solidity: function rpc(string method, string params) returns(bytes data)
func (_VmSafe *VmSafeTransactorSession) Rpc(method string, params string) (*types.Transaction, error) {
	return _VmSafe.Contract.Rpc(&_VmSafe.TransactOpts, method, params)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeAddress(opts *bind.TransactOpts, objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeAddress", objectKey, valueKey, values)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeAddress(objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeAddress(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeAddress is a paid mutator transaction binding the contract method 0x1e356e1a.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeAddress(objectKey string, valueKey string, values []common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeAddress(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeAddress0(opts *bind.TransactOpts, objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeAddress0", objectKey, valueKey, value)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeAddress0(objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeAddress0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeAddress0 is a paid mutator transaction binding the contract method 0x972c6062.
//
// Solidity: function serializeAddress(string objectKey, string valueKey, address value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeAddress0(objectKey string, valueKey string, value common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeAddress0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBool(opts *bind.TransactOpts, objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBool", objectKey, valueKey, values)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBool(objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBool(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBool is a paid mutator transaction binding the contract method 0x92925aa1.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBool(objectKey string, valueKey string, values []bool) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBool(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBool0(opts *bind.TransactOpts, objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBool0", objectKey, valueKey, value)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBool0(objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBool0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBool0 is a paid mutator transaction binding the contract method 0xac22e971.
//
// Solidity: function serializeBool(string objectKey, string valueKey, bool value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBool0(objectKey string, valueKey string, value bool) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBool0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBytes(opts *bind.TransactOpts, objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBytes", objectKey, valueKey, values)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBytes(objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes is a paid mutator transaction binding the contract method 0x9884b232.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBytes(objectKey string, valueKey string, values [][]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBytes0(opts *bind.TransactOpts, objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBytes0", objectKey, valueKey, value)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBytes0(objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes0 is a paid mutator transaction binding the contract method 0xf21d52c7.
//
// Solidity: function serializeBytes(string objectKey, string valueKey, bytes value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBytes0(objectKey string, valueKey string, value []byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBytes32(opts *bind.TransactOpts, objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBytes32", objectKey, valueKey, values)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBytes32(objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes32(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes32 is a paid mutator transaction binding the contract method 0x201e43e2.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBytes32(objectKey string, valueKey string, values [][32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes32(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeBytes320(opts *bind.TransactOpts, objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeBytes320", objectKey, valueKey, value)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeBytes320(objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes320(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeBytes320 is a paid mutator transaction binding the contract method 0x2d812b44.
//
// Solidity: function serializeBytes32(string objectKey, string valueKey, bytes32 value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeBytes320(objectKey string, valueKey string, value [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeBytes320(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeInt(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeInt", objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeInt(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeInt(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt is a paid mutator transaction binding the contract method 0x3f33db60.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256 value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeInt(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeInt(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeInt0(opts *bind.TransactOpts, objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeInt0", objectKey, valueKey, values)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeInt0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeInt0(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeInt0 is a paid mutator transaction binding the contract method 0x7676e127.
//
// Solidity: function serializeInt(string objectKey, string valueKey, int256[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeInt0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeInt0(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeJson(opts *bind.TransactOpts, objectKey string, value string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeJson", objectKey, value)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeJson(objectKey string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeJson(&_VmSafe.TransactOpts, objectKey, value)
}

// SerializeJson is a paid mutator transaction binding the contract method 0x9b3358b0.
//
// Solidity: function serializeJson(string objectKey, string value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeJson(objectKey string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeJson(&_VmSafe.TransactOpts, objectKey, value)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeString(opts *bind.TransactOpts, objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeString", objectKey, valueKey, values)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeString(objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeString(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeString is a paid mutator transaction binding the contract method 0x561cd6f3.
//
// Solidity: function serializeString(string objectKey, string valueKey, string[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeString(objectKey string, valueKey string, values []string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeString(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeString0(opts *bind.TransactOpts, objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeString0", objectKey, valueKey, value)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeString0(objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeString0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeString0 is a paid mutator transaction binding the contract method 0x88da6d35.
//
// Solidity: function serializeString(string objectKey, string valueKey, string value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeString0(objectKey string, valueKey string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeString0(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeUint(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeUint", objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeUint(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUint(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint is a paid mutator transaction binding the contract method 0x129e9002.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeUint(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUint(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeUint0(opts *bind.TransactOpts, objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeUint0", objectKey, valueKey, values)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_VmSafe *VmSafeSession) SerializeUint0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUint0(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeUint0 is a paid mutator transaction binding the contract method 0xfee9a469.
//
// Solidity: function serializeUint(string objectKey, string valueKey, uint256[] values) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeUint0(objectKey string, valueKey string, values []*big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUint0(&_VmSafe.TransactOpts, objectKey, valueKey, values)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeTransactor) SerializeUintToHex(opts *bind.TransactOpts, objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "serializeUintToHex", objectKey, valueKey, value)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeSession) SerializeUintToHex(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUintToHex(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SerializeUintToHex is a paid mutator transaction binding the contract method 0xae5a2ae8.
//
// Solidity: function serializeUintToHex(string objectKey, string valueKey, uint256 value) returns(string json)
func (_VmSafe *VmSafeTransactorSession) SerializeUintToHex(objectKey string, valueKey string, value *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.SerializeUintToHex(&_VmSafe.TransactOpts, objectKey, valueKey, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_VmSafe *VmSafeTransactor) SetEnv(opts *bind.TransactOpts, name string, value string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "setEnv", name, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_VmSafe *VmSafeSession) SetEnv(name string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SetEnv(&_VmSafe.TransactOpts, name, value)
}

// SetEnv is a paid mutator transaction binding the contract method 0x3d5923ee.
//
// Solidity: function setEnv(string name, string value) returns()
func (_VmSafe *VmSafeTransactorSession) SetEnv(name string, value string) (*types.Transaction, error) {
	return _VmSafe.Contract.SetEnv(&_VmSafe.TransactOpts, name, value)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeTransactor) Sign1(opts *bind.TransactOpts, wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "sign1", wallet, digest)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeSession) Sign1(wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.Sign1(&_VmSafe.TransactOpts, wallet, digest)
}

// Sign1 is a paid mutator transaction binding the contract method 0xb25c5a25.
//
// Solidity: function sign((address,uint256,uint256,uint256) wallet, bytes32 digest) returns(uint8 v, bytes32 r, bytes32 s)
func (_VmSafe *VmSafeTransactorSession) Sign1(wallet VmSafeWallet, digest [32]byte) (*types.Transaction, error) {
	return _VmSafe.Contract.Sign1(&_VmSafe.TransactOpts, wallet, digest)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_VmSafe *VmSafeTransactor) Sleep(opts *bind.TransactOpts, duration *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "sleep", duration)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_VmSafe *VmSafeSession) Sleep(duration *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.Sleep(&_VmSafe.TransactOpts, duration)
}

// Sleep is a paid mutator transaction binding the contract method 0xfa9d8713.
//
// Solidity: function sleep(uint256 duration) returns()
func (_VmSafe *VmSafeTransactorSession) Sleep(duration *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.Sleep(&_VmSafe.TransactOpts, duration)
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_VmSafe *VmSafeTransactor) StartBroadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "startBroadcast")
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_VmSafe *VmSafeSession) StartBroadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast(&_VmSafe.TransactOpts)
}

// StartBroadcast is a paid mutator transaction binding the contract method 0x7fb5297f.
//
// Solidity: function startBroadcast() returns()
func (_VmSafe *VmSafeTransactorSession) StartBroadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast(&_VmSafe.TransactOpts)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_VmSafe *VmSafeTransactor) StartBroadcast0(opts *bind.TransactOpts, signer common.Address) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "startBroadcast0", signer)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_VmSafe *VmSafeSession) StartBroadcast0(signer common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast0(&_VmSafe.TransactOpts, signer)
}

// StartBroadcast0 is a paid mutator transaction binding the contract method 0x7fec2a8d.
//
// Solidity: function startBroadcast(address signer) returns()
func (_VmSafe *VmSafeTransactorSession) StartBroadcast0(signer common.Address) (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast0(&_VmSafe.TransactOpts, signer)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeTransactor) StartBroadcast1(opts *bind.TransactOpts, privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "startBroadcast1", privateKey)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeSession) StartBroadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast1(&_VmSafe.TransactOpts, privateKey)
}

// StartBroadcast1 is a paid mutator transaction binding the contract method 0xce817d47.
//
// Solidity: function startBroadcast(uint256 privateKey) returns()
func (_VmSafe *VmSafeTransactorSession) StartBroadcast1(privateKey *big.Int) (*types.Transaction, error) {
	return _VmSafe.Contract.StartBroadcast1(&_VmSafe.TransactOpts, privateKey)
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_VmSafe *VmSafeTransactor) StartMappingRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "startMappingRecording")
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_VmSafe *VmSafeSession) StartMappingRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StartMappingRecording(&_VmSafe.TransactOpts)
}

// StartMappingRecording is a paid mutator transaction binding the contract method 0x3e9705c0.
//
// Solidity: function startMappingRecording() returns()
func (_VmSafe *VmSafeTransactorSession) StartMappingRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StartMappingRecording(&_VmSafe.TransactOpts)
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_VmSafe *VmSafeTransactor) StartStateDiffRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "startStateDiffRecording")
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_VmSafe *VmSafeSession) StartStateDiffRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StartStateDiffRecording(&_VmSafe.TransactOpts)
}

// StartStateDiffRecording is a paid mutator transaction binding the contract method 0xcf22e3c9.
//
// Solidity: function startStateDiffRecording() returns()
func (_VmSafe *VmSafeTransactorSession) StartStateDiffRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StartStateDiffRecording(&_VmSafe.TransactOpts)
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_VmSafe *VmSafeTransactor) StopAndReturnStateDiff(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "stopAndReturnStateDiff")
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_VmSafe *VmSafeSession) StopAndReturnStateDiff() (*types.Transaction, error) {
	return _VmSafe.Contract.StopAndReturnStateDiff(&_VmSafe.TransactOpts)
}

// StopAndReturnStateDiff is a paid mutator transaction binding the contract method 0xaa5cf90e.
//
// Solidity: function stopAndReturnStateDiff() returns(((uint256,uint256),uint8,address,address,bool,uint256,uint256,bytes,uint256,bytes,bool,(address,bytes32,bool,bytes32,bytes32,bool)[],uint64)[] accountAccesses)
func (_VmSafe *VmSafeTransactorSession) StopAndReturnStateDiff() (*types.Transaction, error) {
	return _VmSafe.Contract.StopAndReturnStateDiff(&_VmSafe.TransactOpts)
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_VmSafe *VmSafeTransactor) StopBroadcast(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "stopBroadcast")
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_VmSafe *VmSafeSession) StopBroadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.StopBroadcast(&_VmSafe.TransactOpts)
}

// StopBroadcast is a paid mutator transaction binding the contract method 0x76eadd36.
//
// Solidity: function stopBroadcast() returns()
func (_VmSafe *VmSafeTransactorSession) StopBroadcast() (*types.Transaction, error) {
	return _VmSafe.Contract.StopBroadcast(&_VmSafe.TransactOpts)
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_VmSafe *VmSafeTransactor) StopMappingRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "stopMappingRecording")
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_VmSafe *VmSafeSession) StopMappingRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StopMappingRecording(&_VmSafe.TransactOpts)
}

// StopMappingRecording is a paid mutator transaction binding the contract method 0x0d4aae9b.
//
// Solidity: function stopMappingRecording() returns()
func (_VmSafe *VmSafeTransactorSession) StopMappingRecording() (*types.Transaction, error) {
	return _VmSafe.Contract.StopMappingRecording(&_VmSafe.TransactOpts)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_VmSafe *VmSafeTransactor) TryFfi(opts *bind.TransactOpts, commandInput []string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "tryFfi", commandInput)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_VmSafe *VmSafeSession) TryFfi(commandInput []string) (*types.Transaction, error) {
	return _VmSafe.Contract.TryFfi(&_VmSafe.TransactOpts, commandInput)
}

// TryFfi is a paid mutator transaction binding the contract method 0xf45c1ce7.
//
// Solidity: function tryFfi(string[] commandInput) returns((int32,bytes,bytes) result)
func (_VmSafe *VmSafeTransactorSession) TryFfi(commandInput []string) (*types.Transaction, error) {
	return _VmSafe.Contract.TryFfi(&_VmSafe.TransactOpts, commandInput)
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_VmSafe *VmSafeTransactor) UnixTime(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "unixTime")
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_VmSafe *VmSafeSession) UnixTime() (*types.Transaction, error) {
	return _VmSafe.Contract.UnixTime(&_VmSafe.TransactOpts)
}

// UnixTime is a paid mutator transaction binding the contract method 0x625387dc.
//
// Solidity: function unixTime() returns(uint256 milliseconds)
func (_VmSafe *VmSafeTransactorSession) UnixTime() (*types.Transaction, error) {
	return _VmSafe.Contract.UnixTime(&_VmSafe.TransactOpts)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_VmSafe *VmSafeTransactor) WriteFile(opts *bind.TransactOpts, path string, data string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeFile", path, data)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_VmSafe *VmSafeSession) WriteFile(path string, data string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteFile(&_VmSafe.TransactOpts, path, data)
}

// WriteFile is a paid mutator transaction binding the contract method 0x897e0a97.
//
// Solidity: function writeFile(string path, string data) returns()
func (_VmSafe *VmSafeTransactorSession) WriteFile(path string, data string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteFile(&_VmSafe.TransactOpts, path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_VmSafe *VmSafeTransactor) WriteFileBinary(opts *bind.TransactOpts, path string, data []byte) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeFileBinary", path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_VmSafe *VmSafeSession) WriteFileBinary(path string, data []byte) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteFileBinary(&_VmSafe.TransactOpts, path, data)
}

// WriteFileBinary is a paid mutator transaction binding the contract method 0x1f21fc80.
//
// Solidity: function writeFileBinary(string path, bytes data) returns()
func (_VmSafe *VmSafeTransactorSession) WriteFileBinary(path string, data []byte) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteFileBinary(&_VmSafe.TransactOpts, path, data)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeTransactor) WriteJson(opts *bind.TransactOpts, json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeJson", json, path, valueKey)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeSession) WriteJson(json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteJson(&_VmSafe.TransactOpts, json, path, valueKey)
}

// WriteJson is a paid mutator transaction binding the contract method 0x35d6ad46.
//
// Solidity: function writeJson(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeTransactorSession) WriteJson(json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteJson(&_VmSafe.TransactOpts, json, path, valueKey)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_VmSafe *VmSafeTransactor) WriteJson0(opts *bind.TransactOpts, json string, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeJson0", json, path)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_VmSafe *VmSafeSession) WriteJson0(json string, path string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteJson0(&_VmSafe.TransactOpts, json, path)
}

// WriteJson0 is a paid mutator transaction binding the contract method 0xe23cd19f.
//
// Solidity: function writeJson(string json, string path) returns()
func (_VmSafe *VmSafeTransactorSession) WriteJson0(json string, path string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteJson0(&_VmSafe.TransactOpts, json, path)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_VmSafe *VmSafeTransactor) WriteLine(opts *bind.TransactOpts, path string, data string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeLine", path, data)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_VmSafe *VmSafeSession) WriteLine(path string, data string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteLine(&_VmSafe.TransactOpts, path, data)
}

// WriteLine is a paid mutator transaction binding the contract method 0x619d897f.
//
// Solidity: function writeLine(string path, string data) returns()
func (_VmSafe *VmSafeTransactorSession) WriteLine(path string, data string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteLine(&_VmSafe.TransactOpts, path, data)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeTransactor) WriteToml(opts *bind.TransactOpts, json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeToml", json, path, valueKey)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeSession) WriteToml(json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteToml(&_VmSafe.TransactOpts, json, path, valueKey)
}

// WriteToml is a paid mutator transaction binding the contract method 0x51ac6a33.
//
// Solidity: function writeToml(string json, string path, string valueKey) returns()
func (_VmSafe *VmSafeTransactorSession) WriteToml(json string, path string, valueKey string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteToml(&_VmSafe.TransactOpts, json, path, valueKey)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_VmSafe *VmSafeTransactor) WriteToml0(opts *bind.TransactOpts, json string, path string) (*types.Transaction, error) {
	return _VmSafe.contract.Transact(opts, "writeToml0", json, path)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_VmSafe *VmSafeSession) WriteToml0(json string, path string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteToml0(&_VmSafe.TransactOpts, json, path)
}

// WriteToml0 is a paid mutator transaction binding the contract method 0xc0865ba7.
//
// Solidity: function writeToml(string json, string path) returns()
func (_VmSafe *VmSafeTransactorSession) WriteToml0(json string, path string) (*types.Transaction, error) {
	return _VmSafe.Contract.WriteToml0(&_VmSafe.TransactOpts, json, path)
}

// ConsoleMetaData contains all meta data concerning the Console contract.
var ConsoleMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec7e5a50e5efa88bad1eba97e7a3720f1747bd664c90efe5a00f33ee1b63561a64736f6c63430008180033",
}

// ConsoleABI is the input ABI used to generate the binding from.
// Deprecated: Use ConsoleMetaData.ABI instead.
var ConsoleABI = ConsoleMetaData.ABI

// ConsoleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConsoleMetaData.Bin instead.
var ConsoleBin = ConsoleMetaData.Bin

// DeployConsole deploys a new Ethereum contract, binding an instance of Console to it.
func DeployConsole(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Console, error) {
	parsed, err := ConsoleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConsoleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Console{ConsoleCaller: ConsoleCaller{contract: contract}, ConsoleTransactor: ConsoleTransactor{contract: contract}, ConsoleFilterer: ConsoleFilterer{contract: contract}}, nil
}

// Console is an auto generated Go binding around an Ethereum contract.
type Console struct {
	ConsoleCaller     // Read-only binding to the contract
	ConsoleTransactor // Write-only binding to the contract
	ConsoleFilterer   // Log filterer for contract events
}

// ConsoleCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConsoleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConsoleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConsoleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConsoleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConsoleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConsoleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConsoleSession struct {
	Contract     *Console          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ConsoleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConsoleCallerSession struct {
	Contract *ConsoleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ConsoleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConsoleTransactorSession struct {
	Contract     *ConsoleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ConsoleRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConsoleRaw struct {
	Contract *Console // Generic contract binding to access the raw methods on
}

// ConsoleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConsoleCallerRaw struct {
	Contract *ConsoleCaller // Generic read-only contract binding to access the raw methods on
}

// ConsoleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConsoleTransactorRaw struct {
	Contract *ConsoleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConsole creates a new instance of Console, bound to a specific deployed contract.
func NewConsole(address common.Address, backend bind.ContractBackend) (*Console, error) {
	contract, err := bindConsole(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Console{ConsoleCaller: ConsoleCaller{contract: contract}, ConsoleTransactor: ConsoleTransactor{contract: contract}, ConsoleFilterer: ConsoleFilterer{contract: contract}}, nil
}

// NewConsoleCaller creates a new read-only instance of Console, bound to a specific deployed contract.
func NewConsoleCaller(address common.Address, caller bind.ContractCaller) (*ConsoleCaller, error) {
	contract, err := bindConsole(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConsoleCaller{contract: contract}, nil
}

// NewConsoleTransactor creates a new write-only instance of Console, bound to a specific deployed contract.
func NewConsoleTransactor(address common.Address, transactor bind.ContractTransactor) (*ConsoleTransactor, error) {
	contract, err := bindConsole(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConsoleTransactor{contract: contract}, nil
}

// NewConsoleFilterer creates a new log filterer instance of Console, bound to a specific deployed contract.
func NewConsoleFilterer(address common.Address, filterer bind.ContractFilterer) (*ConsoleFilterer, error) {
	contract, err := bindConsole(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConsoleFilterer{contract: contract}, nil
}

// bindConsole binds a generic wrapper to an already deployed contract.
func bindConsole(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ConsoleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Console *ConsoleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Console.Contract.ConsoleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Console *ConsoleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Console.Contract.ConsoleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Console *ConsoleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Console.Contract.ConsoleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Console *ConsoleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Console.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Console *ConsoleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Console.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Console *ConsoleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Console.Contract.contract.Transact(opts, method, params...)
}

// Console2MetaData contains all meta data concerning the Console2 contract.
var Console2MetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ced59ec3a1ddde89605aa4b2c1e616df5605fa9872e25b2597510d57b116979164736f6c63430008180033",
}

// Console2ABI is the input ABI used to generate the binding from.
// Deprecated: Use Console2MetaData.ABI instead.
var Console2ABI = Console2MetaData.ABI

// Console2Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Console2MetaData.Bin instead.
var Console2Bin = Console2MetaData.Bin

// DeployConsole2 deploys a new Ethereum contract, binding an instance of Console2 to it.
func DeployConsole2(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Console2, error) {
	parsed, err := Console2MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Console2Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Console2{Console2Caller: Console2Caller{contract: contract}, Console2Transactor: Console2Transactor{contract: contract}, Console2Filterer: Console2Filterer{contract: contract}}, nil
}

// Console2 is an auto generated Go binding around an Ethereum contract.
type Console2 struct {
	Console2Caller     // Read-only binding to the contract
	Console2Transactor // Write-only binding to the contract
	Console2Filterer   // Log filterer for contract events
}

// Console2Caller is an auto generated read-only Go binding around an Ethereum contract.
type Console2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Console2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Console2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Console2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Console2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Console2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Console2Session struct {
	Contract     *Console2         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Console2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Console2CallerSession struct {
	Contract *Console2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// Console2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Console2TransactorSession struct {
	Contract     *Console2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// Console2Raw is an auto generated low-level Go binding around an Ethereum contract.
type Console2Raw struct {
	Contract *Console2 // Generic contract binding to access the raw methods on
}

// Console2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Console2CallerRaw struct {
	Contract *Console2Caller // Generic read-only contract binding to access the raw methods on
}

// Console2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Console2TransactorRaw struct {
	Contract *Console2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewConsole2 creates a new instance of Console2, bound to a specific deployed contract.
func NewConsole2(address common.Address, backend bind.ContractBackend) (*Console2, error) {
	contract, err := bindConsole2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Console2{Console2Caller: Console2Caller{contract: contract}, Console2Transactor: Console2Transactor{contract: contract}, Console2Filterer: Console2Filterer{contract: contract}}, nil
}

// NewConsole2Caller creates a new read-only instance of Console2, bound to a specific deployed contract.
func NewConsole2Caller(address common.Address, caller bind.ContractCaller) (*Console2Caller, error) {
	contract, err := bindConsole2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Console2Caller{contract: contract}, nil
}

// NewConsole2Transactor creates a new write-only instance of Console2, bound to a specific deployed contract.
func NewConsole2Transactor(address common.Address, transactor bind.ContractTransactor) (*Console2Transactor, error) {
	contract, err := bindConsole2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Console2Transactor{contract: contract}, nil
}

// NewConsole2Filterer creates a new log filterer instance of Console2, bound to a specific deployed contract.
func NewConsole2Filterer(address common.Address, filterer bind.ContractFilterer) (*Console2Filterer, error) {
	contract, err := bindConsole2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Console2Filterer{contract: contract}, nil
}

// bindConsole2 binds a generic wrapper to an already deployed contract.
func bindConsole2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Console2MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Console2 *Console2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Console2.Contract.Console2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Console2 *Console2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Console2.Contract.Console2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Console2 *Console2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Console2.Contract.Console2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Console2 *Console2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Console2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Console2 *Console2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Console2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Console2 *Console2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Console2.Contract.contract.Transact(opts, method, params...)
}

// SafeconsoleMetaData contains all meta data concerning the Safeconsole contract.
var SafeconsoleMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aec8a19d2d7f14ff22894d4d853eb279c140afea67e50c46f7e7b6465de12cbf64736f6c63430008180033",
}

// SafeconsoleABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeconsoleMetaData.ABI instead.
var SafeconsoleABI = SafeconsoleMetaData.ABI

// SafeconsoleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeconsoleMetaData.Bin instead.
var SafeconsoleBin = SafeconsoleMetaData.Bin

// DeploySafeconsole deploys a new Ethereum contract, binding an instance of Safeconsole to it.
func DeploySafeconsole(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Safeconsole, error) {
	parsed, err := SafeconsoleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeconsoleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Safeconsole{SafeconsoleCaller: SafeconsoleCaller{contract: contract}, SafeconsoleTransactor: SafeconsoleTransactor{contract: contract}, SafeconsoleFilterer: SafeconsoleFilterer{contract: contract}}, nil
}

// Safeconsole is an auto generated Go binding around an Ethereum contract.
type Safeconsole struct {
	SafeconsoleCaller     // Read-only binding to the contract
	SafeconsoleTransactor // Write-only binding to the contract
	SafeconsoleFilterer   // Log filterer for contract events
}

// SafeconsoleCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeconsoleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeconsoleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeconsoleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeconsoleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeconsoleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeconsoleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeconsoleSession struct {
	Contract     *Safeconsole      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeconsoleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeconsoleCallerSession struct {
	Contract *SafeconsoleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// SafeconsoleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeconsoleTransactorSession struct {
	Contract     *SafeconsoleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SafeconsoleRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeconsoleRaw struct {
	Contract *Safeconsole // Generic contract binding to access the raw methods on
}

// SafeconsoleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeconsoleCallerRaw struct {
	Contract *SafeconsoleCaller // Generic read-only contract binding to access the raw methods on
}

// SafeconsoleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeconsoleTransactorRaw struct {
	Contract *SafeconsoleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeconsole creates a new instance of Safeconsole, bound to a specific deployed contract.
func NewSafeconsole(address common.Address, backend bind.ContractBackend) (*Safeconsole, error) {
	contract, err := bindSafeconsole(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Safeconsole{SafeconsoleCaller: SafeconsoleCaller{contract: contract}, SafeconsoleTransactor: SafeconsoleTransactor{contract: contract}, SafeconsoleFilterer: SafeconsoleFilterer{contract: contract}}, nil
}

// NewSafeconsoleCaller creates a new read-only instance of Safeconsole, bound to a specific deployed contract.
func NewSafeconsoleCaller(address common.Address, caller bind.ContractCaller) (*SafeconsoleCaller, error) {
	contract, err := bindSafeconsole(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeconsoleCaller{contract: contract}, nil
}

// NewSafeconsoleTransactor creates a new write-only instance of Safeconsole, bound to a specific deployed contract.
func NewSafeconsoleTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeconsoleTransactor, error) {
	contract, err := bindSafeconsole(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeconsoleTransactor{contract: contract}, nil
}

// NewSafeconsoleFilterer creates a new log filterer instance of Safeconsole, bound to a specific deployed contract.
func NewSafeconsoleFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeconsoleFilterer, error) {
	contract, err := bindSafeconsole(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeconsoleFilterer{contract: contract}, nil
}

// bindSafeconsole binds a generic wrapper to an already deployed contract.
func bindSafeconsole(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SafeconsoleMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Safeconsole *SafeconsoleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Safeconsole.Contract.SafeconsoleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Safeconsole *SafeconsoleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Safeconsole.Contract.SafeconsoleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Safeconsole *SafeconsoleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Safeconsole.Contract.SafeconsoleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Safeconsole *SafeconsoleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Safeconsole.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Safeconsole *SafeconsoleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Safeconsole.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Safeconsole *SafeconsoleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Safeconsole.Contract.contract.Transact(opts, method, params...)
}

// StdErrorMetaData contains all meta data concerning the StdError contract.
var StdErrorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"arithmeticError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assertionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divisionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeStorageError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enumConversionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexOOBError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memOverflowError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroVarError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"8995290f": "arithmeticError()",
		"10332977": "assertionError()",
		"fa784a44": "divisionError()",
		"d160e4de": "encodeStorageError()",
		"1de45560": "enumConversionError()",
		"05ee8612": "indexOOBError()",
		"986c5f68": "memOverflowError()",
		"b22dc54d": "popError()",
		"b67689da": "zeroVarError()",
	},
	Bin: "0x6102ca61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c8063986c5f6811610080578063b67689da11610065578063b67689da146100f8578063d160e4de14610100578063fa784a441461010857600080fd5b8063986c5f68146100e8578063b22dc54d146100f057600080fd5b806305ee8612146100b257806310332977146100d05780631de45560146100d85780638995290f146100e0575b600080fd5b6100ba610110565b6040516100c79190610227565b60405180910390f35b6100ba610197565b6100ba6101a9565b6100ba6101bb565b6100ba6101cd565b6100ba6101df565b6100ba6101f1565b6100ba610203565b6100ba610215565b604051603260248201526044015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4e487b710000000000000000000000000000000000000000000000000000000017905281565b6040516001602482015260440161011e565b6040516021602482015260440161011e565b6040516011602482015260440161011e565b6040516041602482015260440161011e565b6040516031602482015260440161011e565b6040516051602482015260440161011e565b6040516022602482015260440161011e565b6040516012602482015260440161011e565b60006020808352835180602085015260005b8181101561025557858101830151858201604001528201610239565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220ecb90defd9573e9816299c2f8752cd8ff8dcdbbd05a0c64a3795dab3aef9b3a464736f6c63430008180033",
}

// StdErrorABI is the input ABI used to generate the binding from.
// Deprecated: Use StdErrorMetaData.ABI instead.
var StdErrorABI = StdErrorMetaData.ABI

// Deprecated: Use StdErrorMetaData.Sigs instead.
// StdErrorFuncSigs maps the 4-byte function signature to its string representation.
var StdErrorFuncSigs = StdErrorMetaData.Sigs

// StdErrorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdErrorMetaData.Bin instead.
var StdErrorBin = StdErrorMetaData.Bin

// DeployStdError deploys a new Ethereum contract, binding an instance of StdError to it.
func DeployStdError(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdError, error) {
	parsed, err := StdErrorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdErrorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdError{StdErrorCaller: StdErrorCaller{contract: contract}, StdErrorTransactor: StdErrorTransactor{contract: contract}, StdErrorFilterer: StdErrorFilterer{contract: contract}}, nil
}

// StdError is an auto generated Go binding around an Ethereum contract.
type StdError struct {
	StdErrorCaller     // Read-only binding to the contract
	StdErrorTransactor // Write-only binding to the contract
	StdErrorFilterer   // Log filterer for contract events
}

// StdErrorCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdErrorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdErrorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdErrorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdErrorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdErrorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdErrorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdErrorSession struct {
	Contract     *StdError         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdErrorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdErrorCallerSession struct {
	Contract *StdErrorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// StdErrorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdErrorTransactorSession struct {
	Contract     *StdErrorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// StdErrorRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdErrorRaw struct {
	Contract *StdError // Generic contract binding to access the raw methods on
}

// StdErrorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdErrorCallerRaw struct {
	Contract *StdErrorCaller // Generic read-only contract binding to access the raw methods on
}

// StdErrorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdErrorTransactorRaw struct {
	Contract *StdErrorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdError creates a new instance of StdError, bound to a specific deployed contract.
func NewStdError(address common.Address, backend bind.ContractBackend) (*StdError, error) {
	contract, err := bindStdError(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdError{StdErrorCaller: StdErrorCaller{contract: contract}, StdErrorTransactor: StdErrorTransactor{contract: contract}, StdErrorFilterer: StdErrorFilterer{contract: contract}}, nil
}

// NewStdErrorCaller creates a new read-only instance of StdError, bound to a specific deployed contract.
func NewStdErrorCaller(address common.Address, caller bind.ContractCaller) (*StdErrorCaller, error) {
	contract, err := bindStdError(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdErrorCaller{contract: contract}, nil
}

// NewStdErrorTransactor creates a new write-only instance of StdError, bound to a specific deployed contract.
func NewStdErrorTransactor(address common.Address, transactor bind.ContractTransactor) (*StdErrorTransactor, error) {
	contract, err := bindStdError(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdErrorTransactor{contract: contract}, nil
}

// NewStdErrorFilterer creates a new log filterer instance of StdError, bound to a specific deployed contract.
func NewStdErrorFilterer(address common.Address, filterer bind.ContractFilterer) (*StdErrorFilterer, error) {
	contract, err := bindStdError(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdErrorFilterer{contract: contract}, nil
}

// bindStdError binds a generic wrapper to an already deployed contract.
func bindStdError(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdErrorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdError *StdErrorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdError.Contract.StdErrorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdError *StdErrorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdError.Contract.StdErrorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdError *StdErrorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdError.Contract.StdErrorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdError *StdErrorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdError.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdError *StdErrorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdError.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdError *StdErrorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdError.Contract.contract.Transact(opts, method, params...)
}

// ArithmeticError is a free data retrieval call binding the contract method 0x8995290f.
//
// Solidity: function arithmeticError() view returns(bytes)
func (_StdError *StdErrorCaller) ArithmeticError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "arithmeticError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ArithmeticError is a free data retrieval call binding the contract method 0x8995290f.
//
// Solidity: function arithmeticError() view returns(bytes)
func (_StdError *StdErrorSession) ArithmeticError() ([]byte, error) {
	return _StdError.Contract.ArithmeticError(&_StdError.CallOpts)
}

// ArithmeticError is a free data retrieval call binding the contract method 0x8995290f.
//
// Solidity: function arithmeticError() view returns(bytes)
func (_StdError *StdErrorCallerSession) ArithmeticError() ([]byte, error) {
	return _StdError.Contract.ArithmeticError(&_StdError.CallOpts)
}

// AssertionError is a free data retrieval call binding the contract method 0x10332977.
//
// Solidity: function assertionError() view returns(bytes)
func (_StdError *StdErrorCaller) AssertionError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "assertionError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AssertionError is a free data retrieval call binding the contract method 0x10332977.
//
// Solidity: function assertionError() view returns(bytes)
func (_StdError *StdErrorSession) AssertionError() ([]byte, error) {
	return _StdError.Contract.AssertionError(&_StdError.CallOpts)
}

// AssertionError is a free data retrieval call binding the contract method 0x10332977.
//
// Solidity: function assertionError() view returns(bytes)
func (_StdError *StdErrorCallerSession) AssertionError() ([]byte, error) {
	return _StdError.Contract.AssertionError(&_StdError.CallOpts)
}

// DivisionError is a free data retrieval call binding the contract method 0xfa784a44.
//
// Solidity: function divisionError() view returns(bytes)
func (_StdError *StdErrorCaller) DivisionError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "divisionError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// DivisionError is a free data retrieval call binding the contract method 0xfa784a44.
//
// Solidity: function divisionError() view returns(bytes)
func (_StdError *StdErrorSession) DivisionError() ([]byte, error) {
	return _StdError.Contract.DivisionError(&_StdError.CallOpts)
}

// DivisionError is a free data retrieval call binding the contract method 0xfa784a44.
//
// Solidity: function divisionError() view returns(bytes)
func (_StdError *StdErrorCallerSession) DivisionError() ([]byte, error) {
	return _StdError.Contract.DivisionError(&_StdError.CallOpts)
}

// EncodeStorageError is a free data retrieval call binding the contract method 0xd160e4de.
//
// Solidity: function encodeStorageError() view returns(bytes)
func (_StdError *StdErrorCaller) EncodeStorageError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "encodeStorageError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeStorageError is a free data retrieval call binding the contract method 0xd160e4de.
//
// Solidity: function encodeStorageError() view returns(bytes)
func (_StdError *StdErrorSession) EncodeStorageError() ([]byte, error) {
	return _StdError.Contract.EncodeStorageError(&_StdError.CallOpts)
}

// EncodeStorageError is a free data retrieval call binding the contract method 0xd160e4de.
//
// Solidity: function encodeStorageError() view returns(bytes)
func (_StdError *StdErrorCallerSession) EncodeStorageError() ([]byte, error) {
	return _StdError.Contract.EncodeStorageError(&_StdError.CallOpts)
}

// EnumConversionError is a free data retrieval call binding the contract method 0x1de45560.
//
// Solidity: function enumConversionError() view returns(bytes)
func (_StdError *StdErrorCaller) EnumConversionError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "enumConversionError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EnumConversionError is a free data retrieval call binding the contract method 0x1de45560.
//
// Solidity: function enumConversionError() view returns(bytes)
func (_StdError *StdErrorSession) EnumConversionError() ([]byte, error) {
	return _StdError.Contract.EnumConversionError(&_StdError.CallOpts)
}

// EnumConversionError is a free data retrieval call binding the contract method 0x1de45560.
//
// Solidity: function enumConversionError() view returns(bytes)
func (_StdError *StdErrorCallerSession) EnumConversionError() ([]byte, error) {
	return _StdError.Contract.EnumConversionError(&_StdError.CallOpts)
}

// IndexOOBError is a free data retrieval call binding the contract method 0x05ee8612.
//
// Solidity: function indexOOBError() view returns(bytes)
func (_StdError *StdErrorCaller) IndexOOBError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "indexOOBError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// IndexOOBError is a free data retrieval call binding the contract method 0x05ee8612.
//
// Solidity: function indexOOBError() view returns(bytes)
func (_StdError *StdErrorSession) IndexOOBError() ([]byte, error) {
	return _StdError.Contract.IndexOOBError(&_StdError.CallOpts)
}

// IndexOOBError is a free data retrieval call binding the contract method 0x05ee8612.
//
// Solidity: function indexOOBError() view returns(bytes)
func (_StdError *StdErrorCallerSession) IndexOOBError() ([]byte, error) {
	return _StdError.Contract.IndexOOBError(&_StdError.CallOpts)
}

// MemOverflowError is a free data retrieval call binding the contract method 0x986c5f68.
//
// Solidity: function memOverflowError() view returns(bytes)
func (_StdError *StdErrorCaller) MemOverflowError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "memOverflowError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MemOverflowError is a free data retrieval call binding the contract method 0x986c5f68.
//
// Solidity: function memOverflowError() view returns(bytes)
func (_StdError *StdErrorSession) MemOverflowError() ([]byte, error) {
	return _StdError.Contract.MemOverflowError(&_StdError.CallOpts)
}

// MemOverflowError is a free data retrieval call binding the contract method 0x986c5f68.
//
// Solidity: function memOverflowError() view returns(bytes)
func (_StdError *StdErrorCallerSession) MemOverflowError() ([]byte, error) {
	return _StdError.Contract.MemOverflowError(&_StdError.CallOpts)
}

// PopError is a free data retrieval call binding the contract method 0xb22dc54d.
//
// Solidity: function popError() view returns(bytes)
func (_StdError *StdErrorCaller) PopError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "popError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PopError is a free data retrieval call binding the contract method 0xb22dc54d.
//
// Solidity: function popError() view returns(bytes)
func (_StdError *StdErrorSession) PopError() ([]byte, error) {
	return _StdError.Contract.PopError(&_StdError.CallOpts)
}

// PopError is a free data retrieval call binding the contract method 0xb22dc54d.
//
// Solidity: function popError() view returns(bytes)
func (_StdError *StdErrorCallerSession) PopError() ([]byte, error) {
	return _StdError.Contract.PopError(&_StdError.CallOpts)
}

// ZeroVarError is a free data retrieval call binding the contract method 0xb67689da.
//
// Solidity: function zeroVarError() view returns(bytes)
func (_StdError *StdErrorCaller) ZeroVarError(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StdError.contract.Call(opts, &out, "zeroVarError")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ZeroVarError is a free data retrieval call binding the contract method 0xb67689da.
//
// Solidity: function zeroVarError() view returns(bytes)
func (_StdError *StdErrorSession) ZeroVarError() ([]byte, error) {
	return _StdError.Contract.ZeroVarError(&_StdError.CallOpts)
}

// ZeroVarError is a free data retrieval call binding the contract method 0xb67689da.
//
// Solidity: function zeroVarError() view returns(bytes)
func (_StdError *StdErrorCallerSession) ZeroVarError() ([]byte, error) {
	return _StdError.Contract.ZeroVarError(&_StdError.CallOpts)
}

// StdJsonMetaData contains all meta data concerning the StdJson contract.
var StdJsonMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f8eb47d99b5437dc046e51b68a6fe84203521029033fe9a9c26e35bf091878f64736f6c63430008180033",
}

// StdJsonABI is the input ABI used to generate the binding from.
// Deprecated: Use StdJsonMetaData.ABI instead.
var StdJsonABI = StdJsonMetaData.ABI

// StdJsonBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdJsonMetaData.Bin instead.
var StdJsonBin = StdJsonMetaData.Bin

// DeployStdJson deploys a new Ethereum contract, binding an instance of StdJson to it.
func DeployStdJson(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdJson, error) {
	parsed, err := StdJsonMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdJsonBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdJson{StdJsonCaller: StdJsonCaller{contract: contract}, StdJsonTransactor: StdJsonTransactor{contract: contract}, StdJsonFilterer: StdJsonFilterer{contract: contract}}, nil
}

// StdJson is an auto generated Go binding around an Ethereum contract.
type StdJson struct {
	StdJsonCaller     // Read-only binding to the contract
	StdJsonTransactor // Write-only binding to the contract
	StdJsonFilterer   // Log filterer for contract events
}

// StdJsonCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdJsonCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdJsonTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdJsonTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdJsonFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdJsonFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdJsonSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdJsonSession struct {
	Contract     *StdJson          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdJsonCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdJsonCallerSession struct {
	Contract *StdJsonCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StdJsonTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdJsonTransactorSession struct {
	Contract     *StdJsonTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StdJsonRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdJsonRaw struct {
	Contract *StdJson // Generic contract binding to access the raw methods on
}

// StdJsonCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdJsonCallerRaw struct {
	Contract *StdJsonCaller // Generic read-only contract binding to access the raw methods on
}

// StdJsonTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdJsonTransactorRaw struct {
	Contract *StdJsonTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdJson creates a new instance of StdJson, bound to a specific deployed contract.
func NewStdJson(address common.Address, backend bind.ContractBackend) (*StdJson, error) {
	contract, err := bindStdJson(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdJson{StdJsonCaller: StdJsonCaller{contract: contract}, StdJsonTransactor: StdJsonTransactor{contract: contract}, StdJsonFilterer: StdJsonFilterer{contract: contract}}, nil
}

// NewStdJsonCaller creates a new read-only instance of StdJson, bound to a specific deployed contract.
func NewStdJsonCaller(address common.Address, caller bind.ContractCaller) (*StdJsonCaller, error) {
	contract, err := bindStdJson(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdJsonCaller{contract: contract}, nil
}

// NewStdJsonTransactor creates a new write-only instance of StdJson, bound to a specific deployed contract.
func NewStdJsonTransactor(address common.Address, transactor bind.ContractTransactor) (*StdJsonTransactor, error) {
	contract, err := bindStdJson(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdJsonTransactor{contract: contract}, nil
}

// NewStdJsonFilterer creates a new log filterer instance of StdJson, bound to a specific deployed contract.
func NewStdJsonFilterer(address common.Address, filterer bind.ContractFilterer) (*StdJsonFilterer, error) {
	contract, err := bindStdJson(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdJsonFilterer{contract: contract}, nil
}

// bindStdJson binds a generic wrapper to an already deployed contract.
func bindStdJson(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdJsonMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdJson *StdJsonRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdJson.Contract.StdJsonCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdJson *StdJsonRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdJson.Contract.StdJsonTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdJson *StdJsonRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdJson.Contract.StdJsonTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdJson *StdJsonCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdJson.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdJson *StdJsonTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdJson.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdJson *StdJsonTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdJson.Contract.contract.Transact(opts, method, params...)
}

// StdMathMetaData contains all meta data concerning the StdMath contract.
var StdMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dc32edff3c298cdda3947e71b005f6482e6f1ecb1f1bd89b22046196d8adb1564736f6c63430008180033",
}

// StdMathABI is the input ABI used to generate the binding from.
// Deprecated: Use StdMathMetaData.ABI instead.
var StdMathABI = StdMathMetaData.ABI

// StdMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdMathMetaData.Bin instead.
var StdMathBin = StdMathMetaData.Bin

// DeployStdMath deploys a new Ethereum contract, binding an instance of StdMath to it.
func DeployStdMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdMath, error) {
	parsed, err := StdMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdMath{StdMathCaller: StdMathCaller{contract: contract}, StdMathTransactor: StdMathTransactor{contract: contract}, StdMathFilterer: StdMathFilterer{contract: contract}}, nil
}

// StdMath is an auto generated Go binding around an Ethereum contract.
type StdMath struct {
	StdMathCaller     // Read-only binding to the contract
	StdMathTransactor // Write-only binding to the contract
	StdMathFilterer   // Log filterer for contract events
}

// StdMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdMathSession struct {
	Contract     *StdMath          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdMathCallerSession struct {
	Contract *StdMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StdMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdMathTransactorSession struct {
	Contract     *StdMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StdMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdMathRaw struct {
	Contract *StdMath // Generic contract binding to access the raw methods on
}

// StdMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdMathCallerRaw struct {
	Contract *StdMathCaller // Generic read-only contract binding to access the raw methods on
}

// StdMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdMathTransactorRaw struct {
	Contract *StdMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdMath creates a new instance of StdMath, bound to a specific deployed contract.
func NewStdMath(address common.Address, backend bind.ContractBackend) (*StdMath, error) {
	contract, err := bindStdMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdMath{StdMathCaller: StdMathCaller{contract: contract}, StdMathTransactor: StdMathTransactor{contract: contract}, StdMathFilterer: StdMathFilterer{contract: contract}}, nil
}

// NewStdMathCaller creates a new read-only instance of StdMath, bound to a specific deployed contract.
func NewStdMathCaller(address common.Address, caller bind.ContractCaller) (*StdMathCaller, error) {
	contract, err := bindStdMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdMathCaller{contract: contract}, nil
}

// NewStdMathTransactor creates a new write-only instance of StdMath, bound to a specific deployed contract.
func NewStdMathTransactor(address common.Address, transactor bind.ContractTransactor) (*StdMathTransactor, error) {
	contract, err := bindStdMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdMathTransactor{contract: contract}, nil
}

// NewStdMathFilterer creates a new log filterer instance of StdMath, bound to a specific deployed contract.
func NewStdMathFilterer(address common.Address, filterer bind.ContractFilterer) (*StdMathFilterer, error) {
	contract, err := bindStdMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdMathFilterer{contract: contract}, nil
}

// bindStdMath binds a generic wrapper to an already deployed contract.
func bindStdMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdMath *StdMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdMath.Contract.StdMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdMath *StdMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdMath.Contract.StdMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdMath *StdMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdMath.Contract.StdMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdMath *StdMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdMath *StdMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdMath *StdMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdMath.Contract.contract.Transact(opts, method, params...)
}

// StdStorageMetaData contains all meta data concerning the StdStorage contract.
var StdStorageMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220663dfd9a4231f70fbda6b92707744045f8728ccbdf39cdf952b728a227ce11e864736f6c63430008180033",
}

// StdStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use StdStorageMetaData.ABI instead.
var StdStorageABI = StdStorageMetaData.ABI

// StdStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdStorageMetaData.Bin instead.
var StdStorageBin = StdStorageMetaData.Bin

// DeployStdStorage deploys a new Ethereum contract, binding an instance of StdStorage to it.
func DeployStdStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdStorage, error) {
	parsed, err := StdStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdStorage{StdStorageCaller: StdStorageCaller{contract: contract}, StdStorageTransactor: StdStorageTransactor{contract: contract}, StdStorageFilterer: StdStorageFilterer{contract: contract}}, nil
}

// StdStorage is an auto generated Go binding around an Ethereum contract.
type StdStorage struct {
	StdStorageCaller     // Read-only binding to the contract
	StdStorageTransactor // Write-only binding to the contract
	StdStorageFilterer   // Log filterer for contract events
}

// StdStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdStorageSession struct {
	Contract     *StdStorage       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdStorageCallerSession struct {
	Contract *StdStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// StdStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdStorageTransactorSession struct {
	Contract     *StdStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// StdStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdStorageRaw struct {
	Contract *StdStorage // Generic contract binding to access the raw methods on
}

// StdStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdStorageCallerRaw struct {
	Contract *StdStorageCaller // Generic read-only contract binding to access the raw methods on
}

// StdStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdStorageTransactorRaw struct {
	Contract *StdStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdStorage creates a new instance of StdStorage, bound to a specific deployed contract.
func NewStdStorage(address common.Address, backend bind.ContractBackend) (*StdStorage, error) {
	contract, err := bindStdStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdStorage{StdStorageCaller: StdStorageCaller{contract: contract}, StdStorageTransactor: StdStorageTransactor{contract: contract}, StdStorageFilterer: StdStorageFilterer{contract: contract}}, nil
}

// NewStdStorageCaller creates a new read-only instance of StdStorage, bound to a specific deployed contract.
func NewStdStorageCaller(address common.Address, caller bind.ContractCaller) (*StdStorageCaller, error) {
	contract, err := bindStdStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdStorageCaller{contract: contract}, nil
}

// NewStdStorageTransactor creates a new write-only instance of StdStorage, bound to a specific deployed contract.
func NewStdStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*StdStorageTransactor, error) {
	contract, err := bindStdStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdStorageTransactor{contract: contract}, nil
}

// NewStdStorageFilterer creates a new log filterer instance of StdStorage, bound to a specific deployed contract.
func NewStdStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*StdStorageFilterer, error) {
	contract, err := bindStdStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdStorageFilterer{contract: contract}, nil
}

// bindStdStorage binds a generic wrapper to an already deployed contract.
func bindStdStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStorage *StdStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStorage.Contract.StdStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStorage *StdStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStorage.Contract.StdStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStorage *StdStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStorage.Contract.StdStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStorage *StdStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStorage *StdStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStorage *StdStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStorage.Contract.contract.Transact(opts, method, params...)
}

// StdStorageSafeMetaData contains all meta data concerning the StdStorageSafe contract.
var StdStorageSafeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fsig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keysHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"SlotFound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"WARNING_UninitedSlot\",\"type\":\"event\"}]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087d8b7627d94f658b2238b0d255cb0ac2202b1c1f3edd2cfa415696c0c2a8c4f64736f6c63430008180033",
}

// StdStorageSafeABI is the input ABI used to generate the binding from.
// Deprecated: Use StdStorageSafeMetaData.ABI instead.
var StdStorageSafeABI = StdStorageSafeMetaData.ABI

// StdStorageSafeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdStorageSafeMetaData.Bin instead.
var StdStorageSafeBin = StdStorageSafeMetaData.Bin

// DeployStdStorageSafe deploys a new Ethereum contract, binding an instance of StdStorageSafe to it.
func DeployStdStorageSafe(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdStorageSafe, error) {
	parsed, err := StdStorageSafeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdStorageSafeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdStorageSafe{StdStorageSafeCaller: StdStorageSafeCaller{contract: contract}, StdStorageSafeTransactor: StdStorageSafeTransactor{contract: contract}, StdStorageSafeFilterer: StdStorageSafeFilterer{contract: contract}}, nil
}

// StdStorageSafe is an auto generated Go binding around an Ethereum contract.
type StdStorageSafe struct {
	StdStorageSafeCaller     // Read-only binding to the contract
	StdStorageSafeTransactor // Write-only binding to the contract
	StdStorageSafeFilterer   // Log filterer for contract events
}

// StdStorageSafeCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdStorageSafeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageSafeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdStorageSafeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageSafeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdStorageSafeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdStorageSafeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdStorageSafeSession struct {
	Contract     *StdStorageSafe   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdStorageSafeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdStorageSafeCallerSession struct {
	Contract *StdStorageSafeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StdStorageSafeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdStorageSafeTransactorSession struct {
	Contract     *StdStorageSafeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StdStorageSafeRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdStorageSafeRaw struct {
	Contract *StdStorageSafe // Generic contract binding to access the raw methods on
}

// StdStorageSafeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdStorageSafeCallerRaw struct {
	Contract *StdStorageSafeCaller // Generic read-only contract binding to access the raw methods on
}

// StdStorageSafeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdStorageSafeTransactorRaw struct {
	Contract *StdStorageSafeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdStorageSafe creates a new instance of StdStorageSafe, bound to a specific deployed contract.
func NewStdStorageSafe(address common.Address, backend bind.ContractBackend) (*StdStorageSafe, error) {
	contract, err := bindStdStorageSafe(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdStorageSafe{StdStorageSafeCaller: StdStorageSafeCaller{contract: contract}, StdStorageSafeTransactor: StdStorageSafeTransactor{contract: contract}, StdStorageSafeFilterer: StdStorageSafeFilterer{contract: contract}}, nil
}

// NewStdStorageSafeCaller creates a new read-only instance of StdStorageSafe, bound to a specific deployed contract.
func NewStdStorageSafeCaller(address common.Address, caller bind.ContractCaller) (*StdStorageSafeCaller, error) {
	contract, err := bindStdStorageSafe(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdStorageSafeCaller{contract: contract}, nil
}

// NewStdStorageSafeTransactor creates a new write-only instance of StdStorageSafe, bound to a specific deployed contract.
func NewStdStorageSafeTransactor(address common.Address, transactor bind.ContractTransactor) (*StdStorageSafeTransactor, error) {
	contract, err := bindStdStorageSafe(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdStorageSafeTransactor{contract: contract}, nil
}

// NewStdStorageSafeFilterer creates a new log filterer instance of StdStorageSafe, bound to a specific deployed contract.
func NewStdStorageSafeFilterer(address common.Address, filterer bind.ContractFilterer) (*StdStorageSafeFilterer, error) {
	contract, err := bindStdStorageSafe(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdStorageSafeFilterer{contract: contract}, nil
}

// bindStdStorageSafe binds a generic wrapper to an already deployed contract.
func bindStdStorageSafe(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdStorageSafeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStorageSafe *StdStorageSafeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStorageSafe.Contract.StdStorageSafeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStorageSafe *StdStorageSafeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStorageSafe.Contract.StdStorageSafeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStorageSafe *StdStorageSafeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStorageSafe.Contract.StdStorageSafeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdStorageSafe *StdStorageSafeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdStorageSafe.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdStorageSafe *StdStorageSafeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdStorageSafe.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdStorageSafe *StdStorageSafeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdStorageSafe.Contract.contract.Transact(opts, method, params...)
}

// StdStorageSafeSlotFoundIterator is returned from FilterSlotFound and is used to iterate over the raw logs and unpacked data for SlotFound events raised by the StdStorageSafe contract.
type StdStorageSafeSlotFoundIterator struct {
	Event *StdStorageSafeSlotFound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdStorageSafeSlotFoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdStorageSafeSlotFound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdStorageSafeSlotFound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdStorageSafeSlotFoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdStorageSafeSlotFoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdStorageSafeSlotFound represents a SlotFound event raised by the StdStorageSafe contract.
type StdStorageSafeSlotFound struct {
	Who      common.Address
	Fsig     [4]byte
	KeysHash [32]byte
	Slot     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSlotFound is a free log retrieval operation binding the contract event 0x9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed.
//
// Solidity: event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) FilterSlotFound(opts *bind.FilterOpts) (*StdStorageSafeSlotFoundIterator, error) {

	logs, sub, err := _StdStorageSafe.contract.FilterLogs(opts, "SlotFound")
	if err != nil {
		return nil, err
	}
	return &StdStorageSafeSlotFoundIterator{contract: _StdStorageSafe.contract, event: "SlotFound", logs: logs, sub: sub}, nil
}

// WatchSlotFound is a free log subscription operation binding the contract event 0x9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed.
//
// Solidity: event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) WatchSlotFound(opts *bind.WatchOpts, sink chan<- *StdStorageSafeSlotFound) (event.Subscription, error) {

	logs, sub, err := _StdStorageSafe.contract.WatchLogs(opts, "SlotFound")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdStorageSafeSlotFound)
				if err := _StdStorageSafe.contract.UnpackLog(event, "SlotFound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlotFound is a log parse operation binding the contract event 0x9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed.
//
// Solidity: event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) ParseSlotFound(log types.Log) (*StdStorageSafeSlotFound, error) {
	event := new(StdStorageSafeSlotFound)
	if err := _StdStorageSafe.contract.UnpackLog(event, "SlotFound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdStorageSafeWARNINGUninitedSlotIterator is returned from FilterWARNINGUninitedSlot and is used to iterate over the raw logs and unpacked data for WARNINGUninitedSlot events raised by the StdStorageSafe contract.
type StdStorageSafeWARNINGUninitedSlotIterator struct {
	Event *StdStorageSafeWARNINGUninitedSlot // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StdStorageSafeWARNINGUninitedSlotIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StdStorageSafeWARNINGUninitedSlot)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StdStorageSafeWARNINGUninitedSlot)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StdStorageSafeWARNINGUninitedSlotIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StdStorageSafeWARNINGUninitedSlotIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StdStorageSafeWARNINGUninitedSlot represents a WARNINGUninitedSlot event raised by the StdStorageSafe contract.
type StdStorageSafeWARNINGUninitedSlot struct {
	Who  common.Address
	Slot *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWARNINGUninitedSlot is a free log retrieval operation binding the contract event 0x080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5.
//
// Solidity: event WARNING_UninitedSlot(address who, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) FilterWARNINGUninitedSlot(opts *bind.FilterOpts) (*StdStorageSafeWARNINGUninitedSlotIterator, error) {

	logs, sub, err := _StdStorageSafe.contract.FilterLogs(opts, "WARNING_UninitedSlot")
	if err != nil {
		return nil, err
	}
	return &StdStorageSafeWARNINGUninitedSlotIterator{contract: _StdStorageSafe.contract, event: "WARNING_UninitedSlot", logs: logs, sub: sub}, nil
}

// WatchWARNINGUninitedSlot is a free log subscription operation binding the contract event 0x080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5.
//
// Solidity: event WARNING_UninitedSlot(address who, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) WatchWARNINGUninitedSlot(opts *bind.WatchOpts, sink chan<- *StdStorageSafeWARNINGUninitedSlot) (event.Subscription, error) {

	logs, sub, err := _StdStorageSafe.contract.WatchLogs(opts, "WARNING_UninitedSlot")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StdStorageSafeWARNINGUninitedSlot)
				if err := _StdStorageSafe.contract.UnpackLog(event, "WARNING_UninitedSlot", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWARNINGUninitedSlot is a log parse operation binding the contract event 0x080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5.
//
// Solidity: event WARNING_UninitedSlot(address who, uint256 slot)
func (_StdStorageSafe *StdStorageSafeFilterer) ParseWARNINGUninitedSlot(log types.Log) (*StdStorageSafeWARNINGUninitedSlot, error) {
	event := new(StdStorageSafeWARNINGUninitedSlot)
	if err := _StdStorageSafe.contract.UnpackLog(event, "WARNING_UninitedSlot", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StdTomlMetaData contains all meta data concerning the StdToml contract.
var StdTomlMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9d0b3a70c0829906790e7814afba347b4c25e8b1a289436fc96431bc1928f9264736f6c63430008180033",
}

// StdTomlABI is the input ABI used to generate the binding from.
// Deprecated: Use StdTomlMetaData.ABI instead.
var StdTomlABI = StdTomlMetaData.ABI

// StdTomlBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StdTomlMetaData.Bin instead.
var StdTomlBin = StdTomlMetaData.Bin

// DeployStdToml deploys a new Ethereum contract, binding an instance of StdToml to it.
func DeployStdToml(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StdToml, error) {
	parsed, err := StdTomlMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StdTomlBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StdToml{StdTomlCaller: StdTomlCaller{contract: contract}, StdTomlTransactor: StdTomlTransactor{contract: contract}, StdTomlFilterer: StdTomlFilterer{contract: contract}}, nil
}

// StdToml is an auto generated Go binding around an Ethereum contract.
type StdToml struct {
	StdTomlCaller     // Read-only binding to the contract
	StdTomlTransactor // Write-only binding to the contract
	StdTomlFilterer   // Log filterer for contract events
}

// StdTomlCaller is an auto generated read-only Go binding around an Ethereum contract.
type StdTomlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdTomlTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StdTomlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdTomlFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StdTomlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StdTomlSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StdTomlSession struct {
	Contract     *StdToml          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StdTomlCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StdTomlCallerSession struct {
	Contract *StdTomlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StdTomlTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StdTomlTransactorSession struct {
	Contract     *StdTomlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StdTomlRaw is an auto generated low-level Go binding around an Ethereum contract.
type StdTomlRaw struct {
	Contract *StdToml // Generic contract binding to access the raw methods on
}

// StdTomlCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StdTomlCallerRaw struct {
	Contract *StdTomlCaller // Generic read-only contract binding to access the raw methods on
}

// StdTomlTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StdTomlTransactorRaw struct {
	Contract *StdTomlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStdToml creates a new instance of StdToml, bound to a specific deployed contract.
func NewStdToml(address common.Address, backend bind.ContractBackend) (*StdToml, error) {
	contract, err := bindStdToml(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StdToml{StdTomlCaller: StdTomlCaller{contract: contract}, StdTomlTransactor: StdTomlTransactor{contract: contract}, StdTomlFilterer: StdTomlFilterer{contract: contract}}, nil
}

// NewStdTomlCaller creates a new read-only instance of StdToml, bound to a specific deployed contract.
func NewStdTomlCaller(address common.Address, caller bind.ContractCaller) (*StdTomlCaller, error) {
	contract, err := bindStdToml(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StdTomlCaller{contract: contract}, nil
}

// NewStdTomlTransactor creates a new write-only instance of StdToml, bound to a specific deployed contract.
func NewStdTomlTransactor(address common.Address, transactor bind.ContractTransactor) (*StdTomlTransactor, error) {
	contract, err := bindStdToml(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StdTomlTransactor{contract: contract}, nil
}

// NewStdTomlFilterer creates a new log filterer instance of StdToml, bound to a specific deployed contract.
func NewStdTomlFilterer(address common.Address, filterer bind.ContractFilterer) (*StdTomlFilterer, error) {
	contract, err := bindStdToml(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StdTomlFilterer{contract: contract}, nil
}

// bindStdToml binds a generic wrapper to an already deployed contract.
func bindStdToml(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StdTomlMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdToml *StdTomlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdToml.Contract.StdTomlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdToml *StdTomlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdToml.Contract.StdTomlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdToml *StdTomlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdToml.Contract.StdTomlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StdToml *StdTomlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StdToml.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StdToml *StdTomlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StdToml.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StdToml *StdTomlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StdToml.Contract.contract.Transact(opts, method, params...)
}

{"solidity/RecipientMock.sol:IZapRecipient":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// contracts/interfaces/IZapRecipient.sol\n\ninterface IZapRecipient {\n    function zap(address token, uint256 amount, bytes memory zapData) external payable returns (bytes4);\n}\n\n// test/mocks/RecipientMock.sol\n\n// solhint-disable no-empty-blocks\n/// @notice Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\ncontract RecipientMock is IZapRecipient {\n    /// @notice Mock needs to accept ETH\n    receive() external payable {}\n\n    /// @notice We include an empty \"test\" function so that this contract does not appear in the coverage report.\n    function testRecipientMock() external {}\n\n    /// @notice Minimal viable implementation of the zap hook.\n    function zap(address, uint256, bytes memory) external payable returns (bytes4) {\n        return IZapRecipient.zap.selector;\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"zapData","type":"bytes"}],"name":"zap","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"zapData\",\"type\":\"bytes\"}],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/RecipientMock.sol\":\"IZapRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/RecipientMock.sol\":{\"keccak256\":\"0x067e55596cf94a7c1153b5d38e7a3376d971c52b1e5401bb23be3715fbeea345\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65911afd25e38ae2d4d6d64f8c587874da876a2b76fcb36e79f89692478ddc2a\",\"dweb:/ipfs/QmYKnsF1Xoo63nbwCVKWEc3UrpZu8UBEUNeT4CCmxSqc6Y\"]}},\"version\":1}"},"hashes":{"zap(address,uint256,bytes)":"e85e13dd"}},"solidity/RecipientMock.sol:RecipientMock":{"code":"0x608060405234801561001057600080fd5b5061021b806100206000396000f3fe60806040526004361061002d5760003560e01c8063b239c09114610039578063e85e13dd1461004757600080fd5b3661003457005b600080fd5b34801561004557600080fd5b005b61007d6100553660046100e1565b7fe85e13dd000000000000000000000000000000000000000000000000000000009392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156100f657600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461011a57600080fd5b925060208401359150604084013567ffffffffffffffff8082111561013e57600080fd5b818601915086601f83011261015257600080fd5b813581811115610164576101646100b2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101aa576101aa6100b2565b816040528281528960208487010111156101c357600080fd5b826020860160208301376000602084830101528095505050505050925092509256fea26469706673582212206a5bc8b6ce97f6638e1238777c2558656268131efa652b2ea633dc4c60fe400a64736f6c63430008140033","runtime-code":"0x60806040526004361061002d5760003560e01c8063b239c09114610039578063e85e13dd1461004757600080fd5b3661003457005b600080fd5b34801561004557600080fd5b005b61007d6100553660046100e1565b7fe85e13dd000000000000000000000000000000000000000000000000000000009392505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156100f657600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461011a57600080fd5b925060208401359150604084013567ffffffffffffffff8082111561013e57600080fd5b818601915086601f83011261015257600080fd5b813581811115610164576101646100b2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101aa576101aa6100b2565b816040528281528960208487010111156101c357600080fd5b826020860160208301376000602084830101528095505050505050925092509256fea26469706673582212206a5bc8b6ce97f6638e1238777c2558656268131efa652b2ea633dc4c60fe400a64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// contracts/interfaces/IZapRecipient.sol\n\ninterface IZapRecipient {\n    function zap(address token, uint256 amount, bytes memory zapData) external payable returns (bytes4);\n}\n\n// test/mocks/RecipientMock.sol\n\n// solhint-disable no-empty-blocks\n/// @notice Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\ncontract RecipientMock is IZapRecipient {\n    /// @notice Mock needs to accept ETH\n    receive() external payable {}\n\n    /// @notice We include an empty \"test\" function so that this contract does not appear in the coverage report.\n    function testRecipientMock() external {}\n\n    /// @notice Minimal viable implementation of the zap hook.\n    function zap(address, uint256, bytes memory) external payable returns (bytes4) {\n        return IZapRecipient.zap.selector;\n    }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../ --evm-version=istanbul","srcMap":"377:476:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"377:476:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;613:40;;;;;;;;;;;722:129;;;;;;:::i;:::-;818:26;722:129;;;;;;;;;1627:66:1;1615:79;;;1597:98;;1585:2;1570:18;722:129:0;;;;;;;14:184:1;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:1245;289:6;297;305;358:2;346:9;337:7;333:23;329:32;326:52;;;374:1;371;364:12;326:52;413:9;400:23;463:42;456:5;452:54;445:5;442:65;432:93;;521:1;518;511:12;432:93;544:5;-1:-1:-1;596:2:1;581:18;;568:32;;-1:-1:-1;651:2:1;636:18;;623:32;674:18;704:14;;;701:34;;;731:1;728;721:12;701:34;769:6;758:9;754:22;744:32;;814:7;807:4;803:2;799:13;795:27;785:55;;836:1;833;826:12;785:55;872:2;859:16;894:2;890;887:10;884:36;;;900:18;;:::i;:::-;1034:2;1028:9;1096:4;1088:13;;939:66;1084:22;;;1108:2;1080:31;1076:40;1064:53;;;1132:18;;;1152:22;;;1129:46;1126:72;;;1178:18;;:::i;:::-;1218:10;1214:2;1207:22;1253:2;1245:6;1238:18;1293:7;1288:2;1283;1279;1275:11;1271:20;1268:33;1265:53;;;1314:1;1311;1304:12;1265:53;1370:2;1365;1361;1357:11;1352:2;1344:6;1340:15;1327:46;1415:1;1410:2;1405;1397:6;1393:15;1389:24;1382:35;1436:6;1426:16;;;;;;;203:1245;;;;;:::o","abiDefinition":[{"inputs":[],"name":"testRecipientMock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"zap","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"userDoc":{"kind":"user","methods":{"testRecipientMock()":{"notice":"We include an empty \"test\" function so that this contract does not appear in the coverage report."},"zap(address,uint256,bytes)":{"notice":"Minimal viable implementation of the zap hook."}},"notice":"Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testRecipientMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"testRecipientMock()\":{\"notice\":\"We include an empty \\\"test\\\" function so that this contract does not appear in the coverage report.\"},\"zap(address,uint256,bytes)\":{\"notice\":\"Minimal viable implementation of the zap hook.\"}},\"notice\":\"Recipient mock for testing purposes. DO NOT USE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/RecipientMock.sol\":\"RecipientMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/RecipientMock.sol\":{\"keccak256\":\"0x067e55596cf94a7c1153b5d38e7a3376d971c52b1e5401bb23be3715fbeea345\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65911afd25e38ae2d4d6d64f8c587874da876a2b76fcb36e79f89692478ddc2a\",\"dweb:/ipfs/QmYKnsF1Xoo63nbwCVKWEc3UrpZu8UBEUNeT4CCmxSqc6Y\"]}},\"version\":1}"},"hashes":{"testRecipientMock()":"b239c091","zap(address,uint256,bytes)":"e85e13dd"}}}
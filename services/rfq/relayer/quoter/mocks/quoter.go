// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	reldb "github.com/synapsecns/sanguine/services/rfq/relayer/reldb"
)

// Quoter is an autogenerated mock type for the Quoter type
type Quoter struct {
	mock.Mock
}

// GetPrice provides a mock function with given fields: ctx, tokenName
func (_m *Quoter) GetPrice(ctx context.Context, tokenName string) (float64, error) {
	ret := _m.Called(ctx, tokenName)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, tokenName)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProfitable provides a mock function with given fields: ctx, quote
func (_m *Quoter) IsProfitable(ctx context.Context, quote reldb.QuoteRequest) (bool, error) {
	ret := _m.Called(ctx, quote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, reldb.QuoteRequest) bool); ok {
		r0 = rf(ctx, quote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, reldb.QuoteRequest) error); ok {
		r1 = rf(ctx, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldProcess provides a mock function with given fields: ctx, quote
func (_m *Quoter) ShouldProcess(ctx context.Context, quote reldb.QuoteRequest) (bool, error) {
	ret := _m.Called(ctx, quote)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, reldb.QuoteRequest) bool); ok {
		r0 = rf(ctx, quote)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, reldb.QuoteRequest) error); ok {
		r1 = rf(ctx, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAllQuotes provides a mock function with given fields: ctx
func (_m *Quoter) SubmitAllQuotes(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQuoter interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuoter creates a new instance of Quoter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuoter(t mockConstructorTestingTNewQuoter) *Quoter {
	mock := &Quoter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

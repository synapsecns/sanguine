// Quoter submits quotes to the RFQ API for which assets the relayer is willing to relay.
package quoter

import (
	"context"

	"github.com/synapsecns/sanguine/ethergo/signer/signer"
	rfqAPIClient "github.com/synapsecns/sanguine/services/rfq/api/client"
	"github.com/synapsecns/sanguine/services/rfq/api/db"
	"github.com/synapsecns/sanguine/services/rfq/relayer/inventory"
)

type Quoter interface {
	// SubmitQuote submits a quote to the RFQ API.
	SubmitQuote() error
	// Submit All Quotes submits all quotes to the RFQ API.
	SubmitAllQuotes() error
	// GetSelfQuotes gets relayer's live quote from the RFQ API.
	GetSelfQuotes() ([]*db.Quote, error)
}

type QuoterManager struct {
	// inventoryManager is used to get the relayer's inventory.
	inventoryManager *inventory.InventoryManager
	// rfqClient is used to communicate with the RFQ API.
	rfqClient rfqAPIClient.Client
	// relayerSigner is the signer used by the relayer to interact on chain
	relayerSigner signer.Signer
	// rfqAPIURL is the URL of the RFQ API.
	rfqAPIURL string
}

func NewQuoterManager(ctx context.Context, inventoryManager *inventory.InventoryManager, rfqAPIUrl string, relayerSigner signer.Signer) (*QuoterManager, error) {
	rfqAPIClient, err := rfqAPIClient.NewClient(rfqAPIUrl, relayerSigner)
	if err != nil {
		return nil, err
	}

	return &QuoterManager{
		inventoryManager: inventoryManager,
		rfqClient:        rfqAPIClient,
		relayerSigner:    relayerSigner,
	}, nil
}

func (m *QuoterManager) SubmitAllQuotes() error {
	// Get the relayer's inventory.
	inv, err := m.inventoryManager.GetCommitableBalances()
	if err != nil {
		return err
	}

	for chainID, addressMap := range inv {
		for address, balance := range addressMap {
			// Do something with chainID, address, and balance
		}
	}

	// this needs to be for looped

	// we need some type of matching function between origin chain assets and destination chain assets
	// this matters less for when it's initially deployed on two chains, or on two routes. This
	// effectively we need some type of JSON file that maps the assets between the routes.

	// Create a new quote.
	quote := rfqAPIClient.APIQuotePutRequest{
		// TODO: ID needs to be move to be autogenerated or what?
		ID:              1,
		OriginChainID:   "OriginChainID",
		OriginTokenAddr: "OriginTokenAddr",
		DestChainID:     "DestChainID",
		DestTokenAddr:   "DestTokenAddr",
		DestAmount:      "DestAmount",
		Price:           "1",
		MaxOriginAmount: "MaxOriginAmount",
	}

	err = m.rfqClient.PutQuote(&quote)
	if err != nil {
		return err
	}
	return nil

}

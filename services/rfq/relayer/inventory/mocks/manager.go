// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	inventory "github.com/synapsecns/sanguine/services/rfq/relayer/inventory"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// ApproveAllTokens provides a mock function with given fields: ctx
func (_m *Manager) ApproveAllTokens(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommittableBalance provides a mock function with given fields: ctx, chainID, token, options
func (_m *Manager) GetCommittableBalance(ctx context.Context, chainID int, token common.Address, options ...inventory.BalanceFetchArgOption) (*big.Int, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, chainID, token)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context, int, common.Address, ...inventory.BalanceFetchArgOption) *big.Int); ok {
		r0 = rf(ctx, chainID, token, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, common.Address, ...inventory.BalanceFetchArgOption) error); ok {
		r1 = rf(ctx, chainID, token, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommittableBalances provides a mock function with given fields: ctx, options
func (_m *Manager) GetCommittableBalances(ctx context.Context, options ...inventory.BalanceFetchArgOption) (map[int]map[common.Address]*big.Int, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[int]map[common.Address]*big.Int
	if rf, ok := ret.Get(0).(func(context.Context, ...inventory.BalanceFetchArgOption) map[int]map[common.Address]*big.Int); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]map[common.Address]*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...inventory.BalanceFetchArgOption) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSufficientGas provides a mock function with given fields: ctx, origin, dest
func (_m *Manager) HasSufficientGas(ctx context.Context, origin int, dest int) (bool, error) {
	ret := _m.Called(ctx, origin, dest)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, int) bool); ok {
		r0 = rf(ctx, origin, dest)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, origin, dest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rebalance provides a mock function with given fields: ctx, chainID, token
func (_m *Manager) Rebalance(ctx context.Context, chainID int, token common.Address) error {
	ret := _m.Called(ctx, chainID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, common.Address) error); ok {
		r0 = rf(ctx, chainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Manager) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

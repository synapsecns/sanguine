package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	dbModel "github.com/synapsecns/sanguine/services/sinner/db/model"
	"github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/model"
	resolvers "github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/resolver"
)

// MessageStatus is the resolver for the messageStatus field.
func (r *destinationInfoResolver) MessageStatus(ctx context.Context, obj *model.DestinationInfo) (*model.MessageStatus, error) {
	messageStatus, err := r.DB.RetrieveMessageStatus(ctx, *obj.MessageHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving message status: %w", err)
	}
	return &messageStatus, nil
}

// OriginInfo is the resolver for the originInfo field.
func (r *destinationInfoResolver) OriginInfo(ctx context.Context, obj *model.DestinationInfo) ([]*model.OriginInfo, error) {
	if obj.MessageHash == nil {
		return nil, fmt.Errorf("message hash must be provided")
	}
	filter := dbModel.OriginSent{MessageHash: *obj.MessageHash}
	originTxs, err := r.DB.RetrieveOriginSent(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
	}
	return dbToGraphqlModelOriginMultiple(originTxs), nil
}

// OriginInfo is the resolver for the originInfo field.
func (r *messageStatusResolver) OriginInfo(ctx context.Context, obj *model.MessageStatus) ([]*model.OriginInfo, error) {
	if obj.MessageHash == nil {
		return nil, fmt.Errorf("message hash must be provided")
	}
	filter := dbModel.OriginSent{MessageHash: *obj.MessageHash}
	originTxs, err := r.DB.RetrieveOriginSent(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
	}
	return dbToGraphqlModelOriginMultiple(originTxs), nil
}

// DestinationInfo is the resolver for the destinationInfo field.
func (r *messageStatusResolver) DestinationInfo(ctx context.Context, obj *model.MessageStatus) ([]*model.DestinationInfo, error) {
	if obj.MessageHash == nil {
		return nil, fmt.Errorf("message hash must be provided")
	}
	filter := dbModel.Executed{MessageHash: *obj.MessageHash}
	executedTxs, err := r.DB.RetrieveExecuted(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving destination info: %w", err)
	}
	return dbToGraphqlModelDestinationMultiple(executedTxs), nil
}

// MessageStatus is the resolver for the messageStatus field.
func (r *originInfoResolver) MessageStatus(ctx context.Context, obj *model.OriginInfo) (*model.MessageStatus, error) {
	messageStatus, err := r.DB.RetrieveMessageStatus(ctx, *obj.MessageHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving message status: %w", err)
	}
	return &messageStatus, nil
}

// DestinationInfo is the resolver for the destinationInfo field.
func (r *originInfoResolver) DestinationInfo(ctx context.Context, obj *model.OriginInfo) ([]*model.DestinationInfo, error) {
	if obj.MessageHash == nil {
		return nil, fmt.Errorf("message hash must be provided")
	}
	filter := dbModel.Executed{MessageHash: *obj.MessageHash}
	executedTxs, err := r.DB.RetrieveExecuted(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving destination info: %w", err)
	}
	return dbToGraphqlModelDestinationMultiple(executedTxs), nil
}

// DestinationInfo returns resolvers.DestinationInfoResolver implementation.
func (r *Resolver) DestinationInfo() resolvers.DestinationInfoResolver {
	return &destinationInfoResolver{r}
}

// MessageStatus returns resolvers.MessageStatusResolver implementation.
func (r *Resolver) MessageStatus() resolvers.MessageStatusResolver { return &messageStatusResolver{r} }

// OriginInfo returns resolvers.OriginInfoResolver implementation.
func (r *Resolver) OriginInfo() resolvers.OriginInfoResolver { return &originInfoResolver{r} }

type destinationInfoResolver struct{ *Resolver }
type messageStatusResolver struct{ *Resolver }
type originInfoResolver struct{ *Resolver }

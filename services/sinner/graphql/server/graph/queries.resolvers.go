package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/model"
	resolvers "github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/resolver"
)

// GetMessageStatus is the resolver for the getMessageStatus field.
func (r *queryResolver) GetMessageStatus(ctx context.Context, messageHash string) (*model.MessageStatus, error) {
	messageStatus, err := r.DB.RetrieveMessageStatus(ctx, messageHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving message status: %w", err)
	}

	return &messageStatus, nil
}

// GetOriginInfo is the resolver for the getOriginInfo field.
func (r *queryResolver) GetOriginInfo(ctx context.Context, messageHash string) (*model.OriginInfo, error) {
	originSent, err := r.DB.RetrieveOriginSent(ctx, messageHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
	}

	return dbToGraphqlModelOrigin(originSent), nil
}

// GetDestinationInfo is the resolver for the getDestinationInfo field.
func (r *queryResolver) GetDestinationInfo(ctx context.Context, messageHash string) (*model.DestinationInfo, error) {
	// Call the database function to retrieve the executed data
	executed, err := r.DB.RetrieveExecuted(ctx, messageHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving destination info: %w", err)
	}
	return dbToGraphqlModelDestination(executed), nil
}

// GetOriginInfos is the resolver for the getOriginInfos field.
func (r *queryResolver) GetOriginInfos(ctx context.Context, txHash string, chainID int) ([]*model.OriginInfo, error) {
	originSents, err := r.DB.RetrieveOriginSents(ctx, uint32(chainID), txHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
	}
	var output []*model.OriginInfo
	for _, origin := range originSents {
		output = append(output, dbToGraphqlModelOrigin(origin))
	}
	return output, nil
}

// GetDestinationInfos is the resolver for the getDestinationInfos field.
func (r *queryResolver) GetDestinationInfos(ctx context.Context, txHash string, chainID int) ([]*model.DestinationInfo, error) {
	// Call the database function to retrieve the executed data
	executeds, err := r.DB.RetrieveExecuteds(ctx, uint32(chainID), txHash)
	if err != nil {
		return nil, fmt.Errorf("error retrieving destination info: %w", err)
	}
	var output []*model.DestinationInfo
	for _, executed := range executeds {
		output = append(output, dbToGraphqlModelDestination(executed))
	}

	return output, nil
}

// Query returns resolvers.QueryResolver implementation.
func (r *Resolver) Query() resolvers.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

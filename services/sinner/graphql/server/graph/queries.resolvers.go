package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	dbModel "github.com/synapsecns/sanguine/services/sinner/db/model"
	"github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/model"
	resolvers "github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/resolver"
)

// GetMessageStatus is the resolver for the getMessageStatus field.
func (r *queryResolver) GetMessageStatus(ctx context.Context, messageHash *string, originChainID *int, originTxHash *string) (*model.MessageStatus, error) {
	if messageHash == nil && originChainID == nil && originTxHash == nil {
		return nil, fmt.Errorf("at least one parameter must be provided")
	}

	if messageHash != nil {
		messageStatus, err := r.DB.RetrieveMessageStatus(ctx, *messageHash)
		if err != nil {
			return nil, fmt.Errorf("error retrieving message status: %w", err)
		}
		return &messageStatus, nil
	} else if originChainID != nil && originTxHash != nil {
		// Get the message hash from the origin chain ID and origin tx hash
		filter := dbModel.OriginSent{
			ChainID: ifNilUint32(originChainID),
			TxHash:  ifNilString(originTxHash),
		}
		originTxs, err := r.DB.RetrieveOriginSent(ctx, filter)
		if err != nil {
			return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
		}
		if len(originTxs) == 0 {
			return nil, fmt.Errorf("no origin sent data found for origin chain ID %d and origin tx hash %s", *originChainID, *originTxHash)
		}
		messageStatus, err := r.DB.RetrieveMessageStatus(ctx, originTxs[0].MessageHash)
		if err != nil {
			return nil, fmt.Errorf("error retrieving message status: %w", err)
		}
		return &messageStatus, nil

	}
	return nil, fmt.Errorf("if messageHash is not provided, both originChainID and originTxHash must be provided")
}

// GetOriginInfo is the resolver for the getOriginInfo field.
func (r *queryResolver) GetOriginInfo(ctx context.Context, messageHash *string, txHash *string, chainID *int) ([]*model.OriginInfo, error) {
	if messageHash == nil && txHash == nil && chainID == nil {
		return nil, fmt.Errorf("at least one parameter must be provided")
	}
	filter := dbModel.OriginSent{
		MessageHash: ifNilString(messageHash),
		TxHash:      ifNilString(txHash),
		ChainID:     ifNilUint32(chainID),
	}
	originTxs, err := r.DB.RetrieveOriginSent(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving origin sent data: %w", err)
	}
	return dbToGraphqlModelOriginMultiple(originTxs), nil
}

// GetDestinationInfo is the resolver for the getDestinationInfo field.
func (r *queryResolver) GetDestinationInfo(ctx context.Context, messageHash *string, txHash *string, chainID *int) ([]*model.DestinationInfo, error) {
	if messageHash == nil && txHash == nil && chainID == nil {
		return nil, fmt.Errorf("at least one parameter must be provided")
	}
	filter := dbModel.Executed{
		MessageHash: ifNilString(messageHash),
		TxHash:      ifNilString(txHash),
		ChainID:     ifNilUint32(chainID),
	}

	executedTxs, err := r.DB.RetrieveExecuted(ctx, filter)
	if err != nil {
		return nil, fmt.Errorf("error retrieving destination info: %w", err)
	}
	return dbToGraphqlModelDestinationMultiple(executedTxs), nil
}

// Query returns resolvers.QueryResolver implementation.
func (r *Resolver) Query() resolvers.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

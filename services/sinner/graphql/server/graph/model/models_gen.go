// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// DestinationInfo provides granular information on an execution event.
type DestinationInfo struct {
	ContractAddress *string        `json:"contractAddress,omitempty"`
	BlockNumber     *int           `json:"blockNumber,omitempty"`
	TxHash          *string        `json:"txHash,omitempty"`
	TxIndex         *int           `json:"txIndex,omitempty"`
	MessageHash     *string        `json:"messageHash,omitempty"`
	ChainID         *int           `json:"chainID,omitempty"`
	RemoteDomain    *int           `json:"remoteDomain,omitempty"`
	Success         *bool          `json:"success,omitempty"`
	MessageStatus   *MessageStatus `json:"messageStatus,omitempty"`
	OriginInfo      []*OriginInfo  `json:"originInfo,omitempty"`
}

// MessageStatus gives the status of a message.
type MessageStatus struct {
	MessageHash       *string               `json:"messageHash,omitempty"`
	LastSeen          *MessageStateLastSeen `json:"lastSeen,omitempty"`
	OriginTxHash      *string               `json:"originTxHash,omitempty"`
	DestinationTxHash *string               `json:"destinationTxHash,omitempty"`
	OriginInfo        []*OriginInfo         `json:"originInfo,omitempty"`
	DestinationInfo   []*DestinationInfo    `json:"destinationInfo,omitempty"`
}

// OriginInfo provides granular information on an origin sent event.
type OriginInfo struct {
	MessageHash        *string            `json:"messageHash,omitempty"`
	ContractAddress    *string            `json:"contractAddress,omitempty"`
	BlockNumber        *int               `json:"blockNumber,omitempty"`
	OriginTxHash       *string            `json:"originTxHash,omitempty"`
	Sender             *string            `json:"sender,omitempty"`
	Recipient          *string            `json:"recipient,omitempty"`
	OriginChainID      *int               `json:"originChainID,omitempty"`
	DestinationChainID *int               `json:"destinationChainID,omitempty"`
	Nonce              *int               `json:"nonce,omitempty"`
	Message            *string            `json:"message,omitempty"`
	OptimisticSeconds  *int               `json:"optimisticSeconds,omitempty"`
	MessageFlag        *int               `json:"messageFlag,omitempty"`
	SummitTip          *string            `json:"summitTip,omitempty"`
	AttestationTip     *string            `json:"attestationTip,omitempty"`
	ExecutionTip       *string            `json:"executionTip,omitempty"`
	DeliveryTip        *string            `json:"deliveryTip,omitempty"`
	Version            *int               `json:"version,omitempty"`
	GasLimit           *int               `json:"gasLimit,omitempty"`
	GasDrop            *string            `json:"gasDrop,omitempty"`
	MessageStatus      *MessageStatus     `json:"messageStatus,omitempty"`
	DestinationInfo    []*DestinationInfo `json:"destinationInfo,omitempty"`
}

// MessageState gives the current state of a message.
type MessageState string

const (
	MessageStatePending   MessageState = "PENDING"
	MessageStateCompleted MessageState = "COMPLETED"
)

var AllMessageState = []MessageState{
	MessageStatePending,
	MessageStateCompleted,
}

func (e MessageState) IsValid() bool {
	switch e {
	case MessageStatePending, MessageStateCompleted:
		return true
	}
	return false
}

func (e MessageState) String() string {
	return string(e)
}

func (e *MessageState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageState", str)
	}
	return nil
}

func (e MessageState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageStateLastSeen string

const (
	MessageStateLastSeenOrigin      MessageStateLastSeen = "ORIGIN"
	MessageStateLastSeenDestination MessageStateLastSeen = "DESTINATION"
	MessageStateLastSeenUnknown     MessageStateLastSeen = "UNKNOWN"
)

var AllMessageStateLastSeen = []MessageStateLastSeen{
	MessageStateLastSeenOrigin,
	MessageStateLastSeenDestination,
	MessageStateLastSeenUnknown,
}

func (e MessageStateLastSeen) IsValid() bool {
	switch e {
	case MessageStateLastSeenOrigin, MessageStateLastSeenDestination, MessageStateLastSeenUnknown:
		return true
	}
	return false
}

func (e MessageStateLastSeen) String() string {
	return string(e)
}

func (e *MessageStateLastSeen) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageStateLastSeen(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageStateLastSeen", str)
	}
	return nil
}

func (e MessageStateLastSeen) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

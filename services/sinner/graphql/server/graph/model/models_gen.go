// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type DestinationInfo struct {
	ContractAddress *string `json:"contractAddress,omitempty"`
	BlockNumber     *int    `json:"blockNumber,omitempty"`
	TxHash          *string `json:"txHash,omitempty"`
	TxIndex         *int    `json:"txIndex,omitempty"`
	MessageHash     *string `json:"messageHash,omitempty"`
	ChainID         *int    `json:"chainID,omitempty"`
	RemoteDomain    *int    `json:"remoteDomain,omitempty"`
	Success         *bool   `json:"success,omitempty"`
}

// MessageStatus gives the status of a message.
type MessageStatus struct {
	LastSeen          *MessageStateLastSeen `json:"lastSeen,omitempty"`
	OriginTxHash      *string               `json:"originTxHash,omitempty"`
	DestinationTxHash *string               `json:"destinationTxHash,omitempty"`
	MessageHash       *string               `json:"messageHash,omitempty"`
}

// MessageInfo provides granular information on a message.
type OriginInfo struct {
	MessageHash        *string `json:"messageHash,omitempty"`
	ContractAddress    *string `json:"contractAddress,omitempty"`
	BlockNumber        *int    `json:"blockNumber,omitempty"`
	OriginTxHash       *string `json:"originTxHash,omitempty"`
	Sender             *string `json:"sender,omitempty"`
	Recipient          *string `json:"recipient,omitempty"`
	OriginChainID      *string `json:"originChainID,omitempty"`
	DestinationChainID *string `json:"destinationChainID,omitempty"`
	Nonce              *int    `json:"nonce,omitempty"`
	Message            *string `json:"message,omitempty"`
	OptimisticSeconds  *string `json:"optimisticSeconds,omitempty"`
	MessageFlag        *string `json:"messageFlag,omitempty"`
	SummitTip          *string `json:"summitTip,omitempty"`
	AttestationTip     *string `json:"attestationTip,omitempty"`
	ExecutionTip       *string `json:"executionTip,omitempty"`
	DeliveryTip        *string `json:"deliveryTip,omitempty"`
	Version            *int    `json:"version,omitempty"`
	GasLimit           *int    `json:"gasLimit,omitempty"`
	GasDrop            *string `json:"gasDrop,omitempty"`
}

type MessageStateLastSeen string

const (
	MessageStateLastSeenOrigin      MessageStateLastSeen = "ORIGIN"
	MessageStateLastSeenDestination MessageStateLastSeen = "DESTINATION"
	MessageStateLastSeenUnknown     MessageStateLastSeen = "UNKNOWN"
)

var AllMessageStateLastSeen = []MessageStateLastSeen{
	MessageStateLastSeenOrigin,
	MessageStateLastSeenDestination,
	MessageStateLastSeenUnknown,
}

func (e MessageStateLastSeen) IsValid() bool {
	switch e {
	case MessageStateLastSeenOrigin, MessageStateLastSeenDestination, MessageStateLastSeenUnknown:
		return true
	}
	return false
}

func (e MessageStateLastSeen) String() string {
	return string(e)
}

func (e *MessageStateLastSeen) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageStateLastSeen(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageStateLastSeen", str)
	}
	return nil
}

func (e MessageStateLastSeen) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

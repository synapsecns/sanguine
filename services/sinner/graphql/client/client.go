// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	GetMessageStatus []*model.MessageStatus "json:\"getMessageStatus\" graphql:\"getMessageStatus\""
	GetMessageInfo   []*model.MessageInfo   "json:\"getMessageInfo\" graphql:\"getMessageInfo\""
}
type GetMessageStatus struct {
	Response []*struct {
		LastSeen          *model.MessageStateLastSeen "json:\"lastSeen\" graphql:\"lastSeen\""
		OriginTxHash      *string                     "json:\"originTxHash\" graphql:\"originTxHash\""
		DestinationTxHash *string                     "json:\"destinationTxHash\" graphql:\"destinationTxHash\""
		MessageHash       *string                     "json:\"messageHash\" graphql:\"messageHash\""
	} "json:\"response\" graphql:\"response\""
}
type GetMessageInfo struct {
	Response []*struct {
		MessageHash        *string "json:\"messageHash\" graphql:\"messageHash\""
		ContractAddress    *string "json:\"contractAddress\" graphql:\"contractAddress\""
		BlockNumber        *int    "json:\"blockNumber\" graphql:\"blockNumber\""
		OriginTxHash       *string "json:\"originTxHash\" graphql:\"originTxHash\""
		DestinationTxHash  *string "json:\"destinationTxHash\" graphql:\"destinationTxHash\""
		Sender             *string "json:\"sender\" graphql:\"sender\""
		Recipient          *string "json:\"recipient\" graphql:\"recipient\""
		OriginChainID      *string "json:\"originChainID\" graphql:\"originChainID\""
		DestinationChainID *string "json:\"destinationChainID\" graphql:\"destinationChainID\""
		Nonce              *int    "json:\"nonce\" graphql:\"nonce\""
		Message            *string "json:\"message\" graphql:\"message\""
		OptimisticSeconds  *string "json:\"optimisticSeconds\" graphql:\"optimisticSeconds\""
		MessageFlag        *string "json:\"messageFlag\" graphql:\"messageFlag\""
		SummitTip          *string "json:\"summitTip\" graphql:\"summitTip\""
		AttestationTip     *string "json:\"attestationTip\" graphql:\"attestationTip\""
		ExecutionTip       *string "json:\"executionTip\" graphql:\"executionTip\""
		DeliveryTip        *string "json:\"deliveryTip\" graphql:\"deliveryTip\""
		Version            *int    "json:\"version\" graphql:\"version\""
		GasLimit           *int    "json:\"gasLimit\" graphql:\"gasLimit\""
		GasDrop            *string "json:\"gasDrop\" graphql:\"gasDrop\""
	} "json:\"response\" graphql:\"response\""
}

const GetMessageStatusDocument = `query GetMessageStatus ($messageHash: String!) {
	response: getMessageStatus(messageHash: $messageHash) {
		lastSeen
		originTxHash
		destinationTxHash
		messageHash
	}
}
`

func (c *Client) GetMessageStatus(ctx context.Context, messageHash string, httpRequestOptions ...client.HTTPRequestOption) (*GetMessageStatus, error) {
	vars := map[string]interface{}{
		"messageHash": messageHash,
	}

	var res GetMessageStatus
	if err := c.Client.Post(ctx, "GetMessageStatus", GetMessageStatusDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetMessageInfoDocument = `query GetMessageInfo ($messageHash: String!) {
	response: getMessageInfo(messageHash: $messageHash) {
		messageHash
		contractAddress
		blockNumber
		originTxHash
		destinationTxHash
		sender
		recipient
		originChainID
		destinationChainID
		nonce
		message
		optimisticSeconds
		messageFlag
		summitTip
		attestationTip
		executionTip
		deliveryTip
		version
		gasLimit
		gasDrop
	}
}
`

func (c *Client) GetMessageInfo(ctx context.Context, messageHash string, httpRequestOptions ...client.HTTPRequestOption) (*GetMessageInfo, error) {
	vars := map[string]interface{}{
		"messageHash": messageHash,
	}

	var res GetMessageInfo
	if err := c.Client.Post(ctx, "GetMessageInfo", GetMessageInfoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

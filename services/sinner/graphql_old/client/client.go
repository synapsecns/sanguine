// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"github.com/synapsecns/sanguine/services/explorer/graphql/server/graph/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	BridgeTransactions     []*model.BridgeTransaction      "json:\"bridgeTransactions\" graphql_old:\"bridgeTransactions\""
	MessageBusTransactions []*model.MessageBusTransaction  "json:\"messageBusTransactions\" graphql_old:\"messageBusTransactions\""
	CountByChainID         []*model.TransactionCountResult "json:\"countByChainId\" graphql_old:\"countByChainId\""
	CountByTokenAddress    []*model.TokenCountResult       "json:\"countByTokenAddress\" graphql_old:\"countByTokenAddress\""
	AddressRanking         []*model.AddressRanking         "json:\"addressRanking\" graphql_old:\"addressRanking\""
	AmountStatistic        *model.ValueResult              "json:\"amountStatistic\" graphql_old:\"amountStatistic\""
	DailyStatisticsByChain []*model.DateResultByChain      "json:\"dailyStatisticsByChain\" graphql_old:\"dailyStatisticsByChain\""
	RankedChainIDsByVolume []*model.VolumeByChainID        "json:\"rankedChainIDsByVolume\" graphql_old:\"rankedChainIDsByVolume\""
	AddressData            *model.AddressData              "json:\"addressData\" graphql_old:\"addressData\""
	Leaderboard            []*model.Leaderboard            "json:\"leaderboard\" graphql_old:\"leaderboard\""
	GetOriginBridgeTx      *model.BridgeWatcherTx          "json:\"getOriginBridgeTx\" graphql_old:\"getOriginBridgeTx\""
	GetDestinationBridgeTx *model.BridgeWatcherTx          "json:\"getDestinationBridgeTx\" graphql_old:\"getDestinationBridgeTx\""
}
type GetBridgeTransactions struct {
	Response []*struct {
		FromInfo *struct {
			ChainID            *int     "json:\"chainID\" graphql_old:\"chainID\""
			DestinationChainID *int     "json:\"destinationChainID\" graphql_old:\"destinationChainID\""
			Address            *string  "json:\"address\" graphql_old:\"address\""
			TxnHash            *string  "json:\"txnHash\" graphql_old:\"txnHash\""
			Value              *string  "json:\"value\" graphql_old:\"value\""
			FormattedValue     *float64 "json:\"formattedValue\" graphql_old:\"formattedValue\""
			USDValue           *float64 "json:\"USDValue\" graphql_old:\"USDValue\""
			TokenAddress       *string  "json:\"tokenAddress\" graphql_old:\"tokenAddress\""
			TokenSymbol        *string  "json:\"tokenSymbol\" graphql_old:\"tokenSymbol\""
			BlockNumber        *int     "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time               *int     "json:\"time\" graphql_old:\"time\""
			FormattedTime      *string  "json:\"formattedTime\" graphql_old:\"formattedTime\""
		} "json:\"fromInfo\" graphql_old:\"fromInfo\""
		ToInfo *struct {
			ChainID        *int     "json:\"chainID\" graphql_old:\"chainID\""
			Address        *string  "json:\"address\" graphql_old:\"address\""
			TxnHash        *string  "json:\"txnHash\" graphql_old:\"txnHash\""
			Value          *string  "json:\"value\" graphql_old:\"value\""
			FormattedValue *float64 "json:\"formattedValue\" graphql_old:\"formattedValue\""
			USDValue       *float64 "json:\"USDValue\" graphql_old:\"USDValue\""
			TokenAddress   *string  "json:\"tokenAddress\" graphql_old:\"tokenAddress\""
			TokenSymbol    *string  "json:\"tokenSymbol\" graphql_old:\"tokenSymbol\""
			BlockNumber    *int     "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time           *int     "json:\"time\" graphql_old:\"time\""
			FormattedTime  *string  "json:\"formattedTime\" graphql_old:\"formattedTime\""
		} "json:\"toInfo\" graphql_old:\"toInfo\""
		Kappa       *string "json:\"kappa\" graphql_old:\"kappa\""
		Pending     *bool   "json:\"pending\" graphql_old:\"pending\""
		SwapSuccess *bool   "json:\"swapSuccess\" graphql_old:\"swapSuccess\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetCountByChainID struct {
	Response []*struct {
		Count   *int "json:\"count\" graphql_old:\"count\""
		ChainID *int "json:\"chainID\" graphql_old:\"chainID\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetCountByTokenAddress struct {
	Response []*struct {
		ChainID      *int    "json:\"chainID\" graphql_old:\"chainID\""
		TokenAddress *string "json:\"tokenAddress\" graphql_old:\"tokenAddress\""
		Count        *int    "json:\"count\" graphql_old:\"count\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetAddressRanking struct {
	Response []*struct {
		Address *string "json:\"address\" graphql_old:\"address\""
		Count   *int    "json:\"count\" graphql_old:\"count\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetRankedChainIDsByVolume struct {
	Response []*struct {
		ChainID *int     "json:\"chainID\" graphql_old:\"chainID\""
		Total   *float64 "json:\"total\" graphql_old:\"total\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetAmountStatistic struct {
	Response *struct {
		Value *string "json:\"value\" graphql_old:\"value\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetDailyStatisticsByChain struct {
	Response []*struct {
		Date      *string  "json:\"date\" graphql_old:\"date\""
		Ethereum  *float64 "json:\"ethereum\" graphql_old:\"ethereum\""
		Optimism  *float64 "json:\"optimism\" graphql_old:\"optimism\""
		Cronos    *float64 "json:\"cronos\" graphql_old:\"cronos\""
		Bsc       *float64 "json:\"bsc\" graphql_old:\"bsc\""
		Polygon   *float64 "json:\"polygon\" graphql_old:\"polygon\""
		Fantom    *float64 "json:\"fantom\" graphql_old:\"fantom\""
		Boba      *float64 "json:\"boba\" graphql_old:\"boba\""
		Metis     *float64 "json:\"metis\" graphql_old:\"metis\""
		Moonbeam  *float64 "json:\"moonbeam\" graphql_old:\"moonbeam\""
		Moonriver *float64 "json:\"moonriver\" graphql_old:\"moonriver\""
		Klaytn    *float64 "json:\"klaytn\" graphql_old:\"klaytn\""
		Arbitrum  *float64 "json:\"arbitrum\" graphql_old:\"arbitrum\""
		Avalanche *float64 "json:\"avalanche\" graphql_old:\"avalanche\""
		Dfk       *float64 "json:\"dfk\" graphql_old:\"dfk\""
		Aurora    *float64 "json:\"aurora\" graphql_old:\"aurora\""
		Harmony   *float64 "json:\"harmony\" graphql_old:\"harmony\""
		Canto     *float64 "json:\"canto\" graphql_old:\"canto\""
		Dogechain *float64 "json:\"dogechain\" graphql_old:\"dogechain\""
		Base      *float64 "json:\"base\" graphql_old:\"base\""
		Total     *float64 "json:\"total\" graphql_old:\"total\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetMessageBusTransactions struct {
	Response []*struct {
		FromInfo *struct {
			ChainID              *int    "json:\"chainID\" graphql_old:\"chainID\""
			ChainName            *string "json:\"chainName\" graphql_old:\"chainName\""
			DestinationChainID   *int    "json:\"destinationChainID\" graphql_old:\"destinationChainID\""
			DestinationChainName *string "json:\"destinationChainName\" graphql_old:\"destinationChainName\""
			ContractAddress      *string "json:\"contractAddress\" graphql_old:\"contractAddress\""
			TxnHash              *string "json:\"txnHash\" graphql_old:\"txnHash\""
			Message              *string "json:\"message\" graphql_old:\"message\""
			MessageType          *struct {
				TearType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					Amount    string "json:\"amount\" graphql_old:\"amount\""
				} "graphql_old:\"... on TearType\""
				HeroType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					HeroID    string "json:\"heroID\" graphql_old:\"heroID\""
				} "graphql_old:\"... on HeroType\""
				PetType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					PetID     string "json:\"petID\" graphql_old:\"petID\""
					Name      string "json:\"name\" graphql_old:\"name\""
				} "graphql_old:\"... on PetType\""
				UnknownType struct {
					Known bool "json:\"known\" graphql_old:\"known\""
				} "graphql_old:\"... on UnknownType\""
			} "json:\"messageType\" graphql_old:\"messageType\""
			BlockNumber   *int    "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time          *int    "json:\"time\" graphql_old:\"time\""
			FormattedTime *string "json:\"formattedTime\" graphql_old:\"formattedTime\""
		} "json:\"fromInfo\" graphql_old:\"fromInfo\""
		ToInfo *struct {
			ChainID         *int    "json:\"chainID\" graphql_old:\"chainID\""
			ChainName       *string "json:\"chainName\" graphql_old:\"chainName\""
			ContractAddress *string "json:\"contractAddress\" graphql_old:\"contractAddress\""
			TxnHash         *string "json:\"txnHash\" graphql_old:\"txnHash\""
			Message         *string "json:\"message\" graphql_old:\"message\""
			MessageType     *struct {
				TearType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					Amount    string "json:\"amount\" graphql_old:\"amount\""
				} "graphql_old:\"... on TearType\""
				HeroType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					HeroID    string "json:\"heroID\" graphql_old:\"heroID\""
				} "graphql_old:\"... on HeroType\""
				PetType struct {
					Recipient string "json:\"recipient\" graphql_old:\"recipient\""
					PetID     string "json:\"petID\" graphql_old:\"petID\""
					Name      string "json:\"name\" graphql_old:\"name\""
				} "graphql_old:\"... on PetType\""
				UnknownType struct {
					Known bool "json:\"known\" graphql_old:\"known\""
				} "graphql_old:\"... on UnknownType\""
			} "json:\"messageType\" graphql_old:\"messageType\""
			BlockNumber    *int    "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time           *int    "json:\"time\" graphql_old:\"time\""
			FormattedTime  *string "json:\"formattedTime\" graphql_old:\"formattedTime\""
			RevertedReason *string "json:\"revertedReason\" graphql_old:\"revertedReason\""
		} "json:\"toInfo\" graphql_old:\"toInfo\""
		MessageID *string "json:\"messageID\" graphql_old:\"messageID\""
		Pending   *bool   "json:\"pending\" graphql_old:\"pending\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetAddressData struct {
	Response *struct {
		BridgeVolume *float64 "json:\"bridgeVolume\" graphql_old:\"bridgeVolume\""
		BridgeFees   *float64 "json:\"bridgeFees\" graphql_old:\"bridgeFees\""
		BridgeTxs    *int     "json:\"bridgeTxs\" graphql_old:\"bridgeTxs\""
		SwapVolume   *float64 "json:\"swapVolume\" graphql_old:\"swapVolume\""
		SwapFees     *float64 "json:\"swapFees\" graphql_old:\"swapFees\""
		SwapTxs      *int     "json:\"swapTxs\" graphql_old:\"swapTxs\""
		Rank         *int     "json:\"rank\" graphql_old:\"rank\""
		EarliestTx   *int     "json:\"earliestTx\" graphql_old:\"earliestTx\""
		ChainRanking []*struct {
			ChainID   *int     "json:\"chainID\" graphql_old:\"chainID\""
			VolumeUsd *float64 "json:\"volumeUsd\" graphql_old:\"volumeUsd\""
			Rank      *int     "json:\"rank\" graphql_old:\"rank\""
		} "json:\"chainRanking\" graphql_old:\"chainRanking\""
		DailyData []*struct {
			Date  *string "json:\"date\" graphql_old:\"date\""
			Count *int    "json:\"count\" graphql_old:\"count\""
		} "json:\"dailyData\" graphql_old:\"dailyData\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetLeaderboard struct {
	Response []*struct {
		Address      *string  "json:\"address\" graphql_old:\"address\""
		VolumeUsd    *float64 "json:\"volumeUSD\" graphql_old:\"volumeUSD\""
		Fees         *float64 "json:\"fees\" graphql_old:\"fees\""
		Txs          *int     "json:\"txs\" graphql_old:\"txs\""
		Rank         *int     "json:\"rank\" graphql_old:\"rank\""
		AvgVolumeUsd *float64 "json:\"avgVolumeUSD\" graphql_old:\"avgVolumeUSD\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetOriginBridgeTx struct {
	Response *struct {
		BridgeTx *struct {
			ChainID            *int     "json:\"chainID\" graphql_old:\"chainID\""
			DestinationChainID *int     "json:\"destinationChainID\" graphql_old:\"destinationChainID\""
			Address            *string  "json:\"address\" graphql_old:\"address\""
			TxnHash            *string  "json:\"txnHash\" graphql_old:\"txnHash\""
			Value              *string  "json:\"value\" graphql_old:\"value\""
			FormattedValue     *float64 "json:\"formattedValue\" graphql_old:\"formattedValue\""
			USDValue           *float64 "json:\"USDValue\" graphql_old:\"USDValue\""
			TokenAddress       *string  "json:\"tokenAddress\" graphql_old:\"tokenAddress\""
			TokenSymbol        *string  "json:\"tokenSymbol\" graphql_old:\"tokenSymbol\""
			BlockNumber        *int     "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time               *int     "json:\"time\" graphql_old:\"time\""
			FormattedTime      *string  "json:\"formattedTime\" graphql_old:\"formattedTime\""
		} "json:\"bridgeTx\" graphql_old:\"bridgeTx\""
		Pending     *bool               "json:\"pending\" graphql_old:\"pending\""
		Type        *model.BridgeTxType "json:\"type\" graphql_old:\"type\""
		Kappa       *string             "json:\"kappa\" graphql_old:\"kappa\""
		KappaStatus *model.KappaStatus  "json:\"kappaStatus\" graphql_old:\"kappaStatus\""
	} "json:\"response\" graphql_old:\"response\""
}
type GetDestinationBridgeTx struct {
	Response *struct {
		BridgeTx *struct {
			ChainID            *int     "json:\"chainID\" graphql_old:\"chainID\""
			DestinationChainID *int     "json:\"destinationChainID\" graphql_old:\"destinationChainID\""
			Address            *string  "json:\"address\" graphql_old:\"address\""
			TxnHash            *string  "json:\"txnHash\" graphql_old:\"txnHash\""
			Value              *string  "json:\"value\" graphql_old:\"value\""
			FormattedValue     *float64 "json:\"formattedValue\" graphql_old:\"formattedValue\""
			USDValue           *float64 "json:\"USDValue\" graphql_old:\"USDValue\""
			TokenAddress       *string  "json:\"tokenAddress\" graphql_old:\"tokenAddress\""
			TokenSymbol        *string  "json:\"tokenSymbol\" graphql_old:\"tokenSymbol\""
			BlockNumber        *int     "json:\"blockNumber\" graphql_old:\"blockNumber\""
			Time               *int     "json:\"time\" graphql_old:\"time\""
			FormattedTime      *string  "json:\"formattedTime\" graphql_old:\"formattedTime\""
		} "json:\"bridgeTx\" graphql_old:\"bridgeTx\""
		Pending     *bool               "json:\"pending\" graphql_old:\"pending\""
		Type        *model.BridgeTxType "json:\"type\" graphql_old:\"type\""
		Kappa       *string             "json:\"kappa\" graphql_old:\"kappa\""
		KappaStatus *model.KappaStatus  "json:\"kappaStatus\" graphql_old:\"kappaStatus\""
	} "json:\"response\" graphql_old:\"response\""
}

const GetBridgeTransactionsDocument = `query GetBridgeTransactions ($chainIDTo: [Int], $chainIDFrom: [Int], $addressTo: String, $addressFrom: String, $maxAmount: Int, $minAmount: Int, $maxAmountUSD: Int, $minAmountUSD: Int, $startTime: Int, $endTime: Int, $txHash: String, $kappa: String, $pending: Boolean, $page: Int, $tokenAddressFrom: [String], $tokenAddressTo: [String], $useMv: Boolean) {
	response: bridgeTransactions(chainIDTo: $chainIDTo, chainIDFrom: $chainIDFrom, addressTo: $addressTo, addressFrom: $addressFrom, maxAmount: $maxAmount, minAmount: $minAmount, maxAmountUsd: $maxAmountUSD, minAmountUsd: $minAmountUSD, startTime: $startTime, endTime: $endTime, txnHash: $txHash, kappa: $kappa, pending: $pending, page: $page, tokenAddressTo: $tokenAddressTo, tokenAddressFrom: $tokenAddressFrom, useMv: $useMv) {
		fromInfo {
			chainID
			destinationChainID
			address
			txnHash
			value
			formattedValue
			USDValue
			tokenAddress
			tokenSymbol
			blockNumber
			time
			formattedTime
		}
		toInfo {
			chainID
			address
			txnHash
			value
			formattedValue
			USDValue
			tokenAddress
			tokenSymbol
			blockNumber
			time
			formattedTime
		}
		kappa
		pending
		swapSuccess
	}
}
`

func (c *Client) GetBridgeTransactions(ctx context.Context, chainIDTo []*int, chainIDFrom []*int, addressTo *string, addressFrom *string, maxAmount *int, minAmount *int, maxAmountUsd *int, minAmountUsd *int, startTime *int, endTime *int, txHash *string, kappa *string, pending *bool, page *int, tokenAddressFrom []*string, tokenAddressTo []*string, useMv *bool, httpRequestOptions ...client.HTTPRequestOption) (*GetBridgeTransactions, error) {
	vars := map[string]interface{}{
		"chainIDTo":        chainIDTo,
		"chainIDFrom":      chainIDFrom,
		"addressTo":        addressTo,
		"addressFrom":      addressFrom,
		"maxAmount":        maxAmount,
		"minAmount":        minAmount,
		"maxAmountUSD":     maxAmountUsd,
		"minAmountUSD":     minAmountUsd,
		"startTime":        startTime,
		"endTime":          endTime,
		"txHash":           txHash,
		"kappa":            kappa,
		"pending":          pending,
		"page":             page,
		"tokenAddressFrom": tokenAddressFrom,
		"tokenAddressTo":   tokenAddressTo,
		"useMv":            useMv,
	}

	var res GetBridgeTransactions
	if err := c.Client.Post(ctx, "GetBridgeTransactions", GetBridgeTransactionsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetCountByChainIDDocument = `query GetCountByChainId ($chainID: Int, $address: String, $direction: Direction, $hours: Int) {
	response: countByChainId(chainID: $chainID, address: $address, direction: $direction, hours: $hours) {
		count
		chainID
	}
}
`

func (c *Client) GetCountByChainID(ctx context.Context, chainID *int, address *string, direction *model.Direction, hours *int, httpRequestOptions ...client.HTTPRequestOption) (*GetCountByChainID, error) {
	vars := map[string]interface{}{
		"chainID":   chainID,
		"address":   address,
		"direction": direction,
		"hours":     hours,
	}

	var res GetCountByChainID
	if err := c.Client.Post(ctx, "GetCountByChainId", GetCountByChainIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetCountByTokenAddressDocument = `query GetCountByTokenAddress ($chainID: Int, $address: String, $direction: Direction, $hours: Int) {
	response: countByTokenAddress(chainID: $chainID, address: $address, direction: $direction, hours: $hours) {
		chainID
		tokenAddress
		count
	}
}
`

func (c *Client) GetCountByTokenAddress(ctx context.Context, chainID *int, address *string, direction *model.Direction, hours *int, httpRequestOptions ...client.HTTPRequestOption) (*GetCountByTokenAddress, error) {
	vars := map[string]interface{}{
		"chainID":   chainID,
		"address":   address,
		"direction": direction,
		"hours":     hours,
	}

	var res GetCountByTokenAddress
	if err := c.Client.Post(ctx, "GetCountByTokenAddress", GetCountByTokenAddressDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetAddressRankingDocument = `query GetAddressRanking ($hours: Int) {
	response: addressRanking(hours: $hours) {
		address
		count
	}
}
`

func (c *Client) GetAddressRanking(ctx context.Context, hours *int, httpRequestOptions ...client.HTTPRequestOption) (*GetAddressRanking, error) {
	vars := map[string]interface{}{
		"hours": hours,
	}

	var res GetAddressRanking
	if err := c.Client.Post(ctx, "GetAddressRanking", GetAddressRankingDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetRankedChainIDsByVolumeDocument = `query GetRankedChainIDsByVolume ($duration: Duration) {
	response: rankedChainIDsByVolume(duration: $duration) {
		chainID
		total
	}
}
`

func (c *Client) GetRankedChainIDsByVolume(ctx context.Context, duration *model.Duration, httpRequestOptions ...client.HTTPRequestOption) (*GetRankedChainIDsByVolume, error) {
	vars := map[string]interface{}{
		"duration": duration,
	}

	var res GetRankedChainIDsByVolume
	if err := c.Client.Post(ctx, "GetRankedChainIDsByVolume", GetRankedChainIDsByVolumeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetAmountStatisticDocument = `query GetAmountStatistic ($type: StatisticType!, $platform: Platform, $duration: Duration, $chainID: Int, $address: String, $tokenAddress: String, $useMv: Boolean) {
	response: amountStatistic(type: $type, duration: $duration, platform: $platform, chainID: $chainID, address: $address, tokenAddress: $tokenAddress, useMv: $useMv) {
		value
	}
}
`

func (c *Client) GetAmountStatistic(ctx context.Context, typeArg model.StatisticType, platform *model.Platform, duration *model.Duration, chainID *int, address *string, tokenAddress *string, useMv *bool, httpRequestOptions ...client.HTTPRequestOption) (*GetAmountStatistic, error) {
	vars := map[string]interface{}{
		"type":         typeArg,
		"platform":     platform,
		"duration":     duration,
		"chainID":      chainID,
		"address":      address,
		"tokenAddress": tokenAddress,
		"useMv":        useMv,
	}

	var res GetAmountStatistic
	if err := c.Client.Post(ctx, "GetAmountStatistic", GetAmountStatisticDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetDailyStatisticsByChainDocument = `query GetDailyStatisticsByChain ($chainID: Int, $type: DailyStatisticType, $duration: Duration, $platform: Platform, $useMv: Boolean) {
	response: dailyStatisticsByChain(chainID: $chainID, type: $type, duration: $duration, platform: $platform, useMv: $useMv) {
		date
		ethereum
		optimism
		cronos
		bsc
		polygon
		fantom
		boba
		metis
		moonbeam
		moonriver
		klaytn
		arbitrum
		avalanche
		dfk
		aurora
		harmony
		canto
		dogechain
		base
		total
	}
}
`

func (c *Client) GetDailyStatisticsByChain(ctx context.Context, chainID *int, typeArg *model.DailyStatisticType, duration *model.Duration, platform *model.Platform, useMv *bool, httpRequestOptions ...client.HTTPRequestOption) (*GetDailyStatisticsByChain, error) {
	vars := map[string]interface{}{
		"chainID":  chainID,
		"type":     typeArg,
		"duration": duration,
		"platform": platform,
		"useMv":    useMv,
	}

	var res GetDailyStatisticsByChain
	if err := c.Client.Post(ctx, "GetDailyStatisticsByChain", GetDailyStatisticsByChainDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetMessageBusTransactionsDocument = `query GetMessageBusTransactions ($chainID: [Int], $contractAddress: String, $startTime: Int, $endTime: Int, $txHash: String, $messageID: String, $pending: Boolean, $reverted: Boolean, $page: Int) {
	response: messageBusTransactions(chainID: $chainID, contractAddress: $contractAddress, startTime: $startTime, endTime: $endTime, txnHash: $txHash, messageID: $messageID, pending: $pending, reverted: $reverted, page: $page) {
		fromInfo {
			chainID
			chainName
			destinationChainID
			destinationChainName
			contractAddress
			txnHash
			message
			messageType {
				... on TearType {
					recipient
					amount
				}
				... on HeroType {
					recipient
					heroID
				}
				... on PetType {
					recipient
					petID
					name
				}
				... on UnknownType {
					known
				}
			}
			blockNumber
			time
			formattedTime
		}
		toInfo {
			chainID
			chainName
			contractAddress
			txnHash
			message
			messageType {
				... on TearType {
					recipient
					amount
				}
				... on HeroType {
					recipient
					heroID
				}
				... on PetType {
					recipient
					petID
					name
				}
				... on UnknownType {
					known
				}
			}
			blockNumber
			time
			formattedTime
			revertedReason
		}
		messageID
		pending
	}
}
`

func (c *Client) GetMessageBusTransactions(ctx context.Context, chainID []*int, contractAddress *string, startTime *int, endTime *int, txHash *string, messageID *string, pending *bool, reverted *bool, page *int, httpRequestOptions ...client.HTTPRequestOption) (*GetMessageBusTransactions, error) {
	vars := map[string]interface{}{
		"chainID":         chainID,
		"contractAddress": contractAddress,
		"startTime":       startTime,
		"endTime":         endTime,
		"txHash":          txHash,
		"messageID":       messageID,
		"pending":         pending,
		"reverted":        reverted,
		"page":            page,
	}

	var res GetMessageBusTransactions
	if err := c.Client.Post(ctx, "GetMessageBusTransactions", GetMessageBusTransactionsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetAddressDataDocument = `query GetAddressData ($address: String!) {
	response: addressData(address: $address) {
		bridgeVolume
		bridgeFees
		bridgeTxs
		swapVolume
		swapFees
		swapTxs
		rank
		earliestTx
		chainRanking {
			chainID
			volumeUsd
			rank
		}
		dailyData {
			date
			count
		}
	}
}
`

func (c *Client) GetAddressData(ctx context.Context, address string, httpRequestOptions ...client.HTTPRequestOption) (*GetAddressData, error) {
	vars := map[string]interface{}{
		"address": address,
	}

	var res GetAddressData
	if err := c.Client.Post(ctx, "GetAddressData", GetAddressDataDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetLeaderboardDocument = `query GetLeaderboard ($duration: Duration, $chainID: Int, $useMv: Boolean, $page: Int) {
	response: leaderboard(duration: $duration, chainID: $chainID, useMv: $useMv, page: $page) {
		address
		volumeUSD
		fees
		txs
		rank
		avgVolumeUSD
	}
}
`

func (c *Client) GetLeaderboard(ctx context.Context, duration *model.Duration, chainID *int, useMv *bool, page *int, httpRequestOptions ...client.HTTPRequestOption) (*GetLeaderboard, error) {
	vars := map[string]interface{}{
		"duration": duration,
		"chainID":  chainID,
		"useMv":    useMv,
		"page":     page,
	}

	var res GetLeaderboard
	if err := c.Client.Post(ctx, "GetLeaderboard", GetLeaderboardDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetOriginBridgeTxDocument = `query GetOriginBridgeTx ($chainID: Int!, $txnHash: String!, $bridgeType: BridgeType!) {
	response: getOriginBridgeTx(chainID: $chainID, txnHash: $txnHash, bridgeType: $bridgeType) {
		bridgeTx {
			chainID
			destinationChainID
			address
			txnHash
			value
			formattedValue
			USDValue
			tokenAddress
			tokenSymbol
			blockNumber
			time
			formattedTime
		}
		pending
		type
		kappa
		kappaStatus
	}
}
`

func (c *Client) GetOriginBridgeTx(ctx context.Context, chainID int, txnHash string, bridgeType model.BridgeType, httpRequestOptions ...client.HTTPRequestOption) (*GetOriginBridgeTx, error) {
	vars := map[string]interface{}{
		"chainID":    chainID,
		"txnHash":    txnHash,
		"bridgeType": bridgeType,
	}

	var res GetOriginBridgeTx
	if err := c.Client.Post(ctx, "GetOriginBridgeTx", GetOriginBridgeTxDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetDestinationBridgeTxDocument = `query GetDestinationBridgeTx ($chainID: Int!, $kappa: String!, $address: String!, $timestamp: Int!, $bridgeType: BridgeType!, $historical: Boolean) {
	response: getDestinationBridgeTx(chainID: $chainID, address: $address, kappa: $kappa, timestamp: $timestamp, bridgeType: $bridgeType, historical: $historical) {
		bridgeTx {
			chainID
			destinationChainID
			address
			txnHash
			value
			formattedValue
			USDValue
			tokenAddress
			tokenSymbol
			blockNumber
			time
			formattedTime
		}
		pending
		type
		kappa
		kappaStatus
	}
}
`

func (c *Client) GetDestinationBridgeTx(ctx context.Context, chainID int, kappa string, address string, timestamp int, bridgeType model.BridgeType, historical *bool, httpRequestOptions ...client.HTTPRequestOption) (*GetDestinationBridgeTx, error) {
	vars := map[string]interface{}{
		"chainID":    chainID,
		"kappa":      kappa,
		"address":    address,
		"timestamp":  timestamp,
		"bridgeType": bridgeType,
		"historical": historical,
	}

	var res GetDestinationBridgeTx
	if err := c.Client.Post(ctx, "GetDestinationBridgeTx", GetDestinationBridgeTxDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

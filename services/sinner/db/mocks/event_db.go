// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	gorm "gorm.io/gorm"

	graphmodel "github.com/synapsecns/sanguine/services/sinner/graphql/server/graph/model"

	mock "github.com/stretchr/testify/mock"

	model "github.com/synapsecns/sanguine/services/sinner/db/model"

	types "github.com/synapsecns/sanguine/services/sinner/types"
)

// EventDB is an autogenerated mock type for the EventDB type
type EventDB struct {
	mock.Mock
}

// RetrieveExecuted provides a mock function with given fields: ctx, messageHash
func (_m *EventDB) RetrieveExecuted(ctx context.Context, messageHash string) (model.Executed, error) {
	ret := _m.Called(ctx, messageHash)

	var r0 model.Executed
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Executed); ok {
		r0 = rf(ctx, messageHash)
	} else {
		r0 = ret.Get(0).(model.Executed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveExecuteds provides a mock function with given fields: ctx, chainID, txHash
func (_m *EventDB) RetrieveExecuteds(ctx context.Context, chainID uint32, txHash string) ([]model.Executed, error) {
	ret := _m.Called(ctx, chainID, txHash)

	var r0 []model.Executed
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) []model.Executed); ok {
		r0 = rf(ctx, chainID, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Executed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, chainID, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLastStoredBlock provides a mock function with given fields: ctx, chainID, address
func (_m *EventDB) RetrieveLastStoredBlock(ctx context.Context, chainID uint32, address common.Address) (uint64, error) {
	ret := _m.Called(ctx, chainID, address)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, uint32, common.Address) uint64); ok {
		r0 = rf(ctx, chainID, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, common.Address) error); ok {
		r1 = rf(ctx, chainID, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveMessageStatus provides a mock function with given fields: ctx, messageHash
func (_m *EventDB) RetrieveMessageStatus(ctx context.Context, messageHash string) (graphmodel.MessageStatus, error) {
	ret := _m.Called(ctx, messageHash)

	var r0 graphmodel.MessageStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) graphmodel.MessageStatus); ok {
		r0 = rf(ctx, messageHash)
	} else {
		r0 = ret.Get(0).(graphmodel.MessageStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveOriginSent provides a mock function with given fields: ctx, messageHash
func (_m *EventDB) RetrieveOriginSent(ctx context.Context, messageHash string) (model.OriginSent, error) {
	ret := _m.Called(ctx, messageHash)

	var r0 model.OriginSent
	if rf, ok := ret.Get(0).(func(context.Context, string) model.OriginSent); ok {
		r0 = rf(ctx, messageHash)
	} else {
		r0 = ret.Get(0).(model.OriginSent)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveOriginSents provides a mock function with given fields: ctx, chainID, txHash
func (_m *EventDB) RetrieveOriginSents(ctx context.Context, chainID uint32, txHash string) ([]model.OriginSent, error) {
	ret := _m.Called(ctx, chainID, txHash)

	var r0 []model.OriginSent
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) []model.OriginSent); ok {
		r0 = rf(ctx, chainID, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OriginSent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, chainID, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreExecuted provides a mock function with given fields: ctx, executed
func (_m *EventDB) StoreExecuted(ctx context.Context, executed *model.Executed) error {
	ret := _m.Called(ctx, executed)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Executed) error); ok {
		r0 = rf(ctx, executed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLastIndexed provides a mock function with given fields: ctx, contractAddress, chainID, blockNumber
func (_m *EventDB) StoreLastIndexed(ctx context.Context, contractAddress common.Address, chainID uint32, blockNumber uint64) error {
	ret := _m.Called(ctx, contractAddress, chainID, blockNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint32, uint64) error); ok {
		r0 = rf(ctx, contractAddress, chainID, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOrUpdateMessageStatus provides a mock function with given fields: ctx, txHash, messageID, messageType
func (_m *EventDB) StoreOrUpdateMessageStatus(ctx context.Context, txHash string, messageID string, messageType types.MessageType) error {
	ret := _m.Called(ctx, txHash, messageID, messageType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.MessageType) error); ok {
		r0 = rf(ctx, txHash, messageID, messageType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOriginSent provides a mock function with given fields: ctx, originSent
func (_m *EventDB) StoreOriginSent(ctx context.Context, originSent *model.OriginSent) error {
	ret := _m.Called(ctx, originSent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OriginSent) error); ok {
		r0 = rf(ctx, originSent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UNSAFE_DB provides a mock function with given fields:
func (_m *EventDB) UNSAFE_DB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

type mockConstructorTestingTNewEventDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventDB creates a new instance of EventDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventDB(t mockConstructorTestingTNewEventDB) *EventDB {
	mock := &EventDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

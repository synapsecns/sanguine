// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	model "github.com/synapsecns/sanguine/services/sinner/db/model"
)

// EventDB is an autogenerated mock type for the EventDB type
type EventDB struct {
	mock.Mock
}

// RetrieveMessageStatus provides a mock function with given fields: ctx, txhash
func (_m *EventDB) RetrieveMessageStatus(ctx context.Context, txhash string) (string, error) {
	ret := _m.Called(ctx, txhash)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, txhash)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txhash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreExecuted provides a mock function with given fields: ctx, executed
func (_m *EventDB) StoreExecuted(ctx context.Context, executed *model.Executed) error {
	ret := _m.Called(ctx, executed)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Executed) error); ok {
		r0 = rf(ctx, executed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLastIndexed provides a mock function with given fields: ctx, contractAddress, chainID, blockNumber
func (_m *EventDB) StoreLastIndexed(ctx context.Context, contractAddress common.Address, chainID uint32, blockNumber uint64) error {
	ret := _m.Called(ctx, contractAddress, chainID, blockNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, uint32, uint64) error); ok {
		r0 = rf(ctx, contractAddress, chainID, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOriginSent provides a mock function with given fields: ctx, originSent
func (_m *EventDB) StoreOriginSent(ctx context.Context, originSent *model.OriginSent) error {
	ret := _m.Called(ctx, originSent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OriginSent) error); ok {
		r0 = rf(ctx, originSent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEventDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventDB creates a new instance of EventDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventDB(t mockConstructorTestingTNewEventDB) *EventDB {
	mock := &EventDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// TxQueueDB is an autogenerated mock type for the TxQueueDB type
type TxQueueDB struct {
	mock.Mock
}

// GetNonceForChainID provides a mock function with given fields: ctx, fromAddress, chainID
func (_m *TxQueueDB) GetNonceForChainID(ctx context.Context, fromAddress common.Address, chainID *big.Int) (uint64, error) {
	ret := _m.Called(ctx, fromAddress, chainID)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *big.Int) uint64); ok {
		r0 = rf(ctx, fromAddress, chainID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, *big.Int) error); ok {
		r1 = rf(ctx, fromAddress, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreProcessedTx provides a mock function with given fields: ctx, tx
func (_m *TxQueueDB) StoreProcessedTx(ctx context.Context, tx *types.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreRawTx provides a mock function with given fields: ctx, tx, chainID, from
func (_m *TxQueueDB) StoreRawTx(ctx context.Context, tx *types.Transaction, chainID *big.Int, from common.Address) error {
	ret := _m.Called(ctx, tx, chainID, from)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Transaction, *big.Int, common.Address) error); ok {
		r0 = rf(ctx, tx, chainID, from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

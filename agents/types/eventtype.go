package types

import (
	"database/sql/driver"
	"fmt"
	synapseCommon "github.com/synapsecns/sanguine/core"
)

// GetEventFromLog gets the event type from a log if it

// EventType is the type of bridge deposit event.
//
//go:generate go run golang.org/x/tools/cmd/stringer -type=EventType
type EventType uint8

// Very important! These values are stored int the database and must remain constant. If bridge events are
// removed in the future values must not be removed and cannot be changed.
const (
	// DepositEvent is the bridge deposit event.
	DepositEvent EventType = 0
	// RedeemEvent is the bridge redeem event.
	RedeemEvent EventType = 1
	// DepositAndSwapEvent is the bridge deposit and swap event type.
	DepositAndSwapEvent EventType = 2
	// RedeemAndSwapEvent is the redeem and swap event type.
	RedeemAndSwapEvent EventType = 3
	// RedeemAndRemoveEvent is the redeem and remove event type.
	RedeemAndRemoveEvent EventType = 4
	// WithdrawEvent is the token withdraw event type.
	WithdrawEvent EventType = 5
	// MintEvent is the token mint event.
	MintEvent EventType = 6
	// MintAndSwap is the token mint and swap event.
	MintAndSwap EventType = 7
	// WithdrawAndRemove is the withdraw and remove event.
	WithdrawAndRemove EventType = 8
	// RedeemV2Event indicates a send to a non-evm chain.
	RedeemV2Event EventType = 9
)

// AllEventTypes is a list of the event types.
// TODO: this should be generated by go:generate to avoid issues here.
// for now, anyone that sees this should add them manually (changes above should trigger
// exhaustiveness checks by golangci-lint).
func AllEventTypes() []EventType {
	return []EventType{DepositEvent, RedeemEvent, DepositAndSwapEvent, RedeemAndSwapEvent,
		RedeemAndRemoveEvent, WithdrawEvent, MintEvent, MintAndSwap, WithdrawAndRemove, RedeemV2Event}
}

// BridgeInitiated determines whether or not the event type is initiated by the bridge
// (as opposed to the user).
func (i EventType) BridgeInitiated() bool {
	switch i {
	case DepositEvent, RedeemEvent, RedeemAndRemoveEvent, DepositAndSwapEvent, RedeemAndSwapEvent, RedeemV2Event:
		return false
	case WithdrawEvent, MintEvent, MintAndSwap, WithdrawAndRemove:
		return true
	}
	panic("unknown event")
}

// Int gets the int value of the event type.
func (i EventType) Int() uint8 {
	return uint8(i)
}

// GormDataType gets the data type to use for gorm.
func (i EventType) GormDataType() string {
	return synapseCommon.EnumDataType
}

// Scan gets the type to insert into the db.
func (i *EventType) Scan(src interface{}) error {
	res, err := synapseCommon.EnumScan(src)
	if err != nil {
		return fmt.Errorf("could not scan value: %w", err)
	}
	newEventType := EventType(res)
	*i = newEventType
	return nil
}

// Value gets the value to use for the db.
func (i EventType) Value() (driver.Value, error) {
	return synapseCommon.EnumValue(i)
}

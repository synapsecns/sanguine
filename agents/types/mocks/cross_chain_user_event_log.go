// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
	types "github.com/synapsecns/sanguine/agents/types"
)

// CrossChainUserEventLog is an autogenerated mock type for the CrossChainUserEventLog type
type CrossChainUserEventLog struct {
	mock.Mock
}

// GetAmount provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetAmount() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetBlockNumber provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetBlockNumber() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetContractAddress provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetContractAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDestinationChainID provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetDestinationChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetEventType provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetEventType() types.EventType {
	ret := _m.Called()

	var r0 types.EventType
	if rf, ok := ret.Get(0).(func() types.EventType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.EventType)
	}

	return r0
}

// GetIdentifier provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetIdentifier() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetToken provides a mock function with given fields:
func (_m *CrossChainUserEventLog) GetToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewCrossChainUserEventLog interface {
	mock.TestingT
	Cleanup(func())
}

// NewCrossChainUserEventLog creates a new instance of CrossChainUserEventLog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCrossChainUserEventLog(t mockConstructorTestingTNewCrossChainUserEventLog) *CrossChainUserEventLog {
	mock := &CrossChainUserEventLog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
